
H2-Sensor-Board-Lucy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f94  08010ef8  08010ef8  00020ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e8c  08011e8c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011e8c  08011e8c  00021e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e94  08011e94  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e94  08011e94  00021e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e98  08011e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08011e9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b48  200001e0  0801207c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d28  0801207c  00034d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025634  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b7b  00000000  00000000  00055887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c0  00000000  00000000  0005a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000196b  00000000  00000000  0005c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002716d  00000000  00000000  0005de33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025175  00000000  00000000  00084fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edf29  00000000  00000000  000aa115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009e9c  00000000  00000000  00198040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001a1edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ee0 	.word	0x08010ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010ee0 	.word	0x08010ee0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000fec:	2305      	movs	r3, #5
 8000fee:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f001 facb 	bl	8002590 <null_ptr_check>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d133      	bne.n	800106e <bme280_init+0x8a>
		while (try_count) {
 8001006:	e028      	b.n	800105a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001008:	f107 010d 	add.w	r1, r7, #13
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	20d0      	movs	r0, #208	; 0xd0
 8001012:	f000 f832 	bl	800107a <bme280_get_regs>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d114      	bne.n	800104c <bme280_init+0x68>
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	2b60      	cmp	r3, #96	; 0x60
 8001026:	d111      	bne.n	800104c <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001028:	7b7a      	ldrb	r2, [r7, #13]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f978 	bl	8001324 <bme280_soft_reset>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d110      	bne.n	8001062 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 f919 	bl	8002278 <get_calib_data>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800104a:	e00a      	b.n	8001062 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2001      	movs	r0, #1
 8001052:	4798      	blx	r3
			--try_count;
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	3b01      	subs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1d3      	bne.n	8001008 <bme280_init+0x24>
 8001060:	e000      	b.n	8001064 <bme280_init+0x80>
				break;
 8001062:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800106a:	23fe      	movs	r3, #254	; 0xfe
 800106c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	4613      	mov	r3, r2
 800108a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fa7f 	bl	8002590 <null_ptr_check>
 8001092:	4603      	mov	r3, r0
 8001094:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d117      	bne.n	80010ce <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d003      	beq.n	80010ae <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685c      	ldr	r4, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7858      	ldrb	r0, [r3, #1]
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	7bf9      	ldrb	r1, [r7, #15]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	47a0      	blx	r4
 80010be:	4603      	mov	r3, r0
 80010c0:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80010c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80010ca:	23fc      	movs	r3, #252	; 0xfc
 80010cc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80010ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}

080010da <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b08d      	sub	sp, #52	; 0x34
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d901      	bls.n	80010f4 <bme280_set_regs+0x1a>
		len = 10;
 80010f0:	230a      	movs	r3, #10
 80010f2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f001 fa4b 	bl	8002590 <null_ptr_check>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001104:	2b00      	cmp	r3, #0
 8001106:	d156      	bne.n	80011b6 <bme280_set_regs+0xdc>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d053      	beq.n	80011b6 <bme280_set_regs+0xdc>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d050      	beq.n	80011b6 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d049      	beq.n	80011ae <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d01a      	beq.n	800115e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800112e:	e011      	b.n	8001154 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	440b      	add	r3, r1
 8001142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800114a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800114e:	3301      	adds	r3, #1
 8001150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001154:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3e8      	bcc.n	8001130 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d90d      	bls.n	8001180 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f107 0114 	add.w	r1, r7, #20
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f001 f8c8 	bl	8002302 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b29b      	uxth	r3, r3
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800117e:	e001      	b.n	8001184 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689c      	ldr	r4, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	7858      	ldrb	r0, [r3, #1]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7819      	ldrb	r1, [r3, #0]
 8001190:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	47a0      	blx	r4
 8001198:	4603      	mov	r3, r0
 800119a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800119e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011a6:	23fc      	movs	r3, #252	; 0xfc
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011ac:	e007      	b.n	80011be <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011ae:	23fd      	movs	r3, #253	; 0xfd
 80011b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011b4:	e003      	b.n	80011be <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011bc:	e000      	b.n	80011c0 <bme280_set_regs+0xe6>
		if (len != 0) {
 80011be:	bf00      	nop
	}


	return rslt;
 80011c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3734      	adds	r7, #52	; 0x34
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f001 f9d9 	bl	8002590 <null_ptr_check>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d13f      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80011ea:	f107 030e 	add.w	r3, r7, #14
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f874 	bl	80012de <bme280_get_sensor_mode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <bme280_set_sensor_settings+0x46>
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f000 fb36 	bl	800187a <put_device_to_sleep>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d127      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4619      	mov	r1, r3
 800121e:	2007      	movs	r0, #7
 8001220:	f001 f99a 	bl	8002558 <are_settings_changed>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f972 	bl	800151e <set_osr_settings>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d111      	bne.n	800126a <bme280_set_sensor_settings+0x9e>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4619      	mov	r1, r3
 800124a:	2018      	movs	r0, #24
 800124c:	f001 f984 	bl	8002558 <are_settings_changed>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9f9 	bl	8001658 <set_filter_standby_settings>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	6039      	str	r1, [r7, #0]
 8001280:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f001 f984 	bl	8002590 <null_ptr_check>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11e      	bne.n	80012d2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001294:	f107 030e 	add.w	r3, r7, #14
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f81f 	bl	80012de <bme280_get_sensor_mode>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <bme280_set_sensor_mode+0x46>
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f000 fae1 	bl	800187a <put_device_to_sleep>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 faa3 	bl	8001814 <write_power_mode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f001 f951 	bl	8002590 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10e      	bne.n	8001318 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	20f4      	movs	r0, #244	; 0xf4
 8001302:	f7ff feba 	bl	800107a <bme280_get_regs>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b2da      	uxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 800132c:	23e0      	movs	r3, #224	; 0xe0
 800132e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001330:	23b6      	movs	r3, #182	; 0xb6
 8001332:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 f92b 	bl	8002590 <null_ptr_check>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10d      	bne.n	8001362 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001346:	f107 010d 	add.w	r1, r7, #13
 800134a:	f107 000e 	add.w	r0, r7, #14
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f7ff fec2 	bl	80010da <bme280_set_regs>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2002      	movs	r0, #2
 8001360:	4798      	blx	r3
	}

	return rslt;
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b08a      	sub	sp, #40	; 0x28
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 f8fd 	bl	8002590 <null_ptr_check>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800139c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d124      	bne.n	80013ee <bme280_get_sensor_data+0x80>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d021      	beq.n	80013ee <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013aa:	f107 011c 	add.w	r1, r7, #28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2208      	movs	r2, #8
 80013b2:	20f7      	movs	r0, #247	; 0xf7
 80013b4:	f7ff fe61 	bl	800107a <bme280_get_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80013be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80013c6:	f107 0210 	add.w	r2, r7, #16
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f815 	bl	8001400 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3310      	adds	r3, #16
 80013da:	f107 0110 	add.w	r1, r7, #16
 80013de:	7bf8      	ldrb	r0, [r7, #15]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	f000 f853 	bl	800148c <bme280_compensate_data>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80013ec:	e002      	b.n	80013f4 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013ee:	23ff      	movs	r3, #255	; 0xff
 80013f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80013f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	031b      	lsls	r3, r3, #12
 8001410:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3302      	adds	r3, #2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	b2db      	uxtb	r3, r3
 8001426:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	431a      	orrs	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	431a      	orrs	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3303      	adds	r3, #3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3304      	adds	r3, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3305      	adds	r3, #5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	431a      	orrs	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	431a      	orrs	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3306      	adds	r3, #6
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3307      	adds	r3, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	431a      	orrs	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d033      	beq.n	800150e <bme280_compensate_data+0x82>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d030      	beq.n	800150e <bme280_compensate_data+0x82>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d02d      	beq.n	800150e <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f000 fa1f 	bl	8001914 <compensate_temperature>
 80014d6:	4602      	mov	r2, r0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f000 fa75 	bl	80019d8 <compensate_pressure>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f000 fe0d 	bl	8002120 <compensate_humidity>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 800150c:	e001      	b.n	8001512 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800150e:	23ff      	movs	r3, #255	; 0xff
 8001510:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800152c:	2301      	movs	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f000 f815 	bl	800156c <set_osr_humidity_settings>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f842 	bl	80015e0 <set_osr_press_temp_settings>
 800155c:	4603      	mov	r3, r0
 800155e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001576:	23f2      	movs	r3, #242	; 0xf2
 8001578:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001586:	f107 010e 	add.w	r1, r7, #14
 800158a:	f107 000c 	add.w	r0, r7, #12
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	f7ff fda2 	bl	80010da <bme280_set_regs>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80015a2:	23f4      	movs	r3, #244	; 0xf4
 80015a4:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015a6:	7b38      	ldrb	r0, [r7, #12]
 80015a8:	f107 010d 	add.w	r1, r7, #13
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f7ff fd63 	bl	800107a <bme280_get_regs>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80015c0:	f107 010d 	add.w	r1, r7, #13
 80015c4:	f107 000c 	add.w	r0, r7, #12
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd85 	bl	80010da <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015ee:	23f4      	movs	r3, #244	; 0xf4
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fd3d 	bl	800107a <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f88e 	bl	800173e <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8a0 	bl	8001778 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fd49 	bl	80010da <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001666:	23f5      	movs	r3, #245	; 0xf5
 8001668:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800166a:	7db8      	ldrb	r0, [r7, #22]
 800166c:	f107 0115 	add.w	r1, r7, #21
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f7ff fd01 	bl	800107a <bme280_get_regs>
 8001678:	4603      	mov	r3, r0
 800167a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d11f      	bne.n	80016c4 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800168e:	f107 0315 	add.w	r3, r7, #21
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f81b 	bl	80016d0 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016a4:	f107 0315 	add.w	r3, r7, #21
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f82d 	bl	800170a <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016b0:	f107 0115 	add.w	r1, r7, #21
 80016b4:	f107 0016 	add.w	r0, r7, #22
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fd0d 	bl	80010da <bme280_set_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f023 031c 	bic.w	r3, r3, #28
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	f003 031c 	and.w	r3, r3, #28
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	b25a      	sxtb	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	015b      	lsls	r3, r3, #5
 8001726:	b25b      	sxtb	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f023 031c 	bic.w	r3, r3, #28
 8001752:	b25a      	sxtb	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f003 031c 	and.w	r3, r3, #28
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	b25a      	sxtb	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	b25b      	sxtb	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3302      	adds	r3, #2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	109b      	asrs	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3303      	adds	r3, #3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	109b      	asrs	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3303      	adds	r3, #3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2da      	uxtb	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	711a      	strb	r2, [r3, #4]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001820:	23f4      	movs	r3, #244	; 0xf4
 8001822:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001824:	7bb8      	ldrb	r0, [r7, #14]
 8001826:	f107 010d 	add.w	r1, r7, #13
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc24 	bl	800107a <bme280_get_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d117      	bne.n	800186e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800183e:	7b7b      	ldrb	r3, [r7, #13]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	b25a      	sxtb	r2, r3
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800185a:	f107 010d 	add.w	r1, r7, #13
 800185e:	f107 000e 	add.w	r0, r7, #14
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	f7ff fc38 	bl	80010da <bme280_set_regs>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001882:	f107 0110 	add.w	r1, r7, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	20f2      	movs	r0, #242	; 0xf2
 800188c:	f7ff fbf5 	bl	800107a <bme280_get_regs>
 8001890:	4603      	mov	r3, r0
 8001892:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d118      	bne.n	80018ce <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800189c:	f107 0208 	add.w	r2, r7, #8
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff80 	bl	80017ac <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fd39 	bl	8001324 <bme280_soft_reset>
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f808 	bl	80018da <reload_device_settings>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	201f      	movs	r0, #31
 80018ea:	f7ff fe18 	bl	800151e <set_osr_settings>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	201f      	movs	r0, #31
 8001900:	f7ff feaa 	bl	8001658 <set_filter_standby_settings>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <compensate_temperature+0xc0>)
 8001920:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001922:	f242 1334 	movw	r3, #8500	; 0x2134
 8001926:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	8812      	ldrh	r2, [r2, #0]
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193e:	461a      	mov	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	da01      	bge.n	800194e <compensate_temperature+0x3a>
 800194a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800194e:	12db      	asrs	r3, r3, #11
 8001950:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	fb03 f303 	mul.w	r3, r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	da01      	bge.n	800196e <compensate_temperature+0x5a>
 800196a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800196e:	131b      	asrs	r3, r3, #12
 8001970:	461a      	mov	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	da02      	bge.n	8001986 <compensate_temperature+0x72>
 8001980:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001984:	333f      	adds	r3, #63	; 0x3f
 8001986:	139b      	asrs	r3, r3, #14
 8001988:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	441a      	add	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3380      	adds	r3, #128	; 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da00      	bge.n	80019a6 <compensate_temperature+0x92>
 80019a4:	33ff      	adds	r3, #255	; 0xff
 80019a6:	121b      	asrs	r3, r3, #8
 80019a8:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	da02      	bge.n	80019b8 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e005      	b.n	80019c4 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dd01      	ble.n	80019c4 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	61fb      	str	r3, [r7, #28]

	return temperature;
 80019c4:	69fb      	ldr	r3, [r7, #28]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	fffff060 	.word	0xfffff060

080019d8 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b0ea      	sub	sp, #424	; 0x1a8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80019e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80019e8:	4bbf      	ldr	r3, [pc, #764]	; (8001ce8 <compensate_pressure+0x310>)
 80019ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 80019ee:	4bbf      	ldr	r3, [pc, #764]	; (8001cec <compensate_pressure+0x314>)
 80019f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80019f4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	17da      	asrs	r2, r3, #31
 80019fc:	4698      	mov	r8, r3
 80019fe:	4691      	mov	r9, r2
 8001a00:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001a04:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001a08:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a14:	fb03 f102 	mul.w	r1, r3, r2
 8001a18:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	18ca      	adds	r2, r1, r3
 8001a26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a2a:	fba3 4503 	umull	r4, r5, r3, r3
 8001a2e:	1953      	adds	r3, r2, r5
 8001a30:	461d      	mov	r5, r3
 8001a32:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	17da      	asrs	r2, r3, #31
 8001a3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a42:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001a46:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	fb03 f205 	mul.w	r2, r3, r5
 8001a50:	460b      	mov	r3, r1
 8001a52:	fb04 f303 	mul.w	r3, r4, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	4602      	mov	r2, r0
 8001a5a:	fba4 1202 	umull	r1, r2, r4, r2
 8001a5e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001a68:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a72:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001a76:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001a7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001a7e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	17da      	asrs	r2, r3, #31
 8001a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001a8e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a96:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	fb02 f203 	mul.w	r2, r2, r3
 8001aa0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	441a      	add	r2, r3
 8001aac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	fba3 1301 	umull	r1, r3, r3, r1
 8001ab6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001aba:	460b      	mov	r3, r1
 8001abc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001ac0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	0459      	lsls	r1, r3, #17
 8001ada:	4623      	mov	r3, r4
 8001adc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	0458      	lsls	r0, r3, #17
 8001ae4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001ae8:	1814      	adds	r4, r2, r0
 8001aea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001aee:	414b      	adcs	r3, r1
 8001af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001af4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001af8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001afc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	17da      	asrs	r2, r3, #31
 8001b08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001b0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b1c:	00d9      	lsls	r1, r3, #3
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b24:	1814      	adds	r4, r2, r0
 8001b26:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001b2a:	414b      	adcs	r3, r1
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b30:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001b34:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b40:	fb03 f102 	mul.w	r1, r3, r2
 8001b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	18ca      	adds	r2, r1, r3
 8001b52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b56:	fba3 1303 	umull	r1, r3, r3, r3
 8001b5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001b5e:	460b      	mov	r3, r1
 8001b60:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001b64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001b6e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	17da      	asrs	r2, r3, #31
 8001b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b7e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001b82:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001b86:	462b      	mov	r3, r5
 8001b88:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	fb02 f203 	mul.w	r2, r2, r3
 8001b92:	464b      	mov	r3, r9
 8001b94:	4621      	mov	r1, r4
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	fba2 1201 	umull	r1, r2, r2, r1
 8001ba4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001ba8:	460a      	mov	r2, r1
 8001baa:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001bae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001bb8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da09      	bge.n	8001bd4 <compensate_pressure+0x1fc>
 8001bc0:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001bc4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001bc8:	f143 0300 	adc.w	r3, r3, #0
 8001bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bd0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0a10      	lsrs	r0, r2, #8
 8001bde:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001be2:	1219      	asrs	r1, r3, #8
 8001be4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001be8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	17da      	asrs	r2, r3, #31
 8001bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001bf4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001bf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bfc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001c00:	464a      	mov	r2, r9
 8001c02:	fb02 f203 	mul.w	r2, r2, r3
 8001c06:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c0a:	4644      	mov	r4, r8
 8001c0c:	fb04 f303 	mul.w	r3, r4, r3
 8001c10:	441a      	add	r2, r3
 8001c12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c16:	4644      	mov	r4, r8
 8001c18:	fba3 4304 	umull	r4, r3, r3, r4
 8001c1c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c20:	4623      	mov	r3, r4
 8001c22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001c3c:	464c      	mov	r4, r9
 8001c3e:	0323      	lsls	r3, r4, #12
 8001c40:	4644      	mov	r4, r8
 8001c42:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c46:	4644      	mov	r4, r8
 8001c48:	0322      	lsls	r2, r4, #12
 8001c4a:	1884      	adds	r4, r0, r2
 8001c4c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001c50:	eb41 0303 	adc.w	r3, r1, r3
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001c5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c68:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001c6c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001c70:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c74:	1884      	adds	r4, r0, r2
 8001c76:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001c7a:	eb41 0303 	adc.w	r3, r1, r3
 8001c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c86:	88db      	ldrh	r3, [r3, #6]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c90:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001c94:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001c98:	462b      	mov	r3, r5
 8001c9a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001c9e:	4642      	mov	r2, r8
 8001ca0:	fb02 f203 	mul.w	r2, r2, r3
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	4622      	mov	r2, r4
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	fba2 1201 	umull	r1, r2, r2, r1
 8001cb6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cba:	460a      	mov	r2, r1
 8001cbc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cc0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0e      	bge.n	8001cf0 <compensate_pressure+0x318>
 8001cd2:	1e51      	subs	r1, r2, #1
 8001cd4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001cd8:	f143 0301 	adc.w	r3, r3, #1
 8001cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ce0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce4:	e004      	b.n	8001cf0 <compensate_pressure+0x318>
 8001ce6:	bf00      	nop
 8001ce8:	002dc6c0 	.word	0x002dc6c0
 8001cec:	00a7d8c0 	.word	0x00a7d8c0
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	1058      	asrs	r0, r3, #1
 8001cfa:	17d9      	asrs	r1, r3, #31
 8001cfc:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001d00:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f000 81fc 	beq.w	8002102 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001d0a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d1a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d1e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001d22:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d26:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	07d9      	lsls	r1, r3, #31
 8001d34:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d38:	07d0      	lsls	r0, r2, #31
 8001d3a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001d3e:	1a84      	subs	r4, r0, r2
 8001d40:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001d44:	eb61 0303 	sbc.w	r3, r1, r3
 8001d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d4c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d50:	4622      	mov	r2, r4
 8001d52:	462b      	mov	r3, r5
 8001d54:	1891      	adds	r1, r2, r2
 8001d56:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d60:	4621      	mov	r1, r4
 8001d62:	1851      	adds	r1, r2, r1
 8001d64:	6739      	str	r1, [r7, #112]	; 0x70
 8001d66:	4629      	mov	r1, r5
 8001d68:	414b      	adcs	r3, r1
 8001d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001d78:	4649      	mov	r1, r9
 8001d7a:	018b      	lsls	r3, r1, #6
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d82:	4641      	mov	r1, r8
 8001d84:	018a      	lsls	r2, r1, #6
 8001d86:	4641      	mov	r1, r8
 8001d88:	1889      	adds	r1, r1, r2
 8001d8a:	66b9      	str	r1, [r7, #104]	; 0x68
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	eb43 0101 	adc.w	r1, r3, r1
 8001d92:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001da0:	4649      	mov	r1, r9
 8001da2:	008b      	lsls	r3, r1, #2
 8001da4:	4641      	mov	r1, r8
 8001da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001daa:	4641      	mov	r1, r8
 8001dac:	008a      	lsls	r2, r1, #2
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	4622      	mov	r2, r4
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dba:	460b      	mov	r3, r1
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	eb42 0303 	adc.w	r3, r2, r3
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	008b      	lsls	r3, r1, #2
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dda:	4641      	mov	r1, r8
 8001ddc:	008a      	lsls	r2, r1, #2
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	4622      	mov	r2, r4
 8001de6:	189b      	adds	r3, r3, r2
 8001de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dec:	462b      	mov	r3, r5
 8001dee:	460a      	mov	r2, r1
 8001df0:	eb42 0303 	adc.w	r3, r2, r3
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001df8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e00:	f7fe ff22 	bl	8000c48 <__aeabi_ldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e0c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	17da      	asrs	r2, r3, #31
 8001e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e1c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e20:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da08      	bge.n	8001e3a <compensate_pressure+0x462>
 8001e28:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e2c:	1851      	adds	r1, r2, r1
 8001e2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e30:	f143 0300 	adc.w	r3, r3, #0
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	0b50      	lsrs	r0, r2, #13
 8001e44:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e48:	1359      	asrs	r1, r3, #13
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001e52:	4629      	mov	r1, r5
 8001e54:	fb02 f001 	mul.w	r0, r2, r1
 8001e58:	4621      	mov	r1, r4
 8001e5a:	fb01 f103 	mul.w	r1, r1, r3
 8001e5e:	4401      	add	r1, r0
 8001e60:	4620      	mov	r0, r4
 8001e62:	fba0 2302 	umull	r2, r3, r0, r2
 8001e66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001e70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e74:	18cb      	adds	r3, r1, r3
 8001e76:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001e7a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da08      	bge.n	8001e94 <compensate_pressure+0x4bc>
 8001e82:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001e86:	1851      	adds	r1, r2, r1
 8001e88:	6539      	str	r1, [r7, #80]	; 0x50
 8001e8a:	f143 0300 	adc.w	r3, r3, #0
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	0b50      	lsrs	r0, r2, #13
 8001e9e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ea2:	1359      	asrs	r1, r3, #13
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001eac:	4629      	mov	r1, r5
 8001eae:	fb02 f001 	mul.w	r0, r2, r1
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	fb01 f103 	mul.w	r1, r1, r3
 8001eb8:	4401      	add	r1, r0
 8001eba:	4620      	mov	r0, r4
 8001ebc:	fba0 2302 	umull	r2, r3, r0, r2
 8001ec0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001eca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ece:	18cb      	adds	r3, r1, r3
 8001ed0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ed4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da08      	bge.n	8001eee <compensate_pressure+0x516>
 8001edc:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001ee0:	1851      	adds	r1, r2, r1
 8001ee2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ee4:	f143 0300 	adc.w	r3, r3, #0
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0e50      	lsrs	r0, r2, #25
 8001ef8:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001efc:	1659      	asrs	r1, r3, #25
 8001efe:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001f02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	17da      	asrs	r2, r3, #31
 8001f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f12:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f1a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001f1e:	462a      	mov	r2, r5
 8001f20:	fb02 f203 	mul.w	r2, r2, r3
 8001f24:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	441a      	add	r2, r3
 8001f30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f34:	4621      	mov	r1, r4
 8001f36:	fba3 1301 	umull	r1, r3, r3, r1
 8001f3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f3e:	460b      	mov	r3, r1
 8001f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f4e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da07      	bge.n	8001f66 <compensate_pressure+0x58e>
 8001f56:	4971      	ldr	r1, [pc, #452]	; (800211c <compensate_pressure+0x744>)
 8001f58:	1851      	adds	r1, r2, r1
 8001f5a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f5c:	f143 0300 	adc.w	r3, r3, #0
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f66:	f04f 0000 	mov.w	r0, #0
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	0cd0      	lsrs	r0, r2, #19
 8001f70:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001f74:	14d9      	asrs	r1, r3, #19
 8001f76:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001f7a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001f7e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001f82:	1884      	adds	r4, r0, r2
 8001f84:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001f88:	eb41 0303 	adc.w	r3, r1, r3
 8001f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f94:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001f98:	4621      	mov	r1, r4
 8001f9a:	1889      	adds	r1, r1, r2
 8001f9c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	eb43 0101 	adc.w	r1, r3, r1
 8001fa6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001faa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da07      	bge.n	8001fc2 <compensate_pressure+0x5ea>
 8001fb2:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb8:	f143 0300 	adc.w	r3, r3, #0
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f04f 0100 	mov.w	r1, #0
 8001fca:	0a10      	lsrs	r0, r2, #8
 8001fcc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fd0:	1219      	asrs	r1, r3, #8
 8001fd2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	17da      	asrs	r2, r3, #31
 8001fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fe2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ff2:	464c      	mov	r4, r9
 8001ff4:	0123      	lsls	r3, r4, #4
 8001ff6:	4644      	mov	r4, r8
 8001ff8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ffc:	4644      	mov	r4, r8
 8001ffe:	0122      	lsls	r2, r4, #4
 8002000:	1884      	adds	r4, r0, r2
 8002002:	633c      	str	r4, [r7, #48]	; 0x30
 8002004:	eb41 0303 	adc.w	r3, r1, r3
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800200e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8002012:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002016:	0fd9      	lsrs	r1, r3, #31
 8002018:	2000      	movs	r0, #0
 800201a:	62b9      	str	r1, [r7, #40]	; 0x28
 800201c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800201e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002022:	4621      	mov	r1, r4
 8002024:	1889      	adds	r1, r1, r2
 8002026:	6239      	str	r1, [r7, #32]
 8002028:	4629      	mov	r1, r5
 800202a:	eb43 0101 	adc.w	r1, r3, r1
 800202e:	6279      	str	r1, [r7, #36]	; 0x24
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800203c:	4621      	mov	r1, r4
 800203e:	084a      	lsrs	r2, r1, #1
 8002040:	4629      	mov	r1, r5
 8002042:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002046:	4629      	mov	r1, r5
 8002048:	104b      	asrs	r3, r1, #1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	1894      	adds	r4, r2, r2
 8002054:	61bc      	str	r4, [r7, #24]
 8002056:	415b      	adcs	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205e:	1814      	adds	r4, r2, r0
 8002060:	613c      	str	r4, [r7, #16]
 8002062:	414b      	adcs	r3, r1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002072:	464c      	mov	r4, r9
 8002074:	0163      	lsls	r3, r4, #5
 8002076:	4644      	mov	r4, r8
 8002078:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800207c:	4644      	mov	r4, r8
 800207e:	0162      	lsls	r2, r4, #5
 8002080:	4644      	mov	r4, r8
 8002082:	18a4      	adds	r4, r4, r2
 8002084:	60bc      	str	r4, [r7, #8]
 8002086:	464c      	mov	r4, r9
 8002088:	eb43 0404 	adc.w	r4, r3, r4
 800208c:	60fc      	str	r4, [r7, #12]
 800208e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002092:	4623      	mov	r3, r4
 8002094:	181b      	adds	r3, r3, r0
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800209a:	462b      	mov	r3, r5
 800209c:	eb41 0303 	adc.w	r3, r1, r3
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020a4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da07      	bge.n	80020bc <compensate_pressure+0x6e4>
 80020ac:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	f143 0300 	adc.w	r3, r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020bc:	f04f 0000 	mov.w	r0, #0
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	09d0      	lsrs	r0, r2, #7
 80020c6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80020ca:	11d9      	asrs	r1, r3, #7
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 80020d6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020de:	429a      	cmp	r2, r3
 80020e0:	d204      	bcs.n	80020ec <compensate_pressure+0x714>
			pressure = pressure_min;
 80020e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020ea:	e00e      	b.n	800210a <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80020ec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <compensate_pressure+0x732>
			pressure = pressure_max;
 80020f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80020fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002100:	e003      	b.n	800210a <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8002102:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002106:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 800210a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 800210e:	4618      	mov	r0, r3
 8002110:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	0007ffff 	.word	0x0007ffff

08002120 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002120:	b480      	push	{r7}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800212a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800212e:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002138:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	039b      	lsls	r3, r3, #14
 8002140:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800216a:	2b00      	cmp	r3, #0
 800216c:	da02      	bge.n	8002174 <compensate_humidity+0x54>
 800216e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002172:	337f      	adds	r3, #127	; 0x7f
 8002174:	13db      	asrs	r3, r3, #15
 8002176:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	da01      	bge.n	800218e <compensate_humidity+0x6e>
 800218a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800218e:	129b      	asrs	r3, r3, #10
 8002190:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7f1b      	ldrb	r3, [r3, #28]
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da01      	bge.n	80021a6 <compensate_humidity+0x86>
 80021a2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80021a6:	12db      	asrs	r3, r3, #11
 80021a8:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da01      	bge.n	80021be <compensate_humidity+0x9e>
 80021ba:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80021be:	129b      	asrs	r3, r3, #10
 80021c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80021c4:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021cc:	461a      	mov	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da02      	bge.n	80021e2 <compensate_humidity+0xc2>
 80021dc:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	139b      	asrs	r3, r3, #14
 80021e4:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da02      	bge.n	80021fc <compensate_humidity+0xdc>
 80021f6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80021fa:	337f      	adds	r3, #127	; 0x7f
 80021fc:	13db      	asrs	r3, r3, #15
 80021fe:	461a      	mov	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da02      	bge.n	800220c <compensate_humidity+0xec>
 8002206:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800220a:	337f      	adds	r3, #127	; 0x7f
 800220c:	13db      	asrs	r3, r3, #15
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	da00      	bge.n	8002218 <compensate_humidity+0xf8>
 8002216:	337f      	adds	r3, #127	; 0x7f
 8002218:	11db      	asrs	r3, r3, #7
 800221a:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	461a      	mov	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	da00      	bge.n	800222e <compensate_humidity+0x10e>
 800222c:	330f      	adds	r3, #15
 800222e:	111b      	asrs	r3, r3, #4
 8002230:	425b      	negs	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002240:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002248:	bfa8      	it	ge
 800224a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800224e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da01      	bge.n	800225a <compensate_humidity+0x13a>
 8002256:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800225a:	131b      	asrs	r3, r3, #12
 800225c:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d901      	bls.n	800226a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800226c:	4618      	mov	r0, r3
 800226e:	372c      	adds	r7, #44	; 0x2c
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002280:	2388      	movs	r3, #136	; 0x88
 8002282:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800229c:	f107 010c 	add.w	r1, r7, #12
 80022a0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	221a      	movs	r2, #26
 80022a8:	f7fe fee7 	bl	800107a <bme280_get_regs>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 80022b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f84a 	bl	800235a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80022c6:	23e1      	movs	r3, #225	; 0xe1
 80022c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2207      	movs	r2, #7
 80022d8:	f7fe fecf 	bl	800107a <bme280_get_regs>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80022e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f8e2 	bl	80024ba <parse_humidity_calib_data>
		}
	}

	return rslt;
 80022f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
 8002314:	e016      	b.n	8002344 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	441a      	add	r2, r3
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	440b      	add	r3, r1
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	441a      	add	r2, r3
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4619      	mov	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	440b      	add	r3, r1
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	3301      	adds	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
 8002344:	7dfa      	ldrb	r2, [r7, #23]
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3e4      	bcc.n	8002316 <interleave_reg_addr+0x14>
	}
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3310      	adds	r3, #16
 8002368:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21b      	sxth	r3, r3
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3303      	adds	r3, #3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3302      	adds	r3, #2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3305      	adds	r3, #5
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3307      	adds	r3, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3306      	adds	r3, #6
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3309      	adds	r3, #9
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3308      	adds	r3, #8
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330b      	adds	r3, #11
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	330a      	adds	r3, #10
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b21a      	sxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	330d      	adds	r3, #13
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	330c      	adds	r3, #12
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	330f      	adds	r3, #15
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	330e      	adds	r3, #14
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b21a      	sxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3311      	adds	r3, #17
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3310      	adds	r3, #16
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b21a      	sxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3313      	adds	r3, #19
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3312      	adds	r3, #18
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21a      	sxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3315      	adds	r3, #21
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b21a      	sxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3314      	adds	r3, #20
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21a      	sxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3317      	adds	r3, #23
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3316      	adds	r3, #22
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21a      	sxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3319      	adds	r3, #25
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	761a      	strb	r2, [r3, #24]

}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3310      	adds	r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3301      	adds	r3, #1
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21a      	sxth	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3302      	adds	r3, #2
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3303      	adds	r3, #3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b21b      	sxth	r3, r3
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800250a:	8a7a      	ldrh	r2, [r7, #18]
 800250c:	8a3b      	ldrh	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	b21a      	sxth	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3305      	adds	r3, #5
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b25b      	sxtb	r3, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	b29b      	uxth	r3, r3
 8002524:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	b2db      	uxtb	r3, r3
 8002530:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002532:	89fa      	ldrh	r2, [r7, #14]
 8002534:	89bb      	ldrh	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	b21a      	sxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3306      	adds	r3, #6
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25a      	sxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	460a      	mov	r2, r1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <null_ptr_check+0x26>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <null_ptr_check+0x26>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <null_ptr_check+0x26>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025b6:	23ff      	movs	r3, #255	; 0xff
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e001      	b.n	80025c0 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <_write>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <_write+0x28>)
 8002600:	f007 fb88 	bl	8009d14 <HAL_UART_Transmit>
	return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200003a8 	.word	0x200003a8

08002614 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002618:	f001 fe47 	bl	80042aa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800261c:	f000 f87c 	bl	8002718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002620:	f000 face 	bl	8002bc0 <MX_GPIO_Init>
	MX_DMA_Init();
 8002624:	f000 faae 	bl	8002b84 <MX_DMA_Init>
	MX_CAN1_Init();
 8002628:	f000 f932 	bl	8002890 <MX_CAN1_Init>
	MX_I2C1_Init();
 800262c:	f000 f9b4 	bl	8002998 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002630:	f000 fa78 	bl	8002b24 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8002634:	f000 f8c8 	bl	80027c8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8002638:	f000 f9ee 	bl	8002a18 <MX_TIM2_Init>
//	HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID,
//			&DMATransferComplete);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800263c:	f008 f81e 	bl	800a67c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of I2CBusControl */
	I2CBusControlHandle = osMutexNew(&I2CBusControl_attributes);
 8002640:	4821      	ldr	r0, [pc, #132]	; (80026c8 <main+0xb4>)
 8002642:	f008 f912 	bl	800a86a <osMutexNew>
 8002646:	4603      	mov	r3, r0
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <main+0xb8>)
 800264a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of SensorAlertH2 */
	SensorAlertH2Handle = osSemaphoreNew(1, 0, &SensorAlertH2_attributes);
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <main+0xbc>)
 800264e:	2100      	movs	r1, #0
 8002650:	2001      	movs	r0, #1
 8002652:	f008 fa18 	bl	800aa86 <osSemaphoreNew>
 8002656:	4603      	mov	r3, r0
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <main+0xc0>)
 800265a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of CAN_LowPrio_Q */
	CAN_LowPrio_QHandle = osMessageQueueNew(16, sizeof(uint16_t),
 800265c:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <main+0xc4>)
 800265e:	2102      	movs	r1, #2
 8002660:	2010      	movs	r0, #16
 8002662:	f008 faeb 	bl	800ac3c <osMessageQueueNew>
 8002666:	4603      	mov	r3, r0
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <main+0xc8>)
 800266a:	6013      	str	r3, [r2, #0]
			&CAN_LowPrio_Q_attributes);

	/* creation of CAN_HighPro_Q */
	CAN_HighPro_QHandle = osMessageQueueNew(8, sizeof(IntrimPacket),
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <main+0xcc>)
 800266e:	210b      	movs	r1, #11
 8002670:	2008      	movs	r0, #8
 8002672:	f008 fae3 	bl	800ac3c <osMessageQueueNew>
 8002676:	4603      	mov	r3, r0
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <main+0xd0>)
 800267a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of SensorReadThrea */
	SensorReadThreaHandle = osThreadNew(startSensorReadThread, NULL,
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <main+0xd4>)
 800267e:	2100      	movs	r1, #0
 8002680:	481a      	ldr	r0, [pc, #104]	; (80026ec <main+0xd8>)
 8002682:	f008 f845 	bl	800a710 <osThreadNew>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <main+0xdc>)
 800268a:	6013      	str	r3, [r2, #0]
			&SensorReadThrea_attributes);

	/* creation of AuxilaryPrint */
	AuxilaryPrintHandle = osThreadNew(startAuxilaryPrintThread, NULL,
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <main+0xe0>)
 800268e:	2100      	movs	r1, #0
 8002690:	4819      	ldr	r0, [pc, #100]	; (80026f8 <main+0xe4>)
 8002692:	f008 f83d 	bl	800a710 <osThreadNew>
 8002696:	4603      	mov	r3, r0
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <main+0xe8>)
 800269a:	6013      	str	r3, [r2, #0]
			&AuxilaryPrint_attributes);

	/* creation of SensorTransmit */
	SensorTransmitHandle = osThreadNew(startSensorTransmitThread, NULL,
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <main+0xec>)
 800269e:	2100      	movs	r1, #0
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <main+0xf0>)
 80026a2:	f008 f835 	bl	800a710 <osThreadNew>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <main+0xf4>)
 80026aa:	6013      	str	r3, [r2, #0]
			&SensorTransmit_attributes);

	/* creation of LeakWatchdog */
	LeakWatchdogHandle = osThreadNew(startLeakWatchdogThread, NULL,
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <main+0xf8>)
 80026ae:	2100      	movs	r1, #0
 80026b0:	4817      	ldr	r0, [pc, #92]	; (8002710 <main+0xfc>)
 80026b2:	f008 f82d 	bl	800a710 <osThreadNew>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <main+0x100>)
 80026ba:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80026bc:	f008 f802 	bl	800a6c4 <osKernelStart>
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		raw = HAL_ADC_GetValue(&hadc1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, 1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

		HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	f001 fe2b 	bl	800431c <HAL_Delay>
 80026c6:	e7fb      	b.n	80026c0 <main+0xac>
 80026c8:	08011348 	.word	0x08011348
 80026cc:	2000165c 	.word	0x2000165c
 80026d0:	08011358 	.word	0x08011358
 80026d4:	20001660 	.word	0x20001660
 80026d8:	08011318 	.word	0x08011318
 80026dc:	200015ac 	.word	0x200015ac
 80026e0:	08011330 	.word	0x08011330
 80026e4:	200015b0 	.word	0x200015b0
 80026e8:	08011288 	.word	0x08011288
 80026ec:	08002f61 	.word	0x08002f61
 80026f0:	2000042c 	.word	0x2000042c
 80026f4:	080112ac 	.word	0x080112ac
 80026f8:	08003195 	.word	0x08003195
 80026fc:	2000088c 	.word	0x2000088c
 8002700:	080112d0 	.word	0x080112d0
 8002704:	0800330d 	.word	0x0800330d
 8002708:	20000cec 	.word	0x20000cec
 800270c:	080112f4 	.word	0x080112f4
 8002710:	0800346d 	.word	0x0800346d
 8002714:	2000114c 	.word	0x2000114c

08002718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b096      	sub	sp, #88	; 0x58
 800271c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	2244      	movs	r2, #68	; 0x44
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f00c fb90 	bl	800ee4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
 8002738:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800273a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800273e:	f005 f81d 	bl	800777c <HAL_PWREx_ControlVoltageScaling>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8002748:	f000 fee2 	bl	8003510 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002754:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002756:	2302      	movs	r3, #2
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800275a:	2303      	movs	r3, #3
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 20;
 8002762:	2314      	movs	r3, #20
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002766:	2307      	movs	r3, #7
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800276a:	2302      	movs	r3, #2
 800276c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800276e:	2302      	movs	r3, #2
 8002770:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4618      	mov	r0, r3
 8002778:	f005 f856 	bl	8007828 <HAL_RCC_OscConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x6e>
		Error_Handler();
 8002782:	f000 fec5 	bl	8003510 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002786:	230f      	movs	r3, #15
 8002788:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2303      	movs	r3, #3
 800278c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800279a:	463b      	mov	r3, r7
 800279c:	2104      	movs	r1, #4
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 fc56 	bl	8008050 <HAL_RCC_ClockConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0x96>
		Error_Handler();
 80027aa:	f000 feb1 	bl	8003510 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_16);
 80027ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027b2:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 80027b6:	2000      	movs	r0, #0
 80027b8:	f005 fd4a 	bl	8008250 <HAL_RCC_MCOConfig>

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80027bc:	f005 fe72 	bl	80084a4 <HAL_RCC_EnableCSS>
}
 80027c0:	bf00      	nop
 80027c2:	3758      	adds	r7, #88	; 0x58
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80027ce:	463b      	mov	r3, r7
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027e0:	4a29      	ldr	r2, [pc, #164]	; (8002888 <MX_ADC1_Init+0xc0>)
 80027e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <MX_ADC1_Init+0xbc>)
 80027fe:	2204      	movs	r2, #4
 8002800:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002804:	2200      	movs	r2, #0
 8002806:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <MX_ADC1_Init+0xbc>)
 800280a:	2201      	movs	r2, #1
 800280c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002810:	2201      	movs	r2, #1
 8002812:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <MX_ADC1_Init+0xbc>)
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002824:	2200      	movs	r2, #0
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <MX_ADC1_Init+0xbc>)
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800283e:	4811      	ldr	r0, [pc, #68]	; (8002884 <MX_ADC1_Init+0xbc>)
 8002840:	f001 ff58 	bl	80046f4 <HAL_ADC_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_ADC1_Init+0x86>
		Error_Handler();
 800284a:	f000 fe61 	bl	8003510 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_ADC1_Init+0xc4>)
 8002850:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002852:	2306      	movs	r3, #6
 8002854:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800285a:	237f      	movs	r3, #127	; 0x7f
 800285c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800285e:	2304      	movs	r3, #4
 8002860:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002866:	463b      	mov	r3, r7
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_ADC1_Init+0xbc>)
 800286c:	f002 f918 	bl	8004aa0 <HAL_ADC_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ADC1_Init+0xb2>
		Error_Handler();
 8002876:	f000 fe4b 	bl	8003510 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000234 	.word	0x20000234
 8002888:	50040000 	.word	0x50040000
 800288c:	21800100 	.word	0x21800100

08002890 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <MX_CAN1_Init+0xfc>)
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <MX_CAN1_Init+0x100>)
 800289a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <MX_CAN1_Init+0xfc>)
 800289e:	2205      	movs	r2, #5
 80028a0:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80028a2:	4b3a      	ldr	r3, [pc, #232]	; (800298c <MX_CAN1_Init+0xfc>)
 80028a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <MX_CAN1_Init+0xfc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <MX_CAN1_Init+0xfc>)
 80028b2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80028b6:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <MX_CAN1_Init+0xfc>)
 80028ba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80028be:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <MX_CAN1_Init+0xfc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <MX_CAN1_Init+0xfc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <MX_CAN1_Init+0xfc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <MX_CAN1_Init+0xfc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <MX_CAN1_Init+0xfc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <MX_CAN1_Init+0xfc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80028e4:	4829      	ldr	r0, [pc, #164]	; (800298c <MX_CAN1_Init+0xfc>)
 80028e6:	f002 fdd5 	bl	8005494 <HAL_CAN_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_CAN1_Init+0x64>
		Error_Handler();
 80028f0:	f000 fe0e 	bl	8003510 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sf;
	sf.FilterIdHigh = 0x100 << 5;
 80028f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f8:	603b      	str	r3, [r7, #0]
	sf.FilterMaskIdHigh = 0x700 << 5;
 80028fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028fe:	60bb      	str	r3, [r7, #8]
	sf.FilterIdLow = 0x0000;
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
	sf.FilterMaskIdLow = 0x0000;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
	sf.FilterBank = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8002914:	2301      	movs	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	481a      	ldr	r0, [pc, #104]	; (800298c <MX_CAN1_Init+0xfc>)
 8002922:	f002 feb2 	bl	800568a <HAL_CAN_ConfigFilter>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_CAN1_Init+0xa0>
		/* Filter configuration Error */
		Error_Handler();
 800292c:	f000 fdf0 	bl	8003510 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002930:	4816      	ldr	r0, [pc, #88]	; (800298c <MX_CAN1_Init+0xfc>)
 8002932:	f002 ff74 	bl	800581e <HAL_CAN_Start>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_CAN1_Init+0xb0>
		Error_Handler();
 800293c:	f000 fde8 	bl	8003510 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8002940:	2102      	movs	r1, #2
 8002942:	4812      	ldr	r0, [pc, #72]	; (800298c <MX_CAN1_Init+0xfc>)
 8002944:	f003 f991 	bl	8005c6a <HAL_CAN_ActivateNotification>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_CAN1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800294e:	f000 fddf 	bl	8003510 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY)
 8002952:	2101      	movs	r1, #1
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <MX_CAN1_Init+0xfc>)
 8002956:	f003 f988 	bl	8005c6a <HAL_CAN_ActivateNotification>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_CAN1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8002960:	f000 fdd6 	bl	8003510 <Error_Handler>
	//	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR))
	//	!= HAL_OK) {
	//		Error_Handler();
	//	}

	TxHeader.StdId = 0x101;
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_CAN1_Init+0x104>)
 8002966:	f240 1201 	movw	r2, #257	; 0x101
 800296a:	601a      	str	r2, [r3, #0]
	//	TxHeader.ExtId = 0x01;
	TxHeader.RTR = CAN_RTR_DATA;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_CAN1_Init+0x104>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_CAN1_Init+0x104>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_CAN1_Init+0x104>)
 800297a:	2208      	movs	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <MX_CAN1_Init+0x104>)
 8002980:	2200      	movs	r2, #0
 8002982:	751a      	strb	r2, [r3, #20]
	/* USER CODE END CAN1_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200002e0 	.word	0x200002e0
 8002990:	40006400 	.word	0x40006400
 8002994:	200001fc 	.word	0x200001fc

08002998 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <MX_I2C1_Init+0x74>)
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <MX_I2C1_Init+0x78>)
 80029a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <MX_I2C1_Init+0x7c>)
 80029a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029d4:	f003 ffd2 	bl	800697c <HAL_I2C_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80029de:	f000 fd97 	bl	8003510 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80029e2:	2100      	movs	r1, #0
 80029e4:	4809      	ldr	r0, [pc, #36]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029e6:	f004 fe23 	bl	8007630 <HAL_I2CEx_ConfigAnalogFilter>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80029f0:	f000 fd8e 	bl	8003510 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80029f4:	2100      	movs	r1, #0
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029f8:	f004 fe65 	bl	80076c6 <HAL_I2CEx_ConfigDigitalFilter>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002a02:	f000 fd85 	bl	8003510 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000308 	.word	0x20000308
 8002a10:	40005400 	.word	0x40005400
 8002a14:	10909cec 	.word	0x10909cec

08002a18 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	615a      	str	r2, [r3, #20]
 8002a48:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002a72:	482b      	ldr	r0, [pc, #172]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a74:	f006 f88a 	bl	8008b8c <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8002a7e:	f000 fd47 	bl	8003510 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
	sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
	sClockSourceConfig.ClockFilter = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002a9c:	f006 fbb6 	bl	800920c <HAL_TIM_ConfigClockSource>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM2_Init+0x92>
		Error_Handler();
 8002aa6:	f000 fd33 	bl	8003510 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002aaa:	481d      	ldr	r0, [pc, #116]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002aac:	f006 f91a 	bl	8008ce4 <HAL_TIM_PWM_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM2_Init+0xa2>
		Error_Handler();
 8002ab6:	f000 fd2b 	bl	8003510 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4815      	ldr	r0, [pc, #84]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002aca:	f007 f80d 	bl	8009ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM2_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8002ad4:	f000 fd1c 	bl	8003510 <Error_Handler>
	}
	if (HAL_TIMEx_RemapConfig(&htim2,
 8002ad8:	f248 0101 	movw	r1, #32769	; 0x8001
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002ade:	f007 f869 	bl	8009bb4 <HAL_TIMEx_RemapConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM2_Init+0xd4>
	TIM_TIM2_ITR1_USB_SOF | TIM_TIM2_ETR_COMP2) != HAL_OK) {
		Error_Handler();
 8002ae8:	f000 fd12 	bl	8003510 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aec:	2360      	movs	r3, #96	; 0x60
 8002aee:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002afc:	463b      	mov	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002b04:	f006 fa6e 	bl	8008fe4 <HAL_TIM_PWM_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM2_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8002b0e:	f000 fcff 	bl	8003510 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <MX_TIM2_Init+0x108>)
 8002b14:	f001 f92c 	bl	8003d70 <HAL_TIM_MspPostInit>

}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000035c 	.word	0x2000035c

08002b24 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <MX_USART1_UART_Init+0x5c>)
 8002b2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b68:	f007 f886 	bl	8009c78 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002b72:	f000 fccd 	bl	8003510 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200003a8 	.word	0x200003a8
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6493      	str	r3, [r2, #72]	; 0x48
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	200b      	movs	r0, #11
 8002ba8:	f003 fb44 	bl	8006234 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bac:	200b      	movs	r0, #11
 8002bae:	f003 fb5d 	bl	800626c <HAL_NVIC_EnableIRQ>

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <MX_GPIO_Init+0xe0>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c10:	f003 fe9c 	bl	800694c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_D1_PWM_Pin | LED_D2_PWM_Pin | LED_D3_PWM_Pin,
 8002c14:	2200      	movs	r2, #0
 8002c16:	2138      	movs	r1, #56	; 0x38
 8002c18:	4822      	ldr	r0, [pc, #136]	; (8002ca4 <MX_GPIO_Init+0xe4>)
 8002c1a:	f003 fe97 	bl	800694c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : H2_TARE_Pin */
	GPIO_InitStruct.Pin = H2_TARE_Pin;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(H2_TARE_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c34:	f003 fd20 	bl	8006678 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c58:	f003 fd0e 	bl	8006678 <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_STBY_Pin */
	GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4619      	mov	r1, r3
 8002c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c78:	f003 fcfe 	bl	8006678 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_D1_PWM_Pin LED_D2_PWM_Pin LED_D3_PWM_Pin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin | LED_D2_PWM_Pin | LED_D3_PWM_Pin;
 8002c7c:	2338      	movs	r3, #56	; 0x38
 8002c7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	4619      	mov	r1, r3
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <MX_GPIO_Init+0xe4>)
 8002c94:	f003 fcf0 	bl	8006678 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000400 	.word	0x48000400

08002ca8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	//raw = adc_buf[0];
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_ConvCpltCallback>:
// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	//printf("%hu\r\n", adc_buf[0]);
	raw = adc_buf[ADC_BUF_LEN - 1];
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_ADC_ConvCpltCallback+0x20>)
 8002cc6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_ADC_ConvCpltCallback+0x24>)
 8002ccc:	801a      	strh	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20001664 	.word	0x20001664
 8002ce0:	200016b4 	.word	0x200016b4

08002ce4 <CAN_Transmit_Intrim>:
}

/**
 * Send 8 bytes at a time, with standard id size.
 */
int CAN_Transmit_Intrim(IntrimPacket _to_send) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	TxHeader.StdId = _to_send.id;
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <CAN_Transmit_Intrim+0x48>)
 8002cf6:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = _to_send.rtr_type;
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <CAN_Transmit_Intrim+0x48>)
 8002cfe:	60da      	str	r2, [r3, #12]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, _to_send.data, &TxMailbox)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	1cda      	adds	r2, r3, #3
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <CAN_Transmit_Intrim+0x4c>)
 8002d06:	4909      	ldr	r1, [pc, #36]	; (8002d2c <CAN_Transmit_Intrim+0x48>)
 8002d08:	480a      	ldr	r0, [pc, #40]	; (8002d34 <CAN_Transmit_Intrim+0x50>)
 8002d0a:	f002 fdcc 	bl	80058a6 <HAL_CAN_AddTxMessage>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <CAN_Transmit_Intrim+0x3e>
			!= HAL_OK) {
		printf("Can transmission error on packet id: %hu\r\n", _to_send.id);
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4807      	ldr	r0, [pc, #28]	; (8002d38 <CAN_Transmit_Intrim+0x54>)
 8002d1a:	f00b ff17 	bl	800eb4c <iprintf>
		Error_Handler();
 8002d1e:	f000 fbf7 	bl	8003510 <Error_Handler>
	}

	return 1;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200001fc 	.word	0x200001fc
 8002d30:	20000214 	.word	0x20000214
 8002d34:	200002e0 	.word	0x200002e0
 8002d38:	08010fbc 	.word	0x08010fbc

08002d3c <user_i2c_read>:

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	603a      	str	r2, [r7, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	71bb      	strb	r3, [r7, #6]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	b299      	uxth	r1, r3
 8002d5a:	1dba      	adds	r2, r7, #6
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	4811      	ldr	r0, [pc, #68]	; (8002da8 <user_i2c_read+0x6c>)
 8002d64:	f003 fe9a 	bl	8006a9c <HAL_I2C_Master_Transmit>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <user_i2c_read+0x38>
		return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e014      	b.n	8002d9e <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	b299      	uxth	r1, r3
 8002d82:	88bb      	ldrh	r3, [r7, #4]
 8002d84:	220a      	movs	r2, #10
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	4807      	ldr	r0, [pc, #28]	; (8002da8 <user_i2c_read+0x6c>)
 8002d8c:	f003 ff7a 	bl	8006c84 <HAL_I2C_Master_Receive>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	e000      	b.n	8002d9e <user_i2c_read+0x62>

	return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000308 	.word	0x20000308

08002dac <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f007 fd3d 	bl	800a834 <osDelay>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af02      	add	r7, sp, #8
 8002dcc:	603a      	str	r2, [r7, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	71bb      	strb	r3, [r7, #6]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80bb      	strh	r3, [r7, #4]
 8002ddc:	466b      	mov	r3, sp
 8002dde:	461e      	mov	r6, r3
	uint8_t buf[len + 1];
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	1e4b      	subs	r3, r1, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	460a      	mov	r2, r1
 8002dea:	2300      	movs	r3, #0
 8002dec:	4690      	mov	r8, r2
 8002dee:	4699      	mov	r9, r3
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e04:	460a      	mov	r2, r1
 8002e06:	2300      	movs	r3, #0
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	3307      	adds	r3, #7
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	ebad 0d03 	sub.w	sp, sp, r3
 8002e28:	ab02      	add	r3, sp, #8
 8002e2a:	3300      	adds	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	79ba      	ldrb	r2, [r7, #6]
 8002e32:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3301      	adds	r3, #1
 8002e38:	88ba      	ldrh	r2, [r7, #4]
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00c f884 	bl	800ef4a <memcpy>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002e42:	e002      	b.n	8002e4a <user_i2c_write+0x86>
	HAL_MAX_DELAY) != HAL_OK)
		printf("I2C Error\r\n");
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <user_i2c_write+0xb8>)
 8002e46:	f00b fee7 	bl	800ec18 <puts>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	b299      	uxth	r1, r3
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	3301      	adds	r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	9200      	str	r2, [sp, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4807      	ldr	r0, [pc, #28]	; (8002e80 <user_i2c_write+0xbc>)
 8002e62:	f003 fe1b 	bl	8006a9c <HAL_I2C_Master_Transmit>
 8002e66:	4603      	mov	r3, r0
	HAL_MAX_DELAY) != HAL_OK)
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1eb      	bne.n	8002e44 <user_i2c_write+0x80>
//	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
//	HAL_MAX_DELAY) != HAL_OK)
//		return -1;
//
//	free(buf);
	return 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	46b5      	mov	sp, r6
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08010fe8 	.word	0x08010fe8
 8002e80:	20000308 	.word	0x20000308

08002e84 <HAL_CAN_RxFifo0MsgPendingCallback>:

IntrimPacket packet; // Declared as a temporary variable outside ISR as this is being allocated and re allocated,
// therefore to save ISR time declaring it out side. Also volatile since only used in ISR.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, packet.data)
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f002 fdd7 	bl	8005a46 <HAL_CAN_GetRxMessage>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
			!= HAL_OK) {
		Error_Handler();
 8002e9e:	f000 fb37 	bl	8003510 <Error_Handler>
	}
	// Just check if there is atleast 1 spot open
	// If we dont and call get message we will loose that message since it wont fit and the ISR will exit.
	if (osMessageQueueGetSpace(CAN_HighPro_QHandle) >= 1) {
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f007 fffa 	bl	800aea0 <osMessageQueueGetSpace>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <HAL_CAN_RxFifo0MsgPendingCallback+0x56>

		printf("[CAN RX Inturrupt] Got message\r\n");
 8002eb2:	480f      	ldr	r0, [pc, #60]	; (8002ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8002eb4:	f00b feb0 	bl	800ec18 <puts>
		// Mask the packet ID out.
		packet.id = RxHeader.StdId;	// & 0x0FF;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002ec0:	801a      	strh	r2, [r3, #0]
		packet.rtr_type = RxHeader.RTR;
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002eca:	709a      	strb	r2, [r3, #2]
		//memcpy(packet.data, RxData, 8); // this is always 8 bytes therefore there
		// is pretty much no added iteration time. The compiler will optimize the loop away.

		osMessageQueuePut(CAN_HighPro_QHandle, &packet, 0, 0);
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002ed6:	f007 ff25 	bl	800ad24 <osMessageQueuePut>
	}

}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20001ae7 	.word	0x20001ae7
 8002ee8:	20000218 	.word	0x20000218
 8002eec:	200015b0 	.word	0x200015b0
 8002ef0:	08010ff4 	.word	0x08010ff4
 8002ef4:	20001ae4 	.word	0x20001ae4

08002ef8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox0CompleteCallback] Sent\r\n");
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8002f16:	f00b fe7f 	bl	800ec18 <puts>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08011014 	.word	0x08011014

08002f28 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox1CompleteCallback] Sent\r\n");
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8002f32:	f00b fe71 	bl	800ec18 <puts>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08011038 	.word	0x08011038

08002f44 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox2CompleteCallback] Sent\r\n");
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8002f4e:	f00b fe63 	bl	800ec18 <puts>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	0801105c 	.word	0x0801105c

08002f60 <startSensorReadThread>:
 * @brief  Function implementing the SensorReadThrea thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorReadThread */
void startSensorReadThread(void *argument) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b09a      	sub	sp, #104	; 0x68
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8002f68:	2228      	movs	r2, #40	; 0x28
 8002f6a:	4977      	ldr	r1, [pc, #476]	; (8003148 <startSensorReadThread+0x1e8>)
 8002f6c:	4877      	ldr	r0, [pc, #476]	; (800314c <startSensorReadThread+0x1ec>)
 8002f6e:	f001 fd09 	bl	8004984 <HAL_ADC_Start_DMA>

	struct bme280_dev dev;
	struct bme280_data comp_data;
	int8_t rslt;

	osMutexAcquire(I2CBusControlHandle, osWaitForever);
 8002f72:	4b77      	ldr	r3, [pc, #476]	; (8003150 <startSensorReadThread+0x1f0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f007 fcfb 	bl	800a976 <osMutexAcquire>
	dev.dev_id = BME280_I2C_ADDR_SEC;
 8002f80:	2377      	movs	r3, #119	; 0x77
 8002f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	dev.intf = BME280_I2C_INTF;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	dev.read = user_i2c_read;
 8002f8c:	4b71      	ldr	r3, [pc, #452]	; (8003154 <startSensorReadThread+0x1f4>)
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	dev.write = user_i2c_write;
 8002f90:	4b71      	ldr	r3, [pc, #452]	; (8003158 <startSensorReadThread+0x1f8>)
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev.delay_ms = user_delay_ms;
 8002f94:	4b71      	ldr	r3, [pc, #452]	; (800315c <startSensorReadThread+0x1fc>)
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
	rslt = bme280_init(&dev);
 8002f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe f821 	bl	8000fe4 <bme280_init>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	rslt = bme280_set_sensor_settings(
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	200f      	movs	r0, #15
 8002fc8:	f7fe f900 	bl	80011cc <bme280_set_sensor_settings>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f7fe f94c 	bl	8001276 <bme280_set_sensor_mode>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	osDelay(50);
 8002fe4:	2032      	movs	r0, #50	; 0x32
 8002fe6:	f007 fc25 	bl	800a834 <osDelay>
	osMutexRelease(I2CBusControlHandle);
 8002fea:	4b59      	ldr	r3, [pc, #356]	; (8003150 <startSensorReadThread+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f007 fd0c 	bl	800aa0c <osMutexRelease>
	/* Infinite loop */
	// \033[2J\033[0;0H
	for (;;) {

		//HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_SET);
		printf("[Main Thread] ");
 8002ff4:	485a      	ldr	r0, [pc, #360]	; (8003160 <startSensorReadThread+0x200>)
 8002ff6:	f00b fda9 	bl	800eb4c <iprintf>
		printf("ADC: ");
 8002ffa:	485a      	ldr	r0, [pc, #360]	; (8003164 <startSensorReadThread+0x204>)
 8002ffc:	f00b fda6 	bl	800eb4c <iprintf>
		printf("%hu\r\n", adc_buf[ADC_BUF_LEN - 1] * 0.8);
 8003000:	4b51      	ldr	r3, [pc, #324]	; (8003148 <startSensorReadThread+0x1e8>)
 8003002:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa8c 	bl	8000524 <__aeabi_i2d>
 800300c:	a34a      	add	r3, pc, #296	; (adr r3, 8003138 <startSensorReadThread+0x1d8>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd faf1 	bl	80005f8 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4853      	ldr	r0, [pc, #332]	; (8003168 <startSensorReadThread+0x208>)
 800301c:	f00b fd96 	bl	800eb4c <iprintf>
//		TxHeader.StdId = 0x102;

		if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8003020:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <startSensorReadThread+0x1f0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	4618      	mov	r0, r3
 800302a:	f007 fca4 	bl	800a976 <osMutexAcquire>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d14a      	bne.n	80030ca <startSensorReadThread+0x16a>
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003034:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	4619      	mov	r1, r3
 800303e:	2007      	movs	r0, #7
 8003040:	f7fe f995 	bl	800136e <bme280_get_sensor_data>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			osMutexRelease(I2CBusControlHandle);
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <startSensorReadThread+0x1f0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f007 fcdc 	bl	800aa0c <osMutexRelease>
			if (rslt == BME280_OK) {
 8003054:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003058:	2b00      	cmp	r3, #0
 800305a:	d139      	bne.n	80030d0 <startSensorReadThread+0x170>
				temperature = comp_data.temperature / 100.0; /* °C  */
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa60 	bl	8000524 <__aeabi_i2d>
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <startSensorReadThread+0x20c>)
 800306a:	f7fd fbef 	bl	800084c <__aeabi_ddiv>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fd97 	bl	8000ba8 <__aeabi_d2f>
 800307a:	4603      	mov	r3, r0
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <startSensorReadThread+0x210>)
 800307e:	6013      	str	r3, [r2, #0]
				humidity = comp_data.humidity / 1024.0; /* %   */
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa3e 	bl	8000504 <__aeabi_ui2d>
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <startSensorReadThread+0x214>)
 800308e:	f7fd fbdd 	bl	800084c <__aeabi_ddiv>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f7fd fd85 	bl	8000ba8 <__aeabi_d2f>
 800309e:	4603      	mov	r3, r0
 80030a0:	4a35      	ldr	r2, [pc, #212]	; (8003178 <startSensorReadThread+0x218>)
 80030a2:	6013      	str	r3, [r2, #0]
				pressure = comp_data.pressure / 10000.0; /* hPa */
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fa2c 	bl	8000504 <__aeabi_ui2d>
 80030ac:	a324      	add	r3, pc, #144	; (adr r3, 8003140 <startSensorReadThread+0x1e0>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f7fd fbcb 	bl	800084c <__aeabi_ddiv>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f7fd fd73 	bl	8000ba8 <__aeabi_d2f>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a2d      	ldr	r2, [pc, #180]	; (800317c <startSensorReadThread+0x21c>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e002      	b.n	80030d0 <startSensorReadThread+0x170>
			}

		} else {
			printf("[!Main Thread] Failed to aquire control of I2C Bus\r\n");
 80030ca:	482d      	ldr	r0, [pc, #180]	; (8003180 <startSensorReadThread+0x220>)
 80030cc:	f00b fda4 	bl	800ec18 <puts>
		}

		printf("[!Main Thread] Humidity: %03.1f\r\n", humidity);
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <startSensorReadThread+0x218>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa37 	bl	8000548 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4829      	ldr	r0, [pc, #164]	; (8003184 <startSensorReadThread+0x224>)
 80030e0:	f00b fd34 	bl	800eb4c <iprintf>
		printf("[!Main Thread] Temprature: %03.1f\r\n", temperature);
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <startSensorReadThread+0x210>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa2d 	bl	8000548 <__aeabi_f2d>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4825      	ldr	r0, [pc, #148]	; (8003188 <startSensorReadThread+0x228>)
 80030f4:	f00b fd2a 	bl	800eb4c <iprintf>
		printf("[!Main Thread] Pressure: %03.1f\r\n", pressure);
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <startSensorReadThread+0x21c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fa23 	bl	8000548 <__aeabi_f2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4821      	ldr	r0, [pc, #132]	; (800318c <startSensorReadThread+0x22c>)
 8003108:	f00b fd20 	bl	800eb4c <iprintf>

		IntrimPacket packet;
		//packet.data = {1, 2, 3, 4, 5, 6, 7, 8};
		packet.rtr_type = CAN_RTR_REMOTE;
 800310c:	2302      	movs	r3, #2
 800310e:	73bb      	strb	r3, [r7, #14]
		TxHeader.DLC = 0;
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <startSensorReadThread+0x230>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
		packet.id = 0x111;
 8003116:	f240 1311 	movw	r3, #273	; 0x111
 800311a:	81bb      	strh	r3, [r7, #12]
		CAN_Transmit_Intrim(packet);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003124:	f7ff fdde 	bl	8002ce4 <CAN_Transmit_Intrim>

		osDelay(500);
 8003128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800312c:	f007 fb82 	bl	800a834 <osDelay>
	for (;;) {
 8003130:	e760      	b.n	8002ff4 <startSensorReadThread+0x94>
 8003132:	bf00      	nop
 8003134:	f3af 8000 	nop.w
 8003138:	9999999a 	.word	0x9999999a
 800313c:	3fe99999 	.word	0x3fe99999
 8003140:	00000000 	.word	0x00000000
 8003144:	40c38800 	.word	0x40c38800
 8003148:	20001664 	.word	0x20001664
 800314c:	20000234 	.word	0x20000234
 8003150:	2000165c 	.word	0x2000165c
 8003154:	08002d3d 	.word	0x08002d3d
 8003158:	08002dc5 	.word	0x08002dc5
 800315c:	08002dad 	.word	0x08002dad
 8003160:	08011080 	.word	0x08011080
 8003164:	08011090 	.word	0x08011090
 8003168:	08011098 	.word	0x08011098
 800316c:	40590000 	.word	0x40590000
 8003170:	20001ad8 	.word	0x20001ad8
 8003174:	40900000 	.word	0x40900000
 8003178:	20001adc 	.word	0x20001adc
 800317c:	20001ae0 	.word	0x20001ae0
 8003180:	080110a0 	.word	0x080110a0
 8003184:	080110d4 	.word	0x080110d4
 8003188:	080110f8 	.word	0x080110f8
 800318c:	0801111c 	.word	0x0801111c
 8003190:	200001fc 	.word	0x200001fc

08003194 <startAuxilaryPrintThread>:
 * @brief Function implementing the AuxilaryPrint thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startAuxilaryPrintThread */
void startAuxilaryPrintThread(void *argument) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
 800319a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startAuxilaryPrintThread */
	osDelay(500);
 800319c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031a0:	f007 fb48 	bl	800a834 <osDelay>
	if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <startAuxilaryPrintThread+0x140>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ac:	4618      	mov	r0, r3
 80031ae:	f007 fbe2 	bl	800a976 <osMutexAcquire>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <startAuxilaryPrintThread+0x34>
		ssd1306_Init();
 80031b8:	f000 f9e8 	bl	800358c <ssd1306_Init>
		osMutexRelease(I2CBusControlHandle);
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <startAuxilaryPrintThread+0x140>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f007 fc23 	bl	800aa0c <osMutexRelease>
 80031c6:	e002      	b.n	80031ce <startAuxilaryPrintThread+0x3a>
	} else {
		printf("[!Secondary Thread] I2C Busy\r\n");
 80031c8:	4843      	ldr	r0, [pc, #268]	; (80032d8 <startAuxilaryPrintThread+0x144>)
 80031ca:	f00b fd25 	bl	800ec18 <puts>
	}
	/* Infinite loop */
	for (;;) {

		ssd1306_Fill(Black);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f000 fa46 	bl	8003660 <ssd1306_Fill>
		ssd1306_Line(0, 0, SSD1306_WIDTH, 0, White);
 80031d4:	2301      	movs	r3, #1
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2300      	movs	r3, #0
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	2100      	movs	r1, #0
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 fb98 	bl	8003914 <ssd1306_Line>
		ssd1306_SetCursor(0, 2);
 80031e4:	2102      	movs	r1, #2
 80031e6:	2000      	movs	r0, #0
 80031e8:	f000 fb7c 	bl	80038e4 <ssd1306_SetCursor>
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
				adc_buf[ADC_BUF_LEN - 1] * 0.8f);
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <startAuxilaryPrintThread+0x148>)
 80031ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80032e0 <startAuxilaryPrintThread+0x14c>
 80031fe:	ee67 7a87 	vmul.f32	s15, s15, s14
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
 8003202:	ee17 0a90 	vmov	r0, s15
 8003206:	f7fd f99f 	bl	8000548 <__aeabi_f2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4935      	ldr	r1, [pc, #212]	; (80032e4 <startAuxilaryPrintThread+0x150>)
 8003210:	4835      	ldr	r0, [pc, #212]	; (80032e8 <startAuxilaryPrintThread+0x154>)
 8003212:	f00b fd09 	bl	800ec28 <siprintf>
		ssd1306_WriteString(h2_conc_str, Font_7x10, White);
 8003216:	4a35      	ldr	r2, [pc, #212]	; (80032ec <startAuxilaryPrintThread+0x158>)
 8003218:	2301      	movs	r3, #1
 800321a:	ca06      	ldmia	r2, {r1, r2}
 800321c:	4832      	ldr	r0, [pc, #200]	; (80032e8 <startAuxilaryPrintThread+0x154>)
 800321e:	f000 fb3b 	bl	8003898 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 8003222:	210c      	movs	r1, #12
 8003224:	2000      	movs	r0, #0
 8003226:	f000 fb5d 	bl	80038e4 <ssd1306_SetCursor>
		sprintf(bme_data_str, "Temperature: %2.0fC", temperature);
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <startAuxilaryPrintThread+0x15c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f98a 	bl	8000548 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	492e      	ldr	r1, [pc, #184]	; (80032f4 <startAuxilaryPrintThread+0x160>)
 800323a:	482f      	ldr	r0, [pc, #188]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 800323c:	f00b fcf4 	bl	800ec28 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8003240:	4a2a      	ldr	r2, [pc, #168]	; (80032ec <startAuxilaryPrintThread+0x158>)
 8003242:	2301      	movs	r3, #1
 8003244:	ca06      	ldmia	r2, {r1, r2}
 8003246:	482c      	ldr	r0, [pc, #176]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 8003248:	f000 fb26 	bl	8003898 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 22);
 800324c:	2116      	movs	r1, #22
 800324e:	2000      	movs	r0, #0
 8003250:	f000 fb48 	bl	80038e4 <ssd1306_SetCursor>

		sprintf(bme_data_str, "Humidity: %2.0f%%", humidity);
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <startAuxilaryPrintThread+0x168>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f975 	bl	8000548 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4927      	ldr	r1, [pc, #156]	; (8003300 <startAuxilaryPrintThread+0x16c>)
 8003264:	4824      	ldr	r0, [pc, #144]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 8003266:	f00b fcdf 	bl	800ec28 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 800326a:	4a20      	ldr	r2, [pc, #128]	; (80032ec <startAuxilaryPrintThread+0x158>)
 800326c:	2301      	movs	r3, #1
 800326e:	ca06      	ldmia	r2, {r1, r2}
 8003270:	4821      	ldr	r0, [pc, #132]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 8003272:	f000 fb11 	bl	8003898 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 32);
 8003276:	2120      	movs	r1, #32
 8003278:	2000      	movs	r0, #0
 800327a:	f000 fb33 	bl	80038e4 <ssd1306_SetCursor>

		sprintf(bme_data_str, "Pressure: %3.0f hPa", pressure);
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <startAuxilaryPrintThread+0x170>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f960 	bl	8000548 <__aeabi_f2d>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	491e      	ldr	r1, [pc, #120]	; (8003308 <startAuxilaryPrintThread+0x174>)
 800328e:	481a      	ldr	r0, [pc, #104]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 8003290:	f00b fcca 	bl	800ec28 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <startAuxilaryPrintThread+0x158>)
 8003296:	2301      	movs	r3, #1
 8003298:	ca06      	ldmia	r2, {r1, r2}
 800329a:	4817      	ldr	r0, [pc, #92]	; (80032f8 <startAuxilaryPrintThread+0x164>)
 800329c:	f000 fafc 	bl	8003898 <ssd1306_WriteString>
		ssd1306_Line(0, 42, SSD1306_WIDTH, 42, White);
 80032a0:	2301      	movs	r3, #1
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	232a      	movs	r3, #42	; 0x2a
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	212a      	movs	r1, #42	; 0x2a
 80032aa:	2000      	movs	r0, #0
 80032ac:	f000 fb32 	bl	8003914 <ssd1306_Line>
		osMutexAcquire(I2CBusControlHandle, osWaitForever);
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <startAuxilaryPrintThread+0x140>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	4618      	mov	r0, r3
 80032ba:	f007 fb5c 	bl	800a976 <osMutexAcquire>
		ssd1306_UpdateScreen();
 80032be:	f000 f9e7 	bl	8003690 <ssd1306_UpdateScreen>
		osMutexRelease(I2CBusControlHandle);
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <startAuxilaryPrintThread+0x140>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f007 fba0 	bl	800aa0c <osMutexRelease>
		osDelay(100);
 80032cc:	2064      	movs	r0, #100	; 0x64
 80032ce:	f007 fab1 	bl	800a834 <osDelay>
		ssd1306_Fill(Black);
 80032d2:	e77c      	b.n	80031ce <startAuxilaryPrintThread+0x3a>
 80032d4:	2000165c 	.word	0x2000165c
 80032d8:	08011140 	.word	0x08011140
 80032dc:	20001664 	.word	0x20001664
 80032e0:	3f4ccccd 	.word	0x3f4ccccd
 80032e4:	08011160 	.word	0x08011160
 80032e8:	200016b8 	.word	0x200016b8
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20001ad8 	.word	0x20001ad8
 80032f4:	08011174 	.word	0x08011174
 80032f8:	200016d8 	.word	0x200016d8
 80032fc:	20001adc 	.word	0x20001adc
 8003300:	08011188 	.word	0x08011188
 8003304:	20001ae0 	.word	0x20001ae0
 8003308:	0801119c 	.word	0x0801119c

0800330c <startSensorTransmitThread>:
 * @brief Function implementing the SensorTransmit thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorTransmitThread */
void startSensorTransmitThread(void *argument) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	IntrimPacket response_packet;
	RESPONSE_PACKET_ID response_id;
	/* Infinite loop */
	for (;;) {
		//if (osMessageQueueGetCount(CAN_HighPro_QHandle) > 0) {
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8003314:	4b49      	ldr	r3, [pc, #292]	; (800343c <startSensorTransmitThread+0x130>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	f107 0108 	add.w	r1, r7, #8
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	2200      	movs	r2, #0
 8003322:	f007 fd5f 	bl	800ade4 <osMessageQueueGet>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 8081 	bne.w	8003430 <startSensorTransmitThread+0x124>
		osWaitForever) == osOK) {
			if (response_packet.rtr_type == CAN_RTR_REMOTE) {
 800332e:	7abb      	ldrb	r3, [r7, #10]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d17d      	bne.n	8003430 <startSensorTransmitThread+0x124>
				switch (response_packet.id) {
 8003334:	893b      	ldrh	r3, [r7, #8]
 8003336:	f240 2223 	movw	r2, #547	; 0x223
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <startSensorTransmitThread+0x96>
 800333e:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8003342:	da6a      	bge.n	800341a <startSensorTransmitThread+0x10e>
 8003344:	f240 2222 	movw	r2, #546	; 0x222
 8003348:	4293      	cmp	r3, r2
 800334a:	d03e      	beq.n	80033ca <startSensorTransmitThread+0xbe>
 800334c:	f240 2222 	movw	r2, #546	; 0x222
 8003350:	4293      	cmp	r3, r2
 8003352:	dc62      	bgt.n	800341a <startSensorTransmitThread+0x10e>
 8003354:	f240 1211 	movw	r2, #273	; 0x111
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <startSensorTransmitThread+0x5a>
 800335c:	f240 2221 	movw	r2, #545	; 0x221
 8003360:	4293      	cmp	r3, r2
 8003362:	d046      	beq.n	80033f2 <startSensorTransmitThread+0xe6>
 8003364:	e059      	b.n	800341a <startSensorTransmitThread+0x10e>
				case GET_H2_CONC:
					response_packet.id = RESPOND_H2_CONC;
 8003366:	f240 1311 	movw	r3, #273	; 0x111
 800336a:	813b      	strh	r3, [r7, #8]
					sprintf(&response_packet.data, "%f", adc_buf[ADC_BUF_LEN - 1] * ADC_CONST);
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <startSensorTransmitThread+0x134>)
 800336e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003444 <startSensorTransmitThread+0x138>
 800337e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003382:	ee17 0a90 	vmov	r0, s15
 8003386:	f7fd f8df 	bl	8000548 <__aeabi_f2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	f107 0108 	add.w	r1, r7, #8
 8003392:	1cc8      	adds	r0, r1, #3
 8003394:	492c      	ldr	r1, [pc, #176]	; (8003448 <startSensorTransmitThread+0x13c>)
 8003396:	f00b fc47 	bl	800ec28 <siprintf>
					//memcpy(&response_packet.data, adc_buf[ADC_BUF_LEN - 1], 8);
					printf("[!SensorTransmitThread]Sending CAN H2 Conc\r\n");
 800339a:	482c      	ldr	r0, [pc, #176]	; (800344c <startSensorTransmitThread+0x140>)
 800339c:	f00b fc3c 	bl	800ec18 <puts>
					break;
 80033a0:	e03b      	b.n	800341a <startSensorTransmitThread+0x10e>
				case GET_HUMIDITY:
					response_packet.id = RESPOND_HUMIDITY;
 80033a2:	f44f 738a 	mov.w	r3, #276	; 0x114
 80033a6:	813b      	strh	r3, [r7, #8]
					sprintf(&response_packet.data, "%f", humidity);
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <startSensorTransmitThread+0x144>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8cb 	bl	8000548 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	f107 0108 	add.w	r1, r7, #8
 80033ba:	1cc8      	adds	r0, r1, #3
 80033bc:	4922      	ldr	r1, [pc, #136]	; (8003448 <startSensorTransmitThread+0x13c>)
 80033be:	f00b fc33 	bl	800ec28 <siprintf>
					//memcpy(, humidity, 8);
					printf("[!SensorTransmitThread]Sending CAN Humidity\r\n");
 80033c2:	4824      	ldr	r0, [pc, #144]	; (8003454 <startSensorTransmitThread+0x148>)
 80033c4:	f00b fc28 	bl	800ec18 <puts>
					break;
 80033c8:	e027      	b.n	800341a <startSensorTransmitThread+0x10e>
				case GET_PRESSURE:
					response_packet.id = RESPOND_PRESSURE;
 80033ca:	f240 1313 	movw	r3, #275	; 0x113
 80033ce:	813b      	strh	r3, [r7, #8]
					sprintf(&response_packet.data, "%f", pressure);
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <startSensorTransmitThread+0x14c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f8b7 	bl	8000548 <__aeabi_f2d>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	f107 0108 	add.w	r1, r7, #8
 80033e2:	1cc8      	adds	r0, r1, #3
 80033e4:	4918      	ldr	r1, [pc, #96]	; (8003448 <startSensorTransmitThread+0x13c>)
 80033e6:	f00b fc1f 	bl	800ec28 <siprintf>
					//memcpy(&response_packet.data, pressure, 8);
					printf("[!SensorTransmitThread]Sending CAN Pressure\r\n");
 80033ea:	481c      	ldr	r0, [pc, #112]	; (800345c <startSensorTransmitThread+0x150>)
 80033ec:	f00b fc14 	bl	800ec18 <puts>
					break;
 80033f0:	e013      	b.n	800341a <startSensorTransmitThread+0x10e>
				case GET_TEMP:
					response_packet.id = RESPOND_TEMP;
 80033f2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80033f6:	813b      	strh	r3, [r7, #8]
					sprintf(&response_packet.data, "%f", temperature);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <startSensorTransmitThread+0x154>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd f8a3 	bl	8000548 <__aeabi_f2d>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	f107 0108 	add.w	r1, r7, #8
 800340a:	1cc8      	adds	r0, r1, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <startSensorTransmitThread+0x13c>)
 800340e:	f00b fc0b 	bl	800ec28 <siprintf>
					//memcpy(&response_packet.data, temperature, 8);
					printf("[!SensorTransmitThread]Sending CAN Temprature\r\n");
 8003412:	4814      	ldr	r0, [pc, #80]	; (8003464 <startSensorTransmitThread+0x158>)
 8003414:	f00b fc00 	bl	800ec18 <puts>
					break;
 8003418:	bf00      	nop
				}
				TxHeader.DLC = 8;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <startSensorTransmitThread+0x15c>)
 800341c:	2208      	movs	r2, #8
 800341e:	611a      	str	r2, [r3, #16]
				response_packet.rtr_type = CAN_RTR_DATA;
 8003420:	2300      	movs	r3, #0
 8003422:	72bb      	strb	r3, [r7, #10]
				CAN_Transmit_Intrim(response_packet);
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800342c:	f7ff fc5a 	bl	8002ce4 <CAN_Transmit_Intrim>
//				printf(
//						"[!Sensor Transmit Thread] Error getting Message from HIGH priority thread.\r\n");
//			}
		}

		osDelay(500);
 8003430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003434:	f007 f9fe 	bl	800a834 <osDelay>
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8003438:	e76c      	b.n	8003314 <startSensorTransmitThread+0x8>
 800343a:	bf00      	nop
 800343c:	200015b0 	.word	0x200015b0
 8003440:	20001664 	.word	0x20001664
 8003444:	3f4ccccd 	.word	0x3f4ccccd
 8003448:	080111b0 	.word	0x080111b0
 800344c:	080111b4 	.word	0x080111b4
 8003450:	20001adc 	.word	0x20001adc
 8003454:	080111e0 	.word	0x080111e0
 8003458:	20001ae0 	.word	0x20001ae0
 800345c:	08011210 	.word	0x08011210
 8003460:	20001ad8 	.word	0x20001ad8
 8003464:	08011240 	.word	0x08011240
 8003468:	200001fc 	.word	0x200001fc

0800346c <startLeakWatchdogThread>:
 * @brief Function implementing the LeakWatchdog thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLeakWatchdogThread */
void startLeakWatchdogThread(void *argument) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startLeakWatchdogThread */
	IntrimPacket empack;
	empack.rtr_type = CAN_RTR_DATA;
 8003474:	2300      	movs	r3, #0
 8003476:	73bb      	strb	r3, [r7, #14]
	empack.id = RESPOND_EMERGENCY_JERMA_ALERT;
 8003478:	2300      	movs	r3, #0
 800347a:	81bb      	strh	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (osSemaphoreAcquire(SensorAlertH2Handle, osWaitForever) == osOK) {
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <startLeakWatchdogThread+0x70>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	4618      	mov	r0, r3
 8003486:	f007 fb87 	bl	800ab98 <osSemaphoreAcquire>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d120      	bne.n	80034d2 <startLeakWatchdogThread+0x66>
			while (1) {
				sprintf(empack.data, "%f", adc_buf[ADC_BUF_LEN - 1] * ADC_CONST);
 8003490:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <startLeakWatchdogThread+0x74>)
 8003492:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80034e4 <startLeakWatchdogThread+0x78>
 80034a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a6:	ee17 0a90 	vmov	r0, s15
 80034aa:	f7fd f84d 	bl	8000548 <__aeabi_f2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	f107 010c 	add.w	r1, r7, #12
 80034b6:	1cc8      	adds	r0, r1, #3
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <startLeakWatchdogThread+0x7c>)
 80034ba:	f00b fbb5 	bl	800ec28 <siprintf>
				// If we have a JERMA Alert we transmit a emergency broadcast every half second.
				CAN_Transmit_Intrim(empack);
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034c6:	f7ff fc0d 	bl	8002ce4 <CAN_Transmit_Intrim>
				osDelay(100);
 80034ca:	2064      	movs	r0, #100	; 0x64
 80034cc:	f007 f9b2 	bl	800a834 <osDelay>
				sprintf(empack.data, "%f", adc_buf[ADC_BUF_LEN - 1] * ADC_CONST);
 80034d0:	e7de      	b.n	8003490 <startLeakWatchdogThread+0x24>
			}
		}
		// Else transmit if message queue has request for data.
		osDelay(100);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f007 f9ae 	bl	800a834 <osDelay>
		if (osSemaphoreAcquire(SensorAlertH2Handle, osWaitForever) == osOK) {
 80034d8:	e7d0      	b.n	800347c <startLeakWatchdogThread+0x10>
 80034da:	bf00      	nop
 80034dc:	20001660 	.word	0x20001660
 80034e0:	20001664 	.word	0x20001664
 80034e4:	3f4ccccd 	.word	0x3f4ccccd
 80034e8:	080111b0 	.word	0x080111b0

080034ec <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80034fe:	f000 feed 	bl	80042dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00

08003510 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003518:	e7fe      	b.n	8003518 <Error_Handler+0x8>

0800351a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af04      	add	r7, sp, #16
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	2301      	movs	r3, #1
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	2200      	movs	r2, #0
 8003544:	2178      	movs	r1, #120	; 0x78
 8003546:	4803      	ldr	r0, [pc, #12]	; (8003554 <ssd1306_WriteCommand+0x2c>)
 8003548:	f003 fc92 	bl	8006e70 <HAL_I2C_Mem_Write>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000308 	.word	0x20000308

08003558 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af04      	add	r7, sp, #16
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f04f 32ff 	mov.w	r2, #4294967295
 800356a:	9202      	str	r2, [sp, #8]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2301      	movs	r3, #1
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	2178      	movs	r1, #120	; 0x78
 8003578:	4803      	ldr	r0, [pc, #12]	; (8003588 <ssd1306_WriteData+0x30>)
 800357a:	f003 fc79 	bl	8006e70 <HAL_I2C_Mem_Write>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000308 	.word	0x20000308

0800358c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003590:	f7ff ffc3 	bl	800351a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003594:	2064      	movs	r0, #100	; 0x64
 8003596:	f000 fec1 	bl	800431c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800359a:	2000      	movs	r0, #0
 800359c:	f000 fa3a 	bl	8003a14 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80035a0:	2020      	movs	r0, #32
 80035a2:	f7ff ffc1 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7ff ffbe 	bl	8003528 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80035ac:	20b0      	movs	r0, #176	; 0xb0
 80035ae:	f7ff ffbb 	bl	8003528 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80035b2:	20c8      	movs	r0, #200	; 0xc8
 80035b4:	f7ff ffb8 	bl	8003528 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7ff ffb5 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80035be:	2010      	movs	r0, #16
 80035c0:	f7ff ffb2 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80035c4:	2040      	movs	r0, #64	; 0x40
 80035c6:	f7ff ffaf 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80035ca:	20ff      	movs	r0, #255	; 0xff
 80035cc:	f000 fa0e 	bl	80039ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80035d0:	20a1      	movs	r0, #161	; 0xa1
 80035d2:	f7ff ffa9 	bl	8003528 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80035d6:	20a6      	movs	r0, #166	; 0xa6
 80035d8:	f7ff ffa6 	bl	8003528 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80035dc:	20a8      	movs	r0, #168	; 0xa8
 80035de:	f7ff ffa3 	bl	8003528 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80035e2:	203f      	movs	r0, #63	; 0x3f
 80035e4:	f7ff ffa0 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80035e8:	20a4      	movs	r0, #164	; 0xa4
 80035ea:	f7ff ff9d 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80035ee:	20d3      	movs	r0, #211	; 0xd3
 80035f0:	f7ff ff9a 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7ff ff97 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80035fa:	20d5      	movs	r0, #213	; 0xd5
 80035fc:	f7ff ff94 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003600:	20f0      	movs	r0, #240	; 0xf0
 8003602:	f7ff ff91 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003606:	20d9      	movs	r0, #217	; 0xd9
 8003608:	f7ff ff8e 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800360c:	2022      	movs	r0, #34	; 0x22
 800360e:	f7ff ff8b 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003612:	20da      	movs	r0, #218	; 0xda
 8003614:	f7ff ff88 	bl	8003528 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003618:	2012      	movs	r0, #18
 800361a:	f7ff ff85 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800361e:	20db      	movs	r0, #219	; 0xdb
 8003620:	f7ff ff82 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003624:	2020      	movs	r0, #32
 8003626:	f7ff ff7f 	bl	8003528 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800362a:	208d      	movs	r0, #141	; 0x8d
 800362c:	f7ff ff7c 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003630:	2014      	movs	r0, #20
 8003632:	f7ff ff79 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003636:	2001      	movs	r0, #1
 8003638:	f000 f9ec 	bl	8003a14 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800363c:	2000      	movs	r0, #0
 800363e:	f000 f80f 	bl	8003660 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003642:	f000 f825 	bl	8003690 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <ssd1306_Init+0xd0>)
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <ssd1306_Init+0xd0>)
 800364e:	2200      	movs	r2, #0
 8003650:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003652:	4b02      	ldr	r3, [pc, #8]	; (800365c <ssd1306_Init+0xd0>)
 8003654:	2201      	movs	r2, #1
 8003656:	711a      	strb	r2, [r3, #4]
}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20001ef0 	.word	0x20001ef0

08003660 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <ssd1306_Fill+0x14>
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <ssd1306_Fill+0x16>
 8003674:	23ff      	movs	r3, #255	; 0xff
 8003676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367a:	4619      	mov	r1, r3
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <ssd1306_Fill+0x2c>)
 800367e:	f00b fbe5 	bl	800ee4c <memset>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20001af0 	.word	0x20001af0

08003690 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003696:	2300      	movs	r3, #0
 8003698:	71fb      	strb	r3, [r7, #7]
 800369a:	e016      	b.n	80036ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	3b50      	subs	r3, #80	; 0x50
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff40 	bl	8003528 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7ff ff3d 	bl	8003528 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80036ae:	2010      	movs	r0, #16
 80036b0:	f7ff ff3a 	bl	8003528 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	01db      	lsls	r3, r3, #7
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <ssd1306_UpdateScreen+0x4c>)
 80036ba:	4413      	add	r3, r2
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff4a 	bl	8003558 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	3301      	adds	r3, #1
 80036c8:	71fb      	strb	r3, [r7, #7]
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d9e5      	bls.n	800369c <ssd1306_UpdateScreen+0xc>
    }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20001af0 	.word	0x20001af0

080036e0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
 80036ea:	460b      	mov	r3, r1
 80036ec:	71bb      	strb	r3, [r7, #6]
 80036ee:	4613      	mov	r3, r2
 80036f0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db3d      	blt.n	8003776 <ssd1306_DrawPixel+0x96>
 80036fa:	79bb      	ldrb	r3, [r7, #6]
 80036fc:	2b3f      	cmp	r3, #63	; 0x3f
 80036fe:	d83a      	bhi.n	8003776 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003700:	797b      	ldrb	r3, [r7, #5]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d11a      	bne.n	800373c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003706:	79fa      	ldrb	r2, [r7, #7]
 8003708:	79bb      	ldrb	r3, [r7, #6]
 800370a:	08db      	lsrs	r3, r3, #3
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	4603      	mov	r3, r0
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <ssd1306_DrawPixel+0xa4>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	b25a      	sxtb	r2, r3
 800371a:	79bb      	ldrb	r3, [r7, #6]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	b25b      	sxtb	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b259      	sxtb	r1, r3
 800372c:	79fa      	ldrb	r2, [r7, #7]
 800372e:	4603      	mov	r3, r0
 8003730:	01db      	lsls	r3, r3, #7
 8003732:	4413      	add	r3, r2
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	4a13      	ldr	r2, [pc, #76]	; (8003784 <ssd1306_DrawPixel+0xa4>)
 8003738:	54d1      	strb	r1, [r2, r3]
 800373a:	e01d      	b.n	8003778 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	79bb      	ldrb	r3, [r7, #6]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	b2d8      	uxtb	r0, r3
 8003744:	4603      	mov	r3, r0
 8003746:	01db      	lsls	r3, r3, #7
 8003748:	4413      	add	r3, r2
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <ssd1306_DrawPixel+0xa4>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	b25a      	sxtb	r2, r3
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	b25b      	sxtb	r3, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	b25b      	sxtb	r3, r3
 8003762:	4013      	ands	r3, r2
 8003764:	b259      	sxtb	r1, r3
 8003766:	79fa      	ldrb	r2, [r7, #7]
 8003768:	4603      	mov	r3, r0
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	4413      	add	r3, r2
 800376e:	b2c9      	uxtb	r1, r1
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <ssd1306_DrawPixel+0xa4>)
 8003772:	54d1      	strb	r1, [r2, r3]
 8003774:	e000      	b.n	8003778 <ssd1306_DrawPixel+0x98>
        return;
 8003776:	bf00      	nop
    }
}
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20001af0 	.word	0x20001af0

08003788 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	4604      	mov	r4, r0
 8003790:	1d38      	adds	r0, r7, #4
 8003792:	e880 0006 	stmia.w	r0, {r1, r2}
 8003796:	461a      	mov	r2, r3
 8003798:	4623      	mov	r3, r4
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	4613      	mov	r3, r2
 800379e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b1f      	cmp	r3, #31
 80037a4:	d902      	bls.n	80037ac <ssd1306_WriteChar+0x24>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b7e      	cmp	r3, #126	; 0x7e
 80037aa:	d901      	bls.n	80037b0 <ssd1306_WriteChar+0x28>
        return 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e06d      	b.n	800388c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037b0:	4b38      	ldr	r3, [pc, #224]	; (8003894 <ssd1306_WriteChar+0x10c>)
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	793b      	ldrb	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	dc06      	bgt.n	80037cc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <ssd1306_WriteChar+0x10c>)
 80037c0:	885b      	ldrh	r3, [r3, #2]
 80037c2:	461a      	mov	r2, r3
 80037c4:	797b      	ldrb	r3, [r7, #5]
 80037c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	dd01      	ble.n	80037d0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e05d      	b.n	800388c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e04c      	b.n	8003870 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3b20      	subs	r3, #32
 80037dc:	7979      	ldrb	r1, [r7, #5]
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	440b      	add	r3, r1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e034      	b.n	8003860 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <ssd1306_WriteChar+0x10c>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4413      	add	r3, r2
 8003812:	b2d8      	uxtb	r0, r3
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <ssd1306_WriteChar+0x10c>)
 8003816:	885b      	ldrh	r3, [r3, #2]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	4413      	add	r3, r2
 8003820:	b2db      	uxtb	r3, r3
 8003822:	7bba      	ldrb	r2, [r7, #14]
 8003824:	4619      	mov	r1, r3
 8003826:	f7ff ff5b 	bl	80036e0 <ssd1306_DrawPixel>
 800382a:	e016      	b.n	800385a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <ssd1306_WriteChar+0x10c>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4413      	add	r3, r2
 8003838:	b2d8      	uxtb	r0, r3
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <ssd1306_WriteChar+0x10c>)
 800383c:	885b      	ldrh	r3, [r3, #2]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4413      	add	r3, r2
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	f7ff ff43 	bl	80036e0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3301      	adds	r3, #1
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	793b      	ldrb	r3, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4293      	cmp	r3, r2
 8003868:	d3c5      	bcc.n	80037f6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	797b      	ldrb	r3, [r7, #5]
 8003872:	461a      	mov	r2, r3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4293      	cmp	r3, r2
 8003878:	d3ad      	bcc.n	80037d6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <ssd1306_WriteChar+0x10c>)
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	793b      	ldrb	r3, [r7, #4]
 8003880:	b29b      	uxth	r3, r3
 8003882:	4413      	add	r3, r2
 8003884:	b29a      	uxth	r2, r3
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <ssd1306_WriteChar+0x10c>)
 8003888:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3724      	adds	r7, #36	; 0x24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	20001ef0 	.word	0x20001ef0

08003898 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	1d38      	adds	r0, r7, #4
 80038a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80038a6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80038a8:	e012      	b.n	80038d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	7818      	ldrb	r0, [r3, #0]
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	1d3a      	adds	r2, r7, #4
 80038b2:	ca06      	ldmia	r2, {r1, r2}
 80038b4:	f7ff ff68 	bl	8003788 <ssd1306_WriteChar>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d002      	beq.n	80038ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	e008      	b.n	80038dc <ssd1306_WriteString+0x44>
        }
        str++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3301      	adds	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e8      	bne.n	80038aa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	781b      	ldrb	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	460a      	mov	r2, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <ssd1306_SetCursor+0x2c>)
 80038fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80038fc:	79bb      	ldrb	r3, [r7, #6]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <ssd1306_SetCursor+0x2c>)
 8003902:	805a      	strh	r2, [r3, #2]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	20001ef0 	.word	0x20001ef0

08003914 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	4604      	mov	r4, r0
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4623      	mov	r3, r4
 8003924:	71fb      	strb	r3, [r7, #7]
 8003926:	4603      	mov	r3, r0
 8003928:	71bb      	strb	r3, [r7, #6]
 800392a:	460b      	mov	r3, r1
 800392c:	717b      	strb	r3, [r7, #5]
 800392e:	4613      	mov	r3, r2
 8003930:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003932:	797a      	ldrb	r2, [r7, #5]
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bfb8      	it	lt
 800393c:	425b      	neglt	r3, r3
 800393e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003940:	793a      	ldrb	r2, [r7, #4]
 8003942:	79bb      	ldrb	r3, [r7, #6]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfb8      	it	lt
 800394a:	425b      	neglt	r3, r3
 800394c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800394e:	79fa      	ldrb	r2, [r7, #7]
 8003950:	797b      	ldrb	r3, [r7, #5]
 8003952:	429a      	cmp	r2, r3
 8003954:	d201      	bcs.n	800395a <ssd1306_Line+0x46>
 8003956:	2301      	movs	r3, #1
 8003958:	e001      	b.n	800395e <ssd1306_Line+0x4a>
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003960:	79ba      	ldrb	r2, [r7, #6]
 8003962:	793b      	ldrb	r3, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d201      	bcs.n	800396c <ssd1306_Line+0x58>
 8003968:	2301      	movs	r3, #1
 800396a:	e001      	b.n	8003970 <ssd1306_Line+0x5c>
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
 8003970:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800397a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800397e:	7939      	ldrb	r1, [r7, #4]
 8003980:	797b      	ldrb	r3, [r7, #5]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff feac 	bl	80036e0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003988:	e024      	b.n	80039d4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800398a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800398e:	79b9      	ldrb	r1, [r7, #6]
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fea4 	bl	80036e0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	425b      	negs	r3, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dd08      	ble.n	80039ba <ssd1306_Line+0xa6>
            error -= deltaY;
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	4413      	add	r3, r2
 80039b8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	da08      	bge.n	80039d4 <ssd1306_Line+0xc0>
            error += deltaX;
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	4413      	add	r3, r2
 80039c8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	79bb      	ldrb	r3, [r7, #6]
 80039d0:	4413      	add	r3, r2
 80039d2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80039d4:	79fa      	ldrb	r2, [r7, #7]
 80039d6:	797b      	ldrb	r3, [r7, #5]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1d6      	bne.n	800398a <ssd1306_Line+0x76>
 80039dc:	79ba      	ldrb	r2, [r7, #6]
 80039de:	793b      	ldrb	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1d2      	bne.n	800398a <ssd1306_Line+0x76>
        }
    }
    return;
 80039e4:	bf00      	nop
}
 80039e6:	3724      	adds	r7, #36	; 0x24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80039f6:	2381      	movs	r3, #129	; 0x81
 80039f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fd93 	bl	8003528 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fd8f 	bl	8003528 <ssd1306_WriteCommand>
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003a24:	23af      	movs	r3, #175	; 0xaf
 8003a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <ssd1306_SetDisplayOn+0x38>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	715a      	strb	r2, [r3, #5]
 8003a2e:	e004      	b.n	8003a3a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003a30:	23ae      	movs	r3, #174	; 0xae
 8003a32:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <ssd1306_SetDisplayOn+0x38>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fd73 	bl	8003528 <ssd1306_WriteCommand>
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20001ef0 	.word	0x20001ef0

08003a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6613      	str	r3, [r2, #96]	; 0x60
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_MspInit+0x4c>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	210f      	movs	r1, #15
 8003a8a:	f06f 0001 	mvn.w	r0, #1
 8003a8e:	f002 fbd1 	bl	8006234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b09e      	sub	sp, #120	; 0x78
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	2254      	movs	r2, #84	; 0x54
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00b f9c3 	bl	800ee4c <memset>
  if(hadc->Instance==ADC1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <HAL_ADC_MspInit+0x118>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d16e      	bne.n	8003bae <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003ad0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ada:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003adc:	2303      	movs	r3, #3
 8003ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003ae8:	2307      	movs	r3, #7
 8003aea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003aec:	2302      	movs	r3, #2
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003afa:	f107 0310 	add.w	r3, r7, #16
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fd5c 	bl	80085bc <HAL_RCCEx_PeriphCLKConfig>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003b0a:	f7ff fd01 	bl	8003510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_ADC_MspInit+0x11c>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = H2_SENSE_ADC_Pin;
 8003b3e:	2308      	movs	r3, #8
 8003b40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b42:	2303      	movs	r3, #3
 8003b44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(H2_SENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 8003b4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b54:	f002 fd90 	bl	8006678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <HAL_ADC_MspInit+0x124>)
 8003b5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003b5e:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b88:	2220      	movs	r2, #32
 8003b8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b92:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003b94:	f002 fb78 	bl	8006288 <HAL_DMA_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003b9e:	f7ff fcb7 	bl	8003510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003ba6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <HAL_ADC_MspInit+0x120>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003bae:	bf00      	nop
 8003bb0:	3778      	adds	r7, #120	; 0x78
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	50040000 	.word	0x50040000
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	20000298 	.word	0x20000298
 8003bc4:	40020008 	.word	0x40020008

08003bc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <HAL_CAN_MspInit+0xb4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d143      	bne.n	8003c72 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003bea:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_CAN_MspInit+0xb8>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c24:	2301      	movs	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c2c:	2309      	movs	r3, #9
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c3a:	f002 fd1d 	bl	8006678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c50:	2309      	movs	r3, #9
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5e:	f002 fd0b 	bl	8006678 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2105      	movs	r1, #5
 8003c66:	2014      	movs	r0, #20
 8003c68:	f002 fae4 	bl	8006234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003c6c:	2014      	movs	r0, #20
 8003c6e:	f002 fafd 	bl	800626c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40006400 	.word	0x40006400
 8003c80:	40021000 	.word	0x40021000

08003c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b09e      	sub	sp, #120	; 0x78
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	2254      	movs	r2, #84	; 0x54
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00b f8d1 	bl	800ee4c <memset>
  if(hi2c->Instance==I2C1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_I2C_MspInit+0xa8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d137      	bne.n	8003d24 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f004 fc7b 	bl	80085bc <HAL_RCCEx_PeriphCLKConfig>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ccc:	f7ff fc20 	bl	8003510 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ce8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cee:	2312      	movs	r3, #18
 8003cf0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d08:	f002 fcb6 	bl	8006678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d16:	6593      	str	r3, [r2, #88]	; 0x58
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_I2C_MspInit+0xac>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d24:	bf00      	nop
 8003d26:	3778      	adds	r7, #120	; 0x78
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40005400 	.word	0x40005400
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d10b      	bne.n	8003d5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_TIM_Base_MspInit+0x38>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_TIM_Base_MspInit+0x38>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_TIM_Base_MspInit+0x38>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d90:	d11c      	bne.n	8003dcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_TIM_MspPostInit+0x64>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <HAL_TIM_MspPostInit+0x64>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_TIM_MspPostInit+0x64>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BEEPER_PWM_Pin;
 8003daa:	2320      	movs	r3, #32
 8003dac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BEEPER_PWM_GPIO_Port, &GPIO_InitStruct);
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc8:	f002 fc56 	bl	8006678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003dcc:	bf00      	nop
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b09e      	sub	sp, #120	; 0x78
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	2254      	movs	r2, #84	; 0x54
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f00b f827 	bl	800ee4c <memset>
  if(huart->Instance==USART1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_UART_MspInit+0xa4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d135      	bne.n	8003e74 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	4618      	mov	r0, r3
 8003e16:	f004 fbd1 	bl	80085bc <HAL_RCCEx_PeriphCLKConfig>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e20:	f7ff fb76 	bl	8003510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2e:	6613      	str	r3, [r2, #96]	; 0x60
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e48:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_UART_MspInit+0xa8>)
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e54:	23c0      	movs	r3, #192	; 0xc0
 8003e56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e64:	2307      	movs	r3, #7
 8003e66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <HAL_UART_MspInit+0xac>)
 8003e70:	f002 fc02 	bl	8006678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e74:	bf00      	nop
 8003e76:	3778      	adds	r7, #120	; 0x78
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40021000 	.word	0x40021000
 8003e84:	48000400 	.word	0x48000400

08003e88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003e96:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_InitTick+0xc8>)
 8003e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <HAL_InitTick+0xc8>)
 8003e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_InitTick+0xc8>)
 8003ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003eae:	f107 020c 	add.w	r2, r7, #12
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fac1 	bl	8008440 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ebe:	f004 faa9 	bl	8008414 <HAL_RCC_GetPCLK2Freq>
 8003ec2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <HAL_InitTick+0xcc>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	0c9b      	lsrs	r3, r3, #18
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <HAL_InitTick+0xd0>)
 8003ed4:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_InitTick+0xd4>)
 8003ed6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_InitTick+0xd0>)
 8003eda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ede:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_InitTick+0xd0>)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <HAL_InitTick+0xd0>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_InitTick+0xd0>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef2:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_InitTick+0xd0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003ef8:	4817      	ldr	r0, [pc, #92]	; (8003f58 <HAL_InitTick+0xd0>)
 8003efa:	f004 fe47 	bl	8008b8c <HAL_TIM_Base_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11b      	bne.n	8003f44 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003f0c:	4812      	ldr	r0, [pc, #72]	; (8003f58 <HAL_InitTick+0xd0>)
 8003f0e:	f004 fe95 	bl	8008c3c <HAL_TIM_Base_Start_IT>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f20:	2019      	movs	r0, #25
 8003f22:	f002 f9a3 	bl	800626c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d808      	bhi.n	8003f3e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	2019      	movs	r0, #25
 8003f32:	f002 f97f 	bl	8006234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <HAL_InitTick+0xd8>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e002      	b.n	8003f44 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	431bde83 	.word	0x431bde83
 8003f58:	20001ef8 	.word	0x20001ef8
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	2000000c 	.word	0x2000000c

08003f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003f68:	f004 faac 	bl	80084c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f6c:	e7fe      	b.n	8003f6c <NMI_Handler+0x8>
	...

08003f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	; 0x30
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8003f84:	2308      	movs	r3, #8
 8003f86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4839      	ldr	r0, [pc, #228]	; (800407c <HardFault_Handler+0x10c>)
 8003f96:	f002 fb6f 	bl	8006678 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4834      	ldr	r0, [pc, #208]	; (800407c <HardFault_Handler+0x10c>)
 8003fac:	f002 fb64 	bl	8006678 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	482e      	ldr	r0, [pc, #184]	; (800407c <HardFault_Handler+0x10c>)
 8003fc2:	f002 fb59 	bl	8006678 <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fca:	e002      	b.n	8003fd2 <HardFault_Handler+0x62>
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	3301      	adds	r3, #1
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	4a2a      	ldr	r2, [pc, #168]	; (8004080 <HardFault_Handler+0x110>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	ddf8      	ble.n	8003fcc <HardFault_Handler+0x5c>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4827      	ldr	r0, [pc, #156]	; (800407c <HardFault_Handler+0x10c>)
 8003fe0:	f002 fcb4 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	e002      	b.n	8003ff0 <HardFault_Handler+0x80>
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	3301      	adds	r3, #1
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	4a23      	ldr	r2, [pc, #140]	; (8004080 <HardFault_Handler+0x110>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	ddf8      	ble.n	8003fea <HardFault_Handler+0x7a>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	481f      	ldr	r0, [pc, #124]	; (800407c <HardFault_Handler+0x10c>)
 8003ffe:	f002 fca5 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e002      	b.n	800400e <HardFault_Handler+0x9e>
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	3301      	adds	r3, #1
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HardFault_Handler+0x110>)
 8004012:	4293      	cmp	r3, r2
 8004014:	ddf8      	ble.n	8004008 <HardFault_Handler+0x98>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8004016:	2201      	movs	r2, #1
 8004018:	2120      	movs	r1, #32
 800401a:	4818      	ldr	r0, [pc, #96]	; (800407c <HardFault_Handler+0x10c>)
 800401c:	f002 fc96 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	e002      	b.n	800402c <HardFault_Handler+0xbc>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	3301      	adds	r3, #1
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HardFault_Handler+0x110>)
 8004030:	4293      	cmp	r3, r2
 8004032:	ddf8      	ble.n	8004026 <HardFault_Handler+0xb6>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8004034:	2200      	movs	r2, #0
 8004036:	2108      	movs	r1, #8
 8004038:	4810      	ldr	r0, [pc, #64]	; (800407c <HardFault_Handler+0x10c>)
 800403a:	f002 fc87 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e002      	b.n	800404a <HardFault_Handler+0xda>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <HardFault_Handler+0x110>)
 800404e:	4293      	cmp	r3, r2
 8004050:	ddf8      	ble.n	8004044 <HardFault_Handler+0xd4>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8004052:	2200      	movs	r2, #0
 8004054:	2110      	movs	r1, #16
 8004056:	4809      	ldr	r0, [pc, #36]	; (800407c <HardFault_Handler+0x10c>)
 8004058:	f002 fc78 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e002      	b.n	8004068 <HardFault_Handler+0xf8>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	3301      	adds	r3, #1
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <HardFault_Handler+0x110>)
 800406c:	4293      	cmp	r3, r2
 800406e:	ddf8      	ble.n	8004062 <HardFault_Handler+0xf2>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8004070:	2200      	movs	r2, #0
 8004072:	2120      	movs	r1, #32
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <HardFault_Handler+0x10c>)
 8004076:	f002 fc69 	bl	800694c <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 800407a:	e7a4      	b.n	8003fc6 <HardFault_Handler+0x56>
 800407c:	48000400 	.word	0x48000400
 8004080:	0007a11f 	.word	0x0007a11f

08004084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004088:	e7fe      	b.n	8004088 <MemManage_Handler+0x4>

0800408a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800408e:	e7fe      	b.n	800408e <BusFault_Handler+0x4>

08004090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004094:	e7fe      	b.n	8004094 <UsageFault_Handler+0x4>

08004096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <DMA1_Channel1_IRQHandler+0x10>)
 80040aa:	f002 fa05 	bl	80064b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000298 	.word	0x20000298

080040b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <CAN1_RX0_IRQHandler+0x10>)
 80040be:	f001 fdfa 	bl	8005cb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200002e0 	.word	0x200002e0

080040cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80040d2:	f004 fe68 	bl	8008da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20001ef8 	.word	0x20001ef8

080040e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return 1;
 80040e4:	2301      	movs	r3, #1
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_kill>:

int _kill(int pid, int sig)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040fa:	f00a fef9 	bl	800eef0 <__errno>
 80040fe:	4603      	mov	r3, r0
 8004100:	2216      	movs	r2, #22
 8004102:	601a      	str	r2, [r3, #0]
  return -1;
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_exit>:

void _exit (int status)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004118:	f04f 31ff 	mov.w	r1, #4294967295
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffe7 	bl	80040f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004122:	e7fe      	b.n	8004122 <_exit+0x12>

08004124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e00a      	b.n	800414c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004136:	f3af 8000 	nop.w
 800413a:	4601      	mov	r1, r0
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	60ba      	str	r2, [r7, #8]
 8004142:	b2ca      	uxtb	r2, r1
 8004144:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3301      	adds	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	dbf0      	blt.n	8004136 <_read+0x12>
  }

  return len;
 8004154:	687b      	ldr	r3, [r7, #4]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_close>:
  }
  return len;
}

int _close(int file)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004186:	605a      	str	r2, [r3, #4]
  return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_isatty>:

int _isatty(int file)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <_sbrk+0x5c>)
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <_sbrk+0x60>)
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <_sbrk+0x64>)
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <_sbrk+0x68>)
 80041e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <_sbrk+0x64>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d207      	bcs.n	8004208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f8:	f00a fe7a 	bl	800eef0 <__errno>
 80041fc:	4603      	mov	r3, r0
 80041fe:	220c      	movs	r2, #12
 8004200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	e009      	b.n	800421c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <_sbrk+0x64>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <_sbrk+0x64>)
 8004218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20010000 	.word	0x20010000
 8004228:	00000400 	.word	0x00000400
 800422c:	20001f44 	.word	0x20001f44
 8004230:	20004d28 	.word	0x20004d28

08004234 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <SystemInit+0x20>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	4a05      	ldr	r2, [pc, #20]	; (8004254 <SystemInit+0x20>)
 8004240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004290 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800425c:	f7ff ffea 	bl	8004234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004260:	480c      	ldr	r0, [pc, #48]	; (8004294 <LoopForever+0x6>)
  ldr r1, =_edata
 8004262:	490d      	ldr	r1, [pc, #52]	; (8004298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004264:	4a0d      	ldr	r2, [pc, #52]	; (800429c <LoopForever+0xe>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004268:	e002      	b.n	8004270 <LoopCopyDataInit>

0800426a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800426c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800426e:	3304      	adds	r3, #4

08004270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004274:	d3f9      	bcc.n	800426a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004278:	4c0a      	ldr	r4, [pc, #40]	; (80042a4 <LoopForever+0x16>)
  movs r3, #0
 800427a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800427c:	e001      	b.n	8004282 <LoopFillZerobss>

0800427e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800427e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004280:	3204      	adds	r2, #4

08004282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004284:	d3fb      	bcc.n	800427e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004286:	f00a fe39 	bl	800eefc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800428a:	f7fe f9c3 	bl	8002614 <main>

0800428e <LoopForever>:

LoopForever:
    b LoopForever
 800428e:	e7fe      	b.n	800428e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004290:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004298:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800429c:	08011e9c 	.word	0x08011e9c
  ldr r2, =_sbss
 80042a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80042a4:	20004d28 	.word	0x20004d28

080042a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042a8:	e7fe      	b.n	80042a8 <ADC1_IRQHandler>

080042aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b4:	2003      	movs	r0, #3
 80042b6:	f001 ffb2 	bl	800621e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ba:	200f      	movs	r0, #15
 80042bc:	f7ff fde4 	bl	8003e88 <HAL_InitTick>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	71fb      	strb	r3, [r7, #7]
 80042ca:	e001      	b.n	80042d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042cc:	f7ff fbc0 	bl	8003a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042d0:	79fb      	ldrb	r3, [r7, #7]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_IncTick+0x20>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_IncTick+0x24>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <HAL_IncTick+0x24>)
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000010 	.word	0x20000010
 8004300:	20001f48 	.word	0x20001f48

08004304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return uwTick;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_GetTick+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20001f48 	.word	0x20001f48

0800431c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004324:	f7ff ffee 	bl	8004304 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d005      	beq.n	8004342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_Delay+0x44>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004342:	bf00      	nop
 8004344:	f7ff ffde 	bl	8004304 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	d8f7      	bhi.n	8004344 <HAL_Delay+0x28>
  {
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000010 	.word	0x20000010

08004364 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3360      	adds	r3, #96	; 0x60
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <LL_ADC_SetOffset+0x44>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	03fff000 	.word	0x03fff000

08004414 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3360      	adds	r3, #96	; 0x60
 8004422:	461a      	mov	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3360      	adds	r3, #96	; 0x60
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	431a      	orrs	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3330      	adds	r3, #48	; 0x30
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	4413      	add	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	211f      	movs	r1, #31
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	401a      	ands	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0e9b      	lsrs	r3, r3, #26
 80044d4:	f003 011f 	and.w	r1, r3, #31
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	431a      	orrs	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3314      	adds	r3, #20
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0e5b      	lsrs	r3, r3, #25
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	0d1b      	lsrs	r3, r3, #20
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2107      	movs	r1, #7
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	401a      	ands	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	0d1b      	lsrs	r3, r3, #20
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	431a      	orrs	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0318 	and.w	r3, r3, #24
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004570:	40d9      	lsrs	r1, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	400b      	ands	r3, r1
 8004576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457a:	431a      	orrs	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	0007ffff 	.word	0x0007ffff

08004594 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80045a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6093      	str	r3, [r2, #8]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045cc:	d101      	bne.n	80045d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80045f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461c:	d101      	bne.n	8004622 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <LL_ADC_IsEnabled+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_IsEnabled+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800468e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d101      	bne.n	80046be <LL_ADC_REG_IsConversionOngoing+0x18>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d101      	bne.n	80046e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e12c      	b.n	8004968 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff f9bf 	bl	8003aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff3f 	bl	80045b8 <LL_ADC_IsDeepPowerDownEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ff25 	bl	8004594 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff5a 	bl	8004608 <LL_ADC_IsInternalRegulatorEnabled>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d115      	bne.n	8004786 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff ff3e 	bl	80045e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004764:	4b82      	ldr	r3, [pc, #520]	; (8004970 <HAL_ADC_Init+0x27c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	4a82      	ldr	r2, [pc, #520]	; (8004974 <HAL_ADC_Init+0x280>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	099b      	lsrs	r3, r3, #6
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004778:	e002      	b.n	8004780 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f9      	bne.n	800477a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff3c 	bl	8004608 <LL_ADC_IsInternalRegulatorEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff75 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 80047bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80c5 	bne.w	8004956 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 80c1 	bne.w	8004956 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047dc:	f043 0202 	orr.w	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff35 	bl	8004658 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047f4:	4860      	ldr	r0, [pc, #384]	; (8004978 <HAL_ADC_Init+0x284>)
 80047f6:	f7ff ff2f 	bl	8004658 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4619      	mov	r1, r3
 8004806:	485d      	ldr	r0, [pc, #372]	; (800497c <HAL_ADC_Init+0x288>)
 8004808:	f7ff fdac 	bl	8004364 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7e5b      	ldrb	r3, [r3, #25]
 8004810:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004816:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800481c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004822:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800482a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d106      	bne.n	8004848 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	3b01      	subs	r3, #1
 8004840:	045b      	lsls	r3, r3, #17
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	4b45      	ldr	r3, [pc, #276]	; (8004980 <HAL_ADC_Init+0x28c>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	430b      	orrs	r3, r1
 8004876:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff12 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 8004882:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff1f 	bl	80046cc <LL_ADC_INJ_IsConversionOngoing>
 800488e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d13d      	bne.n	8004912 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13a      	bne.n	8004912 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b8:	f023 0302 	bic.w	r3, r3, #2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	430b      	orrs	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d118      	bne.n	8004902 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048da:	f023 0304 	bic.w	r3, r3, #4
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048ec:	4311      	orrs	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048f2:	430a      	orrs	r2, r1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	611a      	str	r2, [r3, #16]
 8004900:	e007      	b.n	8004912 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10c      	bne.n	8004934 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	f023 010f 	bic.w	r1, r3, #15
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
 8004932:	e007      	b.n	8004944 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 020f 	bic.w	r2, r2, #15
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f023 0303 	bic.w	r3, r3, #3
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
 8004954:	e007      	b.n	8004966 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f043 0210 	orr.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004966:	7ffb      	ldrb	r3, [r7, #31]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000008 	.word	0x20000008
 8004974:	053e2d63 	.word	0x053e2d63
 8004978:	50040000 	.word	0x50040000
 800497c:	50040300 	.word	0x50040300
 8004980:	fff0c007 	.word	0xfff0c007

08004984 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fe86 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d167      	bne.n	8004a70 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_Start_DMA+0x2a>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e063      	b.n	8004a76 <HAL_ADC_Start_DMA+0xf2>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fc52 	bl	8005260 <ADC_Enable>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d14f      	bne.n	8004a66 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	f023 0206 	bic.w	r2, r3, #6
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58
 80049f2:	e002      	b.n	80049fa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <HAL_ADC_Start_DMA+0xfc>)
 8004a00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_ADC_Start_DMA+0x100>)
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_ADC_Start_DMA+0x104>)
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	221c      	movs	r2, #28
 8004a18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0210 	orr.w	r2, r2, #16
 8004a30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3340      	adds	r3, #64	; 0x40
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f001 fcd1 	bl	80063f8 <HAL_DMA_Start_IT>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fe0d 	bl	800467e <LL_ADC_REG_StartConversion>
 8004a64:	e006      	b.n	8004a74 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a6e:	e001      	b.n	8004a74 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
 8004a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	0800536d 	.word	0x0800536d
 8004a84:	08005445 	.word	0x08005445
 8004a88:	08005461 	.word	0x08005461

08004a8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b0b6      	sub	sp, #216	; 0xd8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x22>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e3b9      	b.n	8005236 <HAL_ADC_ConfigChannel+0x796>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fde9 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f040 839e 	bne.w	8005218 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d824      	bhi.n	8004b2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	3b02      	subs	r3, #2
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d81b      	bhi.n	8004b26 <HAL_ADC_ConfigChannel+0x86>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_ADC_ConfigChannel+0x54>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b0d 	.word	0x08004b0d
 8004afc:	08004b15 	.word	0x08004b15
 8004b00:	08004b1d 	.word	0x08004b1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	220c      	movs	r2, #12
 8004b08:	605a      	str	r2, [r3, #4]
          break;
 8004b0a:	e010      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2212      	movs	r2, #18
 8004b10:	605a      	str	r2, [r3, #4]
          break;
 8004b12:	e00c      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2218      	movs	r2, #24
 8004b18:	605a      	str	r2, [r3, #4]
          break;
 8004b1a:	e008      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b22:	605a      	str	r2, [r3, #4]
          break;
 8004b24:	e003      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2206      	movs	r2, #6
 8004b2a:	605a      	str	r2, [r3, #4]
          break;
 8004b2c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f7ff fcae 	bl	800449c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fdae 	bl	80046a6 <LL_ADC_REG_IsConversionOngoing>
 8004b4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fdba 	bl	80046cc <LL_ADC_INJ_IsConversionOngoing>
 8004b58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 81a6 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 81a1 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f7ff fcb9 	bl	80044f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d00a      	beq.n	8004bba <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6919      	ldr	r1, [r3, #16]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bb4:	f7ff fc0a 	bl	80043cc <LL_ADC_SetOffset>
 8004bb8:	e17b      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fc27 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x146>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fc1c 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	e01e      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x184>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fc11 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e004      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x19c>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	e018      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x1ce>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8004c60:	2320      	movs	r3, #32
 8004c62:	e004      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8004c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c68:	fab3 f383 	clz	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d106      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fbe0 	bl	8004440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fbc4 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x20c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fbb9 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	0e9b      	lsrs	r3, r3, #26
 8004ca6:	f003 021f 	and.w	r2, r3, #31
 8004caa:	e01e      	b.n	8004cea <HAL_ADC_ConfigChannel+0x24a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fbae 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004cda:	2320      	movs	r3, #32
 8004cdc:	e004      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8004cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x262>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	e018      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x294>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	e004      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d106      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fb7d 	bl	8004440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fb61 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x2d2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fb56 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	0e9b      	lsrs	r3, r3, #26
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	e01e      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x310>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2102      	movs	r1, #2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fb4b 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004da0:	2320      	movs	r3, #32
 8004da2:	e004      	b.n	8004dae <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x328>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0e9b      	lsrs	r3, r3, #26
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	e016      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x356>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004de8:	2320      	movs	r3, #32
 8004dea:	e004      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	fab3 f383 	clz	r3, r3
 8004df4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d106      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fb1c 	bl	8004440 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fb00 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x394>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2103      	movs	r1, #3
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff faf5 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	f003 021f 	and.w	r2, r3, #31
 8004e32:	e017      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x3c4>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2103      	movs	r1, #3
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff faea 	bl	8004414 <LL_ADC_GetOffsetChannel>
 8004e40:	4603      	mov	r3, r0
 8004e42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e4e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e003      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x3dc>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0e9b      	lsrs	r3, r3, #26
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	e011      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x400>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004e94:	2320      	movs	r3, #32
 8004e96:	e003      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2103      	movs	r1, #3
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fac7 	bl	8004440 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fbce 	bl	8004658 <LL_ADC_IsEnabled>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 8140 	bne.w	8005144 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6819      	ldr	r1, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f7ff fb3b 	bl	800454c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4a8f      	ldr	r2, [pc, #572]	; (8005118 <HAL_ADC_ConfigChannel+0x678>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 8131 	bne.w	8005144 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x46a>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	bf94      	ite	ls
 8004f02:	2301      	movls	r3, #1
 8004f04:	2300      	movhi	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e019      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x49e>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8004f22:	2320      	movs	r3, #32
 8004f24:	e003      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	bf94      	ite	ls
 8004f38:	2301      	movls	r3, #1
 8004f3a:	2300      	movhi	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d079      	beq.n	8005036 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d107      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x4be>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	0e9b      	lsrs	r3, r3, #26
 8004f54:	3301      	adds	r3, #1
 8004f56:	069b      	lsls	r3, r3, #26
 8004f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f5c:	e015      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x4ea>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004f76:	2320      	movs	r3, #32
 8004f78:	e003      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	069b      	lsls	r3, r3, #26
 8004f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x50a>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0e9b      	lsrs	r3, r3, #26
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	e017      	b.n	8004fda <HAL_ADC_ConfigChannel+0x53a>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	e003      	b.n	8004fce <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc8:	fab3 f383 	clz	r3, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	ea42 0103 	orr.w	r1, r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x560>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	0e9b      	lsrs	r3, r3, #26
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f003 021f 	and.w	r2, r3, #31
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	051b      	lsls	r3, r3, #20
 8004ffe:	e018      	b.n	8005032 <HAL_ADC_ConfigChannel+0x592>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	fa93 f3a3 	rbit	r3, r3
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005018:	2320      	movs	r3, #32
 800501a:	e003      	b.n	8005024 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3301      	adds	r3, #1
 8005026:	f003 021f 	and.w	r2, r3, #31
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005032:	430b      	orrs	r3, r1
 8005034:	e081      	b.n	800513a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x5b2>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	0e9b      	lsrs	r3, r3, #26
 8005048:	3301      	adds	r3, #1
 800504a:	069b      	lsls	r3, r3, #26
 800504c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005050:	e015      	b.n	800507e <HAL_ADC_ConfigChannel+0x5de>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e003      	b.n	8005076 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	3301      	adds	r3, #1
 8005078:	069b      	lsls	r3, r3, #26
 800507a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_ADC_ConfigChannel+0x5fe>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	0e9b      	lsrs	r3, r3, #26
 8005090:	3301      	adds	r3, #1
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	2101      	movs	r1, #1
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	e017      	b.n	80050ce <HAL_ADC_ConfigChannel+0x62e>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
  return result;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80050b6:	2320      	movs	r3, #32
 80050b8:	e003      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	ea42 0103 	orr.w	r1, r2, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10d      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x65a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	0e9b      	lsrs	r3, r3, #26
 80050e4:	3301      	adds	r3, #1
 80050e6:	f003 021f 	and.w	r2, r3, #31
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	3b1e      	subs	r3, #30
 80050f2:	051b      	lsls	r3, r3, #20
 80050f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050f8:	e01e      	b.n	8005138 <HAL_ADC_ConfigChannel+0x698>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	613b      	str	r3, [r7, #16]
  return result;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005112:	2320      	movs	r3, #32
 8005114:	e006      	b.n	8005124 <HAL_ADC_ConfigChannel+0x684>
 8005116:	bf00      	nop
 8005118:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	f003 021f 	and.w	r2, r3, #31
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	3b1e      	subs	r3, #30
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005138:	430b      	orrs	r3, r1
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	4619      	mov	r1, r3
 8005140:	f7ff f9d8 	bl	80044f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_ADC_ConfigChannel+0x7a0>)
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d06c      	beq.n	800522a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005150:	483c      	ldr	r0, [pc, #240]	; (8005244 <HAL_ADC_ConfigChannel+0x7a4>)
 8005152:	f7ff f92d 	bl	80043b0 <LL_ADC_GetCommonPathInternalCh>
 8005156:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <HAL_ADC_ConfigChannel+0x7a8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d127      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d121      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a35      	ldr	r2, [pc, #212]	; (800524c <HAL_ADC_ConfigChannel+0x7ac>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d157      	bne.n	800522a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800517a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800517e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005182:	4619      	mov	r1, r3
 8005184:	482f      	ldr	r0, [pc, #188]	; (8005244 <HAL_ADC_ConfigChannel+0x7a4>)
 8005186:	f7ff f900 	bl	800438a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <HAL_ADC_ConfigChannel+0x7b0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	099b      	lsrs	r3, r3, #6
 8005190:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_ADC_ConfigChannel+0x7b4>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051a4:	e002      	b.n	80051ac <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f9      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051b2:	e03a      	b.n	800522a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <HAL_ADC_ConfigChannel+0x7b8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x746>
 80051be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1f      	ldr	r2, [pc, #124]	; (800524c <HAL_ADC_ConfigChannel+0x7ac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d12a      	bne.n	800522a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051dc:	4619      	mov	r1, r3
 80051de:	4819      	ldr	r0, [pc, #100]	; (8005244 <HAL_ADC_ConfigChannel+0x7a4>)
 80051e0:	f7ff f8d3 	bl	800438a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e4:	e021      	b.n	800522a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_ADC_ConfigChannel+0x7bc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d11c      	bne.n	800522a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d116      	bne.n	800522a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_ADC_ConfigChannel+0x7ac>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d111      	bne.n	800522a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800520a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800520e:	4619      	mov	r1, r3
 8005210:	480c      	ldr	r0, [pc, #48]	; (8005244 <HAL_ADC_ConfigChannel+0x7a4>)
 8005212:	f7ff f8ba 	bl	800438a <LL_ADC_SetCommonPathInternalCh>
 8005216:	e008      	b.n	800522a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005232:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005236:	4618      	mov	r0, r3
 8005238:	37d8      	adds	r7, #216	; 0xd8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	80080000 	.word	0x80080000
 8005244:	50040300 	.word	0x50040300
 8005248:	c7520000 	.word	0xc7520000
 800524c:	50040000 	.word	0x50040000
 8005250:	20000008 	.word	0x20000008
 8005254:	053e2d63 	.word	0x053e2d63
 8005258:	cb840000 	.word	0xcb840000
 800525c:	80000001 	.word	0x80000001

08005260 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff f9f1 	bl	8004658 <LL_ADC_IsEnabled>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d169      	bne.n	8005350 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	4b36      	ldr	r3, [pc, #216]	; (800535c <ADC_Enable+0xfc>)
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f043 0210 	orr.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e055      	b.n	8005352 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff f9c0 	bl	8004630 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80052b0:	482b      	ldr	r0, [pc, #172]	; (8005360 <ADC_Enable+0x100>)
 80052b2:	f7ff f87d 	bl	80043b0 <LL_ADC_GetCommonPathInternalCh>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d013      	beq.n	80052e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <ADC_Enable+0x104>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	4a28      	ldr	r2, [pc, #160]	; (8005368 <ADC_Enable+0x108>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	4613      	mov	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80052da:	e002      	b.n	80052e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3b01      	subs	r3, #1
 80052e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052e8:	f7ff f80c 	bl	8004304 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ee:	e028      	b.n	8005342 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff f9af 	bl	8004658 <LL_ADC_IsEnabled>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f993 	bl	8004630 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800530a:	f7fe fffb 	bl	8004304 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d914      	bls.n	8005342 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d00d      	beq.n	8005342 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	f043 0210 	orr.w	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d1cf      	bne.n	80052f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	8000003f 	.word	0x8000003f
 8005360:	50040300 	.word	0x50040300
 8005364:	20000008 	.word	0x20000008
 8005368:	053e2d63 	.word	0x053e2d63

0800536c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d14b      	bne.n	800541e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d021      	beq.n	80053e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff f866 	bl	8004476 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d032      	beq.n	8005416 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12b      	bne.n	8005416 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11f      	bne.n	8005416 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
 80053e2:	e018      	b.n	8005416 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d111      	bne.n	8005416 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0201 	orr.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7fd fc50 	bl	8002cbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800541c:	e00e      	b.n	800543c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fb2e 	bl	8004a8c <HAL_ADC_ErrorCallback>
}
 8005430:	e004      	b.n	800543c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7fd fc28 	bl	8002ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fb00 	bl	8004a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0ed      	b.n	8005682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fe fb88 	bl	8003bc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054c8:	f7fe ff1c 	bl	8004304 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054ce:	e012      	b.n	80054f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054d0:	f7fe ff18 	bl	8004304 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b0a      	cmp	r3, #10
 80054dc:	d90b      	bls.n	80054f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2205      	movs	r2, #5
 80054ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e0c5      	b.n	8005682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0e5      	beq.n	80054d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0202 	bic.w	r2, r2, #2
 8005512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005514:	f7fe fef6 	bl	8004304 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800551a:	e012      	b.n	8005542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800551c:	f7fe fef2 	bl	8004304 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b0a      	cmp	r3, #10
 8005528:	d90b      	bls.n	8005542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2205      	movs	r2, #5
 800553a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e09f      	b.n	8005682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7e1b      	ldrb	r3, [r3, #24]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d108      	bne.n	800556a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e007      	b.n	800557a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	7e5b      	ldrb	r3, [r3, #25]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d108      	bne.n	8005594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e007      	b.n	80055a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7e9b      	ldrb	r3, [r3, #26]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d108      	bne.n	80055be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0220 	orr.w	r2, r2, #32
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e007      	b.n	80055ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0220 	bic.w	r2, r2, #32
 80055cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7edb      	ldrb	r3, [r3, #27]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d108      	bne.n	80055e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0210 	bic.w	r2, r2, #16
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e007      	b.n	80055f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0210 	orr.w	r2, r2, #16
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7f1b      	ldrb	r3, [r3, #28]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d108      	bne.n	8005612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0208 	orr.w	r2, r2, #8
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e007      	b.n	8005622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7f5b      	ldrb	r3, [r3, #29]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d108      	bne.n	800563c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0204 	orr.w	r2, r2, #4
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0204 	bic.w	r2, r2, #4
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	ea42 0103 	orr.w	r1, r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d003      	beq.n	80056b0 <HAL_CAN_ConfigFilter+0x26>
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	f040 80aa 	bne.w	8005804 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2201      	movs	r2, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d123      	bne.n	8005732 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	401a      	ands	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800570c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	3248      	adds	r2, #72	; 0x48
 8005712:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005726:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	3348      	adds	r3, #72	; 0x48
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	440b      	add	r3, r1
 8005730:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d122      	bne.n	8005780 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	431a      	orrs	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800575a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3248      	adds	r2, #72	; 0x48
 8005760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	3348      	adds	r3, #72	; 0x48
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	43db      	mvns	r3, r3
 8005792:	401a      	ands	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800579a:	e007      	b.n	80057ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80057c6:	e007      	b.n	80057d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d107      	bne.n	80057f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e006      	b.n	8005812 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d12e      	bne.n	8005890 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800584a:	f7fe fd5b 	bl	8004304 <HAL_GetTick>
 800584e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005850:	e012      	b.n	8005878 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005852:	f7fe fd57 	bl	8004304 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b0a      	cmp	r3, #10
 800585e:	d90b      	bls.n	8005878 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2205      	movs	r2, #5
 8005870:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e012      	b.n	800589e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e006      	b.n	800589e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b089      	sub	sp, #36	; 0x24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80058c4:	7ffb      	ldrb	r3, [r7, #31]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d003      	beq.n	80058d2 <HAL_CAN_AddTxMessage+0x2c>
 80058ca:	7ffb      	ldrb	r3, [r7, #31]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f040 80ad 	bne.w	8005a2c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8095 	beq.w	8005a1c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80058fc:	2201      	movs	r2, #1
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	409a      	lsls	r2, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	6809      	ldr	r1, [r1, #0]
 800591c:	431a      	orrs	r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3318      	adds	r3, #24
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	440b      	add	r3, r1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e00f      	b.n	800594a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005934:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800593e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3318      	adds	r3, #24
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	440b      	add	r3, r1
 8005948:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	3318      	adds	r3, #24
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	440b      	add	r3, r1
 800595a:	3304      	adds	r3, #4
 800595c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	7d1b      	ldrb	r3, [r3, #20]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d111      	bne.n	800598a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	3318      	adds	r3, #24
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	4413      	add	r3, r2
 8005972:	3304      	adds	r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3318      	adds	r3, #24
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	440b      	add	r3, r1
 8005986:	3304      	adds	r3, #4
 8005988:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3307      	adds	r3, #7
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	061a      	lsls	r2, r3, #24
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3306      	adds	r3, #6
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3305      	adds	r3, #5
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	4313      	orrs	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	3204      	adds	r2, #4
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	4610      	mov	r0, r2
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6811      	ldr	r1, [r2, #0]
 80059b2:	ea43 0200 	orr.w	r2, r3, r0
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	440b      	add	r3, r1
 80059bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80059c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3303      	adds	r3, #3
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	061a      	lsls	r2, r3, #24
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3302      	adds	r3, #2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	4313      	orrs	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	4610      	mov	r0, r2
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	6811      	ldr	r1, [r2, #0]
 80059e8:	ea43 0200 	orr.w	r2, r3, r0
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80059f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	3318      	adds	r3, #24
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	3318      	adds	r3, #24
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	440b      	add	r3, r1
 8005a16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e00e      	b.n	8005a3a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e006      	b.n	8005a3a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3724      	adds	r7, #36	; 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <HAL_CAN_GetRxMessage+0x24>
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	f040 80f3 	bne.w	8005c50 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10e      	bne.n	8005a8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d116      	bne.n	8005aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e0e7      	b.n	8005c5e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0d8      	b.n	8005c5e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	331b      	adds	r3, #27
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	4413      	add	r3, r2
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0204 	and.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	331b      	adds	r3, #27
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	4413      	add	r3, r2
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	0d5b      	lsrs	r3, r3, #21
 8005ada:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e00b      	b.n	8005afc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	331b      	adds	r3, #27
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	4413      	add	r3, r2
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	331b      	adds	r3, #27
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	4413      	add	r3, r2
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0202 	and.w	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	331b      	adds	r3, #27
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3304      	adds	r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	331b      	adds	r3, #27
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	4413      	add	r3, r2
 8005b36:	3304      	adds	r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	331b      	adds	r3, #27
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3304      	adds	r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	0a1a      	lsrs	r2, r3, #8
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	0c1a      	lsrs	r2, r3, #16
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	0e1a      	lsrs	r2, r3, #24
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	3303      	adds	r3, #3
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	0a1a      	lsrs	r2, r3, #8
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	3305      	adds	r3, #5
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	0c1a      	lsrs	r2, r3, #16
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	3306      	adds	r3, #6
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	0e1a      	lsrs	r2, r3, #24
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	3307      	adds	r3, #7
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0220 	orr.w	r2, r2, #32
 8005c38:	60da      	str	r2, [r3, #12]
 8005c3a:	e007      	b.n	8005c4c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0220 	orr.w	r2, r2, #32
 8005c4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e006      	b.n	8005c5e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d002      	beq.n	8005c88 <HAL_CAN_ActivateNotification+0x1e>
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d109      	bne.n	8005c9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6959      	ldr	r1, [r3, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e006      	b.n	8005caa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b08a      	sub	sp, #40	; 0x28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d07c      	beq.n	8005df6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d023      	beq.n	8005d4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fd f8f7 	bl	8002f0c <HAL_CAN_TxMailbox0CompleteCallback>
 8005d1e:	e016      	b.n	8005d4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
 8005d32:	e00c      	b.n	8005d4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
 8005d46:	e002      	b.n	8005d4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f96b 	bl	8006024 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d024      	beq.n	8005da2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fd f8db 	bl	8002f28 <HAL_CAN_TxMailbox1CompleteCallback>
 8005d72:	e016      	b.n	8005da2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	e00c      	b.n	8005da2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	e002      	b.n	8005da2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f94b 	bl	8006038 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d024      	beq.n	8005df6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005db4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fd f8bf 	bl	8002f44 <HAL_CAN_TxMailbox2CompleteCallback>
 8005dc6:	e016      	b.n	8005df6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	e00c      	b.n	8005df6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e002      	b.n	8005df6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f92b 	bl	800604c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2210      	movs	r2, #16
 8005e18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2208      	movs	r2, #8
 8005e34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f912 	bl	8006060 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fd f815 	bl	8002e84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2208      	movs	r2, #8
 8005e98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8ea 	bl	8006074 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fd f81d 	bl	8002ef8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8d4 	bl	8006088 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f8cd 	bl	800609c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d07b      	beq.n	8006004 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d072      	beq.n	8005ffc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f043 0304 	orr.w	r3, r3, #4
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d043      	beq.n	8005ffc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d03e      	beq.n	8005ffc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d02b      	beq.n	8005fe0 <HAL_CAN_IRQHandler+0x32a>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d82e      	bhi.n	8005fea <HAL_CAN_IRQHandler+0x334>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d022      	beq.n	8005fd6 <HAL_CAN_IRQHandler+0x320>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d82a      	bhi.n	8005fea <HAL_CAN_IRQHandler+0x334>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d019      	beq.n	8005fcc <HAL_CAN_IRQHandler+0x316>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d826      	bhi.n	8005fea <HAL_CAN_IRQHandler+0x334>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d010      	beq.n	8005fc2 <HAL_CAN_IRQHandler+0x30c>
 8005fa0:	2b30      	cmp	r3, #48	; 0x30
 8005fa2:	d822      	bhi.n	8005fea <HAL_CAN_IRQHandler+0x334>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d002      	beq.n	8005fae <HAL_CAN_IRQHandler+0x2f8>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d005      	beq.n	8005fb8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005fac:	e01d      	b.n	8005fea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fb6:	e019      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	f043 0310 	orr.w	r3, r3, #16
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fc0:	e014      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	f043 0320 	orr.w	r3, r3, #32
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fca:	e00f      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fd4:	e00a      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fde:	e005      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005fe8:	e000      	b.n	8005fec <HAL_CAN_IRQHandler+0x336>
            break;
 8005fea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ffa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2204      	movs	r2, #4
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f84a 	bl	80060b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800601c:	bf00      	nop
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e0:	4013      	ands	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060f6:	4a04      	ldr	r2, [pc, #16]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	60d3      	str	r3, [r2, #12]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <__NVIC_GetPriorityGrouping+0x18>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f003 0307 	and.w	r3, r3, #7
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000ed00 	.word	0xe000ed00

08006128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db0b      	blt.n	8006152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	4907      	ldr	r1, [pc, #28]	; (8006160 <__NVIC_EnableIRQ+0x38>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2001      	movs	r0, #1
 800614a:	fa00 f202 	lsl.w	r2, r0, r2
 800614e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e100 	.word	0xe000e100

08006164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006174:	2b00      	cmp	r3, #0
 8006176:	db0a      	blt.n	800618e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	490c      	ldr	r1, [pc, #48]	; (80061b0 <__NVIC_SetPriority+0x4c>)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	440b      	add	r3, r1
 8006188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800618c:	e00a      	b.n	80061a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4908      	ldr	r1, [pc, #32]	; (80061b4 <__NVIC_SetPriority+0x50>)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	3b04      	subs	r3, #4
 800619c:	0112      	lsls	r2, r2, #4
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	440b      	add	r3, r1
 80061a2:	761a      	strb	r2, [r3, #24]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000e100 	.word	0xe000e100
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f1c3 0307 	rsb	r3, r3, #7
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf28      	it	cs
 80061d6:	2304      	movcs	r3, #4
 80061d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3304      	adds	r3, #4
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d902      	bls.n	80061e8 <NVIC_EncodePriority+0x30>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3b03      	subs	r3, #3
 80061e6:	e000      	b.n	80061ea <NVIC_EncodePriority+0x32>
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	401a      	ands	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	f04f 31ff 	mov.w	r1, #4294967295
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43d9      	mvns	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006210:	4313      	orrs	r3, r2
         );
}
 8006212:	4618      	mov	r0, r3
 8006214:	3724      	adds	r7, #36	; 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ff4c 	bl	80060c4 <__NVIC_SetPriorityGrouping>
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006246:	f7ff ff61 	bl	800610c <__NVIC_GetPriorityGrouping>
 800624a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	6978      	ldr	r0, [r7, #20]
 8006252:	f7ff ffb1 	bl	80061b8 <NVIC_EncodePriority>
 8006256:	4602      	mov	r2, r0
 8006258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff80 	bl	8006164 <__NVIC_SetPriority>
}
 8006264:	bf00      	nop
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff54 	bl	8006128 <__NVIC_EnableIRQ>
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e098      	b.n	80063cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b4d      	ldr	r3, [pc, #308]	; (80063d8 <HAL_DMA_Init+0x150>)
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d80f      	bhi.n	80062c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <HAL_DMA_Init+0x154>)
 80062ae:	4413      	add	r3, r2
 80062b0:	4a4b      	ldr	r2, [pc, #300]	; (80063e0 <HAL_DMA_Init+0x158>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	009a      	lsls	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a48      	ldr	r2, [pc, #288]	; (80063e4 <HAL_DMA_Init+0x15c>)
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
 80062c4:	e00e      	b.n	80062e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <HAL_DMA_Init+0x160>)
 80062ce:	4413      	add	r3, r2
 80062d0:	4a43      	ldr	r2, [pc, #268]	; (80063e0 <HAL_DMA_Init+0x158>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	009a      	lsls	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a42      	ldr	r2, [pc, #264]	; (80063ec <HAL_DMA_Init+0x164>)
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633e:	d039      	beq.n	80063b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_Init+0x15c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d11a      	bne.n	8006380 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800634a:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <HAL_DMA_Init+0x168>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f003 031c 	and.w	r3, r3, #28
 8006356:	210f      	movs	r1, #15
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	4924      	ldr	r1, [pc, #144]	; (80063f0 <HAL_DMA_Init+0x168>)
 8006360:	4013      	ands	r3, r2
 8006362:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006364:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <HAL_DMA_Init+0x168>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	f003 031c 	and.w	r3, r3, #28
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	491d      	ldr	r1, [pc, #116]	; (80063f0 <HAL_DMA_Init+0x168>)
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	e019      	b.n	80063b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <HAL_DMA_Init+0x16c>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	f003 031c 	and.w	r3, r3, #28
 800638c:	210f      	movs	r1, #15
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	4917      	ldr	r1, [pc, #92]	; (80063f4 <HAL_DMA_Init+0x16c>)
 8006396:	4013      	ands	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800639a:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <HAL_DMA_Init+0x16c>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	f003 031c 	and.w	r3, r3, #28
 80063aa:	fa01 f303 	lsl.w	r3, r1, r3
 80063ae:	4911      	ldr	r1, [pc, #68]	; (80063f4 <HAL_DMA_Init+0x16c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40020407 	.word	0x40020407
 80063dc:	bffdfff8 	.word	0xbffdfff8
 80063e0:	cccccccd 	.word	0xcccccccd
 80063e4:	40020000 	.word	0x40020000
 80063e8:	bffdfbf8 	.word	0xbffdfbf8
 80063ec:	40020400 	.word	0x40020400
 80063f0:	400200a8 	.word	0x400200a8
 80063f4:	400204a8 	.word	0x400204a8

080063f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Start_IT+0x20>
 8006414:	2302      	movs	r3, #2
 8006416:	e04b      	b.n	80064b0 <HAL_DMA_Start_IT+0xb8>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d13a      	bne.n	80064a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f8e0 	bl	8006616 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 020e 	orr.w	r2, r2, #14
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e00f      	b.n	8006490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 020a 	orr.w	r2, r2, #10
 800648e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e005      	b.n	80064ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
 80064ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	f003 031c 	and.w	r3, r3, #28
 80064d8:	2204      	movs	r2, #4
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d026      	beq.n	8006532 <HAL_DMA_IRQHandler+0x7a>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d021      	beq.n	8006532 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	f003 021c 	and.w	r2, r3, #28
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2104      	movs	r1, #4
 800651a:	fa01 f202 	lsl.w	r2, r1, r2
 800651e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b00      	cmp	r3, #0
 8006526:	d071      	beq.n	800660c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006530:	e06c      	b.n	800660c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	f003 031c 	and.w	r3, r3, #28
 800653a:	2202      	movs	r2, #2
 800653c:	409a      	lsls	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02e      	beq.n	80065a4 <HAL_DMA_IRQHandler+0xec>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d029      	beq.n	80065a4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 020a 	bic.w	r2, r2, #10
 800656c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f003 021c 	and.w	r2, r3, #28
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2102      	movs	r1, #2
 8006584:	fa01 f202 	lsl.w	r2, r1, r2
 8006588:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d038      	beq.n	800660c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80065a2:	e033      	b.n	800660c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f003 031c 	and.w	r3, r3, #28
 80065ac:	2208      	movs	r2, #8
 80065ae:	409a      	lsls	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02a      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d025      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 020e 	bic.w	r2, r2, #14
 80065d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f003 021c 	and.w	r2, r3, #28
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	2101      	movs	r1, #1
 80065e0:	fa01 f202 	lsl.w	r2, r1, r2
 80065e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800660c:	bf00      	nop
 800660e:	bf00      	nop
}
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	f003 021c 	and.w	r2, r3, #28
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b10      	cmp	r3, #16
 8006646:	d108      	bne.n	800665a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006658:	e007      	b.n	800666a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	60da      	str	r2, [r3, #12]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006686:	e148      	b.n	800691a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	2101      	movs	r1, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 813a 	beq.w	8006914 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d005      	beq.n	80066b8 <HAL_GPIO_Init+0x40>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d130      	bne.n	800671a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	2203      	movs	r2, #3
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43db      	mvns	r3, r3
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4013      	ands	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ee:	2201      	movs	r2, #1
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0201 	and.w	r2, r3, #1
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d017      	beq.n	8006756 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	2203      	movs	r2, #3
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	43db      	mvns	r3, r3
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4013      	ands	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d123      	bne.n	80067aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	08da      	lsrs	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3208      	adds	r2, #8
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	220f      	movs	r2, #15
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	08da      	lsrs	r2, r3, #3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3208      	adds	r2, #8
 80067a4:	6939      	ldr	r1, [r7, #16]
 80067a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	2203      	movs	r2, #3
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	43db      	mvns	r3, r3
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4013      	ands	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f003 0203 	and.w	r2, r3, #3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8094 	beq.w	8006914 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ec:	4b52      	ldr	r3, [pc, #328]	; (8006938 <HAL_GPIO_Init+0x2c0>)
 80067ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f0:	4a51      	ldr	r2, [pc, #324]	; (8006938 <HAL_GPIO_Init+0x2c0>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6613      	str	r3, [r2, #96]	; 0x60
 80067f8:	4b4f      	ldr	r3, [pc, #316]	; (8006938 <HAL_GPIO_Init+0x2c0>)
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006804:	4a4d      	ldr	r2, [pc, #308]	; (800693c <HAL_GPIO_Init+0x2c4>)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	3302      	adds	r3, #2
 800680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	220f      	movs	r2, #15
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	43db      	mvns	r3, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4013      	ands	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800682e:	d00d      	beq.n	800684c <HAL_GPIO_Init+0x1d4>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a43      	ldr	r2, [pc, #268]	; (8006940 <HAL_GPIO_Init+0x2c8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <HAL_GPIO_Init+0x1d0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a42      	ldr	r2, [pc, #264]	; (8006944 <HAL_GPIO_Init+0x2cc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d101      	bne.n	8006844 <HAL_GPIO_Init+0x1cc>
 8006840:	2302      	movs	r3, #2
 8006842:	e004      	b.n	800684e <HAL_GPIO_Init+0x1d6>
 8006844:	2307      	movs	r3, #7
 8006846:	e002      	b.n	800684e <HAL_GPIO_Init+0x1d6>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <HAL_GPIO_Init+0x1d6>
 800684c:	2300      	movs	r3, #0
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f002 0203 	and.w	r2, r2, #3
 8006854:	0092      	lsls	r2, r2, #2
 8006856:	4093      	lsls	r3, r2
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800685e:	4937      	ldr	r1, [pc, #220]	; (800693c <HAL_GPIO_Init+0x2c4>)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	3302      	adds	r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800686c:	4b36      	ldr	r3, [pc, #216]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	43db      	mvns	r3, r3
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006890:	4a2d      	ldr	r2, [pc, #180]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006896:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	43db      	mvns	r3, r3
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4013      	ands	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068ba:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80068c0:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4013      	ands	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068e4:	4a18      	ldr	r2, [pc, #96]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80068ea:	4b17      	ldr	r3, [pc, #92]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	43db      	mvns	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800690e:	4a0e      	ldr	r2, [pc, #56]	; (8006948 <HAL_GPIO_Init+0x2d0>)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f aeaf 	bne.w	8006688 <HAL_GPIO_Init+0x10>
  }
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40021000 	.word	0x40021000
 800693c:	40010000 	.word	0x40010000
 8006940:	48000400 	.word	0x48000400
 8006944:	48000800 	.word	0x48000800
 8006948:	40010400 	.word	0x40010400

0800694c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	807b      	strh	r3, [r7, #2]
 8006958:	4613      	mov	r3, r2
 800695a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800695c:	787b      	ldrb	r3, [r7, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006968:	e002      	b.n	8006970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800696a:	887a      	ldrh	r2, [r7, #2]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e081      	b.n	8006a92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fd f96e 	bl	8003c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2224      	movs	r2, #36	; 0x24
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	e006      	b.n	8006a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d104      	bne.n	8006a16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69d9      	ldr	r1, [r3, #28]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	817b      	strh	r3, [r7, #10]
 8006aac:	4613      	mov	r3, r2
 8006aae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	f040 80da 	bne.w	8006c72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_I2C_Master_Transmit+0x30>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0d3      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ad4:	f7fd fc16 	bl	8004304 <HAL_GetTick>
 8006ad8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2319      	movs	r3, #25
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fb4e 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0be      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2210      	movs	r2, #16
 8006b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	893a      	ldrh	r2, [r7, #8]
 8006b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2bff      	cmp	r3, #255	; 0xff
 8006b26:	d90e      	bls.n	8006b46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	8979      	ldrh	r1, [r7, #10]
 8006b36:	4b51      	ldr	r3, [pc, #324]	; (8006c7c <HAL_I2C_Master_Transmit+0x1e0>)
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fd44 	bl	80075cc <I2C_TransferConfig>
 8006b44:	e06c      	b.n	8006c20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	8979      	ldrh	r1, [r7, #10]
 8006b58:	4b48      	ldr	r3, [pc, #288]	; (8006c7c <HAL_I2C_Master_Transmit+0x1e0>)
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fd33 	bl	80075cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006b66:	e05b      	b.n	8006c20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	6a39      	ldr	r1, [r7, #32]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fb4b 	bl	8007208 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e07b      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d034      	beq.n	8006c20 <HAL_I2C_Master_Transmit+0x184>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d130      	bne.n	8006c20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fadd 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e04d      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2bff      	cmp	r3, #255	; 0xff
 8006be0:	d90e      	bls.n	8006c00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	8979      	ldrh	r1, [r7, #10]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fce7 	bl	80075cc <I2C_TransferConfig>
 8006bfe:	e00f      	b.n	8006c20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	8979      	ldrh	r1, [r7, #10]
 8006c12:	2300      	movs	r3, #0
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fcd6 	bl	80075cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d19e      	bne.n	8006b68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	6a39      	ldr	r1, [r7, #32]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fb2a 	bl	8007288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e01a      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2220      	movs	r2, #32
 8006c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <HAL_I2C_Master_Transmit+0x1e4>)
 8006c52:	400b      	ands	r3, r1
 8006c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
  }
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	80002000 	.word	0x80002000
 8006c80:	fe00e800 	.word	0xfe00e800

08006c84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	460b      	mov	r3, r1
 8006c92:	817b      	strh	r3, [r7, #10]
 8006c94:	4613      	mov	r3, r2
 8006c96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	f040 80db 	bne.w	8006e5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_I2C_Master_Receive+0x30>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e0d4      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cbc:	f7fd fb22 	bl	8004304 <HAL_GetTick>
 8006cc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2319      	movs	r3, #25
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fa5a 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0bf      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2222      	movs	r2, #34	; 0x22
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2210      	movs	r2, #16
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	893a      	ldrh	r2, [r7, #8]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2bff      	cmp	r3, #255	; 0xff
 8006d0e:	d90e      	bls.n	8006d2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	22ff      	movs	r2, #255	; 0xff
 8006d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	8979      	ldrh	r1, [r7, #10]
 8006d1e:	4b52      	ldr	r3, [pc, #328]	; (8006e68 <HAL_I2C_Master_Receive+0x1e4>)
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fc50 	bl	80075cc <I2C_TransferConfig>
 8006d2c:	e06d      	b.n	8006e0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	8979      	ldrh	r1, [r7, #10]
 8006d40:	4b49      	ldr	r3, [pc, #292]	; (8006e68 <HAL_I2C_Master_Receive+0x1e4>)
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fc3f 	bl	80075cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006d4e:	e05c      	b.n	8006e0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	6a39      	ldr	r1, [r7, #32]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fad3 	bl	8007300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e07c      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d034      	beq.n	8006e0a <HAL_I2C_Master_Receive+0x186>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d130      	bne.n	8006e0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	2200      	movs	r2, #0
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f9e8 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e04d      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2bff      	cmp	r3, #255	; 0xff
 8006dca:	d90e      	bls.n	8006dea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	8979      	ldrh	r1, [r7, #10]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fbf2 	bl	80075cc <I2C_TransferConfig>
 8006de8:	e00f      	b.n	8006e0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	8979      	ldrh	r1, [r7, #10]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fbe1 	bl	80075cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d19d      	bne.n	8006d50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	6a39      	ldr	r1, [r7, #32]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fa35 	bl	8007288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e01a      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6859      	ldr	r1, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <HAL_I2C_Master_Receive+0x1e8>)
 8006e3c:	400b      	ands	r3, r1
 8006e3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e000      	b.n	8006e5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	80002400 	.word	0x80002400
 8006e6c:	fe00e800 	.word	0xfe00e800

08006e70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	f040 80f9 	bne.w	800708a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_I2C_Mem_Write+0x34>
 8006e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0ed      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_I2C_Mem_Write+0x4e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0e6      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ec6:	f7fd fa1d 	bl	8004304 <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2319      	movs	r3, #25
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f955 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0d1      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2221      	movs	r2, #33	; 0x21
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2240      	movs	r2, #64	; 0x40
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f10:	88f8      	ldrh	r0, [r7, #6]
 8006f12:	893a      	ldrh	r2, [r7, #8]
 8006f14:	8979      	ldrh	r1, [r7, #10]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f8b9 	bl	8007098 <I2C_RequestMemoryWrite>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0a9      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d90e      	bls.n	8006f60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	8979      	ldrh	r1, [r7, #10]
 8006f50:	2300      	movs	r3, #0
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fb37 	bl	80075cc <I2C_TransferConfig>
 8006f5e:	e00f      	b.n	8006f80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	8979      	ldrh	r1, [r7, #10]
 8006f72:	2300      	movs	r3, #0
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fb26 	bl	80075cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f93f 	bl	8007208 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e07b      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d034      	beq.n	8007038 <HAL_I2C_Mem_Write+0x1c8>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d130      	bne.n	8007038 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2180      	movs	r1, #128	; 0x80
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f8d1 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e04d      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2bff      	cmp	r3, #255	; 0xff
 8006ff8:	d90e      	bls.n	8007018 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	22ff      	movs	r2, #255	; 0xff
 8006ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007004:	b2da      	uxtb	r2, r3
 8007006:	8979      	ldrh	r1, [r7, #10]
 8007008:	2300      	movs	r3, #0
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fadb 	bl	80075cc <I2C_TransferConfig>
 8007016:	e00f      	b.n	8007038 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007026:	b2da      	uxtb	r2, r3
 8007028:	8979      	ldrh	r1, [r7, #10]
 800702a:	2300      	movs	r3, #0
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 faca 	bl	80075cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d19e      	bne.n	8006f80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f91e 	bl	8007288 <I2C_WaitOnSTOPFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e01a      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2220      	movs	r2, #32
 800705c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <HAL_I2C_Mem_Write+0x224>)
 800706a:	400b      	ands	r3, r1
 800706c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800708a:	2302      	movs	r3, #2
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	817b      	strh	r3, [r7, #10]
 80070aa:	460b      	mov	r3, r1
 80070ac:	813b      	strh	r3, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	8979      	ldrh	r1, [r7, #10]
 80070b8:	4b20      	ldr	r3, [pc, #128]	; (800713c <I2C_RequestMemoryWrite+0xa4>)
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fa83 	bl	80075cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f89c 	bl	8007208 <I2C_WaitOnTXISFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e02c      	b.n	8007134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	629a      	str	r2, [r3, #40]	; 0x28
 80070ea:	e015      	b.n	8007118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070ec:	893b      	ldrh	r3, [r7, #8]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	69b9      	ldr	r1, [r7, #24]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f882 	bl	8007208 <I2C_WaitOnTXISFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e012      	b.n	8007134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800710e:	893b      	ldrh	r3, [r7, #8]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2200      	movs	r2, #0
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f830 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	80002000 	.word	0x80002000

08007140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d103      	bne.n	800715e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d007      	beq.n	800717c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	619a      	str	r2, [r3, #24]
  }
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007198:	e022      	b.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d01e      	beq.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a2:	f7fd f8af 	bl	8004304 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d302      	bcc.n	80071b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d113      	bne.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e00f      	b.n	8007200 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d0cd      	beq.n	800719a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007214:	e02c      	b.n	8007270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f8ea 	bl	80073f4 <I2C_IsErrorOccurred>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e02a      	b.n	8007280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d01e      	beq.n	8007270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fd f867 	bl	8004304 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d113      	bne.n	8007270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e007      	b.n	8007280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d1cb      	bne.n	8007216 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007294:	e028      	b.n	80072e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f8aa 	bl	80073f4 <I2C_IsErrorOccurred>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e026      	b.n	80072f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	f7fd f82b 	bl	8004304 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	f043 0220 	orr.w	r2, r3, #32
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e007      	b.n	80072f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d1cf      	bne.n	8007296 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800730c:	e064      	b.n	80073d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f86e 	bl	80073f4 <I2C_IsErrorOccurred>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e062      	b.n	80073e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b20      	cmp	r3, #32
 800732e:	d138      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b04      	cmp	r3, #4
 800733c:	d105      	bne.n	800734a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e04e      	b.n	80073e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b10      	cmp	r3, #16
 8007356:	d107      	bne.n	8007368 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2210      	movs	r2, #16
 800735e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2204      	movs	r2, #4
 8007364:	645a      	str	r2, [r3, #68]	; 0x44
 8007366:	e002      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2220      	movs	r2, #32
 8007374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6859      	ldr	r1, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007382:	400b      	ands	r3, r1
 8007384:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e022      	b.n	80073e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fc ffaf 	bl	8004304 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10f      	bne.n	80073d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	f043 0220 	orr.w	r2, r3, #32
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e007      	b.n	80073e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d193      	bne.n	800730e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	fe00e800 	.word	0xfe00e800

080073f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d075      	beq.n	800750c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2210      	movs	r2, #16
 8007426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007428:	e056      	b.n	80074d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d052      	beq.n	80074d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fc ff67 	bl	8004304 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <I2C_IsErrorOccurred+0x54>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d147      	bne.n	80074d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800745a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746a:	d12e      	bne.n	80074ca <I2C_IsErrorOccurred+0xd6>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007472:	d02a      	beq.n	80074ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007474:	7cfb      	ldrb	r3, [r7, #19]
 8007476:	2b20      	cmp	r3, #32
 8007478:	d027      	beq.n	80074ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800748a:	f7fc ff3b 	bl	8004304 <HAL_GetTick>
 800748e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007490:	e01b      	b.n	80074ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007492:	f7fc ff37 	bl	8004304 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b19      	cmp	r3, #25
 800749e:	d914      	bls.n	80074ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d1dc      	bne.n	8007492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d003      	beq.n	80074ee <I2C_IsErrorOccurred+0xfa>
 80074e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d09d      	beq.n	800742a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d103      	bne.n	80074fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2220      	movs	r2, #32
 80074fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	f043 0304 	orr.w	r3, r3, #4
 8007504:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800752e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	f043 0308 	orr.w	r3, r3, #8
 8007546:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800757a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01c      	beq.n	80075bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fddc 	bl	8007140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <I2C_IsErrorOccurred+0x1d4>)
 8007594:	400b      	ands	r3, r1
 8007596:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	431a      	orrs	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3728      	adds	r7, #40	; 0x28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	fe00e800 	.word	0xfe00e800

080075cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	817b      	strh	r3, [r7, #10]
 80075da:	4613      	mov	r3, r2
 80075dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075e4:	7a7b      	ldrb	r3, [r7, #9]
 80075e6:	041b      	lsls	r3, r3, #16
 80075e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	0d5b      	lsrs	r3, r3, #21
 8007606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800760a:	4b08      	ldr	r3, [pc, #32]	; (800762c <I2C_TransferConfig+0x60>)
 800760c:	430b      	orrs	r3, r1
 800760e:	43db      	mvns	r3, r3
 8007610:	ea02 0103 	and.w	r1, r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	03ff63ff 	.word	0x03ff63ff

08007630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b20      	cmp	r3, #32
 8007644:	d138      	bne.n	80076b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764c:	2b01      	cmp	r3, #1
 800764e:	d101      	bne.n	8007654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007650:	2302      	movs	r3, #2
 8007652:	e032      	b.n	80076ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2224      	movs	r2, #36	; 0x24
 8007660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d139      	bne.n	8007750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e033      	b.n	8007752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2224      	movs	r2, #36	; 0x24
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e000      	b.n	8007752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007750:	2302      	movs	r3, #2
  }
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <HAL_PWREx_GetVoltageRange+0x18>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800776c:	4618      	mov	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40007000 	.word	0x40007000

0800777c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778a:	d130      	bne.n	80077ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007798:	d038      	beq.n	800780c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800779a:	4b20      	ldr	r3, [pc, #128]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077aa:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2232      	movs	r2, #50	; 0x32
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	0c9b      	lsrs	r3, r3, #18
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077c0:	e002      	b.n	80077c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077c8:	4b14      	ldr	r3, [pc, #80]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d4:	d102      	bne.n	80077dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f2      	bne.n	80077c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e8:	d110      	bne.n	800780c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e00f      	b.n	800780e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	d007      	beq.n	800780c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007804:	4a05      	ldr	r2, [pc, #20]	; (800781c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800780a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40007000 	.word	0x40007000
 8007820:	20000008 	.word	0x20000008
 8007824:	431bde83 	.word	0x431bde83

08007828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d102      	bne.n	800783c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f000 bc02 	b.w	8008040 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800783c:	4b96      	ldr	r3, [pc, #600]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 030c 	and.w	r3, r3, #12
 8007844:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007846:	4b94      	ldr	r3, [pc, #592]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 80e4 	beq.w	8007a26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <HAL_RCC_OscConfig+0x4c>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	f040 808b 	bne.w	8007982 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b01      	cmp	r3, #1
 8007870:	f040 8087 	bne.w	8007982 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007874:	4b88      	ldr	r3, [pc, #544]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_RCC_OscConfig+0x64>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e3d9      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1a      	ldr	r2, [r3, #32]
 8007890:	4b81      	ldr	r3, [pc, #516]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_RCC_OscConfig+0x7e>
 800789c:	4b7e      	ldr	r3, [pc, #504]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078a4:	e005      	b.n	80078b2 <HAL_RCC_OscConfig+0x8a>
 80078a6:	4b7c      	ldr	r3, [pc, #496]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d223      	bcs.n	80078fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fe1e 	bl	80084fc <RCC_SetFlashLatencyFromMSIRange>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e3ba      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078ca:	4b73      	ldr	r3, [pc, #460]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a72      	ldr	r2, [pc, #456]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078d0:	f043 0308 	orr.w	r3, r3, #8
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b70      	ldr	r3, [pc, #448]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	496d      	ldr	r1, [pc, #436]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078e8:	4b6b      	ldr	r3, [pc, #428]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	4968      	ldr	r1, [pc, #416]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	604b      	str	r3, [r1, #4]
 80078fc:	e025      	b.n	800794a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078fe:	4b66      	ldr	r3, [pc, #408]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a65      	ldr	r2, [pc, #404]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007904:	f043 0308 	orr.w	r3, r3, #8
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	4b63      	ldr	r3, [pc, #396]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	4960      	ldr	r1, [pc, #384]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007918:	4313      	orrs	r3, r2
 800791a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800791c:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	495b      	ldr	r1, [pc, #364]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800792c:	4313      	orrs	r3, r2
 800792e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fdde 	bl	80084fc <RCC_SetFlashLatencyFromMSIRange>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e37a      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800794a:	f000 fcb5 	bl	80082b8 <HAL_RCC_GetSysClockFreq>
 800794e:	4602      	mov	r2, r0
 8007950:	4b51      	ldr	r3, [pc, #324]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	4950      	ldr	r1, [pc, #320]	; (8007a9c <HAL_RCC_OscConfig+0x274>)
 800795c:	5ccb      	ldrb	r3, [r1, r3]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	fa22 f303 	lsr.w	r3, r2, r3
 8007966:	4a4e      	ldr	r2, [pc, #312]	; (8007aa0 <HAL_RCC_OscConfig+0x278>)
 8007968:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800796a:	4b4e      	ldr	r3, [pc, #312]	; (8007aa4 <HAL_RCC_OscConfig+0x27c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7fc fa8a 	bl	8003e88 <HAL_InitTick>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d052      	beq.n	8007a24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	e35e      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d032      	beq.n	80079f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800798a:	4b43      	ldr	r3, [pc, #268]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a42      	ldr	r2, [pc, #264]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007996:	f7fc fcb5 	bl	8004304 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800799e:	f7fc fcb1 	bl	8004304 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e347      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80079b0:	4b39      	ldr	r3, [pc, #228]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079bc:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a35      	ldr	r2, [pc, #212]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079c2:	f043 0308 	orr.w	r3, r3, #8
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	4b33      	ldr	r3, [pc, #204]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	4930      	ldr	r1, [pc, #192]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079da:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	492b      	ldr	r1, [pc, #172]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	604b      	str	r3, [r1, #4]
 80079ee:	e01a      	b.n	8007a26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079f0:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079fc:	f7fc fc82 	bl	8004304 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a04:	f7fc fc7e 	bl	8004304 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e314      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f0      	bne.n	8007a04 <HAL_RCC_OscConfig+0x1dc>
 8007a22:	e000      	b.n	8007a26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d073      	beq.n	8007b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d005      	beq.n	8007a44 <HAL_RCC_OscConfig+0x21c>
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b0c      	cmp	r3, #12
 8007a3c:	d10e      	bne.n	8007a5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d10b      	bne.n	8007a5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a44:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d063      	beq.n	8007b18 <HAL_RCC_OscConfig+0x2f0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d15f      	bne.n	8007b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e2f1      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d106      	bne.n	8007a74 <HAL_RCC_OscConfig+0x24c>
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e025      	b.n	8007ac0 <HAL_RCC_OscConfig+0x298>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a7c:	d114      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x280>
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a02      	ldr	r2, [pc, #8]	; (8007a98 <HAL_RCC_OscConfig+0x270>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	e013      	b.n	8007ac0 <HAL_RCC_OscConfig+0x298>
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	08011ad4 	.word	0x08011ad4
 8007aa0:	20000008 	.word	0x20000008
 8007aa4:	2000000c 	.word	0x2000000c
 8007aa8:	4ba0      	ldr	r3, [pc, #640]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a9f      	ldr	r2, [pc, #636]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	4b9d      	ldr	r3, [pc, #628]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a9c      	ldr	r2, [pc, #624]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d013      	beq.n	8007af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fc fc1c 	bl	8004304 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fc fc18 	bl	8004304 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e2ae      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ae2:	4b92      	ldr	r3, [pc, #584]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0f0      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x2a8>
 8007aee:	e014      	b.n	8007b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af0:	f7fc fc08 	bl	8004304 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007af8:	f7fc fc04 	bl	8004304 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b64      	cmp	r3, #100	; 0x64
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e29a      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b0a:	4b88      	ldr	r3, [pc, #544]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x2d0>
 8007b16:	e000      	b.n	8007b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d060      	beq.n	8007be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d005      	beq.n	8007b38 <HAL_RCC_OscConfig+0x310>
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b0c      	cmp	r3, #12
 8007b30:	d119      	bne.n	8007b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d116      	bne.n	8007b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b38:	4b7c      	ldr	r3, [pc, #496]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_RCC_OscConfig+0x328>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e277      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b50:	4b76      	ldr	r3, [pc, #472]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	061b      	lsls	r3, r3, #24
 8007b5e:	4973      	ldr	r1, [pc, #460]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b64:	e040      	b.n	8007be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d023      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b6e:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a6e      	ldr	r2, [pc, #440]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7a:	f7fc fbc3 	bl	8004304 <HAL_GetTick>
 8007b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b80:	e008      	b.n	8007b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b82:	f7fc fbbf 	bl	8004304 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e255      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b94:	4b65      	ldr	r3, [pc, #404]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0f0      	beq.n	8007b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ba0:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	061b      	lsls	r3, r3, #24
 8007bae:	495f      	ldr	r1, [pc, #380]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	604b      	str	r3, [r1, #4]
 8007bb4:	e018      	b.n	8007be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bb6:	4b5d      	ldr	r3, [pc, #372]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a5c      	ldr	r2, [pc, #368]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc2:	f7fc fb9f 	bl	8004304 <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bca:	f7fc fb9b 	bl	8004304 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e231      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bdc:	4b53      	ldr	r3, [pc, #332]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f0      	bne.n	8007bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d03c      	beq.n	8007c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01c      	beq.n	8007c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bfc:	4b4b      	ldr	r3, [pc, #300]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c02:	4a4a      	ldr	r2, [pc, #296]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0c:	f7fc fb7a 	bl	8004304 <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c14:	f7fc fb76 	bl	8004304 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e20c      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c26:	4b41      	ldr	r3, [pc, #260]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0ef      	beq.n	8007c14 <HAL_RCC_OscConfig+0x3ec>
 8007c34:	e01b      	b.n	8007c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c3c:	4a3b      	ldr	r2, [pc, #236]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c46:	f7fc fb5d 	bl	8004304 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c4e:	f7fc fb59 	bl	8004304 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e1ef      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c60:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1ef      	bne.n	8007c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 80a6 	beq.w	8007dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007c80:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10d      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	4a26      	ldr	r2, [pc, #152]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c96:	6593      	str	r3, [r2, #88]	; 0x58
 8007c98:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca8:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <HAL_RCC_OscConfig+0x508>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d118      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <HAL_RCC_OscConfig+0x508>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <HAL_RCC_OscConfig+0x508>)
 8007cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc0:	f7fc fb20 	bl	8004304 <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc8:	f7fc fb1c 	bl	8004304 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e1b2      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cda:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <HAL_RCC_OscConfig+0x508>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0f0      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d108      	bne.n	8007d00 <HAL_RCC_OscConfig+0x4d8>
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	4a0d      	ldr	r2, [pc, #52]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cfe:	e029      	b.n	8007d54 <HAL_RCC_OscConfig+0x52c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b05      	cmp	r3, #5
 8007d06:	d115      	bne.n	8007d34 <HAL_RCC_OscConfig+0x50c>
 8007d08:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0e:	4a07      	ldr	r2, [pc, #28]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007d10:	f043 0304 	orr.w	r3, r3, #4
 8007d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1e:	4a03      	ldr	r2, [pc, #12]	; (8007d2c <HAL_RCC_OscConfig+0x504>)
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d28:	e014      	b.n	8007d54 <HAL_RCC_OscConfig+0x52c>
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	40007000 	.word	0x40007000
 8007d34:	4b9a      	ldr	r3, [pc, #616]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3a:	4a99      	ldr	r2, [pc, #612]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007d3c:	f023 0301 	bic.w	r3, r3, #1
 8007d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d44:	4b96      	ldr	r3, [pc, #600]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4a:	4a95      	ldr	r2, [pc, #596]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007d4c:	f023 0304 	bic.w	r3, r3, #4
 8007d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d5c:	f7fc fad2 	bl	8004304 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d62:	e00a      	b.n	8007d7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d64:	f7fc face 	bl	8004304 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e162      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d7a:	4b89      	ldr	r3, [pc, #548]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0ed      	beq.n	8007d64 <HAL_RCC_OscConfig+0x53c>
 8007d88:	e015      	b.n	8007db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8a:	f7fc fabb 	bl	8004304 <HAL_GetTick>
 8007d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d90:	e00a      	b.n	8007da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fc fab7 	bl	8004304 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e14b      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007da8:	4b7d      	ldr	r3, [pc, #500]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1ed      	bne.n	8007d92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007db6:	7ffb      	ldrb	r3, [r7, #31]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d105      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dbc:	4b78      	ldr	r3, [pc, #480]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc0:	4a77      	ldr	r2, [pc, #476]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d03c      	beq.n	8007e4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01c      	beq.n	8007e16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ddc:	4b70      	ldr	r3, [pc, #448]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007de2:	4a6f      	ldr	r2, [pc, #444]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dec:	f7fc fa8a 	bl	8004304 <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007df4:	f7fc fa86 	bl	8004304 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e11c      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e06:	4b66      	ldr	r3, [pc, #408]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0ef      	beq.n	8007df4 <HAL_RCC_OscConfig+0x5cc>
 8007e14:	e01b      	b.n	8007e4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e16:	4b62      	ldr	r3, [pc, #392]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e1c:	4a60      	ldr	r2, [pc, #384]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e26:	f7fc fa6d 	bl	8004304 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e2e:	f7fc fa69 	bl	8004304 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0ff      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e40:	4b57      	ldr	r3, [pc, #348]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1ef      	bne.n	8007e2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80f3 	beq.w	800803e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	f040 80c9 	bne.w	8007ff4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007e62:	4b4f      	ldr	r3, [pc, #316]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f003 0203 	and.w	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d12c      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	3b01      	subs	r3, #1
 8007e82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d123      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d11b      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d113      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	085b      	lsrs	r3, r3, #1
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d109      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d06b      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b0c      	cmp	r3, #12
 8007ed4:	d062      	beq.n	8007f9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ed6:	4b32      	ldr	r3, [pc, #200]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0ac      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007ee6:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a2d      	ldr	r2, [pc, #180]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ef0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ef2:	f7fc fa07 	bl	8004304 <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007efa:	f7fc fa03 	bl	8004304 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e099      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f0c:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f0      	bne.n	8007efa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f18:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <HAL_RCC_OscConfig+0x77c>)
 8007f1e:	4013      	ands	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f28:	3a01      	subs	r2, #1
 8007f2a:	0112      	lsls	r2, r2, #4
 8007f2c:	4311      	orrs	r1, r2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f32:	0212      	lsls	r2, r2, #8
 8007f34:	4311      	orrs	r1, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f3a:	0852      	lsrs	r2, r2, #1
 8007f3c:	3a01      	subs	r2, #1
 8007f3e:	0552      	lsls	r2, r2, #21
 8007f40:	4311      	orrs	r1, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f46:	0852      	lsrs	r2, r2, #1
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	0652      	lsls	r2, r2, #25
 8007f4c:	4311      	orrs	r1, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f52:	06d2      	lsls	r2, r2, #27
 8007f54:	430a      	orrs	r2, r1
 8007f56:	4912      	ldr	r1, [pc, #72]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007f5c:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a0f      	ldr	r2, [pc, #60]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f74:	f7fc f9c6 	bl	8004304 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f7c:	f7fc f9c2 	bl	8004304 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e058      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f8e:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <HAL_RCC_OscConfig+0x778>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0f0      	beq.n	8007f7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f9a:	e050      	b.n	800803e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e04f      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fa8:	4b27      	ldr	r3, [pc, #156]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d144      	bne.n	800803e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007fb4:	4b24      	ldr	r3, [pc, #144]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a23      	ldr	r2, [pc, #140]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fc0:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4a20      	ldr	r2, [pc, #128]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fcc:	f7fc f99a 	bl	8004304 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fc f996 	bl	8004304 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e02c      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe6:	4b18      	ldr	r3, [pc, #96]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x7ac>
 8007ff2:	e024      	b.n	800803e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b0c      	cmp	r3, #12
 8007ff8:	d01f      	beq.n	800803a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8008000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fc f97d 	bl	8004304 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800800e:	f7fc f979 	bl	8004304 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e00f      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008020:	4b09      	ldr	r3, [pc, #36]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f0      	bne.n	800800e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	4905      	ldr	r1, [pc, #20]	; (8008048 <HAL_RCC_OscConfig+0x820>)
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <HAL_RCC_OscConfig+0x824>)
 8008034:	4013      	ands	r3, r2
 8008036:	60cb      	str	r3, [r1, #12]
 8008038:	e001      	b.n	800803e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021000 	.word	0x40021000
 800804c:	feeefffc 	.word	0xfeeefffc

08008050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e0e7      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008064:	4b75      	ldr	r3, [pc, #468]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d910      	bls.n	8008094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008072:	4b72      	ldr	r3, [pc, #456]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f023 0207 	bic.w	r2, r3, #7
 800807a:	4970      	ldr	r1, [pc, #448]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	4313      	orrs	r3, r2
 8008080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008082:	4b6e      	ldr	r3, [pc, #440]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0cf      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d010      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	4b66      	ldr	r3, [pc, #408]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d908      	bls.n	80080c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b0:	4b63      	ldr	r3, [pc, #396]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	4960      	ldr	r1, [pc, #384]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d04c      	beq.n	8008168 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d107      	bne.n	80080e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d6:	4b5a      	ldr	r3, [pc, #360]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d121      	bne.n	8008126 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e0a6      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d107      	bne.n	80080fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ee:	4b54      	ldr	r3, [pc, #336]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d115      	bne.n	8008126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e09a      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008106:	4b4e      	ldr	r3, [pc, #312]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e08e      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008116:	4b4a      	ldr	r3, [pc, #296]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e086      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008126:	4b46      	ldr	r3, [pc, #280]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f023 0203 	bic.w	r2, r3, #3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4943      	ldr	r1, [pc, #268]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008134:	4313      	orrs	r3, r2
 8008136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008138:	f7fc f8e4 	bl	8004304 <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813e:	e00a      	b.n	8008156 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008140:	f7fc f8e0 	bl	8004304 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	; 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e06e      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	4b3a      	ldr	r3, [pc, #232]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 020c 	and.w	r2, r3, #12
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	429a      	cmp	r2, r3
 8008166:	d1eb      	bne.n	8008140 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	4b31      	ldr	r3, [pc, #196]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008180:	429a      	cmp	r2, r3
 8008182:	d208      	bcs.n	8008196 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008184:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	492b      	ldr	r1, [pc, #172]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008192:	4313      	orrs	r3, r2
 8008194:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d210      	bcs.n	80081c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a4:	4b25      	ldr	r3, [pc, #148]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f023 0207 	bic.w	r2, r3, #7
 80081ac:	4923      	ldr	r1, [pc, #140]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b4:	4b21      	ldr	r3, [pc, #132]	; (800823c <HAL_RCC_ClockConfig+0x1ec>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d001      	beq.n	80081c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e036      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	4918      	ldr	r1, [pc, #96]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	4910      	ldr	r1, [pc, #64]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 8008200:	4313      	orrs	r3, r2
 8008202:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008204:	f000 f858 	bl	80082b8 <HAL_RCC_GetSysClockFreq>
 8008208:	4602      	mov	r2, r0
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <HAL_RCC_ClockConfig+0x1f0>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	490b      	ldr	r1, [pc, #44]	; (8008244 <HAL_RCC_ClockConfig+0x1f4>)
 8008216:	5ccb      	ldrb	r3, [r1, r3]
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <HAL_RCC_ClockConfig+0x1f8>)
 8008222:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <HAL_RCC_ClockConfig+0x1fc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f7fb fe2d 	bl	8003e88 <HAL_InitTick>
 800822e:	4603      	mov	r3, r0
 8008230:	72fb      	strb	r3, [r7, #11]

  return status;
 8008232:	7afb      	ldrb	r3, [r7, #11]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40022000 	.word	0x40022000
 8008240:	40021000 	.word	0x40021000
 8008244:	08011ad4 	.word	0x08011ad4
 8008248:	20000008 	.word	0x20000008
 800824c:	2000000c 	.word	0x2000000c

08008250 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	; 0x28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800825c:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <HAL_RCC_MCOConfig+0x64>)
 800825e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008260:	4a14      	ldr	r2, [pc, #80]	; (80082b4 <HAL_RCC_MCOConfig+0x64>)
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008268:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <HAL_RCC_MCOConfig+0x64>)
 800826a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800827a:	2302      	movs	r3, #2
 800827c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800827e:	2302      	movs	r3, #2
 8008280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008286:	2300      	movs	r3, #0
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800828a:	f107 0314 	add.w	r3, r7, #20
 800828e:	4619      	mov	r1, r3
 8008290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008294:	f7fe f9f0 	bl	8006678 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <HAL_RCC_MCOConfig+0x64>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	4903      	ldr	r1, [pc, #12]	; (80082b4 <HAL_RCC_MCOConfig+0x64>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	608b      	str	r3, [r1, #8]
}
 80082ac:	bf00      	nop
 80082ae:	3728      	adds	r7, #40	; 0x28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40021000 	.word	0x40021000

080082b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b089      	sub	sp, #36	; 0x24
 80082bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082c6:	4b3e      	ldr	r3, [pc, #248]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 030c 	and.w	r3, r3, #12
 80082ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082d0:	4b3b      	ldr	r3, [pc, #236]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_GetSysClockFreq+0x34>
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b0c      	cmp	r3, #12
 80082e4:	d121      	bne.n	800832a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d11e      	bne.n	800832a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80082ec:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80082f8:	4b31      	ldr	r3, [pc, #196]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80082fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e005      	b.n	8008314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008308:	4b2d      	ldr	r3, [pc, #180]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	091b      	lsrs	r3, r3, #4
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008314:	4a2b      	ldr	r2, [pc, #172]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008328:	e00a      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b04      	cmp	r3, #4
 800832e:	d102      	bne.n	8008336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008330:	4b25      	ldr	r3, [pc, #148]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	e004      	b.n	8008340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d101      	bne.n	8008340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <HAL_RCC_GetSysClockFreq+0x114>)
 800833e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b0c      	cmp	r3, #12
 8008344:	d134      	bne.n	80083b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008346:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d003      	beq.n	800835e <HAL_RCC_GetSysClockFreq+0xa6>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b03      	cmp	r3, #3
 800835a:	d003      	beq.n	8008364 <HAL_RCC_GetSysClockFreq+0xac>
 800835c:	e005      	b.n	800836a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800835e:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008360:	617b      	str	r3, [r7, #20]
      break;
 8008362:	e005      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008364:	4b19      	ldr	r3, [pc, #100]	; (80083cc <HAL_RCC_GetSysClockFreq+0x114>)
 8008366:	617b      	str	r3, [r7, #20]
      break;
 8008368:	e002      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	617b      	str	r3, [r7, #20]
      break;
 800836e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	091b      	lsrs	r3, r3, #4
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	3301      	adds	r3, #1
 800837c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	0a1b      	lsrs	r3, r3, #8
 8008384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	fb03 f202 	mul.w	r2, r3, r2
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	fbb2 f3f3 	udiv	r3, r2, r3
 8008394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	0e5b      	lsrs	r3, r3, #25
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	3301      	adds	r3, #1
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80083b0:	69bb      	ldr	r3, [r7, #24]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3724      	adds	r7, #36	; 0x24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40021000 	.word	0x40021000
 80083c4:	08011aec 	.word	0x08011aec
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	007a1200 	.word	0x007a1200

080083d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000008 	.word	0x20000008

080083e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80083ec:	f7ff fff0 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4904      	ldr	r1, [pc, #16]	; (8008410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80083fe:	5ccb      	ldrb	r3, [r1, r3]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008408:	4618      	mov	r0, r3
 800840a:	bd80      	pop	{r7, pc}
 800840c:	40021000 	.word	0x40021000
 8008410:	08011ae4 	.word	0x08011ae4

08008414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008418:	f7ff ffda 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 800841c:	4602      	mov	r2, r0
 800841e:	4b06      	ldr	r3, [pc, #24]	; (8008438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	0adb      	lsrs	r3, r3, #11
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <HAL_RCC_GetPCLK2Freq+0x28>)
 800842a:	5ccb      	ldrb	r3, [r1, r3]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40021000 	.word	0x40021000
 800843c:	08011ae4 	.word	0x08011ae4

08008440 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220f      	movs	r2, #15
 800844e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008450:	4b12      	ldr	r3, [pc, #72]	; (800849c <HAL_RCC_GetClockConfig+0x5c>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 0203 	and.w	r2, r3, #3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <HAL_RCC_GetClockConfig+0x5c>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008468:	4b0c      	ldr	r3, [pc, #48]	; (800849c <HAL_RCC_GetClockConfig+0x5c>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008474:	4b09      	ldr	r3, [pc, #36]	; (800849c <HAL_RCC_GetClockConfig+0x5c>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	08db      	lsrs	r3, r3, #3
 800847a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <HAL_RCC_GetClockConfig+0x60>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0207 	and.w	r2, r3, #7
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	601a      	str	r2, [r3, #0]
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	40021000 	.word	0x40021000
 80084a0:	40022000 	.word	0x40022000

080084a4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <HAL_RCC_EnableCSS+0x1c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a04      	ldr	r2, [pc, #16]	; (80084c0 <HAL_RCC_EnableCSS+0x1c>)
 80084ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084b2:	6013      	str	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40021000 	.word	0x40021000

080084c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80084c8:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d4:	d105      	bne.n	80084e2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80084d6:	f000 f809 	bl	80084ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80084da:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80084dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084e0:	621a      	str	r2, [r3, #32]
  }
}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000

080084ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008508:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008514:	f7ff f924 	bl	8007760 <HAL_PWREx_GetVoltageRange>
 8008518:	6178      	str	r0, [r7, #20]
 800851a:	e014      	b.n	8008546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800851c:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008526:	6593      	str	r3, [r2, #88]	; 0x58
 8008528:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008534:	f7ff f914 	bl	8007760 <HAL_PWREx_GetVoltageRange>
 8008538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800853c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853e:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854c:	d10b      	bne.n	8008566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b80      	cmp	r3, #128	; 0x80
 8008552:	d919      	bls.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2ba0      	cmp	r3, #160	; 0xa0
 8008558:	d902      	bls.n	8008560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800855a:	2302      	movs	r3, #2
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	e013      	b.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008560:	2301      	movs	r3, #1
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	e010      	b.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b80      	cmp	r3, #128	; 0x80
 800856a:	d902      	bls.n	8008572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800856c:	2303      	movs	r3, #3
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	e00a      	b.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d102      	bne.n	800857e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008578:	2302      	movs	r3, #2
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	e004      	b.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b70      	cmp	r3, #112	; 0x70
 8008582:	d101      	bne.n	8008588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008584:	2301      	movs	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 0207 	bic.w	r2, r3, #7
 8008590:	4909      	ldr	r1, [pc, #36]	; (80085b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d001      	beq.n	80085aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40021000 	.word	0x40021000
 80085b8:	40022000 	.word	0x40022000

080085bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085c4:	2300      	movs	r3, #0
 80085c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085c8:	2300      	movs	r3, #0
 80085ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d031      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085e0:	d01a      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80085e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085e6:	d814      	bhi.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d009      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085f0:	d10f      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80085f2:	4b5d      	ldr	r3, [pc, #372]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	4a5c      	ldr	r2, [pc, #368]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085fe:	e00c      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3304      	adds	r3, #4
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f9ce 	bl	80089a8 <RCCEx_PLLSAI1_Config>
 800860c:	4603      	mov	r3, r0
 800860e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008610:	e003      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	74fb      	strb	r3, [r7, #19]
      break;
 8008616:	e000      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861a:	7cfb      	ldrb	r3, [r7, #19]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10b      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008620:	4b51      	ldr	r3, [pc, #324]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	494e      	ldr	r1, [pc, #312]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008636:	e001      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	7cfb      	ldrb	r3, [r7, #19]
 800863a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 809e 	beq.w	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800864a:	2300      	movs	r3, #0
 800864c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800864e:	4b46      	ldr	r3, [pc, #280]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008664:	4b40      	ldr	r3, [pc, #256]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008668:	4a3f      	ldr	r2, [pc, #252]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800866a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866e:	6593      	str	r3, [r2, #88]	; 0x58
 8008670:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800867c:	2301      	movs	r3, #1
 800867e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008680:	4b3a      	ldr	r3, [pc, #232]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a39      	ldr	r2, [pc, #228]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868c:	f7fb fe3a 	bl	8004304 <HAL_GetTick>
 8008690:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008692:	e009      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008694:	f7fb fe36 	bl	8004304 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d902      	bls.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	74fb      	strb	r3, [r7, #19]
        break;
 80086a6:	e005      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086a8:	4b30      	ldr	r3, [pc, #192]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0ef      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80086b4:	7cfb      	ldrb	r3, [r7, #19]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d15a      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086ba:	4b2b      	ldr	r3, [pc, #172]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01e      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d019      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086d6:	4b24      	ldr	r3, [pc, #144]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b21      	ldr	r3, [pc, #132]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e8:	4a1f      	ldr	r2, [pc, #124]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008702:	4a19      	ldr	r2, [pc, #100]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d016      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fb fdf6 	bl	8004304 <HAL_GetTick>
 8008718:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800871a:	e00b      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871c:	f7fb fdf2 	bl	8004304 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f241 3288 	movw	r2, #5000	; 0x1388
 800872a:	4293      	cmp	r3, r2
 800872c:	d902      	bls.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	74fb      	strb	r3, [r7, #19]
            break;
 8008732:	e006      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0ec      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008742:	7cfb      	ldrb	r3, [r7, #19]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800874a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008756:	4904      	ldr	r1, [pc, #16]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008758:	4313      	orrs	r3, r2
 800875a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800875e:	e009      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008760:	7cfb      	ldrb	r3, [r7, #19]
 8008762:	74bb      	strb	r3, [r7, #18]
 8008764:	e006      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008766:	bf00      	nop
 8008768:	40021000 	.word	0x40021000
 800876c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008770:	7cfb      	ldrb	r3, [r7, #19]
 8008772:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008774:	7c7b      	ldrb	r3, [r7, #17]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d105      	bne.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800877a:	4b8a      	ldr	r3, [pc, #552]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877e:	4a89      	ldr	r2, [pc, #548]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008784:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008792:	4b84      	ldr	r3, [pc, #528]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008798:	f023 0203 	bic.w	r2, r3, #3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	4980      	ldr	r1, [pc, #512]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087b4:	4b7b      	ldr	r3, [pc, #492]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ba:	f023 020c 	bic.w	r2, r3, #12
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	4978      	ldr	r1, [pc, #480]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087d6:	4b73      	ldr	r3, [pc, #460]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	496f      	ldr	r1, [pc, #444]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087f8:	4b6a      	ldr	r3, [pc, #424]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	4967      	ldr	r1, [pc, #412]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800881a:	4b62      	ldr	r3, [pc, #392]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	495e      	ldr	r1, [pc, #376]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800883c:	4b59      	ldr	r3, [pc, #356]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008842:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	4956      	ldr	r1, [pc, #344]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800885e:	4b51      	ldr	r3, [pc, #324]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	494d      	ldr	r1, [pc, #308]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d028      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008880:	4b48      	ldr	r3, [pc, #288]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	4945      	ldr	r1, [pc, #276]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800889e:	d106      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088a0:	4b40      	ldr	r3, [pc, #256]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4a3f      	ldr	r2, [pc, #252]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088aa:	60d3      	str	r3, [r2, #12]
 80088ac:	e011      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088b6:	d10c      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	2101      	movs	r1, #1
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f872 	bl	80089a8 <RCCEx_PLLSAI1_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80088c8:	7cfb      	ldrb	r3, [r7, #19]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80088ce:	7cfb      	ldrb	r3, [r7, #19]
 80088d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d028      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ec:	492d      	ldr	r1, [pc, #180]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088fc:	d106      	bne.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088fe:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	4a28      	ldr	r2, [pc, #160]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008908:	60d3      	str	r3, [r2, #12]
 800890a:	e011      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008914:	d10c      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3304      	adds	r3, #4
 800891a:	2101      	movs	r1, #1
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f843 	bl	80089a8 <RCCEx_PLLSAI1_Config>
 8008922:	4603      	mov	r3, r0
 8008924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008926:	7cfb      	ldrb	r3, [r7, #19]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800892c:	7cfb      	ldrb	r3, [r7, #19]
 800892e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01c      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008942:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894a:	4916      	ldr	r1, [pc, #88]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800895a:	d10c      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	2102      	movs	r1, #2
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f820 	bl	80089a8 <RCCEx_PLLSAI1_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800896c:	7cfb      	ldrb	r3, [r7, #19]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008972:	7cfb      	ldrb	r3, [r7, #19]
 8008974:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008990:	4904      	ldr	r1, [pc, #16]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008998:	7cbb      	ldrb	r3, [r7, #18]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40021000 	.word	0x40021000

080089a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089b6:	4b74      	ldr	r3, [pc, #464]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d018      	beq.n	80089f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80089c2:	4b71      	ldr	r3, [pc, #452]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0203 	and.w	r2, r3, #3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d10d      	bne.n	80089ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
       ||
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80089da:	4b6b      	ldr	r3, [pc, #428]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
       ||
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d047      	beq.n	8008a7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
 80089f2:	e044      	b.n	8008a7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d018      	beq.n	8008a2e <RCCEx_PLLSAI1_Config+0x86>
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d825      	bhi.n	8008a4c <RCCEx_PLLSAI1_Config+0xa4>
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d002      	beq.n	8008a0a <RCCEx_PLLSAI1_Config+0x62>
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d009      	beq.n	8008a1c <RCCEx_PLLSAI1_Config+0x74>
 8008a08:	e020      	b.n	8008a4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a0a:	4b5f      	ldr	r3, [pc, #380]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11d      	bne.n	8008a52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a1a:	e01a      	b.n	8008a52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a1c:	4b5a      	ldr	r3, [pc, #360]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d116      	bne.n	8008a56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a2c:	e013      	b.n	8008a56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a2e:	4b56      	ldr	r3, [pc, #344]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10f      	bne.n	8008a5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a3a:	4b53      	ldr	r3, [pc, #332]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a4a:	e006      	b.n	8008a5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a50:	e004      	b.n	8008a5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a52:	bf00      	nop
 8008a54:	e002      	b.n	8008a5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a56:	bf00      	nop
 8008a58:	e000      	b.n	8008a5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10d      	bne.n	8008a7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a62:	4b49      	ldr	r3, [pc, #292]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	430b      	orrs	r3, r1
 8008a78:	4943      	ldr	r1, [pc, #268]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d17c      	bne.n	8008b7e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a84:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a90:	f7fb fc38 	bl	8004304 <HAL_GetTick>
 8008a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a96:	e009      	b.n	8008aac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a98:	f7fb fc34 	bl	8004304 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d902      	bls.n	8008aac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8008aaa:	e005      	b.n	8008ab8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008aac:	4b36      	ldr	r3, [pc, #216]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1ef      	bne.n	8008a98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d15f      	bne.n	8008b7e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d110      	bne.n	8008ae6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ac4:	4b30      	ldr	r3, [pc, #192]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008acc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6892      	ldr	r2, [r2, #8]
 8008ad4:	0211      	lsls	r1, r2, #8
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	68d2      	ldr	r2, [r2, #12]
 8008ada:	06d2      	lsls	r2, r2, #27
 8008adc:	430a      	orrs	r2, r1
 8008ade:	492a      	ldr	r1, [pc, #168]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	610b      	str	r3, [r1, #16]
 8008ae4:	e027      	b.n	8008b36 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d112      	bne.n	8008b12 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008aec:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008af4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6892      	ldr	r2, [r2, #8]
 8008afc:	0211      	lsls	r1, r2, #8
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6912      	ldr	r2, [r2, #16]
 8008b02:	0852      	lsrs	r2, r2, #1
 8008b04:	3a01      	subs	r2, #1
 8008b06:	0552      	lsls	r2, r2, #21
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	491f      	ldr	r1, [pc, #124]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]
 8008b10:	e011      	b.n	8008b36 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6892      	ldr	r2, [r2, #8]
 8008b22:	0211      	lsls	r1, r2, #8
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6952      	ldr	r2, [r2, #20]
 8008b28:	0852      	lsrs	r2, r2, #1
 8008b2a:	3a01      	subs	r2, #1
 8008b2c:	0652      	lsls	r2, r2, #25
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	4915      	ldr	r1, [pc, #84]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b42:	f7fb fbdf 	bl	8004304 <HAL_GetTick>
 8008b46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b48:	e009      	b.n	8008b5e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b4a:	f7fb fbdb 	bl	8004304 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d902      	bls.n	8008b5e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b5c:	e005      	b.n	8008b6a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0ef      	beq.n	8008b4a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b70:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	4903      	ldr	r1, [pc, #12]	; (8008b88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40021000 	.word	0x40021000

08008b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e049      	b.n	8008c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fb f8be 	bl	8003d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f000 fc10 	bl	80093f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d001      	beq.n	8008c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e03b      	b.n	8008ccc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a19      	ldr	r2, [pc, #100]	; (8008cd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d009      	beq.n	8008c8a <HAL_TIM_Base_Start_IT+0x4e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7e:	d004      	beq.n	8008c8a <HAL_TIM_Base_Start_IT+0x4e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a15      	ldr	r2, [pc, #84]	; (8008cdc <HAL_TIM_Base_Start_IT+0xa0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d115      	bne.n	8008cb6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <HAL_TIM_Base_Start_IT+0xa4>)
 8008c92:	4013      	ands	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d015      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x8c>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca2:	d011      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb4:	e008      	b.n	8008cc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0201 	orr.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e000      	b.n	8008cca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	00010007 	.word	0x00010007

08008ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e049      	b.n	8008d8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f841 	bl	8008d92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f000 fb64 	bl	80093f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d122      	bne.n	8008e02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d11b      	bne.n	8008e02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f06f 0202 	mvn.w	r2, #2
 8008dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fae2 	bl	80093b2 <HAL_TIM_IC_CaptureCallback>
 8008dee:	e005      	b.n	8008dfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fad4 	bl	800939e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fae5 	bl	80093c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d122      	bne.n	8008e56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 0304 	and.w	r3, r3, #4
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d11b      	bne.n	8008e56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f06f 0204 	mvn.w	r2, #4
 8008e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fab8 	bl	80093b2 <HAL_TIM_IC_CaptureCallback>
 8008e42:	e005      	b.n	8008e50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 faaa 	bl	800939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fabb 	bl	80093c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d122      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	d11b      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f06f 0208 	mvn.w	r2, #8
 8008e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f003 0303 	and.w	r3, r3, #3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa8e 	bl	80093b2 <HAL_TIM_IC_CaptureCallback>
 8008e96:	e005      	b.n	8008ea4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa80 	bl	800939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa91 	bl	80093c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	2b10      	cmp	r3, #16
 8008eb6:	d122      	bne.n	8008efe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d11b      	bne.n	8008efe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f06f 0210 	mvn.w	r2, #16
 8008ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa64 	bl	80093b2 <HAL_TIM_IC_CaptureCallback>
 8008eea:	e005      	b.n	8008ef8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fa56 	bl	800939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa67 	bl	80093c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d10e      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0201 	mvn.w	r2, #1
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7fa fae1 	bl	80034ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f34:	2b80      	cmp	r3, #128	; 0x80
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fe7d 	bl	8009c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f64:	d10e      	bne.n	8008f84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f70:	2b80      	cmp	r3, #128	; 0x80
 8008f72:	d107      	bne.n	8008f84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fe70 	bl	8009c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d10e      	bne.n	8008fb0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b40      	cmp	r3, #64	; 0x40
 8008f9e:	d107      	bne.n	8008fb0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa15 	bl	80093da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d10e      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f003 0320 	and.w	r3, r3, #32
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d107      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f06f 0220 	mvn.w	r2, #32
 8008fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fe30 	bl	8009c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e0ff      	b.n	8009202 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b14      	cmp	r3, #20
 800900e:	f200 80f0 	bhi.w	80091f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009012:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	0800906d 	.word	0x0800906d
 800901c:	080091f3 	.word	0x080091f3
 8009020:	080091f3 	.word	0x080091f3
 8009024:	080091f3 	.word	0x080091f3
 8009028:	080090ad 	.word	0x080090ad
 800902c:	080091f3 	.word	0x080091f3
 8009030:	080091f3 	.word	0x080091f3
 8009034:	080091f3 	.word	0x080091f3
 8009038:	080090ef 	.word	0x080090ef
 800903c:	080091f3 	.word	0x080091f3
 8009040:	080091f3 	.word	0x080091f3
 8009044:	080091f3 	.word	0x080091f3
 8009048:	0800912f 	.word	0x0800912f
 800904c:	080091f3 	.word	0x080091f3
 8009050:	080091f3 	.word	0x080091f3
 8009054:	080091f3 	.word	0x080091f3
 8009058:	08009171 	.word	0x08009171
 800905c:	080091f3 	.word	0x080091f3
 8009060:	080091f3 	.word	0x080091f3
 8009064:	080091f3 	.word	0x080091f3
 8009068:	080091b1 	.word	0x080091b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fa20 	bl	80094b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0208 	orr.w	r2, r2, #8
 8009086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	699a      	ldr	r2, [r3, #24]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0204 	bic.w	r2, r2, #4
 8009096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6999      	ldr	r1, [r3, #24]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	619a      	str	r2, [r3, #24]
      break;
 80090aa:	e0a5      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fa7c 	bl	80095b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6999      	ldr	r1, [r3, #24]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	021a      	lsls	r2, r3, #8
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	619a      	str	r2, [r3, #24]
      break;
 80090ec:	e084      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68b9      	ldr	r1, [r7, #8]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fad5 	bl	80096a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69da      	ldr	r2, [r3, #28]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0208 	orr.w	r2, r2, #8
 8009108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69da      	ldr	r2, [r3, #28]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0204 	bic.w	r2, r2, #4
 8009118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69d9      	ldr	r1, [r3, #28]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	61da      	str	r2, [r3, #28]
      break;
 800912c:	e064      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fb2d 	bl	8009794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69da      	ldr	r2, [r3, #28]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69d9      	ldr	r1, [r3, #28]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	021a      	lsls	r2, r3, #8
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	61da      	str	r2, [r3, #28]
      break;
 800916e:	e043      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fb6a 	bl	8009850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0208 	orr.w	r2, r2, #8
 800918a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0204 	bic.w	r2, r2, #4
 800919a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091ae:	e023      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fba2 	bl	8009900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	021a      	lsls	r2, r3, #8
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091f0:	e002      	b.n	80091f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
      break;
 80091f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop

0800920c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_TIM_ConfigClockSource+0x1c>
 8009224:	2302      	movs	r3, #2
 8009226:	e0b6      	b.n	8009396 <HAL_TIM_ConfigClockSource+0x18a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800924a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009264:	d03e      	beq.n	80092e4 <HAL_TIM_ConfigClockSource+0xd8>
 8009266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800926a:	f200 8087 	bhi.w	800937c <HAL_TIM_ConfigClockSource+0x170>
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	f000 8086 	beq.w	8009382 <HAL_TIM_ConfigClockSource+0x176>
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927a:	d87f      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 800927c:	2b70      	cmp	r3, #112	; 0x70
 800927e:	d01a      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0xaa>
 8009280:	2b70      	cmp	r3, #112	; 0x70
 8009282:	d87b      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 8009284:	2b60      	cmp	r3, #96	; 0x60
 8009286:	d050      	beq.n	800932a <HAL_TIM_ConfigClockSource+0x11e>
 8009288:	2b60      	cmp	r3, #96	; 0x60
 800928a:	d877      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 800928c:	2b50      	cmp	r3, #80	; 0x50
 800928e:	d03c      	beq.n	800930a <HAL_TIM_ConfigClockSource+0xfe>
 8009290:	2b50      	cmp	r3, #80	; 0x50
 8009292:	d873      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d058      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x13e>
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d86f      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 800929c:	2b30      	cmp	r3, #48	; 0x30
 800929e:	d064      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x15e>
 80092a0:	2b30      	cmp	r3, #48	; 0x30
 80092a2:	d86b      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d060      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x15e>
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	d867      	bhi.n	800937c <HAL_TIM_ConfigClockSource+0x170>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x15e>
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d05a      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x15e>
 80092b4:	e062      	b.n	800937c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092c6:	f000 fbef 	bl	8009aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	609a      	str	r2, [r3, #8]
      break;
 80092e2:	e04f      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092f4:	f000 fbd8 	bl	8009aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689a      	ldr	r2, [r3, #8]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009306:	609a      	str	r2, [r3, #8]
      break;
 8009308:	e03c      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009316:	461a      	mov	r2, r3
 8009318:	f000 fb4c 	bl	80099b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2150      	movs	r1, #80	; 0x50
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fba5 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8009328:	e02c      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009336:	461a      	mov	r2, r3
 8009338:	f000 fb6b 	bl	8009a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2160      	movs	r1, #96	; 0x60
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fb95 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8009348:	e01c      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009356:	461a      	mov	r2, r3
 8009358:	f000 fb2c 	bl	80099b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2140      	movs	r1, #64	; 0x40
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fb85 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8009368:	e00c      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4619      	mov	r1, r3
 8009374:	4610      	mov	r0, r2
 8009376:	f000 fb7c 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 800937a:	e003      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
      break;
 8009380:	e000      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <TIM_Base_SetConfig+0xbc>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_Base_SetConfig+0x20>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940e:	d108      	bne.n	8009422 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a21      	ldr	r2, [pc, #132]	; (80094ac <TIM_Base_SetConfig+0xbc>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00b      	beq.n	8009442 <TIM_Base_SetConfig+0x52>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d007      	beq.n	8009442 <TIM_Base_SetConfig+0x52>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a1e      	ldr	r2, [pc, #120]	; (80094b0 <TIM_Base_SetConfig+0xc0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_Base_SetConfig+0x52>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <TIM_Base_SetConfig+0xc4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d108      	bne.n	8009454 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a0c      	ldr	r2, [pc, #48]	; (80094ac <TIM_Base_SetConfig+0xbc>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0xa0>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a0b      	ldr	r2, [pc, #44]	; (80094b0 <TIM_Base_SetConfig+0xc0>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0xa0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a0a      	ldr	r2, [pc, #40]	; (80094b4 <TIM_Base_SetConfig+0xc4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d103      	bne.n	8009498 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	615a      	str	r2, [r3, #20]
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40014000 	.word	0x40014000
 80094b4:	40014400 	.word	0x40014400

080094b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f023 0201 	bic.w	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0303 	bic.w	r3, r3, #3
 80094f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f023 0302 	bic.w	r3, r3, #2
 8009504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	4313      	orrs	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a24      	ldr	r2, [pc, #144]	; (80095a4 <TIM_OC1_SetConfig+0xec>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <TIM_OC1_SetConfig+0x70>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a23      	ldr	r2, [pc, #140]	; (80095a8 <TIM_OC1_SetConfig+0xf0>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_OC1_SetConfig+0x70>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a22      	ldr	r2, [pc, #136]	; (80095ac <TIM_OC1_SetConfig+0xf4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d10c      	bne.n	8009542 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f023 0308 	bic.w	r3, r3, #8
 800952e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	4313      	orrs	r3, r2
 8009538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f023 0304 	bic.w	r3, r3, #4
 8009540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <TIM_OC1_SetConfig+0xec>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d007      	beq.n	800955a <TIM_OC1_SetConfig+0xa2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <TIM_OC1_SetConfig+0xf0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <TIM_OC1_SetConfig+0xa2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a15      	ldr	r2, [pc, #84]	; (80095ac <TIM_OC1_SetConfig+0xf4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d111      	bne.n	800957e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	621a      	str	r2, [r3, #32]
}
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	40012c00 	.word	0x40012c00
 80095a8:	40014000 	.word	0x40014000
 80095ac:	40014400 	.word	0x40014400

080095b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f023 0210 	bic.w	r2, r3, #16
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f023 0320 	bic.w	r3, r3, #32
 80095fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	4313      	orrs	r3, r2
 800960a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a22      	ldr	r2, [pc, #136]	; (8009698 <TIM_OC2_SetConfig+0xe8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10d      	bne.n	8009630 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800962e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a19      	ldr	r2, [pc, #100]	; (8009698 <TIM_OC2_SetConfig+0xe8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d007      	beq.n	8009648 <TIM_OC2_SetConfig+0x98>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a18      	ldr	r2, [pc, #96]	; (800969c <TIM_OC2_SetConfig+0xec>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d003      	beq.n	8009648 <TIM_OC2_SetConfig+0x98>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a17      	ldr	r2, [pc, #92]	; (80096a0 <TIM_OC2_SetConfig+0xf0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d113      	bne.n	8009670 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800964e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40012c00 	.word	0x40012c00
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400

080096a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a21      	ldr	r2, [pc, #132]	; (8009788 <TIM_OC3_SetConfig+0xe4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d10d      	bne.n	8009722 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800970c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a18      	ldr	r2, [pc, #96]	; (8009788 <TIM_OC3_SetConfig+0xe4>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d007      	beq.n	800973a <TIM_OC3_SetConfig+0x96>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a17      	ldr	r2, [pc, #92]	; (800978c <TIM_OC3_SetConfig+0xe8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d003      	beq.n	800973a <TIM_OC3_SetConfig+0x96>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a16      	ldr	r2, [pc, #88]	; (8009790 <TIM_OC3_SetConfig+0xec>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d113      	bne.n	8009762 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	621a      	str	r2, [r3, #32]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	40012c00 	.word	0x40012c00
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400

08009794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	031b      	lsls	r3, r3, #12
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a14      	ldr	r2, [pc, #80]	; (8009844 <TIM_OC4_SetConfig+0xb0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d007      	beq.n	8009808 <TIM_OC4_SetConfig+0x74>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a13      	ldr	r2, [pc, #76]	; (8009848 <TIM_OC4_SetConfig+0xb4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_OC4_SetConfig+0x74>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a12      	ldr	r2, [pc, #72]	; (800984c <TIM_OC4_SetConfig+0xb8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d109      	bne.n	800981c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800980e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	019b      	lsls	r3, r3, #6
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	621a      	str	r2, [r3, #32]
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40012c00 	.word	0x40012c00
 8009848:	40014000 	.word	0x40014000
 800984c:	40014400 	.word	0x40014400

08009850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800987e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	041b      	lsls	r3, r3, #16
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a13      	ldr	r2, [pc, #76]	; (80098f4 <TIM_OC5_SetConfig+0xa4>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d007      	beq.n	80098ba <TIM_OC5_SetConfig+0x6a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a12      	ldr	r2, [pc, #72]	; (80098f8 <TIM_OC5_SetConfig+0xa8>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d003      	beq.n	80098ba <TIM_OC5_SetConfig+0x6a>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a11      	ldr	r2, [pc, #68]	; (80098fc <TIM_OC5_SetConfig+0xac>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d109      	bne.n	80098ce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	621a      	str	r2, [r3, #32]
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	40012c00 	.word	0x40012c00
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40014400 	.word	0x40014400

08009900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800992e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a14      	ldr	r2, [pc, #80]	; (80099a8 <TIM_OC6_SetConfig+0xa8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d007      	beq.n	800996c <TIM_OC6_SetConfig+0x6c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a13      	ldr	r2, [pc, #76]	; (80099ac <TIM_OC6_SetConfig+0xac>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d003      	beq.n	800996c <TIM_OC6_SetConfig+0x6c>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <TIM_OC6_SetConfig+0xb0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d109      	bne.n	8009980 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	029b      	lsls	r3, r3, #10
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	621a      	str	r2, [r3, #32]
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40012c00 	.word	0x40012c00
 80099ac:	40014000 	.word	0x40014000
 80099b0:	40014400 	.word	0x40014400

080099b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f023 030a 	bic.w	r3, r3, #10
 80099f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b087      	sub	sp, #28
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f023 0210 	bic.w	r2, r3, #16
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	031b      	lsls	r3, r3, #12
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f043 0307 	orr.w	r3, r3, #7
 8009a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	609a      	str	r2, [r3, #8]
}
 8009a9c:	bf00      	nop
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	021a      	lsls	r2, r3, #8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	609a      	str	r2, [r3, #8]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e04f      	b.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a21      	ldr	r2, [pc, #132]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d108      	bne.n	8009b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a14      	ldr	r2, [pc, #80]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d009      	beq.n	8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b68:	d004      	beq.n	8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d10c      	bne.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40012c00 	.word	0x40012c00
 8009bb0:	40014000 	.word	0x40014000

08009bb4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d101      	bne.n	8009bcc <HAL_TIMEx_RemapConfig+0x18>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e02e      	b.n	8009c2a <HAL_TIMEx_RemapConfig+0x76>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <HAL_TIMEx_RemapConfig+0x84>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d004      	beq.n	8009be8 <HAL_TIMEx_RemapConfig+0x34>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be6:	d111      	bne.n	8009c0c <HAL_TIMEx_RemapConfig+0x58>
  {
    tmpor2 = htim->Instance->OR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bee:	60fb      	str	r3, [r7, #12]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8009bf6:	60fb      	str	r3, [r7, #12]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60bb      	str	r3, [r7, #8]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8009c16:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	40012c00 	.word	0x40012c00

08009c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e040      	b.n	8009d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fa f89c 	bl	8003dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2224      	movs	r2, #36	; 0x24
 8009ca4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f8c0 	bl	8009e3c <UART_SetConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e022      	b.n	8009d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fae0 	bl	800a294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb67 	bl	800a3d8 <UART_CheckIdleState>
 8009d0a:	4603      	mov	r3, r0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	4613      	mov	r3, r2
 8009d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	f040 8082 	bne.w	8009e32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <HAL_UART_Transmit+0x26>
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e07a      	b.n	8009e34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d101      	bne.n	8009d4c <HAL_UART_Transmit+0x38>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e073      	b.n	8009e34 <HAL_UART_Transmit+0x120>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2221      	movs	r2, #33	; 0x21
 8009d60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d62:	f7fa facf 	bl	8004304 <HAL_GetTick>
 8009d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	88fa      	ldrh	r2, [r7, #6]
 8009d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	88fa      	ldrh	r2, [r7, #6]
 8009d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d80:	d108      	bne.n	8009d94 <HAL_UART_Transmit+0x80>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d104      	bne.n	8009d94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	61bb      	str	r3, [r7, #24]
 8009d92:	e003      	b.n	8009d9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009da4:	e02d      	b.n	8009e02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fb5a 	bl	800a46a <UART_WaitOnFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e039      	b.n	8009e34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	881a      	ldrh	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dd2:	b292      	uxth	r2, r2
 8009dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	3302      	adds	r3, #2
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	e008      	b.n	8009df0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	b292      	uxth	r2, r2
 8009de8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	3301      	adds	r3, #1
 8009dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1cb      	bne.n	8009da6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2200      	movs	r2, #0
 8009e16:	2140      	movs	r1, #64	; 0x40
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 fb26 	bl	800a46a <UART_WaitOnFlagUntilTimeout>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e005      	b.n	8009e34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e000      	b.n	8009e34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009e32:	2302      	movs	r3, #2
  }
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e40:	b08a      	sub	sp, #40	; 0x28
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	431a      	orrs	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	4bb4      	ldr	r3, [pc, #720]	; (800a13c <UART_SetConfig+0x300>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e74:	430b      	orrs	r3, r1
 8009e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4aa9      	ldr	r2, [pc, #676]	; (800a140 <UART_SetConfig+0x304>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d004      	beq.n	8009ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4aa0      	ldr	r2, [pc, #640]	; (800a144 <UART_SetConfig+0x308>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d126      	bne.n	8009f14 <UART_SetConfig+0xd8>
 8009ec6:	4ba0      	ldr	r3, [pc, #640]	; (800a148 <UART_SetConfig+0x30c>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d81b      	bhi.n	8009f0c <UART_SetConfig+0xd0>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0xa0>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009ef5 	.word	0x08009ef5
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	2301      	movs	r3, #1
 8009eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ef2:	e080      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009efa:	e07c      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f02:	e078      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f0a:	e074      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f12:	e070      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a8c      	ldr	r2, [pc, #560]	; (800a14c <UART_SetConfig+0x310>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d138      	bne.n	8009f90 <UART_SetConfig+0x154>
 8009f1e:	4b8a      	ldr	r3, [pc, #552]	; (800a148 <UART_SetConfig+0x30c>)
 8009f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f24:	f003 030c 	and.w	r3, r3, #12
 8009f28:	2b0c      	cmp	r3, #12
 8009f2a:	d82d      	bhi.n	8009f88 <UART_SetConfig+0x14c>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <UART_SetConfig+0xf8>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f89 	.word	0x08009f89
 8009f3c:	08009f89 	.word	0x08009f89
 8009f40:	08009f89 	.word	0x08009f89
 8009f44:	08009f79 	.word	0x08009f79
 8009f48:	08009f89 	.word	0x08009f89
 8009f4c:	08009f89 	.word	0x08009f89
 8009f50:	08009f89 	.word	0x08009f89
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	08009f89 	.word	0x08009f89
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f6e:	e042      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f70:	2302      	movs	r3, #2
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f76:	e03e      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f7e:	e03a      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f80:	2308      	movs	r3, #8
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f86:	e036      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f8e:	e032      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a6a      	ldr	r2, [pc, #424]	; (800a140 <UART_SetConfig+0x304>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d12a      	bne.n	8009ff0 <UART_SetConfig+0x1b4>
 8009f9a:	4b6b      	ldr	r3, [pc, #428]	; (800a148 <UART_SetConfig+0x30c>)
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fa8:	d01a      	beq.n	8009fe0 <UART_SetConfig+0x1a4>
 8009faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fae:	d81b      	bhi.n	8009fe8 <UART_SetConfig+0x1ac>
 8009fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fb4:	d00c      	beq.n	8009fd0 <UART_SetConfig+0x194>
 8009fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fba:	d815      	bhi.n	8009fe8 <UART_SetConfig+0x1ac>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <UART_SetConfig+0x18c>
 8009fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc4:	d008      	beq.n	8009fd8 <UART_SetConfig+0x19c>
 8009fc6:	e00f      	b.n	8009fe8 <UART_SetConfig+0x1ac>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fce:	e012      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fd6:	e00e      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fde:	e00a      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fe6:	e006      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fee:	e002      	b.n	8009ff6 <UART_SetConfig+0x1ba>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a51      	ldr	r2, [pc, #324]	; (800a140 <UART_SetConfig+0x304>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d17a      	bne.n	800a0f6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a004:	2b08      	cmp	r3, #8
 800a006:	d824      	bhi.n	800a052 <UART_SetConfig+0x216>
 800a008:	a201      	add	r2, pc, #4	; (adr r2, 800a010 <UART_SetConfig+0x1d4>)
 800a00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00e:	bf00      	nop
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a053 	.word	0x0800a053
 800a018:	0800a03d 	.word	0x0800a03d
 800a01c:	0800a053 	.word	0x0800a053
 800a020:	0800a043 	.word	0x0800a043
 800a024:	0800a053 	.word	0x0800a053
 800a028:	0800a053 	.word	0x0800a053
 800a02c:	0800a053 	.word	0x0800a053
 800a030:	0800a04b 	.word	0x0800a04b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a034:	f7fe f9d8 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800a038:	61f8      	str	r0, [r7, #28]
        break;
 800a03a:	e010      	b.n	800a05e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a03c:	4b44      	ldr	r3, [pc, #272]	; (800a150 <UART_SetConfig+0x314>)
 800a03e:	61fb      	str	r3, [r7, #28]
        break;
 800a040:	e00d      	b.n	800a05e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a042:	f7fe f939 	bl	80082b8 <HAL_RCC_GetSysClockFreq>
 800a046:	61f8      	str	r0, [r7, #28]
        break;
 800a048:	e009      	b.n	800a05e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a04e:	61fb      	str	r3, [r7, #28]
        break;
 800a050:	e005      	b.n	800a05e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a05c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 8107 	beq.w	800a274 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4413      	add	r3, r2
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	429a      	cmp	r2, r3
 800a074:	d305      	bcc.n	800a082 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d903      	bls.n	800a08a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a088:	e0f4      	b.n	800a274 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	2200      	movs	r2, #0
 800a08e:	461c      	mov	r4, r3
 800a090:	4615      	mov	r5, r2
 800a092:	f04f 0200 	mov.w	r2, #0
 800a096:	f04f 0300 	mov.w	r3, #0
 800a09a:	022b      	lsls	r3, r5, #8
 800a09c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a0a0:	0222      	lsls	r2, r4, #8
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	6849      	ldr	r1, [r1, #4]
 800a0a6:	0849      	lsrs	r1, r1, #1
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	4688      	mov	r8, r1
 800a0ac:	4681      	mov	r9, r0
 800a0ae:	eb12 0a08 	adds.w	sl, r2, r8
 800a0b2:	eb43 0b09 	adc.w	fp, r3, r9
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	4659      	mov	r1, fp
 800a0c8:	f7f6 fe0e 	bl	8000ce8 <__aeabi_uldivmod>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0da:	d308      	bcc.n	800a0ee <UART_SetConfig+0x2b2>
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0e2:	d204      	bcs.n	800a0ee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	60da      	str	r2, [r3, #12]
 800a0ec:	e0c2      	b.n	800a274 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a0f4:	e0be      	b.n	800a274 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0fe:	d16a      	bne.n	800a1d6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a104:	2b08      	cmp	r3, #8
 800a106:	d834      	bhi.n	800a172 <UART_SetConfig+0x336>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <UART_SetConfig+0x2d4>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a135 	.word	0x0800a135
 800a114:	0800a155 	.word	0x0800a155
 800a118:	0800a15d 	.word	0x0800a15d
 800a11c:	0800a173 	.word	0x0800a173
 800a120:	0800a163 	.word	0x0800a163
 800a124:	0800a173 	.word	0x0800a173
 800a128:	0800a173 	.word	0x0800a173
 800a12c:	0800a173 	.word	0x0800a173
 800a130:	0800a16b 	.word	0x0800a16b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a134:	f7fe f958 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800a138:	61f8      	str	r0, [r7, #28]
        break;
 800a13a:	e020      	b.n	800a17e <UART_SetConfig+0x342>
 800a13c:	efff69f3 	.word	0xefff69f3
 800a140:	40008000 	.word	0x40008000
 800a144:	40013800 	.word	0x40013800
 800a148:	40021000 	.word	0x40021000
 800a14c:	40004400 	.word	0x40004400
 800a150:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a154:	f7fe f95e 	bl	8008414 <HAL_RCC_GetPCLK2Freq>
 800a158:	61f8      	str	r0, [r7, #28]
        break;
 800a15a:	e010      	b.n	800a17e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a15c:	4b4c      	ldr	r3, [pc, #304]	; (800a290 <UART_SetConfig+0x454>)
 800a15e:	61fb      	str	r3, [r7, #28]
        break;
 800a160:	e00d      	b.n	800a17e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a162:	f7fe f8a9 	bl	80082b8 <HAL_RCC_GetSysClockFreq>
 800a166:	61f8      	str	r0, [r7, #28]
        break;
 800a168:	e009      	b.n	800a17e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a16e:	61fb      	str	r3, [r7, #28]
        break;
 800a170:	e005      	b.n	800a17e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a17c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d077      	beq.n	800a274 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	005a      	lsls	r2, r3, #1
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	085b      	lsrs	r3, r3, #1
 800a18e:	441a      	add	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	fbb2 f3f3 	udiv	r3, r2, r3
 800a198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2b0f      	cmp	r3, #15
 800a19e:	d916      	bls.n	800a1ce <UART_SetConfig+0x392>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1a6:	d212      	bcs.n	800a1ce <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f023 030f 	bic.w	r3, r3, #15
 800a1b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	085b      	lsrs	r3, r3, #1
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	8afb      	ldrh	r3, [r7, #22]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	8afa      	ldrh	r2, [r7, #22]
 800a1ca:	60da      	str	r2, [r3, #12]
 800a1cc:	e052      	b.n	800a274 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a1d4:	e04e      	b.n	800a274 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d827      	bhi.n	800a22e <UART_SetConfig+0x3f2>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <UART_SetConfig+0x3a8>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a219 	.word	0x0800a219
 800a1f0:	0800a22f 	.word	0x0800a22f
 800a1f4:	0800a21f 	.word	0x0800a21f
 800a1f8:	0800a22f 	.word	0x0800a22f
 800a1fc:	0800a22f 	.word	0x0800a22f
 800a200:	0800a22f 	.word	0x0800a22f
 800a204:	0800a227 	.word	0x0800a227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a208:	f7fe f8ee 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800a20c:	61f8      	str	r0, [r7, #28]
        break;
 800a20e:	e014      	b.n	800a23a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a210:	f7fe f900 	bl	8008414 <HAL_RCC_GetPCLK2Freq>
 800a214:	61f8      	str	r0, [r7, #28]
        break;
 800a216:	e010      	b.n	800a23a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <UART_SetConfig+0x454>)
 800a21a:	61fb      	str	r3, [r7, #28]
        break;
 800a21c:	e00d      	b.n	800a23a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a21e:	f7fe f84b 	bl	80082b8 <HAL_RCC_GetSysClockFreq>
 800a222:	61f8      	str	r0, [r7, #28]
        break;
 800a224:	e009      	b.n	800a23a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a22a:	61fb      	str	r3, [r7, #28]
        break;
 800a22c:	e005      	b.n	800a23a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a238:	bf00      	nop
    }

    if (pclk != 0U)
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d019      	beq.n	800a274 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	085a      	lsrs	r2, r3, #1
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	441a      	add	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b0f      	cmp	r3, #15
 800a258:	d909      	bls.n	800a26e <UART_SetConfig+0x432>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a260:	d205      	bcs.n	800a26e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60da      	str	r2, [r3, #12]
 800a26c:	e002      	b.n	800a274 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a284:	4618      	mov	r0, r3
 800a286:	3728      	adds	r7, #40	; 0x28
 800a288:	46bd      	mov	sp, r7
 800a28a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a28e:	bf00      	nop
 800a290:	00f42400 	.word	0x00f42400

0800a294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a392:	d10a      	bne.n	800a3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3e8:	f7f9 ff8c 	bl	8004304 <HAL_GetTick>
 800a3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0308 	and.w	r3, r3, #8
 800a3f8:	2b08      	cmp	r3, #8
 800a3fa:	d10e      	bne.n	800a41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f82d 	bl	800a46a <UART_WaitOnFlagUntilTimeout>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e023      	b.n	800a462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b04      	cmp	r3, #4
 800a426:	d10e      	bne.n	800a446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f817 	bl	800a46a <UART_WaitOnFlagUntilTimeout>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e00d      	b.n	800a462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2220      	movs	r2, #32
 800a44a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b09c      	sub	sp, #112	; 0x70
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	603b      	str	r3, [r7, #0]
 800a476:	4613      	mov	r3, r2
 800a478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a47a:	e0a5      	b.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	f000 80a1 	beq.w	800a5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a486:	f7f9 ff3d 	bl	8004304 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a492:	429a      	cmp	r2, r3
 800a494:	d302      	bcc.n	800a49c <UART_WaitOnFlagUntilTimeout+0x32>
 800a496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d13e      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	663b      	str	r3, [r7, #96]	; 0x60
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e5      	bne.n	800a4ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2220      	movs	r2, #32
 800a506:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2220      	movs	r2, #32
 800a50c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e067      	b.n	800a5ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d04f      	beq.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a536:	d147      	bne.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a540:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a556:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a560:	637b      	str	r3, [r7, #52]	; 0x34
 800a562:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a568:	e841 2300 	strex	r3, r2, [r1]
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e6      	bne.n	800a542 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3308      	adds	r3, #8
 800a57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	613b      	str	r3, [r7, #16]
   return(result);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f023 0301 	bic.w	r3, r3, #1
 800a58a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3308      	adds	r3, #8
 800a592:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a594:	623a      	str	r2, [r7, #32]
 800a596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	69f9      	ldr	r1, [r7, #28]
 800a59a:	6a3a      	ldr	r2, [r7, #32]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e5      	bne.n	800a574 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e010      	b.n	800a5ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69da      	ldr	r2, [r3, #28]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	f43f af4a 	beq.w	800a47c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3770      	adds	r7, #112	; 0x70
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <__NVIC_SetPriority>:
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a604:	2b00      	cmp	r3, #0
 800a606:	db0a      	blt.n	800a61e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	490c      	ldr	r1, [pc, #48]	; (800a640 <__NVIC_SetPriority+0x4c>)
 800a60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a612:	0112      	lsls	r2, r2, #4
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	440b      	add	r3, r1
 800a618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a61c:	e00a      	b.n	800a634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	b2da      	uxtb	r2, r3
 800a622:	4908      	ldr	r1, [pc, #32]	; (800a644 <__NVIC_SetPriority+0x50>)
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	f003 030f 	and.w	r3, r3, #15
 800a62a:	3b04      	subs	r3, #4
 800a62c:	0112      	lsls	r2, r2, #4
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	440b      	add	r3, r1
 800a632:	761a      	strb	r2, [r3, #24]
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	e000e100 	.word	0xe000e100
 800a644:	e000ed00 	.word	0xe000ed00

0800a648 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <SysTick_Handler+0x1c>)
 800a64e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a650:	f002 fbf0 	bl	800ce34 <xTaskGetSchedulerState>
 800a654:	4603      	mov	r3, r0
 800a656:	2b01      	cmp	r3, #1
 800a658:	d001      	beq.n	800a65e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a65a:	f003 fad5 	bl	800dc08 <xPortSysTickHandler>
  }
}
 800a65e:	bf00      	nop
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	e000e010 	.word	0xe000e010

0800a668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a66c:	2100      	movs	r1, #0
 800a66e:	f06f 0004 	mvn.w	r0, #4
 800a672:	f7ff ffbf 	bl	800a5f4 <__NVIC_SetPriority>
#endif
}
 800a676:	bf00      	nop
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a682:	f3ef 8305 	mrs	r3, IPSR
 800a686:	603b      	str	r3, [r7, #0]
  return(result);
 800a688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a68e:	f06f 0305 	mvn.w	r3, #5
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e00c      	b.n	800a6b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a696:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <osKernelInitialize+0x44>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d105      	bne.n	800a6aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a69e:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <osKernelInitialize+0x44>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	e002      	b.n	800a6b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6b0:	687b      	ldr	r3, [r7, #4]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	20001f4c 	.word	0x20001f4c

0800a6c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ca:	f3ef 8305 	mrs	r3, IPSR
 800a6ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a6d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6d6:	f06f 0305 	mvn.w	r3, #5
 800a6da:	607b      	str	r3, [r7, #4]
 800a6dc:	e010      	b.n	800a700 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6de:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <osKernelStart+0x48>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d109      	bne.n	800a6fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6e6:	f7ff ffbf 	bl	800a668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6ea:	4b08      	ldr	r3, [pc, #32]	; (800a70c <osKernelStart+0x48>)
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6f0:	f001 ff24 	bl	800c53c <vTaskStartScheduler>
      stat = osOK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e002      	b.n	800a700 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a700:	687b      	ldr	r3, [r7, #4]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20001f4c 	.word	0x20001f4c

0800a710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	; 0x38
 800a714:	af04      	add	r7, sp, #16
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a720:	f3ef 8305 	mrs	r3, IPSR
 800a724:	617b      	str	r3, [r7, #20]
  return(result);
 800a726:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d17e      	bne.n	800a82a <osThreadNew+0x11a>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d07b      	beq.n	800a82a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a732:	2380      	movs	r3, #128	; 0x80
 800a734:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a736:	2318      	movs	r3, #24
 800a738:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a73e:	f04f 33ff 	mov.w	r3, #4294967295
 800a742:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d045      	beq.n	800a7d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <osThreadNew+0x48>
        name = attr->name;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <osThreadNew+0x6e>
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	2b38      	cmp	r3, #56	; 0x38
 800a770:	d805      	bhi.n	800a77e <osThreadNew+0x6e>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <osThreadNew+0x72>
        return (NULL);
 800a77e:	2300      	movs	r3, #0
 800a780:	e054      	b.n	800a82c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	089b      	lsrs	r3, r3, #2
 800a790:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <osThreadNew+0xa8>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b5b      	cmp	r3, #91	; 0x5b
 800a7a0:	d90a      	bls.n	800a7b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <osThreadNew+0xa8>
        mem = 1;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	e010      	b.n	800a7da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10c      	bne.n	800a7da <osThreadNew+0xca>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d108      	bne.n	800a7da <osThreadNew+0xca>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d104      	bne.n	800a7da <osThreadNew+0xca>
          mem = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e001      	b.n	800a7da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d110      	bne.n	800a802 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f001 fcca 	bl	800c190 <xTaskCreateStatic>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	613b      	str	r3, [r7, #16]
 800a800:	e013      	b.n	800a82a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d110      	bne.n	800a82a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	f107 0310 	add.w	r3, r7, #16
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f001 fd15 	bl	800c24a <xTaskCreate>
 800a820:	4603      	mov	r3, r0
 800a822:	2b01      	cmp	r3, #1
 800a824:	d001      	beq.n	800a82a <osThreadNew+0x11a>
            hTask = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a82a:	693b      	ldr	r3, [r7, #16]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3728      	adds	r7, #40	; 0x28
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a83c:	f3ef 8305 	mrs	r3, IPSR
 800a840:	60bb      	str	r3, [r7, #8]
  return(result);
 800a842:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a844:	2b00      	cmp	r3, #0
 800a846:	d003      	beq.n	800a850 <osDelay+0x1c>
    stat = osErrorISR;
 800a848:	f06f 0305 	mvn.w	r3, #5
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e007      	b.n	800a860 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fe3a 	bl	800c4d4 <vTaskDelay>
    }
  }

  return (stat);
 800a860:	68fb      	ldr	r3, [r7, #12]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b088      	sub	sp, #32
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a876:	f3ef 8305 	mrs	r3, IPSR
 800a87a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a87c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d174      	bne.n	800a96c <osMutexNew+0x102>
    if (attr != NULL) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	e001      	b.n	800a894 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <osMutexNew+0x3a>
      rmtx = 1U;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	e001      	b.n	800a8a8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	f003 0308 	and.w	r3, r3, #8
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d15c      	bne.n	800a96c <osMutexNew+0x102>
      mem = -1;
 800a8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d015      	beq.n	800a8ea <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <osMutexNew+0x6a>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b4f      	cmp	r3, #79	; 0x4f
 800a8cc:	d902      	bls.n	800a8d4 <osMutexNew+0x6a>
          mem = 1;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	613b      	str	r3, [r7, #16]
 800a8d2:	e00c      	b.n	800a8ee <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d108      	bne.n	800a8ee <osMutexNew+0x84>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d104      	bne.n	800a8ee <osMutexNew+0x84>
            mem = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	e001      	b.n	800a8ee <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d112      	bne.n	800a91a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d007      	beq.n	800a90a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	4619      	mov	r1, r3
 800a900:	2004      	movs	r0, #4
 800a902:	f000 fd5a 	bl	800b3ba <xQueueCreateMutexStatic>
 800a906:	61f8      	str	r0, [r7, #28]
 800a908:	e016      	b.n	800a938 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	4619      	mov	r1, r3
 800a910:	2001      	movs	r0, #1
 800a912:	f000 fd52 	bl	800b3ba <xQueueCreateMutexStatic>
 800a916:	61f8      	str	r0, [r7, #28]
 800a918:	e00e      	b.n	800a938 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d004      	beq.n	800a930 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a926:	2004      	movs	r0, #4
 800a928:	f000 fd2f 	bl	800b38a <xQueueCreateMutex>
 800a92c:	61f8      	str	r0, [r7, #28]
 800a92e:	e003      	b.n	800a938 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a930:	2001      	movs	r0, #1
 800a932:	f000 fd2a 	bl	800b38a <xQueueCreateMutex>
 800a936:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <osMutexNew+0xee>
        if (attr != NULL) {
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <osMutexNew+0xe2>
          name = attr->name;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e001      	b.n	800a950 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a950:	68f9      	ldr	r1, [r7, #12]
 800a952:	69f8      	ldr	r0, [r7, #28]
 800a954:	f001 fb94 	bl	800c080 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <osMutexNew+0x102>
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a96c:	69fb      	ldr	r3, [r7, #28]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a976:	b580      	push	{r7, lr}
 800a978:	b086      	sub	sp, #24
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f023 0301 	bic.w	r3, r3, #1
 800a986:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a990:	2300      	movs	r3, #0
 800a992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a994:	f3ef 8305 	mrs	r3, IPSR
 800a998:	60bb      	str	r3, [r7, #8]
  return(result);
 800a99a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a9a0:	f06f 0305 	mvn.w	r3, #5
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e02c      	b.n	800aa02 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d103      	bne.n	800a9b6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a9ae:	f06f 0303 	mvn.w	r3, #3
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e025      	b.n	800aa02 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d011      	beq.n	800a9e0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6938      	ldr	r0, [r7, #16]
 800a9c0:	f000 fd4a 	bl	800b458 <xQueueTakeMutexRecursive>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d01b      	beq.n	800aa02 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a9d0:	f06f 0301 	mvn.w	r3, #1
 800a9d4:	617b      	str	r3, [r7, #20]
 800a9d6:	e014      	b.n	800aa02 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a9d8:	f06f 0302 	mvn.w	r3, #2
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	e010      	b.n	800aa02 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6938      	ldr	r0, [r7, #16]
 800a9e4:	f001 f852 	bl	800ba8c <xQueueSemaphoreTake>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d009      	beq.n	800aa02 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a9f4:	f06f 0301 	mvn.w	r3, #1
 800a9f8:	617b      	str	r3, [r7, #20]
 800a9fa:	e002      	b.n	800aa02 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a9fc:	f06f 0302 	mvn.w	r3, #2
 800aa00:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800aa02:	697b      	ldr	r3, [r7, #20]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa28:	f3ef 8305 	mrs	r3, IPSR
 800aa2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa2e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <osMutexRelease+0x30>
    stat = osErrorISR;
 800aa34:	f06f 0305 	mvn.w	r3, #5
 800aa38:	617b      	str	r3, [r7, #20]
 800aa3a:	e01f      	b.n	800aa7c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d103      	bne.n	800aa4a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800aa42:	f06f 0303 	mvn.w	r3, #3
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e018      	b.n	800aa7c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d009      	beq.n	800aa64 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800aa50:	6938      	ldr	r0, [r7, #16]
 800aa52:	f000 fccd 	bl	800b3f0 <xQueueGiveMutexRecursive>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d00f      	beq.n	800aa7c <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa5c:	f06f 0302 	mvn.w	r3, #2
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	e00b      	b.n	800aa7c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aa64:	2300      	movs	r3, #0
 800aa66:	2200      	movs	r2, #0
 800aa68:	2100      	movs	r1, #0
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	f000 fd94 	bl	800b598 <xQueueGenericSend>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d002      	beq.n	800aa7c <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa76:	f06f 0302 	mvn.w	r3, #2
 800aa7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aa7c:	697b      	ldr	r3, [r7, #20]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b08a      	sub	sp, #40	; 0x28
 800aa8a:	af02      	add	r7, sp, #8
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa96:	f3ef 8305 	mrs	r3, IPSR
 800aa9a:	613b      	str	r3, [r7, #16]
  return(result);
 800aa9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d175      	bne.n	800ab8e <osSemaphoreNew+0x108>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d072      	beq.n	800ab8e <osSemaphoreNew+0x108>
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d86e      	bhi.n	800ab8e <osSemaphoreNew+0x108>
    mem = -1;
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295
 800aab4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d015      	beq.n	800aae8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <osSemaphoreNew+0x4c>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b4f      	cmp	r3, #79	; 0x4f
 800aaca:	d902      	bls.n	800aad2 <osSemaphoreNew+0x4c>
        mem = 1;
 800aacc:	2301      	movs	r3, #1
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	e00c      	b.n	800aaec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d108      	bne.n	800aaec <osSemaphoreNew+0x66>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d104      	bne.n	800aaec <osSemaphoreNew+0x66>
          mem = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	61bb      	str	r3, [r7, #24]
 800aae6:	e001      	b.n	800aaec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf2:	d04c      	beq.n	800ab8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d128      	bne.n	800ab4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d10a      	bne.n	800ab16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2203      	movs	r2, #3
 800ab06:	9200      	str	r2, [sp, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2001      	movs	r0, #1
 800ab0e:	f000 fb4d 	bl	800b1ac <xQueueGenericCreateStatic>
 800ab12:	61f8      	str	r0, [r7, #28]
 800ab14:	e005      	b.n	800ab22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ab16:	2203      	movs	r2, #3
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	f000 fbbe 	bl	800b29c <xQueueGenericCreate>
 800ab20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d022      	beq.n	800ab6e <osSemaphoreNew+0xe8>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01f      	beq.n	800ab6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	69f8      	ldr	r0, [r7, #28]
 800ab36:	f000 fd2f 	bl	800b598 <xQueueGenericSend>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d016      	beq.n	800ab6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ab40:	69f8      	ldr	r0, [r7, #28]
 800ab42:	f001 f952 	bl	800bdea <vQueueDelete>
            hSemaphore = NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61fb      	str	r3, [r7, #28]
 800ab4a:	e010      	b.n	800ab6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d108      	bne.n	800ab64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	461a      	mov	r2, r3
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 fcb2 	bl	800b4c4 <xQueueCreateCountingSemaphoreStatic>
 800ab60:	61f8      	str	r0, [r7, #28]
 800ab62:	e004      	b.n	800ab6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fce3 	bl	800b532 <xQueueCreateCountingSemaphore>
 800ab6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	e001      	b.n	800ab86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ab86:	6979      	ldr	r1, [r7, #20]
 800ab88:	69f8      	ldr	r0, [r7, #28]
 800ab8a:	f001 fa79 	bl	800c080 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ab8e:	69fb      	ldr	r3, [r7, #28]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800abb0:	f06f 0303 	mvn.w	r3, #3
 800abb4:	617b      	str	r3, [r7, #20]
 800abb6:	e039      	b.n	800ac2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abb8:	f3ef 8305 	mrs	r3, IPSR
 800abbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800abbe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d022      	beq.n	800ac0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800abca:	f06f 0303 	mvn.w	r3, #3
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e02c      	b.n	800ac2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800abd6:	f107 0308 	add.w	r3, r7, #8
 800abda:	461a      	mov	r2, r3
 800abdc:	2100      	movs	r1, #0
 800abde:	6938      	ldr	r0, [r7, #16]
 800abe0:	f001 f860 	bl	800bca4 <xQueueReceiveFromISR>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d003      	beq.n	800abf2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800abea:	f06f 0302 	mvn.w	r3, #2
 800abee:	617b      	str	r3, [r7, #20]
 800abf0:	e01c      	b.n	800ac2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d019      	beq.n	800ac2c <osSemaphoreAcquire+0x94>
 800abf8:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <osSemaphoreAcquire+0xa0>)
 800abfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	e010      	b.n	800ac2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6938      	ldr	r0, [r7, #16]
 800ac0e:	f000 ff3d 	bl	800ba8c <xQueueSemaphoreTake>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d009      	beq.n	800ac2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ac1e:	f06f 0301 	mvn.w	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	e002      	b.n	800ac2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ac26:	f06f 0302 	mvn.w	r3, #2
 800ac2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ac2c:	697b      	ldr	r3, [r7, #20]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08a      	sub	sp, #40	; 0x28
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac4c:	f3ef 8305 	mrs	r3, IPSR
 800ac50:	613b      	str	r3, [r7, #16]
  return(result);
 800ac52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d15f      	bne.n	800ad18 <osMessageQueueNew+0xdc>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d05c      	beq.n	800ad18 <osMessageQueueNew+0xdc>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d059      	beq.n	800ad18 <osMessageQueueNew+0xdc>
    mem = -1;
 800ac64:	f04f 33ff 	mov.w	r3, #4294967295
 800ac68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d029      	beq.n	800acc4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <osMessageQueueNew+0x62>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	2b4f      	cmp	r3, #79	; 0x4f
 800ac7e:	d90e      	bls.n	800ac9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00a      	beq.n	800ac9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	695a      	ldr	r2, [r3, #20]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	fb01 f303 	mul.w	r3, r1, r3
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d302      	bcc.n	800ac9e <osMessageQueueNew+0x62>
        mem = 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	61bb      	str	r3, [r7, #24]
 800ac9c:	e014      	b.n	800acc8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d110      	bne.n	800acc8 <osMessageQueueNew+0x8c>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10c      	bne.n	800acc8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d108      	bne.n	800acc8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d104      	bne.n	800acc8 <osMessageQueueNew+0x8c>
          mem = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	e001      	b.n	800acc8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d10b      	bne.n	800ace6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	691a      	ldr	r2, [r3, #16]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2100      	movs	r1, #0
 800acd8:	9100      	str	r1, [sp, #0]
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fa65 	bl	800b1ac <xQueueGenericCreateStatic>
 800ace2:	61f8      	str	r0, [r7, #28]
 800ace4:	e008      	b.n	800acf8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d105      	bne.n	800acf8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800acec:	2200      	movs	r2, #0
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 fad3 	bl	800b29c <xQueueGenericCreate>
 800acf6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00c      	beq.n	800ad18 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	e001      	b.n	800ad10 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ad10:	6979      	ldr	r1, [r7, #20]
 800ad12:	69f8      	ldr	r0, [r7, #28]
 800ad14:	f001 f9b4 	bl	800c080 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ad18:	69fb      	ldr	r3, [r7, #28]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad3c:	f3ef 8305 	mrs	r3, IPSR
 800ad40:	617b      	str	r3, [r7, #20]
  return(result);
 800ad42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d028      	beq.n	800ad9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <osMessageQueuePut+0x36>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <osMessageQueuePut+0x36>
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ad5a:	f06f 0303 	mvn.w	r3, #3
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	e038      	b.n	800add4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad66:	f107 0210 	add.w	r2, r7, #16
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	69b8      	ldr	r0, [r7, #24]
 800ad70:	f000 fd10 	bl	800b794 <xQueueGenericSendFromISR>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d003      	beq.n	800ad82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ad7a:	f06f 0302 	mvn.w	r3, #2
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e028      	b.n	800add4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d025      	beq.n	800add4 <osMessageQueuePut+0xb0>
 800ad88:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <osMessageQueuePut+0xbc>)
 800ad8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	e01c      	b.n	800add4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <osMessageQueuePut+0x82>
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d103      	bne.n	800adae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ada6:	f06f 0303 	mvn.w	r3, #3
 800adaa:	61fb      	str	r3, [r7, #28]
 800adac:	e012      	b.n	800add4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800adae:	2300      	movs	r3, #0
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	69b8      	ldr	r0, [r7, #24]
 800adb6:	f000 fbef 	bl	800b598 <xQueueGenericSend>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d009      	beq.n	800add4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800adc6:	f06f 0301 	mvn.w	r3, #1
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	e002      	b.n	800add4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800adce:	f06f 0302 	mvn.w	r3, #2
 800add2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800add4:	69fb      	ldr	r3, [r7, #28]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	e000ed04 	.word	0xe000ed04

0800ade4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adfa:	f3ef 8305 	mrs	r3, IPSR
 800adfe:	617b      	str	r3, [r7, #20]
  return(result);
 800ae00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d028      	beq.n	800ae58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <osMessageQueueGet+0x34>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <osMessageQueueGet+0x34>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ae18:	f06f 0303 	mvn.w	r3, #3
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	e037      	b.n	800ae90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ae24:	f107 0310 	add.w	r3, r7, #16
 800ae28:	461a      	mov	r2, r3
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	69b8      	ldr	r0, [r7, #24]
 800ae2e:	f000 ff39 	bl	800bca4 <xQueueReceiveFromISR>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d003      	beq.n	800ae40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ae38:	f06f 0302 	mvn.w	r3, #2
 800ae3c:	61fb      	str	r3, [r7, #28]
 800ae3e:	e027      	b.n	800ae90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d024      	beq.n	800ae90 <osMessageQueueGet+0xac>
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <osMessageQueueGet+0xb8>)
 800ae48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	e01b      	b.n	800ae90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <osMessageQueueGet+0x80>
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d103      	bne.n	800ae6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ae64:	f06f 0303 	mvn.w	r3, #3
 800ae68:	61fb      	str	r3, [r7, #28]
 800ae6a:	e011      	b.n	800ae90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	68b9      	ldr	r1, [r7, #8]
 800ae70:	69b8      	ldr	r0, [r7, #24]
 800ae72:	f000 fd2b 	bl	800b8cc <xQueueReceive>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d009      	beq.n	800ae90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ae82:	f06f 0301 	mvn.w	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
 800ae88:	e002      	b.n	800ae90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ae8a:	f06f 0302 	mvn.w	r3, #2
 800ae8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae90:	69fb      	ldr	r3, [r7, #28]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08a      	sub	sp, #40	; 0x28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d102      	bne.n	800aeb8 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb6:	e023      	b.n	800af00 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeb8:	f3ef 8305 	mrs	r3, IPSR
 800aebc:	61bb      	str	r3, [r7, #24]
  return(result);
 800aebe:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d019      	beq.n	800aef8 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aec4:	f3ef 8211 	mrs	r2, BASEPRI
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	613a      	str	r2, [r7, #16]
 800aeda:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aedc:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800aede:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	627b      	str	r3, [r7, #36]	; 0x24
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aef6:	e003      	b.n	800af00 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800aef8:	6a38      	ldr	r0, [r7, #32]
 800aefa:	f000 ff53 	bl	800bda4 <uxQueueSpacesAvailable>
 800aefe:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af02:	4618      	mov	r0, r3
 800af04:	3728      	adds	r7, #40	; 0x28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4a07      	ldr	r2, [pc, #28]	; (800af38 <vApplicationGetIdleTaskMemory+0x2c>)
 800af1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	4a06      	ldr	r2, [pc, #24]	; (800af3c <vApplicationGetIdleTaskMemory+0x30>)
 800af22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2280      	movs	r2, #128	; 0x80
 800af28:	601a      	str	r2, [r3, #0]
}
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	20001f50 	.word	0x20001f50
 800af3c:	20001fac 	.word	0x20001fac

0800af40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4a07      	ldr	r2, [pc, #28]	; (800af6c <vApplicationGetTimerTaskMemory+0x2c>)
 800af50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	4a06      	ldr	r2, [pc, #24]	; (800af70 <vApplicationGetTimerTaskMemory+0x30>)
 800af56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af5e:	601a      	str	r2, [r3, #0]
}
 800af60:	bf00      	nop
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	200021ac 	.word	0x200021ac
 800af70:	20002208 	.word	0x20002208

0800af74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f103 0208 	add.w	r2, r3, #8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f04f 32ff 	mov.w	r2, #4294967295
 800af8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f103 0208 	add.w	r2, r3, #8
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f103 0208 	add.w	r2, r3, #8
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800afc2:	bf00      	nop
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afce:	b480      	push	{r7}
 800afd0:	b085      	sub	sp, #20
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b016:	b480      	push	{r7}
 800b018:	b085      	sub	sp, #20
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02c:	d103      	bne.n	800b036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e00c      	b.n	800b050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3308      	adds	r3, #8
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	e002      	b.n	800b044 <vListInsert+0x2e>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d2f6      	bcs.n	800b03e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	601a      	str	r2, [r3, #0]
}
 800b07c:	bf00      	nop
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6892      	ldr	r2, [r2, #8]
 800b09e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	6852      	ldr	r2, [r2, #4]
 800b0a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d103      	bne.n	800b0bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	1e5a      	subs	r2, r3, #1
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <xQueueGenericReset+0x2a>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60bb      	str	r3, [r7, #8]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b106:	f002 fced 	bl	800dae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b116:	fb01 f303 	mul.w	r3, r1, r3
 800b11a:	441a      	add	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b136:	3b01      	subs	r3, #1
 800b138:	68f9      	ldr	r1, [r7, #12]
 800b13a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b13c:	fb01 f303 	mul.w	r3, r1, r3
 800b140:	441a      	add	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	22ff      	movs	r2, #255	; 0xff
 800b14a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	22ff      	movs	r2, #255	; 0xff
 800b152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d114      	bne.n	800b186 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01a      	beq.n	800b19a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3310      	adds	r3, #16
 800b168:	4618      	mov	r0, r3
 800b16a:	f001 fc95 	bl	800ca98 <xTaskRemoveFromEventList>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d012      	beq.n	800b19a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b174:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <xQueueGenericReset+0xcc>)
 800b176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	e009      	b.n	800b19a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3310      	adds	r3, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fef2 	bl	800af74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff feed 	bl	800af74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b19a:	f002 fcd3 	bl	800db44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b19e:	2301      	movs	r3, #1
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	; 0x38
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10a      	bne.n	800b1d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <xQueueGenericCreateStatic+0x52>
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <xQueueGenericCreateStatic+0x56>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <xQueueGenericCreateStatic+0x58>
 800b202:	2300      	movs	r3, #0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	623b      	str	r3, [r7, #32]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d102      	bne.n	800b22a <xQueueGenericCreateStatic+0x7e>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <xQueueGenericCreateStatic+0x82>
 800b22a:	2301      	movs	r3, #1
 800b22c:	e000      	b.n	800b230 <xQueueGenericCreateStatic+0x84>
 800b22e:	2300      	movs	r3, #0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	61fb      	str	r3, [r7, #28]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b24a:	2350      	movs	r3, #80	; 0x50
 800b24c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b50      	cmp	r3, #80	; 0x50
 800b252:	d00a      	beq.n	800b26a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	61bb      	str	r3, [r7, #24]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b26a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00d      	beq.n	800b292 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b27e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	4613      	mov	r3, r2
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 f83f 	bl	800b310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b294:	4618      	mov	r0, r3
 800b296:	3730      	adds	r7, #48	; 0x30
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08a      	sub	sp, #40	; 0x28
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	fb02 f303 	mul.w	r3, r2, r3
 800b2ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3350      	adds	r3, #80	; 0x50
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f002 fd27 	bl	800dd28 <pvPortMalloc>
 800b2da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d011      	beq.n	800b306 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	3350      	adds	r3, #80	; 0x50
 800b2ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2f4:	79fa      	ldrb	r2, [r7, #7]
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f805 	bl	800b310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b306:	69bb      	ldr	r3, [r7, #24]
	}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d103      	bne.n	800b32c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e002      	b.n	800b332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b33e:	2101      	movs	r1, #1
 800b340:	69b8      	ldr	r0, [r7, #24]
 800b342:	f7ff fecb 	bl	800b0dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	78fa      	ldrb	r2, [r7, #3]
 800b34a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b34e:	bf00      	nop
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00e      	beq.n	800b382 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b376:	2300      	movs	r3, #0
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f90b 	bl	800b598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b086      	sub	sp, #24
 800b38e:	af00      	add	r7, sp, #0
 800b390:	4603      	mov	r3, r0
 800b392:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b394:	2301      	movs	r3, #1
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	2300      	movs	r3, #0
 800b39a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	6939      	ldr	r1, [r7, #16]
 800b3a2:	6978      	ldr	r0, [r7, #20]
 800b3a4:	f7ff ff7a 	bl	800b29c <xQueueGenericCreate>
 800b3a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff ffd3 	bl	800b356 <prvInitialiseMutex>

		return xNewQueue;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b088      	sub	sp, #32
 800b3be:	af02      	add	r7, sp, #8
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	6039      	str	r1, [r7, #0]
 800b3c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	617b      	str	r3, [r7, #20]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	6939      	ldr	r1, [r7, #16]
 800b3d8:	6978      	ldr	r0, [r7, #20]
 800b3da:	f7ff fee7 	bl	800b1ac <xQueueGenericCreateStatic>
 800b3de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff ffb8 	bl	800b356 <prvInitialiseMutex>

		return xNewQueue;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	60fb      	str	r3, [r7, #12]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	689c      	ldr	r4, [r3, #8]
 800b41c:	f001 fcfa 	bl	800ce14 <xTaskGetCurrentTaskHandle>
 800b420:	4603      	mov	r3, r0
 800b422:	429c      	cmp	r4, r3
 800b424:	d111      	bne.n	800b44a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	1e5a      	subs	r2, r3, #1
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d105      	bne.n	800b444 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b438:	2300      	movs	r3, #0
 800b43a:	2200      	movs	r2, #0
 800b43c:	2100      	movs	r1, #0
 800b43e:	6938      	ldr	r0, [r7, #16]
 800b440:	f000 f8aa 	bl	800b598 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b444:	2301      	movs	r3, #1
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	e001      	b.n	800b44e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b44e:	697b      	ldr	r3, [r7, #20]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	371c      	adds	r7, #28
 800b454:	46bd      	mov	sp, r7
 800b456:	bd90      	pop	{r4, r7, pc}

0800b458 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	60fb      	str	r3, [r7, #12]
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	689c      	ldr	r4, [r3, #8]
 800b486:	f001 fcc5 	bl	800ce14 <xTaskGetCurrentTaskHandle>
 800b48a:	4603      	mov	r3, r0
 800b48c:	429c      	cmp	r4, r3
 800b48e:	d107      	bne.n	800b4a0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b49a:	2301      	movs	r3, #1
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	e00c      	b.n	800b4ba <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6938      	ldr	r0, [r7, #16]
 800b4a4:	f000 faf2 	bl	800ba8c <xQueueSemaphoreTake>
 800b4a8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b4ba:	697b      	ldr	r3, [r7, #20]
	}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	371c      	adds	r7, #28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd90      	pop	{r4, r7, pc}

0800b4c4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	; 0x28
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	61bb      	str	r3, [r7, #24]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d90a      	bls.n	800b50a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	617b      	str	r3, [r7, #20]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b50a:	2302      	movs	r3, #2
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	2100      	movs	r1, #0
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7ff fe49 	bl	800b1ac <xQueueGenericCreateStatic>
 800b51a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d002      	beq.n	800b528 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b528:	69fb      	ldr	r3, [r7, #28]
	}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3720      	adds	r7, #32
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b532:	b580      	push	{r7, lr}
 800b534:	b086      	sub	sp, #24
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	613b      	str	r3, [r7, #16]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d90a      	bls.n	800b576 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b576:	2202      	movs	r2, #2
 800b578:	2100      	movs	r1, #0
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff fe8e 	bl	800b29c <xQueueGenericCreate>
 800b580:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b58e:	697b      	ldr	r3, [r7, #20]
	}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08e      	sub	sp, #56	; 0x38
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xQueueGenericSend+0x32>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <xQueueGenericSend+0x40>
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <xQueueGenericSend+0x44>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e000      	b.n	800b5de <xQueueGenericSend+0x46>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <xQueueGenericSend+0x60>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d103      	bne.n	800b606 <xQueueGenericSend+0x6e>
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <xQueueGenericSend+0x72>
 800b606:	2301      	movs	r3, #1
 800b608:	e000      	b.n	800b60c <xQueueGenericSend+0x74>
 800b60a:	2300      	movs	r3, #0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <xQueueGenericSend+0x8e>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	623b      	str	r3, [r7, #32]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b626:	f001 fc05 	bl	800ce34 <xTaskGetSchedulerState>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d102      	bne.n	800b636 <xQueueGenericSend+0x9e>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <xQueueGenericSend+0xa2>
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <xQueueGenericSend+0xa4>
 800b63a:	2300      	movs	r3, #0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <xQueueGenericSend+0xbe>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	61fb      	str	r3, [r7, #28]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b656:	f002 fa45 	bl	800dae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b662:	429a      	cmp	r2, r3
 800b664:	d302      	bcc.n	800b66c <xQueueGenericSend+0xd4>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d129      	bne.n	800b6c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b672:	f000 fbf5 	bl	800be60 <prvCopyDataToQueue>
 800b676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d010      	beq.n	800b6a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	3324      	adds	r3, #36	; 0x24
 800b684:	4618      	mov	r0, r3
 800b686:	f001 fa07 	bl	800ca98 <xTaskRemoveFromEventList>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d013      	beq.n	800b6b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b690:	4b3f      	ldr	r3, [pc, #252]	; (800b790 <xQueueGenericSend+0x1f8>)
 800b692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	e00a      	b.n	800b6b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6a8:	4b39      	ldr	r3, [pc, #228]	; (800b790 <xQueueGenericSend+0x1f8>)
 800b6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6b8:	f002 fa44 	bl	800db44 <vPortExitCritical>
				return pdPASS;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e063      	b.n	800b788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d103      	bne.n	800b6ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6c6:	f002 fa3d 	bl	800db44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e05c      	b.n	800b788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d106      	bne.n	800b6e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6d4:	f107 0314 	add.w	r3, r7, #20
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 fa41 	bl	800cb60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6e2:	f002 fa2f 	bl	800db44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6e6:	f000 ff8f 	bl	800c608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ea:	f002 f9fb 	bl	800dae4 <vPortEnterCritical>
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6f4:	b25b      	sxtb	r3, r3
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fa:	d103      	bne.n	800b704 <xQueueGenericSend+0x16c>
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b70a:	b25b      	sxtb	r3, r3
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d103      	bne.n	800b71a <xQueueGenericSend+0x182>
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b71a:	f002 fa13 	bl	800db44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b71e:	1d3a      	adds	r2, r7, #4
 800b720:	f107 0314 	add.w	r3, r7, #20
 800b724:	4611      	mov	r1, r2
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fa30 	bl	800cb8c <xTaskCheckForTimeOut>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d124      	bne.n	800b77c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b734:	f000 fc8c 	bl	800c050 <prvIsQueueFull>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d018      	beq.n	800b770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	3310      	adds	r3, #16
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	4611      	mov	r1, r2
 800b746:	4618      	mov	r0, r3
 800b748:	f001 f956 	bl	800c9f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b74c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b74e:	f000 fc17 	bl	800bf80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b752:	f000 ff67 	bl	800c624 <xTaskResumeAll>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f47f af7c 	bne.w	800b656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <xQueueGenericSend+0x1f8>)
 800b760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	e772      	b.n	800b656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b772:	f000 fc05 	bl	800bf80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b776:	f000 ff55 	bl	800c624 <xTaskResumeAll>
 800b77a:	e76c      	b.n	800b656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b77c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77e:	f000 fbff 	bl	800bf80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b782:	f000 ff4f 	bl	800c624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3738      	adds	r7, #56	; 0x38
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b090      	sub	sp, #64	; 0x40
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d103      	bne.n	800b7d0 <xQueueGenericSendFromISR+0x3c>
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <xQueueGenericSendFromISR+0x40>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e000      	b.n	800b7d6 <xQueueGenericSendFromISR+0x42>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d103      	bne.n	800b7fe <xQueueGenericSendFromISR+0x6a>
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <xQueueGenericSendFromISR+0x6e>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <xQueueGenericSendFromISR+0x70>
 800b802:	2300      	movs	r3, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	623b      	str	r3, [r7, #32]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b81e:	f002 fa43 	bl	800dca8 <vPortValidateInterruptPriority>
	__asm volatile
 800b822:	f3ef 8211 	mrs	r2, BASEPRI
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	61fa      	str	r2, [r7, #28]
 800b838:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b83a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b846:	429a      	cmp	r2, r3
 800b848:	d302      	bcc.n	800b850 <xQueueGenericSendFromISR+0xbc>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d12f      	bne.n	800b8b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b866:	f000 fafb 	bl	800be60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b86a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d112      	bne.n	800b89a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d016      	beq.n	800b8aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87e:	3324      	adds	r3, #36	; 0x24
 800b880:	4618      	mov	r0, r3
 800b882:	f001 f909 	bl	800ca98 <xTaskRemoveFromEventList>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00e      	beq.n	800b8aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	e007      	b.n	800b8aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b89a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b89e:	3301      	adds	r3, #1
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	b25a      	sxtb	r2, r3
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b8ae:	e001      	b.n	800b8b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f383 8811 	msr	BASEPRI, r3
}
 800b8be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3740      	adds	r7, #64	; 0x40
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08c      	sub	sp, #48	; 0x30
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10a      	bne.n	800b8fc <xQueueReceive+0x30>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	623b      	str	r3, [r7, #32]
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d103      	bne.n	800b90a <xQueueReceive+0x3e>
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <xQueueReceive+0x42>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueReceive+0x44>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xQueueReceive+0x5e>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	61fb      	str	r3, [r7, #28]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b92a:	f001 fa83 	bl	800ce34 <xTaskGetSchedulerState>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <xQueueReceive+0x6e>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <xQueueReceive+0x72>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <xQueueReceive+0x74>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueReceive+0x8e>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	61bb      	str	r3, [r7, #24]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b95a:	f002 f8c3 	bl	800dae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b962:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	2b00      	cmp	r3, #0
 800b968:	d01f      	beq.n	800b9aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96e:	f000 fae1 	bl	800bf34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	1e5a      	subs	r2, r3, #1
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00f      	beq.n	800b9a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	3310      	adds	r3, #16
 800b986:	4618      	mov	r0, r3
 800b988:	f001 f886 	bl	800ca98 <xTaskRemoveFromEventList>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b992:	4b3d      	ldr	r3, [pc, #244]	; (800ba88 <xQueueReceive+0x1bc>)
 800b994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9a2:	f002 f8cf 	bl	800db44 <vPortExitCritical>
				return pdPASS;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e069      	b.n	800ba7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9b0:	f002 f8c8 	bl	800db44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	e062      	b.n	800ba7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9be:	f107 0310 	add.w	r3, r7, #16
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f8cc 	bl	800cb60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9cc:	f002 f8ba 	bl	800db44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9d0:	f000 fe1a 	bl	800c608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9d4:	f002 f886 	bl	800dae4 <vPortEnterCritical>
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9de:	b25b      	sxtb	r3, r3
 800b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e4:	d103      	bne.n	800b9ee <xQueueReceive+0x122>
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9f4:	b25b      	sxtb	r3, r3
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	d103      	bne.n	800ba04 <xQueueReceive+0x138>
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba04:	f002 f89e 	bl	800db44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba08:	1d3a      	adds	r2, r7, #4
 800ba0a:	f107 0310 	add.w	r3, r7, #16
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f001 f8bb 	bl	800cb8c <xTaskCheckForTimeOut>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d123      	bne.n	800ba64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba1e:	f000 fb01 	bl	800c024 <prvIsQueueEmpty>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d017      	beq.n	800ba58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	3324      	adds	r3, #36	; 0x24
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	4611      	mov	r1, r2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 ffe1 	bl	800c9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba38:	f000 faa2 	bl	800bf80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba3c:	f000 fdf2 	bl	800c624 <xTaskResumeAll>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d189      	bne.n	800b95a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba46:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <xQueueReceive+0x1bc>)
 800ba48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	e780      	b.n	800b95a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5a:	f000 fa91 	bl	800bf80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba5e:	f000 fde1 	bl	800c624 <xTaskResumeAll>
 800ba62:	e77a      	b.n	800b95a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba66:	f000 fa8b 	bl	800bf80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba6a:	f000 fddb 	bl	800c624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba70:	f000 fad8 	bl	800c024 <prvIsQueueEmpty>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f43f af6f 	beq.w	800b95a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3730      	adds	r7, #48	; 0x30
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	e000ed04 	.word	0xe000ed04

0800ba8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08e      	sub	sp, #56	; 0x38
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10a      	bne.n	800babe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	623b      	str	r3, [r7, #32]
}
 800baba:	bf00      	nop
 800babc:	e7fe      	b.n	800babc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	61fb      	str	r3, [r7, #28]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800badc:	f001 f9aa 	bl	800ce34 <xTaskGetSchedulerState>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <xQueueSemaphoreTake+0x60>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <xQueueSemaphoreTake+0x64>
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <xQueueSemaphoreTake+0x66>
 800baf0:	2300      	movs	r3, #0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	61bb      	str	r3, [r7, #24]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb0c:	f001 ffea 	bl	800dae4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d024      	beq.n	800bb66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	1e5a      	subs	r2, r3, #1
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d104      	bne.n	800bb36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb2c:	f001 faf8 	bl	800d120 <pvTaskIncrementMutexHeldCount>
 800bb30:	4602      	mov	r2, r0
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00f      	beq.n	800bb5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	3310      	adds	r3, #16
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 ffa8 	bl	800ca98 <xTaskRemoveFromEventList>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d007      	beq.n	800bb5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb4e:	4b54      	ldr	r3, [pc, #336]	; (800bca0 <xQueueSemaphoreTake+0x214>)
 800bb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb5e:	f001 fff1 	bl	800db44 <vPortExitCritical>
				return pdPASS;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e097      	b.n	800bc96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d111      	bne.n	800bb90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	617b      	str	r3, [r7, #20]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bb88:	f001 ffdc 	bl	800db44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e082      	b.n	800bc96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d106      	bne.n	800bba4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb96:	f107 030c 	add.w	r3, r7, #12
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 ffe0 	bl	800cb60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bba0:	2301      	movs	r3, #1
 800bba2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bba4:	f001 ffce 	bl	800db44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bba8:	f000 fd2e 	bl	800c608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbac:	f001 ff9a 	bl	800dae4 <vPortEnterCritical>
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbb6:	b25b      	sxtb	r3, r3
 800bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbc:	d103      	bne.n	800bbc6 <xQueueSemaphoreTake+0x13a>
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd2:	d103      	bne.n	800bbdc <xQueueSemaphoreTake+0x150>
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbdc:	f001 ffb2 	bl	800db44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbe0:	463a      	mov	r2, r7
 800bbe2:	f107 030c 	add.w	r3, r7, #12
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 ffcf 	bl	800cb8c <xTaskCheckForTimeOut>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d132      	bne.n	800bc5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbf6:	f000 fa15 	bl	800c024 <prvIsQueueEmpty>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d026      	beq.n	800bc4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d109      	bne.n	800bc1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bc08:	f001 ff6c 	bl	800dae4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f001 f92d 	bl	800ce70 <xTaskPriorityInherit>
 800bc16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc18:	f001 ff94 	bl	800db44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	3324      	adds	r3, #36	; 0x24
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	4611      	mov	r1, r2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 fee7 	bl	800c9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc2c:	f000 f9a8 	bl	800bf80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc30:	f000 fcf8 	bl	800c624 <xTaskResumeAll>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f47f af68 	bne.w	800bb0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc3c:	4b18      	ldr	r3, [pc, #96]	; (800bca0 <xQueueSemaphoreTake+0x214>)
 800bc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	e75e      	b.n	800bb0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc50:	f000 f996 	bl	800bf80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc54:	f000 fce6 	bl	800c624 <xTaskResumeAll>
 800bc58:	e758      	b.n	800bb0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc5c:	f000 f990 	bl	800bf80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc60:	f000 fce0 	bl	800c624 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc66:	f000 f9dd 	bl	800c024 <prvIsQueueEmpty>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f43f af4d 	beq.w	800bb0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00d      	beq.n	800bc94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bc78:	f001 ff34 	bl	800dae4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc7e:	f000 f8d7 	bl	800be30 <prvGetDisinheritPriorityAfterTimeout>
 800bc82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 f9c6 	bl	800d01c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc90:	f001 ff58 	bl	800db44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3738      	adds	r7, #56	; 0x38
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	e000ed04 	.word	0xe000ed04

0800bca4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08e      	sub	sp, #56	; 0x38
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	623b      	str	r3, [r7, #32]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d103      	bne.n	800bcde <xQueueReceiveFromISR+0x3a>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <xQueueReceiveFromISR+0x3e>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xQueueReceiveFromISR+0x40>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61fb      	str	r3, [r7, #28]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcfe:	f001 ffd3 	bl	800dca8 <vPortValidateInterruptPriority>
	__asm volatile
 800bd02:	f3ef 8211 	mrs	r2, BASEPRI
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61ba      	str	r2, [r7, #24]
 800bd18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d02f      	beq.n	800bd8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd34:	68b9      	ldr	r1, [r7, #8]
 800bd36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd38:	f000 f8fc 	bl	800bf34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	1e5a      	subs	r2, r3, #1
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d112      	bne.n	800bd74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d016      	beq.n	800bd84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	3310      	adds	r3, #16
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fe9c 	bl	800ca98 <xTaskRemoveFromEventList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e007      	b.n	800bd84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	b25a      	sxtb	r2, r3
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd84:	2301      	movs	r3, #1
 800bd86:	637b      	str	r3, [r7, #52]	; 0x34
 800bd88:	e001      	b.n	800bd8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f383 8811 	msr	BASEPRI, r3
}
 800bd98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3738      	adds	r7, #56	; 0x38
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60fb      	str	r3, [r7, #12]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800bdcc:	f001 fe8a 	bl	800dae4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800bddc:	f001 feb2 	bl	800db44 <vPortExitCritical>

	return uxReturn;
 800bde0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <vQueueDelete+0x28>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	60bb      	str	r3, [r7, #8]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f000 f95e 	bl	800c0d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f002 f84c 	bl	800dec0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d006      	beq.n	800be4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	e001      	b.n	800be52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be52:	68fb      	ldr	r3, [r7, #12]
	}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be6c:	2300      	movs	r3, #0
 800be6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10d      	bne.n	800be9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d14d      	bne.n	800bf22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 f858 	bl	800cf40 <xTaskPriorityDisinherit>
 800be90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	609a      	str	r2, [r3, #8]
 800be98:	e043      	b.n	800bf22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d119      	bne.n	800bed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6858      	ldr	r0, [r3, #4]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	461a      	mov	r2, r3
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	f003 f84d 	bl	800ef4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	441a      	add	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d32b      	bcc.n	800bf22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	605a      	str	r2, [r3, #4]
 800bed2:	e026      	b.n	800bf22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68d8      	ldr	r0, [r3, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bedc:	461a      	mov	r2, r3
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	f003 f833 	bl	800ef4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	68da      	ldr	r2, [r3, #12]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beec:	425b      	negs	r3, r3
 800beee:	441a      	add	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d207      	bcs.n	800bf10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf08:	425b      	negs	r3, r3
 800bf0a:	441a      	add	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d105      	bne.n	800bf22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf2a:	697b      	ldr	r3, [r7, #20]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d018      	beq.n	800bf78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	441a      	add	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d303      	bcc.n	800bf68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	68d9      	ldr	r1, [r3, #12]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	461a      	mov	r2, r3
 800bf72:	6838      	ldr	r0, [r7, #0]
 800bf74:	f002 ffe9 	bl	800ef4a <memcpy>
	}
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf88:	f001 fdac 	bl	800dae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf94:	e011      	b.n	800bfba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d012      	beq.n	800bfc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3324      	adds	r3, #36	; 0x24
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fd78 	bl	800ca98 <xTaskRemoveFromEventList>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfae:	f000 fe4f 	bl	800cc50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dce9      	bgt.n	800bf96 <prvUnlockQueue+0x16>
 800bfc2:	e000      	b.n	800bfc6 <prvUnlockQueue+0x46>
					break;
 800bfc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	22ff      	movs	r2, #255	; 0xff
 800bfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfce:	f001 fdb9 	bl	800db44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfd2:	f001 fd87 	bl	800dae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfde:	e011      	b.n	800c004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d012      	beq.n	800c00e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	3310      	adds	r3, #16
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fd53 	bl	800ca98 <xTaskRemoveFromEventList>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bff8:	f000 fe2a 	bl	800cc50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	3b01      	subs	r3, #1
 800c000:	b2db      	uxtb	r3, r3
 800c002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	dce9      	bgt.n	800bfe0 <prvUnlockQueue+0x60>
 800c00c:	e000      	b.n	800c010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c00e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	22ff      	movs	r2, #255	; 0xff
 800c014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c018:	f001 fd94 	bl	800db44 <vPortExitCritical>
}
 800c01c:	bf00      	nop
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c02c:	f001 fd5a 	bl	800dae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c038:	2301      	movs	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	e001      	b.n	800c042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c042:	f001 fd7f 	bl	800db44 <vPortExitCritical>

	return xReturn;
 800c046:	68fb      	ldr	r3, [r7, #12]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c058:	f001 fd44 	bl	800dae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c064:	429a      	cmp	r2, r3
 800c066:	d102      	bne.n	800c06e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	e001      	b.n	800c072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c072:	f001 fd67 	bl	800db44 <vPortExitCritical>

	return xReturn;
 800c076:	68fb      	ldr	r3, [r7, #12]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e014      	b.n	800c0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c090:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c09c:	490c      	ldr	r1, [pc, #48]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0a6:	4a0a      	ldr	r2, [pc, #40]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0b2:	e006      	b.n	800c0c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b07      	cmp	r3, #7
 800c0be:	d9e7      	bls.n	800c090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	20002608 	.word	0x20002608

0800c0d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e016      	b.n	800c110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0e2:	4a10      	ldr	r2, [pc, #64]	; (800c124 <vQueueUnregisterQueue+0x50>)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d10b      	bne.n	800c10a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0f2:	4a0c      	ldr	r2, [pc, #48]	; (800c124 <vQueueUnregisterQueue+0x50>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0fc:	4a09      	ldr	r2, [pc, #36]	; (800c124 <vQueueUnregisterQueue+0x50>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	4413      	add	r3, r2
 800c104:	2200      	movs	r2, #0
 800c106:	605a      	str	r2, [r3, #4]
				break;
 800c108:	e006      	b.n	800c118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b07      	cmp	r3, #7
 800c114:	d9e5      	bls.n	800c0e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c116:	bf00      	nop
 800c118:	bf00      	nop
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	20002608 	.word	0x20002608

0800c128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c138:	f001 fcd4 	bl	800dae4 <vPortEnterCritical>
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c142:	b25b      	sxtb	r3, r3
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d103      	bne.n	800c152 <vQueueWaitForMessageRestricted+0x2a>
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c158:	b25b      	sxtb	r3, r3
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d103      	bne.n	800c168 <vQueueWaitForMessageRestricted+0x40>
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c168:	f001 fcec 	bl	800db44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	2b00      	cmp	r3, #0
 800c172:	d106      	bne.n	800c182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	3324      	adds	r3, #36	; 0x24
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fc5f 	bl	800ca40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c182:	6978      	ldr	r0, [r7, #20]
 800c184:	f7ff fefc 	bl	800bf80 <prvUnlockQueue>
	}
 800c188:	bf00      	nop
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08e      	sub	sp, #56	; 0x38
 800c194:	af04      	add	r7, sp, #16
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	623b      	str	r3, [r7, #32]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10a      	bne.n	800c1d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	61fb      	str	r3, [r7, #28]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1d6:	235c      	movs	r3, #92	; 0x5c
 800c1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c1de:	d00a      	beq.n	800c1f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	61bb      	str	r3, [r7, #24]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d01e      	beq.n	800c23c <xTaskCreateStatic+0xac>
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01b      	beq.n	800c23c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c20c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	2202      	movs	r2, #2
 800c212:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c216:	2300      	movs	r3, #0
 800c218:	9303      	str	r3, [sp, #12]
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	9302      	str	r3, [sp, #8]
 800c21e:	f107 0314 	add.w	r3, r7, #20
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 f850 	bl	800c2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c236:	f000 f8dd 	bl	800c3f4 <prvAddNewTaskToReadyList>
 800c23a:	e001      	b.n	800c240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c240:	697b      	ldr	r3, [r7, #20]
	}
 800c242:	4618      	mov	r0, r3
 800c244:	3728      	adds	r7, #40	; 0x28
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b08c      	sub	sp, #48	; 0x30
 800c24e:	af04      	add	r7, sp, #16
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	603b      	str	r3, [r7, #0]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c25a:	88fb      	ldrh	r3, [r7, #6]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 fd62 	bl	800dd28 <pvPortMalloc>
 800c264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00e      	beq.n	800c28a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c26c:	205c      	movs	r0, #92	; 0x5c
 800c26e:	f001 fd5b 	bl	800dd28 <pvPortMalloc>
 800c272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	631a      	str	r2, [r3, #48]	; 0x30
 800c280:	e005      	b.n	800c28e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c282:	6978      	ldr	r0, [r7, #20]
 800c284:	f001 fe1c 	bl	800dec0 <vPortFree>
 800c288:	e001      	b.n	800c28e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d017      	beq.n	800c2c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c29c:	88fa      	ldrh	r2, [r7, #6]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9303      	str	r3, [sp, #12]
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	9302      	str	r3, [sp, #8]
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 f80e 	bl	800c2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2b8:	69f8      	ldr	r0, [r7, #28]
 800c2ba:	f000 f89b 	bl	800c3f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e002      	b.n	800c2ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	21a5      	movs	r1, #165	; 0xa5
 800c2ee:	f002 fdad 	bl	800ee4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	f023 0307 	bic.w	r3, r3, #7
 800c30a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	617b      	str	r3, [r7, #20]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d01f      	beq.n	800c372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c332:	2300      	movs	r3, #0
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e012      	b.n	800c35e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	4413      	add	r3, r2
 800c33e:	7819      	ldrb	r1, [r3, #0]
 800c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	3334      	adds	r3, #52	; 0x34
 800c348:	460a      	mov	r2, r1
 800c34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	4413      	add	r3, r2
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	3301      	adds	r3, #1
 800c35c:	61fb      	str	r3, [r7, #28]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	2b0f      	cmp	r3, #15
 800c362:	d9e9      	bls.n	800c338 <prvInitialiseNewTask+0x64>
 800c364:	e000      	b.n	800c368 <prvInitialiseNewTask+0x94>
			{
				break;
 800c366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c370:	e003      	b.n	800c37a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	2b37      	cmp	r3, #55	; 0x37
 800c37e:	d901      	bls.n	800c384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c380:	2337      	movs	r3, #55	; 0x37
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c38e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	2200      	movs	r2, #0
 800c394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fe0a 	bl	800afb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	3318      	adds	r3, #24
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fe05 	bl	800afb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	69b8      	ldr	r0, [r7, #24]
 800c3d4:	f001 fa5a 	bl	800d88c <pxPortInitialiseStack>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3ea:	bf00      	nop
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3fc:	f001 fb72 	bl	800dae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c400:	4b2d      	ldr	r3, [pc, #180]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	4a2c      	ldr	r2, [pc, #176]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c40a:	4b2c      	ldr	r3, [pc, #176]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c412:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c418:	4b27      	ldr	r3, [pc, #156]	; (800c4b8 <prvAddNewTaskToReadyList+0xc4>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d110      	bne.n	800c442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c420:	f000 fc3a 	bl	800cc98 <prvInitialiseTaskLists>
 800c424:	e00d      	b.n	800c442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c426:	4b26      	ldr	r3, [pc, #152]	; (800c4c0 <prvAddNewTaskToReadyList+0xcc>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d109      	bne.n	800c442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c42e:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	429a      	cmp	r2, r3
 800c43a:	d802      	bhi.n	800c442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c43c:	4a1f      	ldr	r2, [pc, #124]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c442:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3301      	adds	r3, #1
 800c448:	4a1e      	ldr	r2, [pc, #120]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c44a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c44c:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <prvAddNewTaskToReadyList+0xd0>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c458:	4b1b      	ldr	r3, [pc, #108]	; (800c4c8 <prvAddNewTaskToReadyList+0xd4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d903      	bls.n	800c468 <prvAddNewTaskToReadyList+0x74>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <prvAddNewTaskToReadyList+0xd4>)
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4a15      	ldr	r2, [pc, #84]	; (800c4cc <prvAddNewTaskToReadyList+0xd8>)
 800c476:	441a      	add	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f7fe fda5 	bl	800afce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c484:	f001 fb5e 	bl	800db44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c488:	4b0d      	ldr	r3, [pc, #52]	; (800c4c0 <prvAddNewTaskToReadyList+0xcc>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00e      	beq.n	800c4ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <prvAddNewTaskToReadyList+0xc8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d207      	bcs.n	800c4ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <prvAddNewTaskToReadyList+0xdc>)
 800c4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	20002b1c 	.word	0x20002b1c
 800c4bc:	20002648 	.word	0x20002648
 800c4c0:	20002b28 	.word	0x20002b28
 800c4c4:	20002b38 	.word	0x20002b38
 800c4c8:	20002b24 	.word	0x20002b24
 800c4cc:	2000264c 	.word	0x2000264c
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d017      	beq.n	800c516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4e6:	4b13      	ldr	r3, [pc, #76]	; (800c534 <vTaskDelay+0x60>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <vTaskDelay+0x30>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	60bb      	str	r3, [r7, #8]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c504:	f000 f880 	bl	800c608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c508:	2100      	movs	r1, #0
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fe1c 	bl	800d148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c510:	f000 f888 	bl	800c624 <xTaskResumeAll>
 800c514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d107      	bne.n	800c52c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <vTaskDelay+0x64>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	20002b44 	.word	0x20002b44
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	; 0x28
 800c540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c54a:	463a      	mov	r2, r7
 800c54c:	1d39      	adds	r1, r7, #4
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fcda 	bl	800af0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	9202      	str	r2, [sp, #8]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	2300      	movs	r3, #0
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	2300      	movs	r3, #0
 800c568:	460a      	mov	r2, r1
 800c56a:	4921      	ldr	r1, [pc, #132]	; (800c5f0 <vTaskStartScheduler+0xb4>)
 800c56c:	4821      	ldr	r0, [pc, #132]	; (800c5f4 <vTaskStartScheduler+0xb8>)
 800c56e:	f7ff fe0f 	bl	800c190 <xTaskCreateStatic>
 800c572:	4603      	mov	r3, r0
 800c574:	4a20      	ldr	r2, [pc, #128]	; (800c5f8 <vTaskStartScheduler+0xbc>)
 800c576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c578:	4b1f      	ldr	r3, [pc, #124]	; (800c5f8 <vTaskStartScheduler+0xbc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c580:	2301      	movs	r3, #1
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	e001      	b.n	800c58a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c586:	2300      	movs	r3, #0
 800c588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d102      	bne.n	800c596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c590:	f000 fe2e 	bl	800d1f0 <xTimerCreateTimerTask>
 800c594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d116      	bne.n	800c5ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	613b      	str	r3, [r7, #16]
}
 800c5ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5b0:	4b12      	ldr	r3, [pc, #72]	; (800c5fc <vTaskStartScheduler+0xc0>)
 800c5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5b8:	4b11      	ldr	r3, [pc, #68]	; (800c600 <vTaskStartScheduler+0xc4>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5be:	4b11      	ldr	r3, [pc, #68]	; (800c604 <vTaskStartScheduler+0xc8>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5c4:	f001 f9ec 	bl	800d9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c5c8:	e00e      	b.n	800c5e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d0:	d10a      	bne.n	800c5e8 <vTaskStartScheduler+0xac>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60fb      	str	r3, [r7, #12]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <vTaskStartScheduler+0xaa>
}
 800c5e8:	bf00      	nop
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	08011270 	.word	0x08011270
 800c5f4:	0800cc69 	.word	0x0800cc69
 800c5f8:	20002b40 	.word	0x20002b40
 800c5fc:	20002b3c 	.word	0x20002b3c
 800c600:	20002b28 	.word	0x20002b28
 800c604:	20002b20 	.word	0x20002b20

0800c608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c608:	b480      	push	{r7}
 800c60a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c60c:	4b04      	ldr	r3, [pc, #16]	; (800c620 <vTaskSuspendAll+0x18>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3301      	adds	r3, #1
 800c612:	4a03      	ldr	r2, [pc, #12]	; (800c620 <vTaskSuspendAll+0x18>)
 800c614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c616:	bf00      	nop
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	20002b44 	.word	0x20002b44

0800c624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c62e:	2300      	movs	r3, #0
 800c630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c632:	4b42      	ldr	r3, [pc, #264]	; (800c73c <xTaskResumeAll+0x118>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10a      	bne.n	800c650 <xTaskResumeAll+0x2c>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	603b      	str	r3, [r7, #0]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c650:	f001 fa48 	bl	800dae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c654:	4b39      	ldr	r3, [pc, #228]	; (800c73c <xTaskResumeAll+0x118>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3b01      	subs	r3, #1
 800c65a:	4a38      	ldr	r2, [pc, #224]	; (800c73c <xTaskResumeAll+0x118>)
 800c65c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c65e:	4b37      	ldr	r3, [pc, #220]	; (800c73c <xTaskResumeAll+0x118>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d162      	bne.n	800c72c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c666:	4b36      	ldr	r3, [pc, #216]	; (800c740 <xTaskResumeAll+0x11c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d05e      	beq.n	800c72c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c66e:	e02f      	b.n	800c6d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c670:	4b34      	ldr	r3, [pc, #208]	; (800c744 <xTaskResumeAll+0x120>)
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3318      	adds	r3, #24
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe fd03 	bl	800b088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3304      	adds	r3, #4
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fcfe 	bl	800b088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c690:	4b2d      	ldr	r3, [pc, #180]	; (800c748 <xTaskResumeAll+0x124>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	429a      	cmp	r2, r3
 800c696:	d903      	bls.n	800c6a0 <xTaskResumeAll+0x7c>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	4a2a      	ldr	r2, [pc, #168]	; (800c748 <xTaskResumeAll+0x124>)
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4a27      	ldr	r2, [pc, #156]	; (800c74c <xTaskResumeAll+0x128>)
 800c6ae:	441a      	add	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f7fe fc89 	bl	800afce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c0:	4b23      	ldr	r3, [pc, #140]	; (800c750 <xTaskResumeAll+0x12c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d302      	bcc.n	800c6d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c6ca:	4b22      	ldr	r3, [pc, #136]	; (800c754 <xTaskResumeAll+0x130>)
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6d0:	4b1c      	ldr	r3, [pc, #112]	; (800c744 <xTaskResumeAll+0x120>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1cb      	bne.n	800c670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6de:	f000 fb79 	bl	800cdd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c6e2:	4b1d      	ldr	r3, [pc, #116]	; (800c758 <xTaskResumeAll+0x134>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d010      	beq.n	800c710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6ee:	f000 f847 	bl	800c780 <xTaskIncrementTick>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c6f8:	4b16      	ldr	r3, [pc, #88]	; (800c754 <xTaskResumeAll+0x130>)
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3b01      	subs	r3, #1
 800c702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f1      	bne.n	800c6ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c70a:	4b13      	ldr	r3, [pc, #76]	; (800c758 <xTaskResumeAll+0x134>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c710:	4b10      	ldr	r3, [pc, #64]	; (800c754 <xTaskResumeAll+0x130>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d009      	beq.n	800c72c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c718:	2301      	movs	r3, #1
 800c71a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c71c:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <xTaskResumeAll+0x138>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c72c:	f001 fa0a 	bl	800db44 <vPortExitCritical>

	return xAlreadyYielded;
 800c730:	68bb      	ldr	r3, [r7, #8]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20002b44 	.word	0x20002b44
 800c740:	20002b1c 	.word	0x20002b1c
 800c744:	20002adc 	.word	0x20002adc
 800c748:	20002b24 	.word	0x20002b24
 800c74c:	2000264c 	.word	0x2000264c
 800c750:	20002648 	.word	0x20002648
 800c754:	20002b30 	.word	0x20002b30
 800c758:	20002b2c 	.word	0x20002b2c
 800c75c:	e000ed04 	.word	0xe000ed04

0800c760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c766:	4b05      	ldr	r3, [pc, #20]	; (800c77c <xTaskGetTickCount+0x1c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c76c:	687b      	ldr	r3, [r7, #4]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	20002b20 	.word	0x20002b20

0800c780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c786:	2300      	movs	r3, #0
 800c788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c78a:	4b4f      	ldr	r3, [pc, #316]	; (800c8c8 <xTaskIncrementTick+0x148>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f040 808f 	bne.w	800c8b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c794:	4b4d      	ldr	r3, [pc, #308]	; (800c8cc <xTaskIncrementTick+0x14c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3301      	adds	r3, #1
 800c79a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c79c:	4a4b      	ldr	r2, [pc, #300]	; (800c8cc <xTaskIncrementTick+0x14c>)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d120      	bne.n	800c7ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7a8:	4b49      	ldr	r3, [pc, #292]	; (800c8d0 <xTaskIncrementTick+0x150>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00a      	beq.n	800c7c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	603b      	str	r3, [r7, #0]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xTaskIncrementTick+0x46>
 800c7c8:	4b41      	ldr	r3, [pc, #260]	; (800c8d0 <xTaskIncrementTick+0x150>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	4b41      	ldr	r3, [pc, #260]	; (800c8d4 <xTaskIncrementTick+0x154>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a3f      	ldr	r2, [pc, #252]	; (800c8d0 <xTaskIncrementTick+0x150>)
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	4a3f      	ldr	r2, [pc, #252]	; (800c8d4 <xTaskIncrementTick+0x154>)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	4b3e      	ldr	r3, [pc, #248]	; (800c8d8 <xTaskIncrementTick+0x158>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	4a3d      	ldr	r2, [pc, #244]	; (800c8d8 <xTaskIncrementTick+0x158>)
 800c7e4:	6013      	str	r3, [r2, #0]
 800c7e6:	f000 faf5 	bl	800cdd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7ea:	4b3c      	ldr	r3, [pc, #240]	; (800c8dc <xTaskIncrementTick+0x15c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d349      	bcc.n	800c888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7f4:	4b36      	ldr	r3, [pc, #216]	; (800c8d0 <xTaskIncrementTick+0x150>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d104      	bne.n	800c808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7fe:	4b37      	ldr	r3, [pc, #220]	; (800c8dc <xTaskIncrementTick+0x15c>)
 800c800:	f04f 32ff 	mov.w	r2, #4294967295
 800c804:	601a      	str	r2, [r3, #0]
					break;
 800c806:	e03f      	b.n	800c888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c808:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <xTaskIncrementTick+0x150>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d203      	bcs.n	800c828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c820:	4a2e      	ldr	r2, [pc, #184]	; (800c8dc <xTaskIncrementTick+0x15c>)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c826:	e02f      	b.n	800c888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	3304      	adds	r3, #4
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fc2b 	bl	800b088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c836:	2b00      	cmp	r3, #0
 800c838:	d004      	beq.n	800c844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	3318      	adds	r3, #24
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe fc22 	bl	800b088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	4b25      	ldr	r3, [pc, #148]	; (800c8e0 <xTaskIncrementTick+0x160>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d903      	bls.n	800c858 <xTaskIncrementTick+0xd8>
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	4a22      	ldr	r2, [pc, #136]	; (800c8e0 <xTaskIncrementTick+0x160>)
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4a1f      	ldr	r2, [pc, #124]	; (800c8e4 <xTaskIncrementTick+0x164>)
 800c866:	441a      	add	r2, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	3304      	adds	r3, #4
 800c86c:	4619      	mov	r1, r3
 800c86e:	4610      	mov	r0, r2
 800c870:	f7fe fbad 	bl	800afce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c878:	4b1b      	ldr	r3, [pc, #108]	; (800c8e8 <xTaskIncrementTick+0x168>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87e:	429a      	cmp	r2, r3
 800c880:	d3b8      	bcc.n	800c7f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c882:	2301      	movs	r3, #1
 800c884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c886:	e7b5      	b.n	800c7f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c888:	4b17      	ldr	r3, [pc, #92]	; (800c8e8 <xTaskIncrementTick+0x168>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	4915      	ldr	r1, [pc, #84]	; (800c8e4 <xTaskIncrementTick+0x164>)
 800c890:	4613      	mov	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d901      	bls.n	800c8a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8a4:	4b11      	ldr	r3, [pc, #68]	; (800c8ec <xTaskIncrementTick+0x16c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d007      	beq.n	800c8bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	617b      	str	r3, [r7, #20]
 800c8b0:	e004      	b.n	800c8bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8b2:	4b0f      	ldr	r3, [pc, #60]	; (800c8f0 <xTaskIncrementTick+0x170>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	4a0d      	ldr	r2, [pc, #52]	; (800c8f0 <xTaskIncrementTick+0x170>)
 800c8ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8bc:	697b      	ldr	r3, [r7, #20]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20002b44 	.word	0x20002b44
 800c8cc:	20002b20 	.word	0x20002b20
 800c8d0:	20002ad4 	.word	0x20002ad4
 800c8d4:	20002ad8 	.word	0x20002ad8
 800c8d8:	20002b34 	.word	0x20002b34
 800c8dc:	20002b3c 	.word	0x20002b3c
 800c8e0:	20002b24 	.word	0x20002b24
 800c8e4:	2000264c 	.word	0x2000264c
 800c8e8:	20002648 	.word	0x20002648
 800c8ec:	20002b30 	.word	0x20002b30
 800c8f0:	20002b2c 	.word	0x20002b2c

0800c8f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8fa:	4b3a      	ldr	r3, [pc, #232]	; (800c9e4 <vTaskSwitchContext+0xf0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d003      	beq.n	800c90a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c902:	4b39      	ldr	r3, [pc, #228]	; (800c9e8 <vTaskSwitchContext+0xf4>)
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c908:	e068      	b.n	800c9dc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800c90a:	4b37      	ldr	r3, [pc, #220]	; (800c9e8 <vTaskSwitchContext+0xf4>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c910:	4b36      	ldr	r3, [pc, #216]	; (800c9ec <vTaskSwitchContext+0xf8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	429a      	cmp	r2, r3
 800c926:	d111      	bne.n	800c94c <vTaskSwitchContext+0x58>
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	3304      	adds	r3, #4
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	429a      	cmp	r2, r3
 800c932:	d10b      	bne.n	800c94c <vTaskSwitchContext+0x58>
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	3308      	adds	r3, #8
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d105      	bne.n	800c94c <vTaskSwitchContext+0x58>
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	330c      	adds	r3, #12
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d008      	beq.n	800c95e <vTaskSwitchContext+0x6a>
 800c94c:	4b27      	ldr	r3, [pc, #156]	; (800c9ec <vTaskSwitchContext+0xf8>)
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	4b26      	ldr	r3, [pc, #152]	; (800c9ec <vTaskSwitchContext+0xf8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3334      	adds	r3, #52	; 0x34
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7f5 fe39 	bl	80025d0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c95e:	4b24      	ldr	r3, [pc, #144]	; (800c9f0 <vTaskSwitchContext+0xfc>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e010      	b.n	800c988 <vTaskSwitchContext+0x94>
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <vTaskSwitchContext+0x8e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	607b      	str	r3, [r7, #4]
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <vTaskSwitchContext+0x8c>
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	3b01      	subs	r3, #1
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	491a      	ldr	r1, [pc, #104]	; (800c9f4 <vTaskSwitchContext+0x100>)
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	440b      	add	r3, r1
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0e4      	beq.n	800c966 <vTaskSwitchContext+0x72>
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <vTaskSwitchContext+0x100>)
 800c9a8:	4413      	add	r3, r2
 800c9aa:	60bb      	str	r3, [r7, #8]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d104      	bne.n	800c9cc <vTaskSwitchContext+0xd8>
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	605a      	str	r2, [r3, #4]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	4a06      	ldr	r2, [pc, #24]	; (800c9ec <vTaskSwitchContext+0xf8>)
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	4a06      	ldr	r2, [pc, #24]	; (800c9f0 <vTaskSwitchContext+0xfc>)
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	6013      	str	r3, [r2, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20002b44 	.word	0x20002b44
 800c9e8:	20002b30 	.word	0x20002b30
 800c9ec:	20002648 	.word	0x20002648
 800c9f0:	20002b24 	.word	0x20002b24
 800c9f4:	2000264c 	.word	0x2000264c

0800c9f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	60fb      	str	r3, [r7, #12]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca1e:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <vTaskPlaceOnEventList+0x44>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3318      	adds	r3, #24
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7fe faf5 	bl	800b016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	6838      	ldr	r0, [r7, #0]
 800ca30:	f000 fb8a 	bl	800d148 <prvAddCurrentTaskToDelayedList>
}
 800ca34:	bf00      	nop
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	20002648 	.word	0x20002648

0800ca40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10a      	bne.n	800ca68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	617b      	str	r3, [r7, #20]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca68:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <vTaskPlaceOnEventListRestricted+0x54>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3318      	adds	r3, #24
 800ca6e:	4619      	mov	r1, r3
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f7fe faac 	bl	800afce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	68b8      	ldr	r0, [r7, #8]
 800ca86:	f000 fb5f 	bl	800d148 <prvAddCurrentTaskToDelayedList>
	}
 800ca8a:	bf00      	nop
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20002648 	.word	0x20002648

0800ca98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10a      	bne.n	800cac4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	60fb      	str	r3, [r7, #12]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	3318      	adds	r3, #24
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fe fadd 	bl	800b088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cace:	4b1e      	ldr	r3, [pc, #120]	; (800cb48 <xTaskRemoveFromEventList+0xb0>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d11d      	bne.n	800cb12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	3304      	adds	r3, #4
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fad4 	bl	800b088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae4:	4b19      	ldr	r3, [pc, #100]	; (800cb4c <xTaskRemoveFromEventList+0xb4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d903      	bls.n	800caf4 <xTaskRemoveFromEventList+0x5c>
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	4a16      	ldr	r2, [pc, #88]	; (800cb4c <xTaskRemoveFromEventList+0xb4>)
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4a13      	ldr	r2, [pc, #76]	; (800cb50 <xTaskRemoveFromEventList+0xb8>)
 800cb02:	441a      	add	r2, r3
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fa5f 	bl	800afce <vListInsertEnd>
 800cb10:	e005      	b.n	800cb1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	3318      	adds	r3, #24
 800cb16:	4619      	mov	r1, r3
 800cb18:	480e      	ldr	r0, [pc, #56]	; (800cb54 <xTaskRemoveFromEventList+0xbc>)
 800cb1a:	f7fe fa58 	bl	800afce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb22:	4b0d      	ldr	r3, [pc, #52]	; (800cb58 <xTaskRemoveFromEventList+0xc0>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d905      	bls.n	800cb38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <xTaskRemoveFromEventList+0xc4>)
 800cb32:	2201      	movs	r2, #1
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	e001      	b.n	800cb3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb3c:	697b      	ldr	r3, [r7, #20]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20002b44 	.word	0x20002b44
 800cb4c:	20002b24 	.word	0x20002b24
 800cb50:	2000264c 	.word	0x2000264c
 800cb54:	20002adc 	.word	0x20002adc
 800cb58:	20002648 	.word	0x20002648
 800cb5c:	20002b30 	.word	0x20002b30

0800cb60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb68:	4b06      	ldr	r3, [pc, #24]	; (800cb84 <vTaskInternalSetTimeOutState+0x24>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb70:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <vTaskInternalSetTimeOutState+0x28>)
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	605a      	str	r2, [r3, #4]
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	20002b34 	.word	0x20002b34
 800cb88:	20002b20 	.word	0x20002b20

0800cb8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	613b      	str	r3, [r7, #16]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10a      	bne.n	800cbce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	60fb      	str	r3, [r7, #12]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbce:	f000 ff89 	bl	800dae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbd2:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <xTaskCheckForTimeOut+0xbc>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbea:	d102      	bne.n	800cbf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e023      	b.n	800cc3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b15      	ldr	r3, [pc, #84]	; (800cc4c <xTaskCheckForTimeOut+0xc0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d007      	beq.n	800cc0e <xTaskCheckForTimeOut+0x82>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	69ba      	ldr	r2, [r7, #24]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d302      	bcc.n	800cc0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	e015      	b.n	800cc3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d20b      	bcs.n	800cc30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	1ad2      	subs	r2, r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ff9b 	bl	800cb60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	e004      	b.n	800cc3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc36:	2301      	movs	r3, #1
 800cc38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc3a:	f000 ff83 	bl	800db44 <vPortExitCritical>

	return xReturn;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20002b20 	.word	0x20002b20
 800cc4c:	20002b34 	.word	0x20002b34

0800cc50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc50:	b480      	push	{r7}
 800cc52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc54:	4b03      	ldr	r3, [pc, #12]	; (800cc64 <vTaskMissedYield+0x14>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	601a      	str	r2, [r3, #0]
}
 800cc5a:	bf00      	nop
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	20002b30 	.word	0x20002b30

0800cc68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc70:	f000 f852 	bl	800cd18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <prvIdleTask+0x28>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d9f9      	bls.n	800cc70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <prvIdleTask+0x2c>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc8c:	e7f0      	b.n	800cc70 <prvIdleTask+0x8>
 800cc8e:	bf00      	nop
 800cc90:	2000264c 	.word	0x2000264c
 800cc94:	e000ed04 	.word	0xe000ed04

0800cc98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc9e:	2300      	movs	r3, #0
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	e00c      	b.n	800ccbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	4613      	mov	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4a12      	ldr	r2, [pc, #72]	; (800ccf8 <prvInitialiseTaskLists+0x60>)
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe f95e 	bl	800af74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b37      	cmp	r3, #55	; 0x37
 800ccc2:	d9ef      	bls.n	800cca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ccc4:	480d      	ldr	r0, [pc, #52]	; (800ccfc <prvInitialiseTaskLists+0x64>)
 800ccc6:	f7fe f955 	bl	800af74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccca:	480d      	ldr	r0, [pc, #52]	; (800cd00 <prvInitialiseTaskLists+0x68>)
 800cccc:	f7fe f952 	bl	800af74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccd0:	480c      	ldr	r0, [pc, #48]	; (800cd04 <prvInitialiseTaskLists+0x6c>)
 800ccd2:	f7fe f94f 	bl	800af74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccd6:	480c      	ldr	r0, [pc, #48]	; (800cd08 <prvInitialiseTaskLists+0x70>)
 800ccd8:	f7fe f94c 	bl	800af74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccdc:	480b      	ldr	r0, [pc, #44]	; (800cd0c <prvInitialiseTaskLists+0x74>)
 800ccde:	f7fe f949 	bl	800af74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <prvInitialiseTaskLists+0x78>)
 800cce4:	4a05      	ldr	r2, [pc, #20]	; (800ccfc <prvInitialiseTaskLists+0x64>)
 800cce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cce8:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <prvInitialiseTaskLists+0x7c>)
 800ccea:	4a05      	ldr	r2, [pc, #20]	; (800cd00 <prvInitialiseTaskLists+0x68>)
 800ccec:	601a      	str	r2, [r3, #0]
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	2000264c 	.word	0x2000264c
 800ccfc:	20002aac 	.word	0x20002aac
 800cd00:	20002ac0 	.word	0x20002ac0
 800cd04:	20002adc 	.word	0x20002adc
 800cd08:	20002af0 	.word	0x20002af0
 800cd0c:	20002b08 	.word	0x20002b08
 800cd10:	20002ad4 	.word	0x20002ad4
 800cd14:	20002ad8 	.word	0x20002ad8

0800cd18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd1e:	e019      	b.n	800cd54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd20:	f000 fee0 	bl	800dae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd24:	4b10      	ldr	r3, [pc, #64]	; (800cd68 <prvCheckTasksWaitingTermination+0x50>)
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe f9a9 	bl	800b088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd36:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <prvCheckTasksWaitingTermination+0x54>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	4a0b      	ldr	r2, [pc, #44]	; (800cd6c <prvCheckTasksWaitingTermination+0x54>)
 800cd3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <prvCheckTasksWaitingTermination+0x58>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	4a0a      	ldr	r2, [pc, #40]	; (800cd70 <prvCheckTasksWaitingTermination+0x58>)
 800cd48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd4a:	f000 fefb 	bl	800db44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f810 	bl	800cd74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd54:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <prvCheckTasksWaitingTermination+0x58>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1e1      	bne.n	800cd20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd5c:	bf00      	nop
 800cd5e:	bf00      	nop
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	20002af0 	.word	0x20002af0
 800cd6c:	20002b1c 	.word	0x20002b1c
 800cd70:	20002b04 	.word	0x20002b04

0800cd74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d108      	bne.n	800cd98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 f898 	bl	800dec0 <vPortFree>
				vPortFree( pxTCB );
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 f895 	bl	800dec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd96:	e018      	b.n	800cdca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d103      	bne.n	800cdaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 f88c 	bl	800dec0 <vPortFree>
	}
 800cda8:	e00f      	b.n	800cdca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d00a      	beq.n	800cdca <prvDeleteTCB+0x56>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60fb      	str	r3, [r7, #12]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <prvDeleteTCB+0x54>
	}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdda:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <prvResetNextTaskUnblockTime+0x38>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d104      	bne.n	800cdee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cde4:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <prvResetNextTaskUnblockTime+0x3c>)
 800cde6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdec:	e008      	b.n	800ce00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdee:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <prvResetNextTaskUnblockTime+0x38>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	4a04      	ldr	r2, [pc, #16]	; (800ce10 <prvResetNextTaskUnblockTime+0x3c>)
 800cdfe:	6013      	str	r3, [r2, #0]
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	20002ad4 	.word	0x20002ad4
 800ce10:	20002b3c 	.word	0x20002b3c

0800ce14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ce1a:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <xTaskGetCurrentTaskHandle+0x1c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ce20:	687b      	ldr	r3, [r7, #4]
	}
 800ce22:	4618      	mov	r0, r3
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	20002648 	.word	0x20002648

0800ce34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <xTaskGetSchedulerState+0x34>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce42:	2301      	movs	r3, #1
 800ce44:	607b      	str	r3, [r7, #4]
 800ce46:	e008      	b.n	800ce5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce48:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <xTaskGetSchedulerState+0x38>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce50:	2302      	movs	r3, #2
 800ce52:	607b      	str	r3, [r7, #4]
 800ce54:	e001      	b.n	800ce5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce56:	2300      	movs	r3, #0
 800ce58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce5a:	687b      	ldr	r3, [r7, #4]
	}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	20002b28 	.word	0x20002b28
 800ce6c:	20002b44 	.word	0x20002b44

0800ce70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d051      	beq.n	800cf2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8a:	4b2a      	ldr	r3, [pc, #168]	; (800cf34 <xTaskPriorityInherit+0xc4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d241      	bcs.n	800cf18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	db06      	blt.n	800ceaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9c:	4b25      	ldr	r3, [pc, #148]	; (800cf34 <xTaskPriorityInherit+0xc4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	6959      	ldr	r1, [r3, #20]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4a1f      	ldr	r2, [pc, #124]	; (800cf38 <xTaskPriorityInherit+0xc8>)
 800cebc:	4413      	add	r3, r2
 800cebe:	4299      	cmp	r1, r3
 800cec0:	d122      	bne.n	800cf08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	3304      	adds	r3, #4
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe f8de 	bl	800b088 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cecc:	4b19      	ldr	r3, [pc, #100]	; (800cf34 <xTaskPriorityInherit+0xc4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	4b18      	ldr	r3, [pc, #96]	; (800cf3c <xTaskPriorityInherit+0xcc>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d903      	bls.n	800ceea <xTaskPriorityInherit+0x7a>
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee6:	4a15      	ldr	r2, [pc, #84]	; (800cf3c <xTaskPriorityInherit+0xcc>)
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4a10      	ldr	r2, [pc, #64]	; (800cf38 <xTaskPriorityInherit+0xc8>)
 800cef8:	441a      	add	r2, r3
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7fe f864 	bl	800afce <vListInsertEnd>
 800cf06:	e004      	b.n	800cf12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf08:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <xTaskPriorityInherit+0xc4>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cf12:	2301      	movs	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e008      	b.n	800cf2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf1c:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <xTaskPriorityInherit+0xc4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d201      	bcs.n	800cf2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf26:	2301      	movs	r3, #1
 800cf28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
	}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	20002648 	.word	0x20002648
 800cf38:	2000264c 	.word	0x2000264c
 800cf3c:	20002b24 	.word	0x20002b24

0800cf40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d056      	beq.n	800d004 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf56:	4b2e      	ldr	r3, [pc, #184]	; (800d010 <xTaskPriorityDisinherit+0xd0>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d00a      	beq.n	800cf76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	60fb      	str	r3, [r7, #12]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60bb      	str	r3, [r7, #8]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf98:	1e5a      	subs	r2, r3, #1
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d02c      	beq.n	800d004 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d128      	bne.n	800d004 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe f866 	bl	800b088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd4:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <xTaskPriorityDisinherit+0xd4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d903      	bls.n	800cfe4 <xTaskPriorityDisinherit+0xa4>
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	4a0c      	ldr	r2, [pc, #48]	; (800d014 <xTaskPriorityDisinherit+0xd4>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4a09      	ldr	r2, [pc, #36]	; (800d018 <xTaskPriorityDisinherit+0xd8>)
 800cff2:	441a      	add	r2, r3
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4619      	mov	r1, r3
 800cffa:	4610      	mov	r0, r2
 800cffc:	f7fd ffe7 	bl	800afce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d000:	2301      	movs	r3, #1
 800d002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d004:	697b      	ldr	r3, [r7, #20]
	}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	20002648 	.word	0x20002648
 800d014:	20002b24 	.word	0x20002b24
 800d018:	2000264c 	.word	0x2000264c

0800d01c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d02a:	2301      	movs	r3, #1
 800d02c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d06a      	beq.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	60fb      	str	r3, [r7, #12]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d902      	bls.n	800d062 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	61fb      	str	r3, [r7, #28]
 800d060:	e002      	b.n	800d068 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d066:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	69fa      	ldr	r2, [r7, #28]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d04b      	beq.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d146      	bne.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d07c:	4b25      	ldr	r3, [pc, #148]	; (800d114 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	429a      	cmp	r2, r3
 800d084:	d10a      	bne.n	800d09c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60bb      	str	r3, [r7, #8]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	69fa      	ldr	r2, [r7, #28]
 800d0a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	db04      	blt.n	800d0ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	6959      	ldr	r1, [r3, #20]
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4a13      	ldr	r2, [pc, #76]	; (800d118 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d0ca:	4413      	add	r3, r2
 800d0cc:	4299      	cmp	r1, r3
 800d0ce:	d11c      	bne.n	800d10a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fd ffd7 	bl	800b088 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d903      	bls.n	800d0ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	4a0c      	ldr	r2, [pc, #48]	; (800d11c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	4a07      	ldr	r2, [pc, #28]	; (800d118 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d0fc:	441a      	add	r2, r3
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	3304      	adds	r3, #4
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	f7fd ff62 	bl	800afce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d10a:	bf00      	nop
 800d10c:	3720      	adds	r7, #32
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	20002648 	.word	0x20002648
 800d118:	2000264c 	.word	0x2000264c
 800d11c:	20002b24 	.word	0x20002b24

0800d120 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d124:	4b07      	ldr	r3, [pc, #28]	; (800d144 <pvTaskIncrementMutexHeldCount+0x24>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d004      	beq.n	800d136 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <pvTaskIncrementMutexHeldCount+0x24>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d132:	3201      	adds	r2, #1
 800d134:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d136:	4b03      	ldr	r3, [pc, #12]	; (800d144 <pvTaskIncrementMutexHeldCount+0x24>)
 800d138:	681b      	ldr	r3, [r3, #0]
	}
 800d13a:	4618      	mov	r0, r3
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	20002648 	.word	0x20002648

0800d148 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d152:	4b21      	ldr	r3, [pc, #132]	; (800d1d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d158:	4b20      	ldr	r3, [pc, #128]	; (800d1dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd ff92 	bl	800b088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d10a      	bne.n	800d182 <prvAddCurrentTaskToDelayedList+0x3a>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d172:	4b1a      	ldr	r3, [pc, #104]	; (800d1dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3304      	adds	r3, #4
 800d178:	4619      	mov	r1, r3
 800d17a:	4819      	ldr	r0, [pc, #100]	; (800d1e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d17c:	f7fd ff27 	bl	800afce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d180:	e026      	b.n	800d1d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4413      	add	r3, r2
 800d188:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d18a:	4b14      	ldr	r3, [pc, #80]	; (800d1dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	429a      	cmp	r2, r3
 800d198:	d209      	bcs.n	800d1ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d19a:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	f7fd ff35 	bl	800b016 <vListInsert>
}
 800d1ac:	e010      	b.n	800d1d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1ae:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	f7fd ff2b 	bl	800b016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d202      	bcs.n	800d1d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d1ca:	4a08      	ldr	r2, [pc, #32]	; (800d1ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	6013      	str	r3, [r2, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	20002b20 	.word	0x20002b20
 800d1dc:	20002648 	.word	0x20002648
 800d1e0:	20002b08 	.word	0x20002b08
 800d1e4:	20002ad8 	.word	0x20002ad8
 800d1e8:	20002ad4 	.word	0x20002ad4
 800d1ec:	20002b3c 	.word	0x20002b3c

0800d1f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d1fa:	f000 fb07 	bl	800d80c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d1fe:	4b1c      	ldr	r3, [pc, #112]	; (800d270 <xTimerCreateTimerTask+0x80>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d021      	beq.n	800d24a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d20e:	1d3a      	adds	r2, r7, #4
 800d210:	f107 0108 	add.w	r1, r7, #8
 800d214:	f107 030c 	add.w	r3, r7, #12
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fd fe91 	bl	800af40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	9202      	str	r2, [sp, #8]
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	2302      	movs	r3, #2
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	2300      	movs	r3, #0
 800d22e:	460a      	mov	r2, r1
 800d230:	4910      	ldr	r1, [pc, #64]	; (800d274 <xTimerCreateTimerTask+0x84>)
 800d232:	4811      	ldr	r0, [pc, #68]	; (800d278 <xTimerCreateTimerTask+0x88>)
 800d234:	f7fe ffac 	bl	800c190 <xTaskCreateStatic>
 800d238:	4603      	mov	r3, r0
 800d23a:	4a10      	ldr	r2, [pc, #64]	; (800d27c <xTimerCreateTimerTask+0x8c>)
 800d23c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d23e:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <xTimerCreateTimerTask+0x8c>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d246:	2301      	movs	r3, #1
 800d248:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	613b      	str	r3, [r7, #16]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d266:	697b      	ldr	r3, [r7, #20]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3718      	adds	r7, #24
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	20002b78 	.word	0x20002b78
 800d274:	08011278 	.word	0x08011278
 800d278:	0800d3b5 	.word	0x0800d3b5
 800d27c:	20002b7c 	.word	0x20002b7c

0800d280 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	; 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d28e:	2300      	movs	r3, #0
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10a      	bne.n	800d2ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	623b      	str	r3, [r7, #32]
}
 800d2aa:	bf00      	nop
 800d2ac:	e7fe      	b.n	800d2ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <xTimerGenericCommand+0x98>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d02a      	beq.n	800d30c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b05      	cmp	r3, #5
 800d2c6:	dc18      	bgt.n	800d2fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2c8:	f7ff fdb4 	bl	800ce34 <xTaskGetSchedulerState>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d109      	bne.n	800d2e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2d2:	4b11      	ldr	r3, [pc, #68]	; (800d318 <xTimerGenericCommand+0x98>)
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	f107 0110 	add.w	r1, r7, #16
 800d2da:	2300      	movs	r3, #0
 800d2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2de:	f7fe f95b 	bl	800b598 <xQueueGenericSend>
 800d2e2:	6278      	str	r0, [r7, #36]	; 0x24
 800d2e4:	e012      	b.n	800d30c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	; (800d318 <xTimerGenericCommand+0x98>)
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	f107 0110 	add.w	r1, r7, #16
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f7fe f951 	bl	800b598 <xQueueGenericSend>
 800d2f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d2f8:	e008      	b.n	800d30c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d2fa:	4b07      	ldr	r3, [pc, #28]	; (800d318 <xTimerGenericCommand+0x98>)
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f107 0110 	add.w	r1, r7, #16
 800d302:	2300      	movs	r3, #0
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	f7fe fa45 	bl	800b794 <xQueueGenericSendFromISR>
 800d30a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3728      	adds	r7, #40	; 0x28
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20002b78 	.word	0x20002b78

0800d31c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af02      	add	r7, sp, #8
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d326:	4b22      	ldr	r3, [pc, #136]	; (800d3b0 <prvProcessExpiredTimer+0x94>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	3304      	adds	r3, #4
 800d334:	4618      	mov	r0, r3
 800d336:	f7fd fea7 	bl	800b088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d022      	beq.n	800d38e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	699a      	ldr	r2, [r3, #24]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	18d1      	adds	r1, r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	6978      	ldr	r0, [r7, #20]
 800d356:	f000 f8d1 	bl	800d4fc <prvInsertTimerInActiveList>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01f      	beq.n	800d3a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d360:	2300      	movs	r3, #0
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	2300      	movs	r3, #0
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	2100      	movs	r1, #0
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	f7ff ff88 	bl	800d280 <xTimerGenericCommand>
 800d370:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d113      	bne.n	800d3a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	60fb      	str	r3, [r7, #12]
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d394:	f023 0301 	bic.w	r3, r3, #1
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	6978      	ldr	r0, [r7, #20]
 800d3a6:	4798      	blx	r3
}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20002b70 	.word	0x20002b70

0800d3b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3bc:	f107 0308 	add.w	r3, r7, #8
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 f857 	bl	800d474 <prvGetNextExpireTime>
 800d3c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f803 	bl	800d3d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3d2:	f000 f8d5 	bl	800d580 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3d6:	e7f1      	b.n	800d3bc <prvTimerTask+0x8>

0800d3d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3e2:	f7ff f911 	bl	800c608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3e6:	f107 0308 	add.w	r3, r7, #8
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f866 	bl	800d4bc <prvSampleTimeNow>
 800d3f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d130      	bne.n	800d45a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <prvProcessTimerOrBlockTask+0x3c>
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	429a      	cmp	r2, r3
 800d404:	d806      	bhi.n	800d414 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d406:	f7ff f90d 	bl	800c624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d40a:	68f9      	ldr	r1, [r7, #12]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ff85 	bl	800d31c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d412:	e024      	b.n	800d45e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d008      	beq.n	800d42c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d41a:	4b13      	ldr	r3, [pc, #76]	; (800d468 <prvProcessTimerOrBlockTask+0x90>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <prvProcessTimerOrBlockTask+0x50>
 800d424:	2301      	movs	r3, #1
 800d426:	e000      	b.n	800d42a <prvProcessTimerOrBlockTask+0x52>
 800d428:	2300      	movs	r3, #0
 800d42a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d42c:	4b0f      	ldr	r3, [pc, #60]	; (800d46c <prvProcessTimerOrBlockTask+0x94>)
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	4619      	mov	r1, r3
 800d43a:	f7fe fe75 	bl	800c128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d43e:	f7ff f8f1 	bl	800c624 <xTaskResumeAll>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10a      	bne.n	800d45e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d448:	4b09      	ldr	r3, [pc, #36]	; (800d470 <prvProcessTimerOrBlockTask+0x98>)
 800d44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	f3bf 8f6f 	isb	sy
}
 800d458:	e001      	b.n	800d45e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d45a:	f7ff f8e3 	bl	800c624 <xTaskResumeAll>
}
 800d45e:	bf00      	nop
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20002b74 	.word	0x20002b74
 800d46c:	20002b78 	.word	0x20002b78
 800d470:	e000ed04 	.word	0xe000ed04

0800d474 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d47c:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <prvGetNextExpireTime+0x44>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <prvGetNextExpireTime+0x16>
 800d486:	2201      	movs	r2, #1
 800d488:	e000      	b.n	800d48c <prvGetNextExpireTime+0x18>
 800d48a:	2200      	movs	r2, #0
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d105      	bne.n	800d4a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d498:	4b07      	ldr	r3, [pc, #28]	; (800d4b8 <prvGetNextExpireTime+0x44>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e001      	b.n	800d4a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20002b70 	.word	0x20002b70

0800d4bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4c4:	f7ff f94c 	bl	800c760 <xTaskGetTickCount>
 800d4c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4ca:	4b0b      	ldr	r3, [pc, #44]	; (800d4f8 <prvSampleTimeNow+0x3c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d205      	bcs.n	800d4e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4d4:	f000 f936 	bl	800d744 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	e002      	b.n	800d4e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4e6:	4a04      	ldr	r2, [pc, #16]	; (800d4f8 <prvSampleTimeNow+0x3c>)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20002b80 	.word	0x20002b80

0800d4fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d50a:	2300      	movs	r3, #0
 800d50c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d812      	bhi.n	800d548 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	1ad2      	subs	r2, r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d302      	bcc.n	800d536 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d530:	2301      	movs	r3, #1
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	e01b      	b.n	800d56e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <prvInsertTimerInActiveList+0x7c>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3304      	adds	r3, #4
 800d53e:	4619      	mov	r1, r3
 800d540:	4610      	mov	r0, r2
 800d542:	f7fd fd68 	bl	800b016 <vListInsert>
 800d546:	e012      	b.n	800d56e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d206      	bcs.n	800d55e <prvInsertTimerInActiveList+0x62>
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d302      	bcc.n	800d55e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d558:	2301      	movs	r3, #1
 800d55a:	617b      	str	r3, [r7, #20]
 800d55c:	e007      	b.n	800d56e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d55e:	4b07      	ldr	r3, [pc, #28]	; (800d57c <prvInsertTimerInActiveList+0x80>)
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7fd fd54 	bl	800b016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d56e:	697b      	ldr	r3, [r7, #20]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3718      	adds	r7, #24
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	20002b74 	.word	0x20002b74
 800d57c:	20002b70 	.word	0x20002b70

0800d580 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08e      	sub	sp, #56	; 0x38
 800d584:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d586:	e0ca      	b.n	800d71e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da18      	bge.n	800d5c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d58e:	1d3b      	adds	r3, r7, #4
 800d590:	3304      	adds	r3, #4
 800d592:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10a      	bne.n	800d5b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	61fb      	str	r3, [r7, #28]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b6:	6850      	ldr	r0, [r2, #4]
 800d5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ba:	6892      	ldr	r2, [r2, #8]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f2c0 80ab 	blt.w	800d71e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fd fd55 	bl	800b088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5de:	463b      	mov	r3, r7
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff ff6b 	bl	800d4bc <prvSampleTimeNow>
 800d5e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b09      	cmp	r3, #9
 800d5ec:	f200 8096 	bhi.w	800d71c <prvProcessReceivedCommands+0x19c>
 800d5f0:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <prvProcessReceivedCommands+0x78>)
 800d5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f6:	bf00      	nop
 800d5f8:	0800d621 	.word	0x0800d621
 800d5fc:	0800d621 	.word	0x0800d621
 800d600:	0800d621 	.word	0x0800d621
 800d604:	0800d695 	.word	0x0800d695
 800d608:	0800d6a9 	.word	0x0800d6a9
 800d60c:	0800d6f3 	.word	0x0800d6f3
 800d610:	0800d621 	.word	0x0800d621
 800d614:	0800d621 	.word	0x0800d621
 800d618:	0800d695 	.word	0x0800d695
 800d61c:	0800d6a9 	.word	0x0800d6a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d626:	f043 0301 	orr.w	r3, r3, #1
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	18d1      	adds	r1, r2, r3
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d63e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d640:	f7ff ff5c 	bl	800d4fc <prvInsertTimerInActiveList>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d069      	beq.n	800d71e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	6a1b      	ldr	r3, [r3, #32]
 800d64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d650:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d05e      	beq.n	800d71e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	441a      	add	r2, r3
 800d668:	2300      	movs	r3, #0
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	2300      	movs	r3, #0
 800d66e:	2100      	movs	r1, #0
 800d670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d672:	f7ff fe05 	bl	800d280 <xTimerGenericCommand>
 800d676:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d14f      	bne.n	800d71e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	61bb      	str	r3, [r7, #24]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d69a:	f023 0301 	bic.w	r3, r3, #1
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d6a6:	e03a      	b.n	800d71e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	b2da      	uxtb	r2, r3
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10a      	bne.n	800d6de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	617b      	str	r3, [r7, #20]
}
 800d6da:	bf00      	nop
 800d6dc:	e7fe      	b.n	800d6dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	699a      	ldr	r2, [r3, #24]
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	18d1      	adds	r1, r2, r3
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6ec:	f7ff ff06 	bl	800d4fc <prvInsertTimerInActiveList>
					break;
 800d6f0:	e015      	b.n	800d71e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d103      	bne.n	800d708 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d702:	f000 fbdd 	bl	800dec0 <vPortFree>
 800d706:	e00a      	b.n	800d71e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d70e:	f023 0301 	bic.w	r3, r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d71a:	e000      	b.n	800d71e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d71c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d71e:	4b08      	ldr	r3, [pc, #32]	; (800d740 <prvProcessReceivedCommands+0x1c0>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	1d39      	adds	r1, r7, #4
 800d724:	2200      	movs	r2, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe f8d0 	bl	800b8cc <xQueueReceive>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f47f af2a 	bne.w	800d588 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	3730      	adds	r7, #48	; 0x30
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	20002b78 	.word	0x20002b78

0800d744 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b088      	sub	sp, #32
 800d748:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d74a:	e048      	b.n	800d7de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d74c:	4b2d      	ldr	r3, [pc, #180]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d756:	4b2b      	ldr	r3, [pc, #172]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3304      	adds	r3, #4
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd fc8f 	bl	800b088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d02e      	beq.n	800d7de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	4413      	add	r3, r2
 800d788:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d90e      	bls.n	800d7b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d79e:	4b19      	ldr	r3, [pc, #100]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f7fd fc34 	bl	800b016 <vListInsert>
 800d7ae:	e016      	b.n	800d7de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff fd60 	bl	800d280 <xTimerGenericCommand>
 800d7c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	603b      	str	r3, [r7, #0]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7de:	4b09      	ldr	r3, [pc, #36]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1b1      	bne.n	800d74c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7e8:	4b06      	ldr	r3, [pc, #24]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <prvSwitchTimerLists+0xc4>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a04      	ldr	r2, [pc, #16]	; (800d804 <prvSwitchTimerLists+0xc0>)
 800d7f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d7f6:	4a04      	ldr	r2, [pc, #16]	; (800d808 <prvSwitchTimerLists+0xc4>)
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	6013      	str	r3, [r2, #0]
}
 800d7fc:	bf00      	nop
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20002b70 	.word	0x20002b70
 800d808:	20002b74 	.word	0x20002b74

0800d80c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d812:	f000 f967 	bl	800dae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d816:	4b15      	ldr	r3, [pc, #84]	; (800d86c <prvCheckForValidListAndQueue+0x60>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d120      	bne.n	800d860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d81e:	4814      	ldr	r0, [pc, #80]	; (800d870 <prvCheckForValidListAndQueue+0x64>)
 800d820:	f7fd fba8 	bl	800af74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d824:	4813      	ldr	r0, [pc, #76]	; (800d874 <prvCheckForValidListAndQueue+0x68>)
 800d826:	f7fd fba5 	bl	800af74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d82a:	4b13      	ldr	r3, [pc, #76]	; (800d878 <prvCheckForValidListAndQueue+0x6c>)
 800d82c:	4a10      	ldr	r2, [pc, #64]	; (800d870 <prvCheckForValidListAndQueue+0x64>)
 800d82e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d830:	4b12      	ldr	r3, [pc, #72]	; (800d87c <prvCheckForValidListAndQueue+0x70>)
 800d832:	4a10      	ldr	r2, [pc, #64]	; (800d874 <prvCheckForValidListAndQueue+0x68>)
 800d834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d836:	2300      	movs	r3, #0
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	4b11      	ldr	r3, [pc, #68]	; (800d880 <prvCheckForValidListAndQueue+0x74>)
 800d83c:	4a11      	ldr	r2, [pc, #68]	; (800d884 <prvCheckForValidListAndQueue+0x78>)
 800d83e:	2110      	movs	r1, #16
 800d840:	200a      	movs	r0, #10
 800d842:	f7fd fcb3 	bl	800b1ac <xQueueGenericCreateStatic>
 800d846:	4603      	mov	r3, r0
 800d848:	4a08      	ldr	r2, [pc, #32]	; (800d86c <prvCheckForValidListAndQueue+0x60>)
 800d84a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d84c:	4b07      	ldr	r3, [pc, #28]	; (800d86c <prvCheckForValidListAndQueue+0x60>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d005      	beq.n	800d860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <prvCheckForValidListAndQueue+0x60>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	490b      	ldr	r1, [pc, #44]	; (800d888 <prvCheckForValidListAndQueue+0x7c>)
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fe fc10 	bl	800c080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d860:	f000 f970 	bl	800db44 <vPortExitCritical>
}
 800d864:	bf00      	nop
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20002b78 	.word	0x20002b78
 800d870:	20002b48 	.word	0x20002b48
 800d874:	20002b5c 	.word	0x20002b5c
 800d878:	20002b70 	.word	0x20002b70
 800d87c:	20002b74 	.word	0x20002b74
 800d880:	20002c24 	.word	0x20002c24
 800d884:	20002b84 	.word	0x20002b84
 800d888:	08011280 	.word	0x08011280

0800d88c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3b04      	subs	r3, #4
 800d89c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3b04      	subs	r3, #4
 800d8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f023 0201 	bic.w	r2, r3, #1
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3b04      	subs	r3, #4
 800d8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8bc:	4a0c      	ldr	r2, [pc, #48]	; (800d8f0 <pxPortInitialiseStack+0x64>)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3b14      	subs	r3, #20
 800d8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3b04      	subs	r3, #4
 800d8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f06f 0202 	mvn.w	r2, #2
 800d8da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3b20      	subs	r3, #32
 800d8e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	0800d8f5 	.word	0x0800d8f5

0800d8f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d8fe:	4b12      	ldr	r3, [pc, #72]	; (800d948 <prvTaskExitError+0x54>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d906:	d00a      	beq.n	800d91e <prvTaskExitError+0x2a>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	60fb      	str	r3, [r7, #12]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <prvTaskExitError+0x28>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60bb      	str	r3, [r7, #8]
}
 800d930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d932:	bf00      	nop
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0fc      	beq.n	800d934 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d93a:	bf00      	nop
 800d93c:	bf00      	nop
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	20000014 	.word	0x20000014
 800d94c:	00000000 	.word	0x00000000

0800d950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <pxCurrentTCBConst2>)
 800d952:	6819      	ldr	r1, [r3, #0]
 800d954:	6808      	ldr	r0, [r1, #0]
 800d956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95a:	f380 8809 	msr	PSP, r0
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f04f 0000 	mov.w	r0, #0
 800d966:	f380 8811 	msr	BASEPRI, r0
 800d96a:	4770      	bx	lr
 800d96c:	f3af 8000 	nop.w

0800d970 <pxCurrentTCBConst2>:
 800d970:	20002648 	.word	0x20002648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop

0800d978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d978:	4808      	ldr	r0, [pc, #32]	; (800d99c <prvPortStartFirstTask+0x24>)
 800d97a:	6800      	ldr	r0, [r0, #0]
 800d97c:	6800      	ldr	r0, [r0, #0]
 800d97e:	f380 8808 	msr	MSP, r0
 800d982:	f04f 0000 	mov.w	r0, #0
 800d986:	f380 8814 	msr	CONTROL, r0
 800d98a:	b662      	cpsie	i
 800d98c:	b661      	cpsie	f
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	df00      	svc	0
 800d998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d99a:	bf00      	nop
 800d99c:	e000ed08 	.word	0xe000ed08

0800d9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9a6:	4b46      	ldr	r3, [pc, #280]	; (800dac0 <xPortStartScheduler+0x120>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a46      	ldr	r2, [pc, #280]	; (800dac4 <xPortStartScheduler+0x124>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d10a      	bne.n	800d9c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	613b      	str	r3, [r7, #16]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9c6:	4b3e      	ldr	r3, [pc, #248]	; (800dac0 <xPortStartScheduler+0x120>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a3f      	ldr	r2, [pc, #252]	; (800dac8 <xPortStartScheduler+0x128>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d10a      	bne.n	800d9e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	60fb      	str	r3, [r7, #12]
}
 800d9e2:	bf00      	nop
 800d9e4:	e7fe      	b.n	800d9e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9e6:	4b39      	ldr	r3, [pc, #228]	; (800dacc <xPortStartScheduler+0x12c>)
 800d9e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	22ff      	movs	r2, #255	; 0xff
 800d9f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	b2db      	uxtb	r3, r3
 800da04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	4b31      	ldr	r3, [pc, #196]	; (800dad0 <xPortStartScheduler+0x130>)
 800da0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da0e:	4b31      	ldr	r3, [pc, #196]	; (800dad4 <xPortStartScheduler+0x134>)
 800da10:	2207      	movs	r2, #7
 800da12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da14:	e009      	b.n	800da2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800da16:	4b2f      	ldr	r3, [pc, #188]	; (800dad4 <xPortStartScheduler+0x134>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	4a2d      	ldr	r2, [pc, #180]	; (800dad4 <xPortStartScheduler+0x134>)
 800da1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	b2db      	uxtb	r3, r3
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	b2db      	uxtb	r3, r3
 800da28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da2a:	78fb      	ldrb	r3, [r7, #3]
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da32:	2b80      	cmp	r3, #128	; 0x80
 800da34:	d0ef      	beq.n	800da16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da36:	4b27      	ldr	r3, [pc, #156]	; (800dad4 <xPortStartScheduler+0x134>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f1c3 0307 	rsb	r3, r3, #7
 800da3e:	2b04      	cmp	r3, #4
 800da40:	d00a      	beq.n	800da58 <xPortStartScheduler+0xb8>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60bb      	str	r3, [r7, #8]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da58:	4b1e      	ldr	r3, [pc, #120]	; (800dad4 <xPortStartScheduler+0x134>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	021b      	lsls	r3, r3, #8
 800da5e:	4a1d      	ldr	r2, [pc, #116]	; (800dad4 <xPortStartScheduler+0x134>)
 800da60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da62:	4b1c      	ldr	r3, [pc, #112]	; (800dad4 <xPortStartScheduler+0x134>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da6a:	4a1a      	ldr	r2, [pc, #104]	; (800dad4 <xPortStartScheduler+0x134>)
 800da6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	b2da      	uxtb	r2, r3
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da76:	4b18      	ldr	r3, [pc, #96]	; (800dad8 <xPortStartScheduler+0x138>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a17      	ldr	r2, [pc, #92]	; (800dad8 <xPortStartScheduler+0x138>)
 800da7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da82:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <xPortStartScheduler+0x138>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a14      	ldr	r2, [pc, #80]	; (800dad8 <xPortStartScheduler+0x138>)
 800da88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800da8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da8e:	f000 f8dd 	bl	800dc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da92:	4b12      	ldr	r3, [pc, #72]	; (800dadc <xPortStartScheduler+0x13c>)
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da98:	f000 f8fc 	bl	800dc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da9c:	4b10      	ldr	r3, [pc, #64]	; (800dae0 <xPortStartScheduler+0x140>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a0f      	ldr	r2, [pc, #60]	; (800dae0 <xPortStartScheduler+0x140>)
 800daa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800daa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800daa8:	f7ff ff66 	bl	800d978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800daac:	f7fe ff22 	bl	800c8f4 <vTaskSwitchContext>
	prvTaskExitError();
 800dab0:	f7ff ff20 	bl	800d8f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	e000ed00 	.word	0xe000ed00
 800dac4:	410fc271 	.word	0x410fc271
 800dac8:	410fc270 	.word	0x410fc270
 800dacc:	e000e400 	.word	0xe000e400
 800dad0:	20002c74 	.word	0x20002c74
 800dad4:	20002c78 	.word	0x20002c78
 800dad8:	e000ed20 	.word	0xe000ed20
 800dadc:	20000014 	.word	0x20000014
 800dae0:	e000ef34 	.word	0xe000ef34

0800dae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	607b      	str	r3, [r7, #4]
}
 800dafc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dafe:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <vPortEnterCritical+0x58>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3301      	adds	r3, #1
 800db04:	4a0d      	ldr	r2, [pc, #52]	; (800db3c <vPortEnterCritical+0x58>)
 800db06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db08:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <vPortEnterCritical+0x58>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d10f      	bne.n	800db30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db10:	4b0b      	ldr	r3, [pc, #44]	; (800db40 <vPortEnterCritical+0x5c>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	b2db      	uxtb	r3, r3
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <vPortEnterCritical+0x4c>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	603b      	str	r3, [r7, #0]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <vPortEnterCritical+0x4a>
	}
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	20000014 	.word	0x20000014
 800db40:	e000ed04 	.word	0xe000ed04

0800db44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db4a:	4b12      	ldr	r3, [pc, #72]	; (800db94 <vPortExitCritical+0x50>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d10a      	bne.n	800db68 <vPortExitCritical+0x24>
	__asm volatile
 800db52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	607b      	str	r3, [r7, #4]
}
 800db64:	bf00      	nop
 800db66:	e7fe      	b.n	800db66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db68:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <vPortExitCritical+0x50>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	4a09      	ldr	r2, [pc, #36]	; (800db94 <vPortExitCritical+0x50>)
 800db70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db72:	4b08      	ldr	r3, [pc, #32]	; (800db94 <vPortExitCritical+0x50>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d105      	bne.n	800db86 <vPortExitCritical+0x42>
 800db7a:	2300      	movs	r3, #0
 800db7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f383 8811 	msr	BASEPRI, r3
}
 800db84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db86:	bf00      	nop
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	20000014 	.word	0x20000014
	...

0800dba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dba0:	f3ef 8009 	mrs	r0, PSP
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <pxCurrentTCBConst>)
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	f01e 0f10 	tst.w	lr, #16
 800dbb0:	bf08      	it	eq
 800dbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbba:	6010      	str	r0, [r2, #0]
 800dbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dbc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dbc4:	f380 8811 	msr	BASEPRI, r0
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f7fe fe90 	bl	800c8f4 <vTaskSwitchContext>
 800dbd4:	f04f 0000 	mov.w	r0, #0
 800dbd8:	f380 8811 	msr	BASEPRI, r0
 800dbdc:	bc09      	pop	{r0, r3}
 800dbde:	6819      	ldr	r1, [r3, #0]
 800dbe0:	6808      	ldr	r0, [r1, #0]
 800dbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe6:	f01e 0f10 	tst.w	lr, #16
 800dbea:	bf08      	it	eq
 800dbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dbf0:	f380 8809 	msr	PSP, r0
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	f3af 8000 	nop.w

0800dc00 <pxCurrentTCBConst>:
 800dc00:	20002648 	.word	0x20002648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop

0800dc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	607b      	str	r3, [r7, #4]
}
 800dc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc22:	f7fe fdad 	bl	800c780 <xTaskIncrementTick>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d003      	beq.n	800dc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc2c:	4b06      	ldr	r3, [pc, #24]	; (800dc48 <xPortSysTickHandler+0x40>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	2300      	movs	r3, #0
 800dc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	f383 8811 	msr	BASEPRI, r3
}
 800dc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	e000ed04 	.word	0xe000ed04

0800dc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc50:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <vPortSetupTimerInterrupt+0x34>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc56:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <vPortSetupTimerInterrupt+0x38>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc5c:	4b0a      	ldr	r3, [pc, #40]	; (800dc88 <vPortSetupTimerInterrupt+0x3c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a0a      	ldr	r2, [pc, #40]	; (800dc8c <vPortSetupTimerInterrupt+0x40>)
 800dc62:	fba2 2303 	umull	r2, r3, r2, r3
 800dc66:	099b      	lsrs	r3, r3, #6
 800dc68:	4a09      	ldr	r2, [pc, #36]	; (800dc90 <vPortSetupTimerInterrupt+0x44>)
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc6e:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <vPortSetupTimerInterrupt+0x34>)
 800dc70:	2207      	movs	r2, #7
 800dc72:	601a      	str	r2, [r3, #0]
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	e000e010 	.word	0xe000e010
 800dc84:	e000e018 	.word	0xe000e018
 800dc88:	20000008 	.word	0x20000008
 800dc8c:	10624dd3 	.word	0x10624dd3
 800dc90:	e000e014 	.word	0xe000e014

0800dc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dca4 <vPortEnableVFP+0x10>
 800dc98:	6801      	ldr	r1, [r0, #0]
 800dc9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc9e:	6001      	str	r1, [r0, #0]
 800dca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dca2:	bf00      	nop
 800dca4:	e000ed88 	.word	0xe000ed88

0800dca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dcae:	f3ef 8305 	mrs	r3, IPSR
 800dcb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b0f      	cmp	r3, #15
 800dcb8:	d914      	bls.n	800dce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcba:	4a17      	ldr	r2, [pc, #92]	; (800dd18 <vPortValidateInterruptPriority+0x70>)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dcc4:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <vPortValidateInterruptPriority+0x74>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	7afa      	ldrb	r2, [r7, #11]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d20a      	bcs.n	800dce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	607b      	str	r3, [r7, #4]
}
 800dce0:	bf00      	nop
 800dce2:	e7fe      	b.n	800dce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dce4:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <vPortValidateInterruptPriority+0x78>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dcec:	4b0d      	ldr	r3, [pc, #52]	; (800dd24 <vPortValidateInterruptPriority+0x7c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d90a      	bls.n	800dd0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	603b      	str	r3, [r7, #0]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <vPortValidateInterruptPriority+0x60>
	}
 800dd0a:	bf00      	nop
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	e000e3f0 	.word	0xe000e3f0
 800dd1c:	20002c74 	.word	0x20002c74
 800dd20:	e000ed0c 	.word	0xe000ed0c
 800dd24:	20002c78 	.word	0x20002c78

0800dd28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd30:	2300      	movs	r3, #0
 800dd32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd34:	f7fe fc68 	bl	800c608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd38:	4b5b      	ldr	r3, [pc, #364]	; (800dea8 <pvPortMalloc+0x180>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd40:	f000 f920 	bl	800df84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd44:	4b59      	ldr	r3, [pc, #356]	; (800deac <pvPortMalloc+0x184>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f040 8093 	bne.w	800de78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01d      	beq.n	800dd94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd58:	2208      	movs	r2, #8
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f003 0307 	and.w	r3, r3, #7
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d014      	beq.n	800dd94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f023 0307 	bic.w	r3, r3, #7
 800dd70:	3308      	adds	r3, #8
 800dd72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f003 0307 	and.w	r3, r3, #7
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <pvPortMalloc+0x6c>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	617b      	str	r3, [r7, #20]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d06e      	beq.n	800de78 <pvPortMalloc+0x150>
 800dd9a:	4b45      	ldr	r3, [pc, #276]	; (800deb0 <pvPortMalloc+0x188>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d869      	bhi.n	800de78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dda4:	4b43      	ldr	r3, [pc, #268]	; (800deb4 <pvPortMalloc+0x18c>)
 800dda6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dda8:	4b42      	ldr	r3, [pc, #264]	; (800deb4 <pvPortMalloc+0x18c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddae:	e004      	b.n	800ddba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d903      	bls.n	800ddcc <pvPortMalloc+0xa4>
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1f1      	bne.n	800ddb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddcc:	4b36      	ldr	r3, [pc, #216]	; (800dea8 <pvPortMalloc+0x180>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d050      	beq.n	800de78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2208      	movs	r2, #8
 800dddc:	4413      	add	r3, r2
 800ddde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	1ad2      	subs	r2, r2, r3
 800ddf0:	2308      	movs	r3, #8
 800ddf2:	005b      	lsls	r3, r3, #1
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d91f      	bls.n	800de38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ddf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	f003 0307 	and.w	r3, r3, #7
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00a      	beq.n	800de20 <pvPortMalloc+0xf8>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	613b      	str	r3, [r7, #16]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	1ad2      	subs	r2, r2, r3
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de32:	69b8      	ldr	r0, [r7, #24]
 800de34:	f000 f908 	bl	800e048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de38:	4b1d      	ldr	r3, [pc, #116]	; (800deb0 <pvPortMalloc+0x188>)
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	4a1b      	ldr	r2, [pc, #108]	; (800deb0 <pvPortMalloc+0x188>)
 800de44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de46:	4b1a      	ldr	r3, [pc, #104]	; (800deb0 <pvPortMalloc+0x188>)
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	4b1b      	ldr	r3, [pc, #108]	; (800deb8 <pvPortMalloc+0x190>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d203      	bcs.n	800de5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de52:	4b17      	ldr	r3, [pc, #92]	; (800deb0 <pvPortMalloc+0x188>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a18      	ldr	r2, [pc, #96]	; (800deb8 <pvPortMalloc+0x190>)
 800de58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	685a      	ldr	r2, [r3, #4]
 800de5e:	4b13      	ldr	r3, [pc, #76]	; (800deac <pvPortMalloc+0x184>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	431a      	orrs	r2, r3
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	2200      	movs	r2, #0
 800de6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de6e:	4b13      	ldr	r3, [pc, #76]	; (800debc <pvPortMalloc+0x194>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	4a11      	ldr	r2, [pc, #68]	; (800debc <pvPortMalloc+0x194>)
 800de76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de78:	f7fe fbd4 	bl	800c624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	f003 0307 	and.w	r3, r3, #7
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00a      	beq.n	800de9c <pvPortMalloc+0x174>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	60fb      	str	r3, [r7, #12]
}
 800de98:	bf00      	nop
 800de9a:	e7fe      	b.n	800de9a <pvPortMalloc+0x172>
	return pvReturn;
 800de9c:	69fb      	ldr	r3, [r7, #28]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3728      	adds	r7, #40	; 0x28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20004bc4 	.word	0x20004bc4
 800deac:	20004bd8 	.word	0x20004bd8
 800deb0:	20004bc8 	.word	0x20004bc8
 800deb4:	20004bbc 	.word	0x20004bbc
 800deb8:	20004bcc 	.word	0x20004bcc
 800debc:	20004bd0 	.word	0x20004bd0

0800dec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d04d      	beq.n	800df6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ded2:	2308      	movs	r3, #8
 800ded4:	425b      	negs	r3, r3
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	4413      	add	r3, r2
 800deda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	4b24      	ldr	r3, [pc, #144]	; (800df78 <vPortFree+0xb8>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4013      	ands	r3, r2
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10a      	bne.n	800df04 <vPortFree+0x44>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	60fb      	str	r3, [r7, #12]
}
 800df00:	bf00      	nop
 800df02:	e7fe      	b.n	800df02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00a      	beq.n	800df22 <vPortFree+0x62>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	60bb      	str	r3, [r7, #8]
}
 800df1e:	bf00      	nop
 800df20:	e7fe      	b.n	800df20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	685a      	ldr	r2, [r3, #4]
 800df26:	4b14      	ldr	r3, [pc, #80]	; (800df78 <vPortFree+0xb8>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4013      	ands	r3, r2
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d01e      	beq.n	800df6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d11a      	bne.n	800df6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	4b0e      	ldr	r3, [pc, #56]	; (800df78 <vPortFree+0xb8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	43db      	mvns	r3, r3
 800df42:	401a      	ands	r2, r3
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df48:	f7fe fb5e 	bl	800c608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	4b0a      	ldr	r3, [pc, #40]	; (800df7c <vPortFree+0xbc>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4413      	add	r3, r2
 800df56:	4a09      	ldr	r2, [pc, #36]	; (800df7c <vPortFree+0xbc>)
 800df58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df5a:	6938      	ldr	r0, [r7, #16]
 800df5c:	f000 f874 	bl	800e048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df60:	4b07      	ldr	r3, [pc, #28]	; (800df80 <vPortFree+0xc0>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	3301      	adds	r3, #1
 800df66:	4a06      	ldr	r2, [pc, #24]	; (800df80 <vPortFree+0xc0>)
 800df68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df6a:	f7fe fb5b 	bl	800c624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df6e:	bf00      	nop
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	20004bd8 	.word	0x20004bd8
 800df7c:	20004bc8 	.word	0x20004bc8
 800df80:	20004bd4 	.word	0x20004bd4

0800df84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df8a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800df8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df90:	4b27      	ldr	r3, [pc, #156]	; (800e030 <prvHeapInit+0xac>)
 800df92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00c      	beq.n	800dfb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3307      	adds	r3, #7
 800dfa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f023 0307 	bic.w	r3, r3, #7
 800dfaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	4a1f      	ldr	r2, [pc, #124]	; (800e030 <prvHeapInit+0xac>)
 800dfb4:	4413      	add	r3, r2
 800dfb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfbc:	4a1d      	ldr	r2, [pc, #116]	; (800e034 <prvHeapInit+0xb0>)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfc2:	4b1c      	ldr	r3, [pc, #112]	; (800e034 <prvHeapInit+0xb0>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	4413      	add	r3, r2
 800dfce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dfd0:	2208      	movs	r2, #8
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1a9b      	subs	r3, r3, r2
 800dfd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f023 0307 	bic.w	r3, r3, #7
 800dfde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	4a15      	ldr	r2, [pc, #84]	; (800e038 <prvHeapInit+0xb4>)
 800dfe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dfe6:	4b14      	ldr	r3, [pc, #80]	; (800e038 <prvHeapInit+0xb4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2200      	movs	r2, #0
 800dfec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dfee:	4b12      	ldr	r3, [pc, #72]	; (800e038 <prvHeapInit+0xb4>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e004:	4b0c      	ldr	r3, [pc, #48]	; (800e038 <prvHeapInit+0xb4>)
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	4a0a      	ldr	r2, [pc, #40]	; (800e03c <prvHeapInit+0xb8>)
 800e012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	4a09      	ldr	r2, [pc, #36]	; (800e040 <prvHeapInit+0xbc>)
 800e01a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e01c:	4b09      	ldr	r3, [pc, #36]	; (800e044 <prvHeapInit+0xc0>)
 800e01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e022:	601a      	str	r2, [r3, #0]
}
 800e024:	bf00      	nop
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	20002c7c 	.word	0x20002c7c
 800e034:	20004bbc 	.word	0x20004bbc
 800e038:	20004bc4 	.word	0x20004bc4
 800e03c:	20004bcc 	.word	0x20004bcc
 800e040:	20004bc8 	.word	0x20004bc8
 800e044:	20004bd8 	.word	0x20004bd8

0800e048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e050:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <prvInsertBlockIntoFreeList+0xac>)
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	e002      	b.n	800e05c <prvInsertBlockIntoFreeList+0x14>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	429a      	cmp	r2, r3
 800e064:	d8f7      	bhi.n	800e056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	4413      	add	r3, r2
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d108      	bne.n	800e08a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	441a      	add	r2, r3
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	441a      	add	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d118      	bne.n	800e0d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	4b15      	ldr	r3, [pc, #84]	; (800e0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d00d      	beq.n	800e0c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	441a      	add	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	e008      	b.n	800e0d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0c6:	4b0c      	ldr	r3, [pc, #48]	; (800e0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e003      	b.n	800e0d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d002      	beq.n	800e0e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	20004bbc 	.word	0x20004bbc
 800e0f8:	20004bc4 	.word	0x20004bc4

0800e0fc <__cvt>:
 800e0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e100:	ec55 4b10 	vmov	r4, r5, d0
 800e104:	2d00      	cmp	r5, #0
 800e106:	460e      	mov	r6, r1
 800e108:	4619      	mov	r1, r3
 800e10a:	462b      	mov	r3, r5
 800e10c:	bfbb      	ittet	lt
 800e10e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e112:	461d      	movlt	r5, r3
 800e114:	2300      	movge	r3, #0
 800e116:	232d      	movlt	r3, #45	; 0x2d
 800e118:	700b      	strb	r3, [r1, #0]
 800e11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e11c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e120:	4691      	mov	r9, r2
 800e122:	f023 0820 	bic.w	r8, r3, #32
 800e126:	bfbc      	itt	lt
 800e128:	4622      	movlt	r2, r4
 800e12a:	4614      	movlt	r4, r2
 800e12c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e130:	d005      	beq.n	800e13e <__cvt+0x42>
 800e132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e136:	d100      	bne.n	800e13a <__cvt+0x3e>
 800e138:	3601      	adds	r6, #1
 800e13a:	2102      	movs	r1, #2
 800e13c:	e000      	b.n	800e140 <__cvt+0x44>
 800e13e:	2103      	movs	r1, #3
 800e140:	ab03      	add	r3, sp, #12
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	ab02      	add	r3, sp, #8
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	ec45 4b10 	vmov	d0, r4, r5
 800e14c:	4653      	mov	r3, sl
 800e14e:	4632      	mov	r2, r6
 800e150:	f000 ff92 	bl	800f078 <_dtoa_r>
 800e154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e158:	4607      	mov	r7, r0
 800e15a:	d102      	bne.n	800e162 <__cvt+0x66>
 800e15c:	f019 0f01 	tst.w	r9, #1
 800e160:	d022      	beq.n	800e1a8 <__cvt+0xac>
 800e162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e166:	eb07 0906 	add.w	r9, r7, r6
 800e16a:	d110      	bne.n	800e18e <__cvt+0x92>
 800e16c:	783b      	ldrb	r3, [r7, #0]
 800e16e:	2b30      	cmp	r3, #48	; 0x30
 800e170:	d10a      	bne.n	800e188 <__cvt+0x8c>
 800e172:	2200      	movs	r2, #0
 800e174:	2300      	movs	r3, #0
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e17e:	b918      	cbnz	r0, 800e188 <__cvt+0x8c>
 800e180:	f1c6 0601 	rsb	r6, r6, #1
 800e184:	f8ca 6000 	str.w	r6, [sl]
 800e188:	f8da 3000 	ldr.w	r3, [sl]
 800e18c:	4499      	add	r9, r3
 800e18e:	2200      	movs	r2, #0
 800e190:	2300      	movs	r3, #0
 800e192:	4620      	mov	r0, r4
 800e194:	4629      	mov	r1, r5
 800e196:	f7f2 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800e19a:	b108      	cbz	r0, 800e1a0 <__cvt+0xa4>
 800e19c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e1a0:	2230      	movs	r2, #48	; 0x30
 800e1a2:	9b03      	ldr	r3, [sp, #12]
 800e1a4:	454b      	cmp	r3, r9
 800e1a6:	d307      	bcc.n	800e1b8 <__cvt+0xbc>
 800e1a8:	9b03      	ldr	r3, [sp, #12]
 800e1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1ac:	1bdb      	subs	r3, r3, r7
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	b004      	add	sp, #16
 800e1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b8:	1c59      	adds	r1, r3, #1
 800e1ba:	9103      	str	r1, [sp, #12]
 800e1bc:	701a      	strb	r2, [r3, #0]
 800e1be:	e7f0      	b.n	800e1a2 <__cvt+0xa6>

0800e1c0 <__exponent>:
 800e1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2900      	cmp	r1, #0
 800e1c6:	bfb8      	it	lt
 800e1c8:	4249      	neglt	r1, r1
 800e1ca:	f803 2b02 	strb.w	r2, [r3], #2
 800e1ce:	bfb4      	ite	lt
 800e1d0:	222d      	movlt	r2, #45	; 0x2d
 800e1d2:	222b      	movge	r2, #43	; 0x2b
 800e1d4:	2909      	cmp	r1, #9
 800e1d6:	7042      	strb	r2, [r0, #1]
 800e1d8:	dd2a      	ble.n	800e230 <__exponent+0x70>
 800e1da:	f10d 0207 	add.w	r2, sp, #7
 800e1de:	4617      	mov	r7, r2
 800e1e0:	260a      	movs	r6, #10
 800e1e2:	4694      	mov	ip, r2
 800e1e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e1e8:	fb06 1415 	mls	r4, r6, r5, r1
 800e1ec:	3430      	adds	r4, #48	; 0x30
 800e1ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	2c63      	cmp	r4, #99	; 0x63
 800e1f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	dcf1      	bgt.n	800e1e2 <__exponent+0x22>
 800e1fe:	3130      	adds	r1, #48	; 0x30
 800e200:	f1ac 0402 	sub.w	r4, ip, #2
 800e204:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e208:	1c41      	adds	r1, r0, #1
 800e20a:	4622      	mov	r2, r4
 800e20c:	42ba      	cmp	r2, r7
 800e20e:	d30a      	bcc.n	800e226 <__exponent+0x66>
 800e210:	f10d 0209 	add.w	r2, sp, #9
 800e214:	eba2 020c 	sub.w	r2, r2, ip
 800e218:	42bc      	cmp	r4, r7
 800e21a:	bf88      	it	hi
 800e21c:	2200      	movhi	r2, #0
 800e21e:	4413      	add	r3, r2
 800e220:	1a18      	subs	r0, r3, r0
 800e222:	b003      	add	sp, #12
 800e224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e226:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e22a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e22e:	e7ed      	b.n	800e20c <__exponent+0x4c>
 800e230:	2330      	movs	r3, #48	; 0x30
 800e232:	3130      	adds	r1, #48	; 0x30
 800e234:	7083      	strb	r3, [r0, #2]
 800e236:	70c1      	strb	r1, [r0, #3]
 800e238:	1d03      	adds	r3, r0, #4
 800e23a:	e7f1      	b.n	800e220 <__exponent+0x60>

0800e23c <_printf_float>:
 800e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	ed2d 8b02 	vpush	{d8}
 800e244:	b08d      	sub	sp, #52	; 0x34
 800e246:	460c      	mov	r4, r1
 800e248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e24c:	4616      	mov	r6, r2
 800e24e:	461f      	mov	r7, r3
 800e250:	4605      	mov	r5, r0
 800e252:	f000 fe03 	bl	800ee5c <_localeconv_r>
 800e256:	f8d0 a000 	ldr.w	sl, [r0]
 800e25a:	4650      	mov	r0, sl
 800e25c:	f7f2 f808 	bl	8000270 <strlen>
 800e260:	2300      	movs	r3, #0
 800e262:	930a      	str	r3, [sp, #40]	; 0x28
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	f8d8 3000 	ldr.w	r3, [r8]
 800e26c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e270:	3307      	adds	r3, #7
 800e272:	f023 0307 	bic.w	r3, r3, #7
 800e276:	f103 0208 	add.w	r2, r3, #8
 800e27a:	f8c8 2000 	str.w	r2, [r8]
 800e27e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e286:	9307      	str	r3, [sp, #28]
 800e288:	f8cd 8018 	str.w	r8, [sp, #24]
 800e28c:	ee08 0a10 	vmov	s16, r0
 800e290:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e298:	4b9e      	ldr	r3, [pc, #632]	; (800e514 <_printf_float+0x2d8>)
 800e29a:	f04f 32ff 	mov.w	r2, #4294967295
 800e29e:	f7f2 fc45 	bl	8000b2c <__aeabi_dcmpun>
 800e2a2:	bb88      	cbnz	r0, 800e308 <_printf_float+0xcc>
 800e2a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2a8:	4b9a      	ldr	r3, [pc, #616]	; (800e514 <_printf_float+0x2d8>)
 800e2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ae:	f7f2 fc1f 	bl	8000af0 <__aeabi_dcmple>
 800e2b2:	bb48      	cbnz	r0, 800e308 <_printf_float+0xcc>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	f7f2 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800e2c0:	b110      	cbz	r0, 800e2c8 <_printf_float+0x8c>
 800e2c2:	232d      	movs	r3, #45	; 0x2d
 800e2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2c8:	4a93      	ldr	r2, [pc, #588]	; (800e518 <_printf_float+0x2dc>)
 800e2ca:	4b94      	ldr	r3, [pc, #592]	; (800e51c <_printf_float+0x2e0>)
 800e2cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e2d0:	bf94      	ite	ls
 800e2d2:	4690      	movls	r8, r2
 800e2d4:	4698      	movhi	r8, r3
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	6123      	str	r3, [r4, #16]
 800e2da:	9b05      	ldr	r3, [sp, #20]
 800e2dc:	f023 0304 	bic.w	r3, r3, #4
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	f04f 0900 	mov.w	r9, #0
 800e2e6:	9700      	str	r7, [sp, #0]
 800e2e8:	4633      	mov	r3, r6
 800e2ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	f000 f9da 	bl	800e6a8 <_printf_common>
 800e2f4:	3001      	adds	r0, #1
 800e2f6:	f040 8090 	bne.w	800e41a <_printf_float+0x1de>
 800e2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e2fe:	b00d      	add	sp, #52	; 0x34
 800e300:	ecbd 8b02 	vpop	{d8}
 800e304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e308:	4642      	mov	r2, r8
 800e30a:	464b      	mov	r3, r9
 800e30c:	4640      	mov	r0, r8
 800e30e:	4649      	mov	r1, r9
 800e310:	f7f2 fc0c 	bl	8000b2c <__aeabi_dcmpun>
 800e314:	b140      	cbz	r0, 800e328 <_printf_float+0xec>
 800e316:	464b      	mov	r3, r9
 800e318:	2b00      	cmp	r3, #0
 800e31a:	bfbc      	itt	lt
 800e31c:	232d      	movlt	r3, #45	; 0x2d
 800e31e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e322:	4a7f      	ldr	r2, [pc, #508]	; (800e520 <_printf_float+0x2e4>)
 800e324:	4b7f      	ldr	r3, [pc, #508]	; (800e524 <_printf_float+0x2e8>)
 800e326:	e7d1      	b.n	800e2cc <_printf_float+0x90>
 800e328:	6863      	ldr	r3, [r4, #4]
 800e32a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e32e:	9206      	str	r2, [sp, #24]
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	d13f      	bne.n	800e3b4 <_printf_float+0x178>
 800e334:	2306      	movs	r3, #6
 800e336:	6063      	str	r3, [r4, #4]
 800e338:	9b05      	ldr	r3, [sp, #20]
 800e33a:	6861      	ldr	r1, [r4, #4]
 800e33c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e340:	2300      	movs	r3, #0
 800e342:	9303      	str	r3, [sp, #12]
 800e344:	ab0a      	add	r3, sp, #40	; 0x28
 800e346:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e34a:	ab09      	add	r3, sp, #36	; 0x24
 800e34c:	ec49 8b10 	vmov	d0, r8, r9
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e358:	4628      	mov	r0, r5
 800e35a:	f7ff fecf 	bl	800e0fc <__cvt>
 800e35e:	9b06      	ldr	r3, [sp, #24]
 800e360:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e362:	2b47      	cmp	r3, #71	; 0x47
 800e364:	4680      	mov	r8, r0
 800e366:	d108      	bne.n	800e37a <_printf_float+0x13e>
 800e368:	1cc8      	adds	r0, r1, #3
 800e36a:	db02      	blt.n	800e372 <_printf_float+0x136>
 800e36c:	6863      	ldr	r3, [r4, #4]
 800e36e:	4299      	cmp	r1, r3
 800e370:	dd41      	ble.n	800e3f6 <_printf_float+0x1ba>
 800e372:	f1ab 0302 	sub.w	r3, fp, #2
 800e376:	fa5f fb83 	uxtb.w	fp, r3
 800e37a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e37e:	d820      	bhi.n	800e3c2 <_printf_float+0x186>
 800e380:	3901      	subs	r1, #1
 800e382:	465a      	mov	r2, fp
 800e384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e388:	9109      	str	r1, [sp, #36]	; 0x24
 800e38a:	f7ff ff19 	bl	800e1c0 <__exponent>
 800e38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e390:	1813      	adds	r3, r2, r0
 800e392:	2a01      	cmp	r2, #1
 800e394:	4681      	mov	r9, r0
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	dc02      	bgt.n	800e3a0 <_printf_float+0x164>
 800e39a:	6822      	ldr	r2, [r4, #0]
 800e39c:	07d2      	lsls	r2, r2, #31
 800e39e:	d501      	bpl.n	800e3a4 <_printf_float+0x168>
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	6123      	str	r3, [r4, #16]
 800e3a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d09c      	beq.n	800e2e6 <_printf_float+0xaa>
 800e3ac:	232d      	movs	r3, #45	; 0x2d
 800e3ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3b2:	e798      	b.n	800e2e6 <_printf_float+0xaa>
 800e3b4:	9a06      	ldr	r2, [sp, #24]
 800e3b6:	2a47      	cmp	r2, #71	; 0x47
 800e3b8:	d1be      	bne.n	800e338 <_printf_float+0xfc>
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1bc      	bne.n	800e338 <_printf_float+0xfc>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e7b9      	b.n	800e336 <_printf_float+0xfa>
 800e3c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e3c6:	d118      	bne.n	800e3fa <_printf_float+0x1be>
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	6863      	ldr	r3, [r4, #4]
 800e3cc:	dd0b      	ble.n	800e3e6 <_printf_float+0x1aa>
 800e3ce:	6121      	str	r1, [r4, #16]
 800e3d0:	b913      	cbnz	r3, 800e3d8 <_printf_float+0x19c>
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	07d0      	lsls	r0, r2, #31
 800e3d6:	d502      	bpl.n	800e3de <_printf_float+0x1a2>
 800e3d8:	3301      	adds	r3, #1
 800e3da:	440b      	add	r3, r1
 800e3dc:	6123      	str	r3, [r4, #16]
 800e3de:	65a1      	str	r1, [r4, #88]	; 0x58
 800e3e0:	f04f 0900 	mov.w	r9, #0
 800e3e4:	e7de      	b.n	800e3a4 <_printf_float+0x168>
 800e3e6:	b913      	cbnz	r3, 800e3ee <_printf_float+0x1b2>
 800e3e8:	6822      	ldr	r2, [r4, #0]
 800e3ea:	07d2      	lsls	r2, r2, #31
 800e3ec:	d501      	bpl.n	800e3f2 <_printf_float+0x1b6>
 800e3ee:	3302      	adds	r3, #2
 800e3f0:	e7f4      	b.n	800e3dc <_printf_float+0x1a0>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e7f2      	b.n	800e3dc <_printf_float+0x1a0>
 800e3f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3fc:	4299      	cmp	r1, r3
 800e3fe:	db05      	blt.n	800e40c <_printf_float+0x1d0>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	6121      	str	r1, [r4, #16]
 800e404:	07d8      	lsls	r0, r3, #31
 800e406:	d5ea      	bpl.n	800e3de <_printf_float+0x1a2>
 800e408:	1c4b      	adds	r3, r1, #1
 800e40a:	e7e7      	b.n	800e3dc <_printf_float+0x1a0>
 800e40c:	2900      	cmp	r1, #0
 800e40e:	bfd4      	ite	le
 800e410:	f1c1 0202 	rsble	r2, r1, #2
 800e414:	2201      	movgt	r2, #1
 800e416:	4413      	add	r3, r2
 800e418:	e7e0      	b.n	800e3dc <_printf_float+0x1a0>
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	055a      	lsls	r2, r3, #21
 800e41e:	d407      	bmi.n	800e430 <_printf_float+0x1f4>
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	4642      	mov	r2, r8
 800e424:	4631      	mov	r1, r6
 800e426:	4628      	mov	r0, r5
 800e428:	47b8      	blx	r7
 800e42a:	3001      	adds	r0, #1
 800e42c:	d12c      	bne.n	800e488 <_printf_float+0x24c>
 800e42e:	e764      	b.n	800e2fa <_printf_float+0xbe>
 800e430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e434:	f240 80e0 	bls.w	800e5f8 <_printf_float+0x3bc>
 800e438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e43c:	2200      	movs	r2, #0
 800e43e:	2300      	movs	r3, #0
 800e440:	f7f2 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 800e444:	2800      	cmp	r0, #0
 800e446:	d034      	beq.n	800e4b2 <_printf_float+0x276>
 800e448:	4a37      	ldr	r2, [pc, #220]	; (800e528 <_printf_float+0x2ec>)
 800e44a:	2301      	movs	r3, #1
 800e44c:	4631      	mov	r1, r6
 800e44e:	4628      	mov	r0, r5
 800e450:	47b8      	blx	r7
 800e452:	3001      	adds	r0, #1
 800e454:	f43f af51 	beq.w	800e2fa <_printf_float+0xbe>
 800e458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e45c:	429a      	cmp	r2, r3
 800e45e:	db02      	blt.n	800e466 <_printf_float+0x22a>
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	07d8      	lsls	r0, r3, #31
 800e464:	d510      	bpl.n	800e488 <_printf_float+0x24c>
 800e466:	ee18 3a10 	vmov	r3, s16
 800e46a:	4652      	mov	r2, sl
 800e46c:	4631      	mov	r1, r6
 800e46e:	4628      	mov	r0, r5
 800e470:	47b8      	blx	r7
 800e472:	3001      	adds	r0, #1
 800e474:	f43f af41 	beq.w	800e2fa <_printf_float+0xbe>
 800e478:	f04f 0800 	mov.w	r8, #0
 800e47c:	f104 091a 	add.w	r9, r4, #26
 800e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e482:	3b01      	subs	r3, #1
 800e484:	4543      	cmp	r3, r8
 800e486:	dc09      	bgt.n	800e49c <_printf_float+0x260>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	079b      	lsls	r3, r3, #30
 800e48c:	f100 8107 	bmi.w	800e69e <_printf_float+0x462>
 800e490:	68e0      	ldr	r0, [r4, #12]
 800e492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e494:	4298      	cmp	r0, r3
 800e496:	bfb8      	it	lt
 800e498:	4618      	movlt	r0, r3
 800e49a:	e730      	b.n	800e2fe <_printf_float+0xc2>
 800e49c:	2301      	movs	r3, #1
 800e49e:	464a      	mov	r2, r9
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b8      	blx	r7
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f43f af27 	beq.w	800e2fa <_printf_float+0xbe>
 800e4ac:	f108 0801 	add.w	r8, r8, #1
 800e4b0:	e7e6      	b.n	800e480 <_printf_float+0x244>
 800e4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	dc39      	bgt.n	800e52c <_printf_float+0x2f0>
 800e4b8:	4a1b      	ldr	r2, [pc, #108]	; (800e528 <_printf_float+0x2ec>)
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	4631      	mov	r1, r6
 800e4be:	4628      	mov	r0, r5
 800e4c0:	47b8      	blx	r7
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	f43f af19 	beq.w	800e2fa <_printf_float+0xbe>
 800e4c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	d102      	bne.n	800e4d6 <_printf_float+0x29a>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	07d9      	lsls	r1, r3, #31
 800e4d4:	d5d8      	bpl.n	800e488 <_printf_float+0x24c>
 800e4d6:	ee18 3a10 	vmov	r3, s16
 800e4da:	4652      	mov	r2, sl
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	f43f af09 	beq.w	800e2fa <_printf_float+0xbe>
 800e4e8:	f04f 0900 	mov.w	r9, #0
 800e4ec:	f104 0a1a 	add.w	sl, r4, #26
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	425b      	negs	r3, r3
 800e4f4:	454b      	cmp	r3, r9
 800e4f6:	dc01      	bgt.n	800e4fc <_printf_float+0x2c0>
 800e4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4fa:	e792      	b.n	800e422 <_printf_float+0x1e6>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	4652      	mov	r2, sl
 800e500:	4631      	mov	r1, r6
 800e502:	4628      	mov	r0, r5
 800e504:	47b8      	blx	r7
 800e506:	3001      	adds	r0, #1
 800e508:	f43f aef7 	beq.w	800e2fa <_printf_float+0xbe>
 800e50c:	f109 0901 	add.w	r9, r9, #1
 800e510:	e7ee      	b.n	800e4f0 <_printf_float+0x2b4>
 800e512:	bf00      	nop
 800e514:	7fefffff 	.word	0x7fefffff
 800e518:	08011b1c 	.word	0x08011b1c
 800e51c:	08011b20 	.word	0x08011b20
 800e520:	08011b24 	.word	0x08011b24
 800e524:	08011b28 	.word	0x08011b28
 800e528:	08011b2c 	.word	0x08011b2c
 800e52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e52e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e530:	429a      	cmp	r2, r3
 800e532:	bfa8      	it	ge
 800e534:	461a      	movge	r2, r3
 800e536:	2a00      	cmp	r2, #0
 800e538:	4691      	mov	r9, r2
 800e53a:	dc37      	bgt.n	800e5ac <_printf_float+0x370>
 800e53c:	f04f 0b00 	mov.w	fp, #0
 800e540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e544:	f104 021a 	add.w	r2, r4, #26
 800e548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e54a:	9305      	str	r3, [sp, #20]
 800e54c:	eba3 0309 	sub.w	r3, r3, r9
 800e550:	455b      	cmp	r3, fp
 800e552:	dc33      	bgt.n	800e5bc <_printf_float+0x380>
 800e554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e558:	429a      	cmp	r2, r3
 800e55a:	db3b      	blt.n	800e5d4 <_printf_float+0x398>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	07da      	lsls	r2, r3, #31
 800e560:	d438      	bmi.n	800e5d4 <_printf_float+0x398>
 800e562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e566:	eba2 0903 	sub.w	r9, r2, r3
 800e56a:	9b05      	ldr	r3, [sp, #20]
 800e56c:	1ad2      	subs	r2, r2, r3
 800e56e:	4591      	cmp	r9, r2
 800e570:	bfa8      	it	ge
 800e572:	4691      	movge	r9, r2
 800e574:	f1b9 0f00 	cmp.w	r9, #0
 800e578:	dc35      	bgt.n	800e5e6 <_printf_float+0x3aa>
 800e57a:	f04f 0800 	mov.w	r8, #0
 800e57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e582:	f104 0a1a 	add.w	sl, r4, #26
 800e586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e58a:	1a9b      	subs	r3, r3, r2
 800e58c:	eba3 0309 	sub.w	r3, r3, r9
 800e590:	4543      	cmp	r3, r8
 800e592:	f77f af79 	ble.w	800e488 <_printf_float+0x24c>
 800e596:	2301      	movs	r3, #1
 800e598:	4652      	mov	r2, sl
 800e59a:	4631      	mov	r1, r6
 800e59c:	4628      	mov	r0, r5
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f aeaa 	beq.w	800e2fa <_printf_float+0xbe>
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	e7ec      	b.n	800e586 <_printf_float+0x34a>
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	4642      	mov	r2, r8
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d1c0      	bne.n	800e53c <_printf_float+0x300>
 800e5ba:	e69e      	b.n	800e2fa <_printf_float+0xbe>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	4631      	mov	r1, r6
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	9205      	str	r2, [sp, #20]
 800e5c4:	47b8      	blx	r7
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	f43f ae97 	beq.w	800e2fa <_printf_float+0xbe>
 800e5cc:	9a05      	ldr	r2, [sp, #20]
 800e5ce:	f10b 0b01 	add.w	fp, fp, #1
 800e5d2:	e7b9      	b.n	800e548 <_printf_float+0x30c>
 800e5d4:	ee18 3a10 	vmov	r3, s16
 800e5d8:	4652      	mov	r2, sl
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4628      	mov	r0, r5
 800e5de:	47b8      	blx	r7
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d1be      	bne.n	800e562 <_printf_float+0x326>
 800e5e4:	e689      	b.n	800e2fa <_printf_float+0xbe>
 800e5e6:	9a05      	ldr	r2, [sp, #20]
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	4442      	add	r2, r8
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	47b8      	blx	r7
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	d1c1      	bne.n	800e57a <_printf_float+0x33e>
 800e5f6:	e680      	b.n	800e2fa <_printf_float+0xbe>
 800e5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5fa:	2a01      	cmp	r2, #1
 800e5fc:	dc01      	bgt.n	800e602 <_printf_float+0x3c6>
 800e5fe:	07db      	lsls	r3, r3, #31
 800e600:	d53a      	bpl.n	800e678 <_printf_float+0x43c>
 800e602:	2301      	movs	r3, #1
 800e604:	4642      	mov	r2, r8
 800e606:	4631      	mov	r1, r6
 800e608:	4628      	mov	r0, r5
 800e60a:	47b8      	blx	r7
 800e60c:	3001      	adds	r0, #1
 800e60e:	f43f ae74 	beq.w	800e2fa <_printf_float+0xbe>
 800e612:	ee18 3a10 	vmov	r3, s16
 800e616:	4652      	mov	r2, sl
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f ae6b 	beq.w	800e2fa <_printf_float+0xbe>
 800e624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e628:	2200      	movs	r2, #0
 800e62a:	2300      	movs	r3, #0
 800e62c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e630:	f7f2 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e634:	b9d8      	cbnz	r0, 800e66e <_printf_float+0x432>
 800e636:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e63a:	f108 0201 	add.w	r2, r8, #1
 800e63e:	4631      	mov	r1, r6
 800e640:	4628      	mov	r0, r5
 800e642:	47b8      	blx	r7
 800e644:	3001      	adds	r0, #1
 800e646:	d10e      	bne.n	800e666 <_printf_float+0x42a>
 800e648:	e657      	b.n	800e2fa <_printf_float+0xbe>
 800e64a:	2301      	movs	r3, #1
 800e64c:	4652      	mov	r2, sl
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	f43f ae50 	beq.w	800e2fa <_printf_float+0xbe>
 800e65a:	f108 0801 	add.w	r8, r8, #1
 800e65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e660:	3b01      	subs	r3, #1
 800e662:	4543      	cmp	r3, r8
 800e664:	dcf1      	bgt.n	800e64a <_printf_float+0x40e>
 800e666:	464b      	mov	r3, r9
 800e668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e66c:	e6da      	b.n	800e424 <_printf_float+0x1e8>
 800e66e:	f04f 0800 	mov.w	r8, #0
 800e672:	f104 0a1a 	add.w	sl, r4, #26
 800e676:	e7f2      	b.n	800e65e <_printf_float+0x422>
 800e678:	2301      	movs	r3, #1
 800e67a:	4642      	mov	r2, r8
 800e67c:	e7df      	b.n	800e63e <_printf_float+0x402>
 800e67e:	2301      	movs	r3, #1
 800e680:	464a      	mov	r2, r9
 800e682:	4631      	mov	r1, r6
 800e684:	4628      	mov	r0, r5
 800e686:	47b8      	blx	r7
 800e688:	3001      	adds	r0, #1
 800e68a:	f43f ae36 	beq.w	800e2fa <_printf_float+0xbe>
 800e68e:	f108 0801 	add.w	r8, r8, #1
 800e692:	68e3      	ldr	r3, [r4, #12]
 800e694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e696:	1a5b      	subs	r3, r3, r1
 800e698:	4543      	cmp	r3, r8
 800e69a:	dcf0      	bgt.n	800e67e <_printf_float+0x442>
 800e69c:	e6f8      	b.n	800e490 <_printf_float+0x254>
 800e69e:	f04f 0800 	mov.w	r8, #0
 800e6a2:	f104 0919 	add.w	r9, r4, #25
 800e6a6:	e7f4      	b.n	800e692 <_printf_float+0x456>

0800e6a8 <_printf_common>:
 800e6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ac:	4616      	mov	r6, r2
 800e6ae:	4699      	mov	r9, r3
 800e6b0:	688a      	ldr	r2, [r1, #8]
 800e6b2:	690b      	ldr	r3, [r1, #16]
 800e6b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	bfb8      	it	lt
 800e6bc:	4613      	movlt	r3, r2
 800e6be:	6033      	str	r3, [r6, #0]
 800e6c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6c4:	4607      	mov	r7, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	b10a      	cbz	r2, 800e6ce <_printf_common+0x26>
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	6033      	str	r3, [r6, #0]
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	0699      	lsls	r1, r3, #26
 800e6d2:	bf42      	ittt	mi
 800e6d4:	6833      	ldrmi	r3, [r6, #0]
 800e6d6:	3302      	addmi	r3, #2
 800e6d8:	6033      	strmi	r3, [r6, #0]
 800e6da:	6825      	ldr	r5, [r4, #0]
 800e6dc:	f015 0506 	ands.w	r5, r5, #6
 800e6e0:	d106      	bne.n	800e6f0 <_printf_common+0x48>
 800e6e2:	f104 0a19 	add.w	sl, r4, #25
 800e6e6:	68e3      	ldr	r3, [r4, #12]
 800e6e8:	6832      	ldr	r2, [r6, #0]
 800e6ea:	1a9b      	subs	r3, r3, r2
 800e6ec:	42ab      	cmp	r3, r5
 800e6ee:	dc26      	bgt.n	800e73e <_printf_common+0x96>
 800e6f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6f4:	1e13      	subs	r3, r2, #0
 800e6f6:	6822      	ldr	r2, [r4, #0]
 800e6f8:	bf18      	it	ne
 800e6fa:	2301      	movne	r3, #1
 800e6fc:	0692      	lsls	r2, r2, #26
 800e6fe:	d42b      	bmi.n	800e758 <_printf_common+0xb0>
 800e700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e704:	4649      	mov	r1, r9
 800e706:	4638      	mov	r0, r7
 800e708:	47c0      	blx	r8
 800e70a:	3001      	adds	r0, #1
 800e70c:	d01e      	beq.n	800e74c <_printf_common+0xa4>
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	6922      	ldr	r2, [r4, #16]
 800e712:	f003 0306 	and.w	r3, r3, #6
 800e716:	2b04      	cmp	r3, #4
 800e718:	bf02      	ittt	eq
 800e71a:	68e5      	ldreq	r5, [r4, #12]
 800e71c:	6833      	ldreq	r3, [r6, #0]
 800e71e:	1aed      	subeq	r5, r5, r3
 800e720:	68a3      	ldr	r3, [r4, #8]
 800e722:	bf0c      	ite	eq
 800e724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e728:	2500      	movne	r5, #0
 800e72a:	4293      	cmp	r3, r2
 800e72c:	bfc4      	itt	gt
 800e72e:	1a9b      	subgt	r3, r3, r2
 800e730:	18ed      	addgt	r5, r5, r3
 800e732:	2600      	movs	r6, #0
 800e734:	341a      	adds	r4, #26
 800e736:	42b5      	cmp	r5, r6
 800e738:	d11a      	bne.n	800e770 <_printf_common+0xc8>
 800e73a:	2000      	movs	r0, #0
 800e73c:	e008      	b.n	800e750 <_printf_common+0xa8>
 800e73e:	2301      	movs	r3, #1
 800e740:	4652      	mov	r2, sl
 800e742:	4649      	mov	r1, r9
 800e744:	4638      	mov	r0, r7
 800e746:	47c0      	blx	r8
 800e748:	3001      	adds	r0, #1
 800e74a:	d103      	bne.n	800e754 <_printf_common+0xac>
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e754:	3501      	adds	r5, #1
 800e756:	e7c6      	b.n	800e6e6 <_printf_common+0x3e>
 800e758:	18e1      	adds	r1, r4, r3
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	2030      	movs	r0, #48	; 0x30
 800e75e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e762:	4422      	add	r2, r4
 800e764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e76c:	3302      	adds	r3, #2
 800e76e:	e7c7      	b.n	800e700 <_printf_common+0x58>
 800e770:	2301      	movs	r3, #1
 800e772:	4622      	mov	r2, r4
 800e774:	4649      	mov	r1, r9
 800e776:	4638      	mov	r0, r7
 800e778:	47c0      	blx	r8
 800e77a:	3001      	adds	r0, #1
 800e77c:	d0e6      	beq.n	800e74c <_printf_common+0xa4>
 800e77e:	3601      	adds	r6, #1
 800e780:	e7d9      	b.n	800e736 <_printf_common+0x8e>
	...

0800e784 <_printf_i>:
 800e784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e788:	7e0f      	ldrb	r7, [r1, #24]
 800e78a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e78c:	2f78      	cmp	r7, #120	; 0x78
 800e78e:	4691      	mov	r9, r2
 800e790:	4680      	mov	r8, r0
 800e792:	460c      	mov	r4, r1
 800e794:	469a      	mov	sl, r3
 800e796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e79a:	d807      	bhi.n	800e7ac <_printf_i+0x28>
 800e79c:	2f62      	cmp	r7, #98	; 0x62
 800e79e:	d80a      	bhi.n	800e7b6 <_printf_i+0x32>
 800e7a0:	2f00      	cmp	r7, #0
 800e7a2:	f000 80d4 	beq.w	800e94e <_printf_i+0x1ca>
 800e7a6:	2f58      	cmp	r7, #88	; 0x58
 800e7a8:	f000 80c0 	beq.w	800e92c <_printf_i+0x1a8>
 800e7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7b4:	e03a      	b.n	800e82c <_printf_i+0xa8>
 800e7b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ba:	2b15      	cmp	r3, #21
 800e7bc:	d8f6      	bhi.n	800e7ac <_printf_i+0x28>
 800e7be:	a101      	add	r1, pc, #4	; (adr r1, 800e7c4 <_printf_i+0x40>)
 800e7c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7c4:	0800e81d 	.word	0x0800e81d
 800e7c8:	0800e831 	.word	0x0800e831
 800e7cc:	0800e7ad 	.word	0x0800e7ad
 800e7d0:	0800e7ad 	.word	0x0800e7ad
 800e7d4:	0800e7ad 	.word	0x0800e7ad
 800e7d8:	0800e7ad 	.word	0x0800e7ad
 800e7dc:	0800e831 	.word	0x0800e831
 800e7e0:	0800e7ad 	.word	0x0800e7ad
 800e7e4:	0800e7ad 	.word	0x0800e7ad
 800e7e8:	0800e7ad 	.word	0x0800e7ad
 800e7ec:	0800e7ad 	.word	0x0800e7ad
 800e7f0:	0800e935 	.word	0x0800e935
 800e7f4:	0800e85d 	.word	0x0800e85d
 800e7f8:	0800e8ef 	.word	0x0800e8ef
 800e7fc:	0800e7ad 	.word	0x0800e7ad
 800e800:	0800e7ad 	.word	0x0800e7ad
 800e804:	0800e957 	.word	0x0800e957
 800e808:	0800e7ad 	.word	0x0800e7ad
 800e80c:	0800e85d 	.word	0x0800e85d
 800e810:	0800e7ad 	.word	0x0800e7ad
 800e814:	0800e7ad 	.word	0x0800e7ad
 800e818:	0800e8f7 	.word	0x0800e8f7
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	1d1a      	adds	r2, r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	602a      	str	r2, [r5, #0]
 800e824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e82c:	2301      	movs	r3, #1
 800e82e:	e09f      	b.n	800e970 <_printf_i+0x1ec>
 800e830:	6820      	ldr	r0, [r4, #0]
 800e832:	682b      	ldr	r3, [r5, #0]
 800e834:	0607      	lsls	r7, r0, #24
 800e836:	f103 0104 	add.w	r1, r3, #4
 800e83a:	6029      	str	r1, [r5, #0]
 800e83c:	d501      	bpl.n	800e842 <_printf_i+0xbe>
 800e83e:	681e      	ldr	r6, [r3, #0]
 800e840:	e003      	b.n	800e84a <_printf_i+0xc6>
 800e842:	0646      	lsls	r6, r0, #25
 800e844:	d5fb      	bpl.n	800e83e <_printf_i+0xba>
 800e846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e84a:	2e00      	cmp	r6, #0
 800e84c:	da03      	bge.n	800e856 <_printf_i+0xd2>
 800e84e:	232d      	movs	r3, #45	; 0x2d
 800e850:	4276      	negs	r6, r6
 800e852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e856:	485a      	ldr	r0, [pc, #360]	; (800e9c0 <_printf_i+0x23c>)
 800e858:	230a      	movs	r3, #10
 800e85a:	e012      	b.n	800e882 <_printf_i+0xfe>
 800e85c:	682b      	ldr	r3, [r5, #0]
 800e85e:	6820      	ldr	r0, [r4, #0]
 800e860:	1d19      	adds	r1, r3, #4
 800e862:	6029      	str	r1, [r5, #0]
 800e864:	0605      	lsls	r5, r0, #24
 800e866:	d501      	bpl.n	800e86c <_printf_i+0xe8>
 800e868:	681e      	ldr	r6, [r3, #0]
 800e86a:	e002      	b.n	800e872 <_printf_i+0xee>
 800e86c:	0641      	lsls	r1, r0, #25
 800e86e:	d5fb      	bpl.n	800e868 <_printf_i+0xe4>
 800e870:	881e      	ldrh	r6, [r3, #0]
 800e872:	4853      	ldr	r0, [pc, #332]	; (800e9c0 <_printf_i+0x23c>)
 800e874:	2f6f      	cmp	r7, #111	; 0x6f
 800e876:	bf0c      	ite	eq
 800e878:	2308      	moveq	r3, #8
 800e87a:	230a      	movne	r3, #10
 800e87c:	2100      	movs	r1, #0
 800e87e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e882:	6865      	ldr	r5, [r4, #4]
 800e884:	60a5      	str	r5, [r4, #8]
 800e886:	2d00      	cmp	r5, #0
 800e888:	bfa2      	ittt	ge
 800e88a:	6821      	ldrge	r1, [r4, #0]
 800e88c:	f021 0104 	bicge.w	r1, r1, #4
 800e890:	6021      	strge	r1, [r4, #0]
 800e892:	b90e      	cbnz	r6, 800e898 <_printf_i+0x114>
 800e894:	2d00      	cmp	r5, #0
 800e896:	d04b      	beq.n	800e930 <_printf_i+0x1ac>
 800e898:	4615      	mov	r5, r2
 800e89a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e89e:	fb03 6711 	mls	r7, r3, r1, r6
 800e8a2:	5dc7      	ldrb	r7, [r0, r7]
 800e8a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8a8:	4637      	mov	r7, r6
 800e8aa:	42bb      	cmp	r3, r7
 800e8ac:	460e      	mov	r6, r1
 800e8ae:	d9f4      	bls.n	800e89a <_printf_i+0x116>
 800e8b0:	2b08      	cmp	r3, #8
 800e8b2:	d10b      	bne.n	800e8cc <_printf_i+0x148>
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	07de      	lsls	r6, r3, #31
 800e8b8:	d508      	bpl.n	800e8cc <_printf_i+0x148>
 800e8ba:	6923      	ldr	r3, [r4, #16]
 800e8bc:	6861      	ldr	r1, [r4, #4]
 800e8be:	4299      	cmp	r1, r3
 800e8c0:	bfde      	ittt	le
 800e8c2:	2330      	movle	r3, #48	; 0x30
 800e8c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8cc:	1b52      	subs	r2, r2, r5
 800e8ce:	6122      	str	r2, [r4, #16]
 800e8d0:	f8cd a000 	str.w	sl, [sp]
 800e8d4:	464b      	mov	r3, r9
 800e8d6:	aa03      	add	r2, sp, #12
 800e8d8:	4621      	mov	r1, r4
 800e8da:	4640      	mov	r0, r8
 800e8dc:	f7ff fee4 	bl	800e6a8 <_printf_common>
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d14a      	bne.n	800e97a <_printf_i+0x1f6>
 800e8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e8:	b004      	add	sp, #16
 800e8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	f043 0320 	orr.w	r3, r3, #32
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	4833      	ldr	r0, [pc, #204]	; (800e9c4 <_printf_i+0x240>)
 800e8f8:	2778      	movs	r7, #120	; 0x78
 800e8fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	6829      	ldr	r1, [r5, #0]
 800e902:	061f      	lsls	r7, r3, #24
 800e904:	f851 6b04 	ldr.w	r6, [r1], #4
 800e908:	d402      	bmi.n	800e910 <_printf_i+0x18c>
 800e90a:	065f      	lsls	r7, r3, #25
 800e90c:	bf48      	it	mi
 800e90e:	b2b6      	uxthmi	r6, r6
 800e910:	07df      	lsls	r7, r3, #31
 800e912:	bf48      	it	mi
 800e914:	f043 0320 	orrmi.w	r3, r3, #32
 800e918:	6029      	str	r1, [r5, #0]
 800e91a:	bf48      	it	mi
 800e91c:	6023      	strmi	r3, [r4, #0]
 800e91e:	b91e      	cbnz	r6, 800e928 <_printf_i+0x1a4>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	f023 0320 	bic.w	r3, r3, #32
 800e926:	6023      	str	r3, [r4, #0]
 800e928:	2310      	movs	r3, #16
 800e92a:	e7a7      	b.n	800e87c <_printf_i+0xf8>
 800e92c:	4824      	ldr	r0, [pc, #144]	; (800e9c0 <_printf_i+0x23c>)
 800e92e:	e7e4      	b.n	800e8fa <_printf_i+0x176>
 800e930:	4615      	mov	r5, r2
 800e932:	e7bd      	b.n	800e8b0 <_printf_i+0x12c>
 800e934:	682b      	ldr	r3, [r5, #0]
 800e936:	6826      	ldr	r6, [r4, #0]
 800e938:	6961      	ldr	r1, [r4, #20]
 800e93a:	1d18      	adds	r0, r3, #4
 800e93c:	6028      	str	r0, [r5, #0]
 800e93e:	0635      	lsls	r5, r6, #24
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	d501      	bpl.n	800e948 <_printf_i+0x1c4>
 800e944:	6019      	str	r1, [r3, #0]
 800e946:	e002      	b.n	800e94e <_printf_i+0x1ca>
 800e948:	0670      	lsls	r0, r6, #25
 800e94a:	d5fb      	bpl.n	800e944 <_printf_i+0x1c0>
 800e94c:	8019      	strh	r1, [r3, #0]
 800e94e:	2300      	movs	r3, #0
 800e950:	6123      	str	r3, [r4, #16]
 800e952:	4615      	mov	r5, r2
 800e954:	e7bc      	b.n	800e8d0 <_printf_i+0x14c>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	1d1a      	adds	r2, r3, #4
 800e95a:	602a      	str	r2, [r5, #0]
 800e95c:	681d      	ldr	r5, [r3, #0]
 800e95e:	6862      	ldr	r2, [r4, #4]
 800e960:	2100      	movs	r1, #0
 800e962:	4628      	mov	r0, r5
 800e964:	f7f1 fc34 	bl	80001d0 <memchr>
 800e968:	b108      	cbz	r0, 800e96e <_printf_i+0x1ea>
 800e96a:	1b40      	subs	r0, r0, r5
 800e96c:	6060      	str	r0, [r4, #4]
 800e96e:	6863      	ldr	r3, [r4, #4]
 800e970:	6123      	str	r3, [r4, #16]
 800e972:	2300      	movs	r3, #0
 800e974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e978:	e7aa      	b.n	800e8d0 <_printf_i+0x14c>
 800e97a:	6923      	ldr	r3, [r4, #16]
 800e97c:	462a      	mov	r2, r5
 800e97e:	4649      	mov	r1, r9
 800e980:	4640      	mov	r0, r8
 800e982:	47d0      	blx	sl
 800e984:	3001      	adds	r0, #1
 800e986:	d0ad      	beq.n	800e8e4 <_printf_i+0x160>
 800e988:	6823      	ldr	r3, [r4, #0]
 800e98a:	079b      	lsls	r3, r3, #30
 800e98c:	d413      	bmi.n	800e9b6 <_printf_i+0x232>
 800e98e:	68e0      	ldr	r0, [r4, #12]
 800e990:	9b03      	ldr	r3, [sp, #12]
 800e992:	4298      	cmp	r0, r3
 800e994:	bfb8      	it	lt
 800e996:	4618      	movlt	r0, r3
 800e998:	e7a6      	b.n	800e8e8 <_printf_i+0x164>
 800e99a:	2301      	movs	r3, #1
 800e99c:	4632      	mov	r2, r6
 800e99e:	4649      	mov	r1, r9
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	47d0      	blx	sl
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	d09d      	beq.n	800e8e4 <_printf_i+0x160>
 800e9a8:	3501      	adds	r5, #1
 800e9aa:	68e3      	ldr	r3, [r4, #12]
 800e9ac:	9903      	ldr	r1, [sp, #12]
 800e9ae:	1a5b      	subs	r3, r3, r1
 800e9b0:	42ab      	cmp	r3, r5
 800e9b2:	dcf2      	bgt.n	800e99a <_printf_i+0x216>
 800e9b4:	e7eb      	b.n	800e98e <_printf_i+0x20a>
 800e9b6:	2500      	movs	r5, #0
 800e9b8:	f104 0619 	add.w	r6, r4, #25
 800e9bc:	e7f5      	b.n	800e9aa <_printf_i+0x226>
 800e9be:	bf00      	nop
 800e9c0:	08011b2e 	.word	0x08011b2e
 800e9c4:	08011b3f 	.word	0x08011b3f

0800e9c8 <std>:
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	b510      	push	{r4, lr}
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e9d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9d6:	6083      	str	r3, [r0, #8]
 800e9d8:	8181      	strh	r1, [r0, #12]
 800e9da:	6643      	str	r3, [r0, #100]	; 0x64
 800e9dc:	81c2      	strh	r2, [r0, #14]
 800e9de:	6183      	str	r3, [r0, #24]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	2208      	movs	r2, #8
 800e9e4:	305c      	adds	r0, #92	; 0x5c
 800e9e6:	f000 fa31 	bl	800ee4c <memset>
 800e9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <std+0x58>)
 800e9ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <std+0x5c>)
 800e9f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9f2:	4b0d      	ldr	r3, [pc, #52]	; (800ea28 <std+0x60>)
 800e9f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ea2c <std+0x64>)
 800e9f8:	6323      	str	r3, [r4, #48]	; 0x30
 800e9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ea30 <std+0x68>)
 800e9fc:	6224      	str	r4, [r4, #32]
 800e9fe:	429c      	cmp	r4, r3
 800ea00:	d006      	beq.n	800ea10 <std+0x48>
 800ea02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ea06:	4294      	cmp	r4, r2
 800ea08:	d002      	beq.n	800ea10 <std+0x48>
 800ea0a:	33d0      	adds	r3, #208	; 0xd0
 800ea0c:	429c      	cmp	r4, r3
 800ea0e:	d105      	bne.n	800ea1c <std+0x54>
 800ea10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea18:	f000 ba94 	b.w	800ef44 <__retarget_lock_init_recursive>
 800ea1c:	bd10      	pop	{r4, pc}
 800ea1e:	bf00      	nop
 800ea20:	0800ec69 	.word	0x0800ec69
 800ea24:	0800ec8b 	.word	0x0800ec8b
 800ea28:	0800ecc3 	.word	0x0800ecc3
 800ea2c:	0800ece7 	.word	0x0800ece7
 800ea30:	20004bdc 	.word	0x20004bdc

0800ea34 <stdio_exit_handler>:
 800ea34:	4a02      	ldr	r2, [pc, #8]	; (800ea40 <stdio_exit_handler+0xc>)
 800ea36:	4903      	ldr	r1, [pc, #12]	; (800ea44 <stdio_exit_handler+0x10>)
 800ea38:	4803      	ldr	r0, [pc, #12]	; (800ea48 <stdio_exit_handler+0x14>)
 800ea3a:	f000 b869 	b.w	800eb10 <_fwalk_sglue>
 800ea3e:	bf00      	nop
 800ea40:	20000018 	.word	0x20000018
 800ea44:	08010b99 	.word	0x08010b99
 800ea48:	20000024 	.word	0x20000024

0800ea4c <cleanup_stdio>:
 800ea4c:	6841      	ldr	r1, [r0, #4]
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <cleanup_stdio+0x34>)
 800ea50:	4299      	cmp	r1, r3
 800ea52:	b510      	push	{r4, lr}
 800ea54:	4604      	mov	r4, r0
 800ea56:	d001      	beq.n	800ea5c <cleanup_stdio+0x10>
 800ea58:	f002 f89e 	bl	8010b98 <_fflush_r>
 800ea5c:	68a1      	ldr	r1, [r4, #8]
 800ea5e:	4b09      	ldr	r3, [pc, #36]	; (800ea84 <cleanup_stdio+0x38>)
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <cleanup_stdio+0x1e>
 800ea64:	4620      	mov	r0, r4
 800ea66:	f002 f897 	bl	8010b98 <_fflush_r>
 800ea6a:	68e1      	ldr	r1, [r4, #12]
 800ea6c:	4b06      	ldr	r3, [pc, #24]	; (800ea88 <cleanup_stdio+0x3c>)
 800ea6e:	4299      	cmp	r1, r3
 800ea70:	d004      	beq.n	800ea7c <cleanup_stdio+0x30>
 800ea72:	4620      	mov	r0, r4
 800ea74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea78:	f002 b88e 	b.w	8010b98 <_fflush_r>
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	bf00      	nop
 800ea80:	20004bdc 	.word	0x20004bdc
 800ea84:	20004c44 	.word	0x20004c44
 800ea88:	20004cac 	.word	0x20004cac

0800ea8c <global_stdio_init.part.0>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4b0b      	ldr	r3, [pc, #44]	; (800eabc <global_stdio_init.part.0+0x30>)
 800ea90:	4c0b      	ldr	r4, [pc, #44]	; (800eac0 <global_stdio_init.part.0+0x34>)
 800ea92:	4a0c      	ldr	r2, [pc, #48]	; (800eac4 <global_stdio_init.part.0+0x38>)
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	4620      	mov	r0, r4
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2104      	movs	r1, #4
 800ea9c:	f7ff ff94 	bl	800e9c8 <std>
 800eaa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	2109      	movs	r1, #9
 800eaa8:	f7ff ff8e 	bl	800e9c8 <std>
 800eaac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eab0:	2202      	movs	r2, #2
 800eab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab6:	2112      	movs	r1, #18
 800eab8:	f7ff bf86 	b.w	800e9c8 <std>
 800eabc:	20004d14 	.word	0x20004d14
 800eac0:	20004bdc 	.word	0x20004bdc
 800eac4:	0800ea35 	.word	0x0800ea35

0800eac8 <__sfp_lock_acquire>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__sfp_lock_acquire+0x8>)
 800eaca:	f000 ba3c 	b.w	800ef46 <__retarget_lock_acquire_recursive>
 800eace:	bf00      	nop
 800ead0:	20004d1d 	.word	0x20004d1d

0800ead4 <__sfp_lock_release>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__sfp_lock_release+0x8>)
 800ead6:	f000 ba37 	b.w	800ef48 <__retarget_lock_release_recursive>
 800eada:	bf00      	nop
 800eadc:	20004d1d 	.word	0x20004d1d

0800eae0 <__sinit>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	f7ff fff0 	bl	800eac8 <__sfp_lock_acquire>
 800eae8:	6a23      	ldr	r3, [r4, #32]
 800eaea:	b11b      	cbz	r3, 800eaf4 <__sinit+0x14>
 800eaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaf0:	f7ff bff0 	b.w	800ead4 <__sfp_lock_release>
 800eaf4:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <__sinit+0x28>)
 800eaf6:	6223      	str	r3, [r4, #32]
 800eaf8:	4b04      	ldr	r3, [pc, #16]	; (800eb0c <__sinit+0x2c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1f5      	bne.n	800eaec <__sinit+0xc>
 800eb00:	f7ff ffc4 	bl	800ea8c <global_stdio_init.part.0>
 800eb04:	e7f2      	b.n	800eaec <__sinit+0xc>
 800eb06:	bf00      	nop
 800eb08:	0800ea4d 	.word	0x0800ea4d
 800eb0c:	20004d14 	.word	0x20004d14

0800eb10 <_fwalk_sglue>:
 800eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb14:	4607      	mov	r7, r0
 800eb16:	4688      	mov	r8, r1
 800eb18:	4614      	mov	r4, r2
 800eb1a:	2600      	movs	r6, #0
 800eb1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb20:	f1b9 0901 	subs.w	r9, r9, #1
 800eb24:	d505      	bpl.n	800eb32 <_fwalk_sglue+0x22>
 800eb26:	6824      	ldr	r4, [r4, #0]
 800eb28:	2c00      	cmp	r4, #0
 800eb2a:	d1f7      	bne.n	800eb1c <_fwalk_sglue+0xc>
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb32:	89ab      	ldrh	r3, [r5, #12]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d907      	bls.n	800eb48 <_fwalk_sglue+0x38>
 800eb38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	d003      	beq.n	800eb48 <_fwalk_sglue+0x38>
 800eb40:	4629      	mov	r1, r5
 800eb42:	4638      	mov	r0, r7
 800eb44:	47c0      	blx	r8
 800eb46:	4306      	orrs	r6, r0
 800eb48:	3568      	adds	r5, #104	; 0x68
 800eb4a:	e7e9      	b.n	800eb20 <_fwalk_sglue+0x10>

0800eb4c <iprintf>:
 800eb4c:	b40f      	push	{r0, r1, r2, r3}
 800eb4e:	b507      	push	{r0, r1, r2, lr}
 800eb50:	4906      	ldr	r1, [pc, #24]	; (800eb6c <iprintf+0x20>)
 800eb52:	ab04      	add	r3, sp, #16
 800eb54:	6808      	ldr	r0, [r1, #0]
 800eb56:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb5a:	6881      	ldr	r1, [r0, #8]
 800eb5c:	9301      	str	r3, [sp, #4]
 800eb5e:	f001 fe7b 	bl	8010858 <_vfiprintf_r>
 800eb62:	b003      	add	sp, #12
 800eb64:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb68:	b004      	add	sp, #16
 800eb6a:	4770      	bx	lr
 800eb6c:	20000070 	.word	0x20000070

0800eb70 <_puts_r>:
 800eb70:	6a03      	ldr	r3, [r0, #32]
 800eb72:	b570      	push	{r4, r5, r6, lr}
 800eb74:	6884      	ldr	r4, [r0, #8]
 800eb76:	4605      	mov	r5, r0
 800eb78:	460e      	mov	r6, r1
 800eb7a:	b90b      	cbnz	r3, 800eb80 <_puts_r+0x10>
 800eb7c:	f7ff ffb0 	bl	800eae0 <__sinit>
 800eb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb82:	07db      	lsls	r3, r3, #31
 800eb84:	d405      	bmi.n	800eb92 <_puts_r+0x22>
 800eb86:	89a3      	ldrh	r3, [r4, #12]
 800eb88:	0598      	lsls	r0, r3, #22
 800eb8a:	d402      	bmi.n	800eb92 <_puts_r+0x22>
 800eb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb8e:	f000 f9da 	bl	800ef46 <__retarget_lock_acquire_recursive>
 800eb92:	89a3      	ldrh	r3, [r4, #12]
 800eb94:	0719      	lsls	r1, r3, #28
 800eb96:	d513      	bpl.n	800ebc0 <_puts_r+0x50>
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	b18b      	cbz	r3, 800ebc0 <_puts_r+0x50>
 800eb9c:	3e01      	subs	r6, #1
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eba4:	3b01      	subs	r3, #1
 800eba6:	60a3      	str	r3, [r4, #8]
 800eba8:	b9e9      	cbnz	r1, 800ebe6 <_puts_r+0x76>
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	da2e      	bge.n	800ec0c <_puts_r+0x9c>
 800ebae:	4622      	mov	r2, r4
 800ebb0:	210a      	movs	r1, #10
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f000 f89b 	bl	800ecee <__swbuf_r>
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d007      	beq.n	800ebcc <_puts_r+0x5c>
 800ebbc:	250a      	movs	r5, #10
 800ebbe:	e007      	b.n	800ebd0 <_puts_r+0x60>
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f000 f8d0 	bl	800ed68 <__swsetup_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d0e7      	beq.n	800eb9c <_puts_r+0x2c>
 800ebcc:	f04f 35ff 	mov.w	r5, #4294967295
 800ebd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebd2:	07da      	lsls	r2, r3, #31
 800ebd4:	d405      	bmi.n	800ebe2 <_puts_r+0x72>
 800ebd6:	89a3      	ldrh	r3, [r4, #12]
 800ebd8:	059b      	lsls	r3, r3, #22
 800ebda:	d402      	bmi.n	800ebe2 <_puts_r+0x72>
 800ebdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebde:	f000 f9b3 	bl	800ef48 <__retarget_lock_release_recursive>
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	da04      	bge.n	800ebf4 <_puts_r+0x84>
 800ebea:	69a2      	ldr	r2, [r4, #24]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	dc06      	bgt.n	800ebfe <_puts_r+0x8e>
 800ebf0:	290a      	cmp	r1, #10
 800ebf2:	d004      	beq.n	800ebfe <_puts_r+0x8e>
 800ebf4:	6823      	ldr	r3, [r4, #0]
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	6022      	str	r2, [r4, #0]
 800ebfa:	7019      	strb	r1, [r3, #0]
 800ebfc:	e7cf      	b.n	800eb9e <_puts_r+0x2e>
 800ebfe:	4622      	mov	r2, r4
 800ec00:	4628      	mov	r0, r5
 800ec02:	f000 f874 	bl	800ecee <__swbuf_r>
 800ec06:	3001      	adds	r0, #1
 800ec08:	d1c9      	bne.n	800eb9e <_puts_r+0x2e>
 800ec0a:	e7df      	b.n	800ebcc <_puts_r+0x5c>
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	250a      	movs	r5, #10
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	6022      	str	r2, [r4, #0]
 800ec14:	701d      	strb	r5, [r3, #0]
 800ec16:	e7db      	b.n	800ebd0 <_puts_r+0x60>

0800ec18 <puts>:
 800ec18:	4b02      	ldr	r3, [pc, #8]	; (800ec24 <puts+0xc>)
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	6818      	ldr	r0, [r3, #0]
 800ec1e:	f7ff bfa7 	b.w	800eb70 <_puts_r>
 800ec22:	bf00      	nop
 800ec24:	20000070 	.word	0x20000070

0800ec28 <siprintf>:
 800ec28:	b40e      	push	{r1, r2, r3}
 800ec2a:	b500      	push	{lr}
 800ec2c:	b09c      	sub	sp, #112	; 0x70
 800ec2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ec30:	9002      	str	r0, [sp, #8]
 800ec32:	9006      	str	r0, [sp, #24]
 800ec34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec38:	4809      	ldr	r0, [pc, #36]	; (800ec60 <siprintf+0x38>)
 800ec3a:	9107      	str	r1, [sp, #28]
 800ec3c:	9104      	str	r1, [sp, #16]
 800ec3e:	4909      	ldr	r1, [pc, #36]	; (800ec64 <siprintf+0x3c>)
 800ec40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec44:	9105      	str	r1, [sp, #20]
 800ec46:	6800      	ldr	r0, [r0, #0]
 800ec48:	9301      	str	r3, [sp, #4]
 800ec4a:	a902      	add	r1, sp, #8
 800ec4c:	f001 fcdc 	bl	8010608 <_svfiprintf_r>
 800ec50:	9b02      	ldr	r3, [sp, #8]
 800ec52:	2200      	movs	r2, #0
 800ec54:	701a      	strb	r2, [r3, #0]
 800ec56:	b01c      	add	sp, #112	; 0x70
 800ec58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec5c:	b003      	add	sp, #12
 800ec5e:	4770      	bx	lr
 800ec60:	20000070 	.word	0x20000070
 800ec64:	ffff0208 	.word	0xffff0208

0800ec68 <__sread>:
 800ec68:	b510      	push	{r4, lr}
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec70:	f000 f91a 	bl	800eea8 <_read_r>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	bfab      	itete	ge
 800ec78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec7c:	181b      	addge	r3, r3, r0
 800ec7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec82:	bfac      	ite	ge
 800ec84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec86:	81a3      	strhlt	r3, [r4, #12]
 800ec88:	bd10      	pop	{r4, pc}

0800ec8a <__swrite>:
 800ec8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8e:	461f      	mov	r7, r3
 800ec90:	898b      	ldrh	r3, [r1, #12]
 800ec92:	05db      	lsls	r3, r3, #23
 800ec94:	4605      	mov	r5, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	4616      	mov	r6, r2
 800ec9a:	d505      	bpl.n	800eca8 <__swrite+0x1e>
 800ec9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca0:	2302      	movs	r3, #2
 800eca2:	2200      	movs	r2, #0
 800eca4:	f000 f8ee 	bl	800ee84 <_lseek_r>
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecb2:	81a3      	strh	r3, [r4, #12]
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	463b      	mov	r3, r7
 800ecb8:	4628      	mov	r0, r5
 800ecba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecbe:	f000 b905 	b.w	800eecc <_write_r>

0800ecc2 <__sseek>:
 800ecc2:	b510      	push	{r4, lr}
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecca:	f000 f8db 	bl	800ee84 <_lseek_r>
 800ecce:	1c43      	adds	r3, r0, #1
 800ecd0:	89a3      	ldrh	r3, [r4, #12]
 800ecd2:	bf15      	itete	ne
 800ecd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecde:	81a3      	strheq	r3, [r4, #12]
 800ece0:	bf18      	it	ne
 800ece2:	81a3      	strhne	r3, [r4, #12]
 800ece4:	bd10      	pop	{r4, pc}

0800ece6 <__sclose>:
 800ece6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecea:	f000 b8bb 	b.w	800ee64 <_close_r>

0800ecee <__swbuf_r>:
 800ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf0:	460e      	mov	r6, r1
 800ecf2:	4614      	mov	r4, r2
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	b118      	cbz	r0, 800ed00 <__swbuf_r+0x12>
 800ecf8:	6a03      	ldr	r3, [r0, #32]
 800ecfa:	b90b      	cbnz	r3, 800ed00 <__swbuf_r+0x12>
 800ecfc:	f7ff fef0 	bl	800eae0 <__sinit>
 800ed00:	69a3      	ldr	r3, [r4, #24]
 800ed02:	60a3      	str	r3, [r4, #8]
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	071a      	lsls	r2, r3, #28
 800ed08:	d525      	bpl.n	800ed56 <__swbuf_r+0x68>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	b31b      	cbz	r3, 800ed56 <__swbuf_r+0x68>
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	6922      	ldr	r2, [r4, #16]
 800ed12:	1a98      	subs	r0, r3, r2
 800ed14:	6963      	ldr	r3, [r4, #20]
 800ed16:	b2f6      	uxtb	r6, r6
 800ed18:	4283      	cmp	r3, r0
 800ed1a:	4637      	mov	r7, r6
 800ed1c:	dc04      	bgt.n	800ed28 <__swbuf_r+0x3a>
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4628      	mov	r0, r5
 800ed22:	f001 ff39 	bl	8010b98 <_fflush_r>
 800ed26:	b9e0      	cbnz	r0, 800ed62 <__swbuf_r+0x74>
 800ed28:	68a3      	ldr	r3, [r4, #8]
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	60a3      	str	r3, [r4, #8]
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	1c5a      	adds	r2, r3, #1
 800ed32:	6022      	str	r2, [r4, #0]
 800ed34:	701e      	strb	r6, [r3, #0]
 800ed36:	6962      	ldr	r2, [r4, #20]
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d004      	beq.n	800ed48 <__swbuf_r+0x5a>
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	07db      	lsls	r3, r3, #31
 800ed42:	d506      	bpl.n	800ed52 <__swbuf_r+0x64>
 800ed44:	2e0a      	cmp	r6, #10
 800ed46:	d104      	bne.n	800ed52 <__swbuf_r+0x64>
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f001 ff24 	bl	8010b98 <_fflush_r>
 800ed50:	b938      	cbnz	r0, 800ed62 <__swbuf_r+0x74>
 800ed52:	4638      	mov	r0, r7
 800ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed56:	4621      	mov	r1, r4
 800ed58:	4628      	mov	r0, r5
 800ed5a:	f000 f805 	bl	800ed68 <__swsetup_r>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d0d5      	beq.n	800ed0e <__swbuf_r+0x20>
 800ed62:	f04f 37ff 	mov.w	r7, #4294967295
 800ed66:	e7f4      	b.n	800ed52 <__swbuf_r+0x64>

0800ed68 <__swsetup_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4b2a      	ldr	r3, [pc, #168]	; (800ee14 <__swsetup_r+0xac>)
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	6818      	ldr	r0, [r3, #0]
 800ed70:	460c      	mov	r4, r1
 800ed72:	b118      	cbz	r0, 800ed7c <__swsetup_r+0x14>
 800ed74:	6a03      	ldr	r3, [r0, #32]
 800ed76:	b90b      	cbnz	r3, 800ed7c <__swsetup_r+0x14>
 800ed78:	f7ff feb2 	bl	800eae0 <__sinit>
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed82:	0718      	lsls	r0, r3, #28
 800ed84:	d422      	bmi.n	800edcc <__swsetup_r+0x64>
 800ed86:	06d9      	lsls	r1, r3, #27
 800ed88:	d407      	bmi.n	800ed9a <__swsetup_r+0x32>
 800ed8a:	2309      	movs	r3, #9
 800ed8c:	602b      	str	r3, [r5, #0]
 800ed8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed92:	81a3      	strh	r3, [r4, #12]
 800ed94:	f04f 30ff 	mov.w	r0, #4294967295
 800ed98:	e034      	b.n	800ee04 <__swsetup_r+0x9c>
 800ed9a:	0758      	lsls	r0, r3, #29
 800ed9c:	d512      	bpl.n	800edc4 <__swsetup_r+0x5c>
 800ed9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eda0:	b141      	cbz	r1, 800edb4 <__swsetup_r+0x4c>
 800eda2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eda6:	4299      	cmp	r1, r3
 800eda8:	d002      	beq.n	800edb0 <__swsetup_r+0x48>
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 ff56 	bl	800fc5c <_free_r>
 800edb0:	2300      	movs	r3, #0
 800edb2:	6363      	str	r3, [r4, #52]	; 0x34
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	2300      	movs	r3, #0
 800edbe:	6063      	str	r3, [r4, #4]
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f043 0308 	orr.w	r3, r3, #8
 800edca:	81a3      	strh	r3, [r4, #12]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	b94b      	cbnz	r3, 800ede4 <__swsetup_r+0x7c>
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edda:	d003      	beq.n	800ede4 <__swsetup_r+0x7c>
 800eddc:	4621      	mov	r1, r4
 800edde:	4628      	mov	r0, r5
 800ede0:	f001 ff28 	bl	8010c34 <__smakebuf_r>
 800ede4:	89a0      	ldrh	r0, [r4, #12]
 800ede6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edea:	f010 0301 	ands.w	r3, r0, #1
 800edee:	d00a      	beq.n	800ee06 <__swsetup_r+0x9e>
 800edf0:	2300      	movs	r3, #0
 800edf2:	60a3      	str	r3, [r4, #8]
 800edf4:	6963      	ldr	r3, [r4, #20]
 800edf6:	425b      	negs	r3, r3
 800edf8:	61a3      	str	r3, [r4, #24]
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	b943      	cbnz	r3, 800ee10 <__swsetup_r+0xa8>
 800edfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee02:	d1c4      	bne.n	800ed8e <__swsetup_r+0x26>
 800ee04:	bd38      	pop	{r3, r4, r5, pc}
 800ee06:	0781      	lsls	r1, r0, #30
 800ee08:	bf58      	it	pl
 800ee0a:	6963      	ldrpl	r3, [r4, #20]
 800ee0c:	60a3      	str	r3, [r4, #8]
 800ee0e:	e7f4      	b.n	800edfa <__swsetup_r+0x92>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e7f7      	b.n	800ee04 <__swsetup_r+0x9c>
 800ee14:	20000070 	.word	0x20000070

0800ee18 <memmove>:
 800ee18:	4288      	cmp	r0, r1
 800ee1a:	b510      	push	{r4, lr}
 800ee1c:	eb01 0402 	add.w	r4, r1, r2
 800ee20:	d902      	bls.n	800ee28 <memmove+0x10>
 800ee22:	4284      	cmp	r4, r0
 800ee24:	4623      	mov	r3, r4
 800ee26:	d807      	bhi.n	800ee38 <memmove+0x20>
 800ee28:	1e43      	subs	r3, r0, #1
 800ee2a:	42a1      	cmp	r1, r4
 800ee2c:	d008      	beq.n	800ee40 <memmove+0x28>
 800ee2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee36:	e7f8      	b.n	800ee2a <memmove+0x12>
 800ee38:	4402      	add	r2, r0
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	428a      	cmp	r2, r1
 800ee3e:	d100      	bne.n	800ee42 <memmove+0x2a>
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee4a:	e7f7      	b.n	800ee3c <memmove+0x24>

0800ee4c <memset>:
 800ee4c:	4402      	add	r2, r0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d100      	bne.n	800ee56 <memset+0xa>
 800ee54:	4770      	bx	lr
 800ee56:	f803 1b01 	strb.w	r1, [r3], #1
 800ee5a:	e7f9      	b.n	800ee50 <memset+0x4>

0800ee5c <_localeconv_r>:
 800ee5c:	4800      	ldr	r0, [pc, #0]	; (800ee60 <_localeconv_r+0x4>)
 800ee5e:	4770      	bx	lr
 800ee60:	20000164 	.word	0x20000164

0800ee64 <_close_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d06      	ldr	r5, [pc, #24]	; (800ee80 <_close_r+0x1c>)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	f7f5 f975 	bl	800415e <_close>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_close_r+0x1a>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_close_r+0x1a>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	20004d18 	.word	0x20004d18

0800ee84 <_lseek_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	; (800eea4 <_lseek_r+0x20>)
 800ee88:	4604      	mov	r4, r0
 800ee8a:	4608      	mov	r0, r1
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	602a      	str	r2, [r5, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	f7f5 f98a 	bl	80041ac <_lseek>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_lseek_r+0x1e>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_lseek_r+0x1e>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20004d18 	.word	0x20004d18

0800eea8 <_read_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d07      	ldr	r5, [pc, #28]	; (800eec8 <_read_r+0x20>)
 800eeac:	4604      	mov	r4, r0
 800eeae:	4608      	mov	r0, r1
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	602a      	str	r2, [r5, #0]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	f7f5 f934 	bl	8004124 <_read>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	d102      	bne.n	800eec6 <_read_r+0x1e>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	b103      	cbz	r3, 800eec6 <_read_r+0x1e>
 800eec4:	6023      	str	r3, [r4, #0]
 800eec6:	bd38      	pop	{r3, r4, r5, pc}
 800eec8:	20004d18 	.word	0x20004d18

0800eecc <_write_r>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4d07      	ldr	r5, [pc, #28]	; (800eeec <_write_r+0x20>)
 800eed0:	4604      	mov	r4, r0
 800eed2:	4608      	mov	r0, r1
 800eed4:	4611      	mov	r1, r2
 800eed6:	2200      	movs	r2, #0
 800eed8:	602a      	str	r2, [r5, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	f7f3 fb84 	bl	80025e8 <_write>
 800eee0:	1c43      	adds	r3, r0, #1
 800eee2:	d102      	bne.n	800eeea <_write_r+0x1e>
 800eee4:	682b      	ldr	r3, [r5, #0]
 800eee6:	b103      	cbz	r3, 800eeea <_write_r+0x1e>
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	bd38      	pop	{r3, r4, r5, pc}
 800eeec:	20004d18 	.word	0x20004d18

0800eef0 <__errno>:
 800eef0:	4b01      	ldr	r3, [pc, #4]	; (800eef8 <__errno+0x8>)
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	20000070 	.word	0x20000070

0800eefc <__libc_init_array>:
 800eefc:	b570      	push	{r4, r5, r6, lr}
 800eefe:	4d0d      	ldr	r5, [pc, #52]	; (800ef34 <__libc_init_array+0x38>)
 800ef00:	4c0d      	ldr	r4, [pc, #52]	; (800ef38 <__libc_init_array+0x3c>)
 800ef02:	1b64      	subs	r4, r4, r5
 800ef04:	10a4      	asrs	r4, r4, #2
 800ef06:	2600      	movs	r6, #0
 800ef08:	42a6      	cmp	r6, r4
 800ef0a:	d109      	bne.n	800ef20 <__libc_init_array+0x24>
 800ef0c:	4d0b      	ldr	r5, [pc, #44]	; (800ef3c <__libc_init_array+0x40>)
 800ef0e:	4c0c      	ldr	r4, [pc, #48]	; (800ef40 <__libc_init_array+0x44>)
 800ef10:	f001 ffe6 	bl	8010ee0 <_init>
 800ef14:	1b64      	subs	r4, r4, r5
 800ef16:	10a4      	asrs	r4, r4, #2
 800ef18:	2600      	movs	r6, #0
 800ef1a:	42a6      	cmp	r6, r4
 800ef1c:	d105      	bne.n	800ef2a <__libc_init_array+0x2e>
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef24:	4798      	blx	r3
 800ef26:	3601      	adds	r6, #1
 800ef28:	e7ee      	b.n	800ef08 <__libc_init_array+0xc>
 800ef2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef2e:	4798      	blx	r3
 800ef30:	3601      	adds	r6, #1
 800ef32:	e7f2      	b.n	800ef1a <__libc_init_array+0x1e>
 800ef34:	08011e94 	.word	0x08011e94
 800ef38:	08011e94 	.word	0x08011e94
 800ef3c:	08011e94 	.word	0x08011e94
 800ef40:	08011e98 	.word	0x08011e98

0800ef44 <__retarget_lock_init_recursive>:
 800ef44:	4770      	bx	lr

0800ef46 <__retarget_lock_acquire_recursive>:
 800ef46:	4770      	bx	lr

0800ef48 <__retarget_lock_release_recursive>:
 800ef48:	4770      	bx	lr

0800ef4a <memcpy>:
 800ef4a:	440a      	add	r2, r1
 800ef4c:	4291      	cmp	r1, r2
 800ef4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef52:	d100      	bne.n	800ef56 <memcpy+0xc>
 800ef54:	4770      	bx	lr
 800ef56:	b510      	push	{r4, lr}
 800ef58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef60:	4291      	cmp	r1, r2
 800ef62:	d1f9      	bne.n	800ef58 <memcpy+0xe>
 800ef64:	bd10      	pop	{r4, pc}

0800ef66 <quorem>:
 800ef66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6a:	6903      	ldr	r3, [r0, #16]
 800ef6c:	690c      	ldr	r4, [r1, #16]
 800ef6e:	42a3      	cmp	r3, r4
 800ef70:	4607      	mov	r7, r0
 800ef72:	db7e      	blt.n	800f072 <quorem+0x10c>
 800ef74:	3c01      	subs	r4, #1
 800ef76:	f101 0814 	add.w	r8, r1, #20
 800ef7a:	f100 0514 	add.w	r5, r0, #20
 800ef7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef9c:	d331      	bcc.n	800f002 <quorem+0x9c>
 800ef9e:	f04f 0e00 	mov.w	lr, #0
 800efa2:	4640      	mov	r0, r8
 800efa4:	46ac      	mov	ip, r5
 800efa6:	46f2      	mov	sl, lr
 800efa8:	f850 2b04 	ldr.w	r2, [r0], #4
 800efac:	b293      	uxth	r3, r2
 800efae:	fb06 e303 	mla	r3, r6, r3, lr
 800efb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efb6:	0c1a      	lsrs	r2, r3, #16
 800efb8:	b29b      	uxth	r3, r3
 800efba:	ebaa 0303 	sub.w	r3, sl, r3
 800efbe:	f8dc a000 	ldr.w	sl, [ip]
 800efc2:	fa13 f38a 	uxtah	r3, r3, sl
 800efc6:	fb06 220e 	mla	r2, r6, lr, r2
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	9b00      	ldr	r3, [sp, #0]
 800efce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efd2:	b292      	uxth	r2, r2
 800efd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800efd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efdc:	f8bd 3000 	ldrh.w	r3, [sp]
 800efe0:	4581      	cmp	r9, r0
 800efe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efe6:	f84c 3b04 	str.w	r3, [ip], #4
 800efea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800efee:	d2db      	bcs.n	800efa8 <quorem+0x42>
 800eff0:	f855 300b 	ldr.w	r3, [r5, fp]
 800eff4:	b92b      	cbnz	r3, 800f002 <quorem+0x9c>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	3b04      	subs	r3, #4
 800effa:	429d      	cmp	r5, r3
 800effc:	461a      	mov	r2, r3
 800effe:	d32c      	bcc.n	800f05a <quorem+0xf4>
 800f000:	613c      	str	r4, [r7, #16]
 800f002:	4638      	mov	r0, r7
 800f004:	f001 f9a6 	bl	8010354 <__mcmp>
 800f008:	2800      	cmp	r0, #0
 800f00a:	db22      	blt.n	800f052 <quorem+0xec>
 800f00c:	3601      	adds	r6, #1
 800f00e:	4629      	mov	r1, r5
 800f010:	2000      	movs	r0, #0
 800f012:	f858 2b04 	ldr.w	r2, [r8], #4
 800f016:	f8d1 c000 	ldr.w	ip, [r1]
 800f01a:	b293      	uxth	r3, r2
 800f01c:	1ac3      	subs	r3, r0, r3
 800f01e:	0c12      	lsrs	r2, r2, #16
 800f020:	fa13 f38c 	uxtah	r3, r3, ip
 800f024:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f032:	45c1      	cmp	r9, r8
 800f034:	f841 3b04 	str.w	r3, [r1], #4
 800f038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f03c:	d2e9      	bcs.n	800f012 <quorem+0xac>
 800f03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f046:	b922      	cbnz	r2, 800f052 <quorem+0xec>
 800f048:	3b04      	subs	r3, #4
 800f04a:	429d      	cmp	r5, r3
 800f04c:	461a      	mov	r2, r3
 800f04e:	d30a      	bcc.n	800f066 <quorem+0x100>
 800f050:	613c      	str	r4, [r7, #16]
 800f052:	4630      	mov	r0, r6
 800f054:	b003      	add	sp, #12
 800f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05a:	6812      	ldr	r2, [r2, #0]
 800f05c:	3b04      	subs	r3, #4
 800f05e:	2a00      	cmp	r2, #0
 800f060:	d1ce      	bne.n	800f000 <quorem+0x9a>
 800f062:	3c01      	subs	r4, #1
 800f064:	e7c9      	b.n	800effa <quorem+0x94>
 800f066:	6812      	ldr	r2, [r2, #0]
 800f068:	3b04      	subs	r3, #4
 800f06a:	2a00      	cmp	r2, #0
 800f06c:	d1f0      	bne.n	800f050 <quorem+0xea>
 800f06e:	3c01      	subs	r4, #1
 800f070:	e7eb      	b.n	800f04a <quorem+0xe4>
 800f072:	2000      	movs	r0, #0
 800f074:	e7ee      	b.n	800f054 <quorem+0xee>
	...

0800f078 <_dtoa_r>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	ed2d 8b04 	vpush	{d8-d9}
 800f080:	69c5      	ldr	r5, [r0, #28]
 800f082:	b093      	sub	sp, #76	; 0x4c
 800f084:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f088:	ec57 6b10 	vmov	r6, r7, d0
 800f08c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f090:	9107      	str	r1, [sp, #28]
 800f092:	4604      	mov	r4, r0
 800f094:	920a      	str	r2, [sp, #40]	; 0x28
 800f096:	930d      	str	r3, [sp, #52]	; 0x34
 800f098:	b975      	cbnz	r5, 800f0b8 <_dtoa_r+0x40>
 800f09a:	2010      	movs	r0, #16
 800f09c:	f000 fe2a 	bl	800fcf4 <malloc>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	61e0      	str	r0, [r4, #28]
 800f0a4:	b920      	cbnz	r0, 800f0b0 <_dtoa_r+0x38>
 800f0a6:	4bae      	ldr	r3, [pc, #696]	; (800f360 <_dtoa_r+0x2e8>)
 800f0a8:	21ef      	movs	r1, #239	; 0xef
 800f0aa:	48ae      	ldr	r0, [pc, #696]	; (800f364 <_dtoa_r+0x2ec>)
 800f0ac:	f001 fe30 	bl	8010d10 <__assert_func>
 800f0b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0b4:	6005      	str	r5, [r0, #0]
 800f0b6:	60c5      	str	r5, [r0, #12]
 800f0b8:	69e3      	ldr	r3, [r4, #28]
 800f0ba:	6819      	ldr	r1, [r3, #0]
 800f0bc:	b151      	cbz	r1, 800f0d4 <_dtoa_r+0x5c>
 800f0be:	685a      	ldr	r2, [r3, #4]
 800f0c0:	604a      	str	r2, [r1, #4]
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4093      	lsls	r3, r2
 800f0c6:	608b      	str	r3, [r1, #8]
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 ff07 	bl	800fedc <_Bfree>
 800f0ce:	69e3      	ldr	r3, [r4, #28]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	1e3b      	subs	r3, r7, #0
 800f0d6:	bfbb      	ittet	lt
 800f0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f0dc:	9303      	strlt	r3, [sp, #12]
 800f0de:	2300      	movge	r3, #0
 800f0e0:	2201      	movlt	r2, #1
 800f0e2:	bfac      	ite	ge
 800f0e4:	f8c8 3000 	strge.w	r3, [r8]
 800f0e8:	f8c8 2000 	strlt.w	r2, [r8]
 800f0ec:	4b9e      	ldr	r3, [pc, #632]	; (800f368 <_dtoa_r+0x2f0>)
 800f0ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f0f2:	ea33 0308 	bics.w	r3, r3, r8
 800f0f6:	d11b      	bne.n	800f130 <_dtoa_r+0xb8>
 800f0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0fe:	6013      	str	r3, [r2, #0]
 800f100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f104:	4333      	orrs	r3, r6
 800f106:	f000 8593 	beq.w	800fc30 <_dtoa_r+0xbb8>
 800f10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f10c:	b963      	cbnz	r3, 800f128 <_dtoa_r+0xb0>
 800f10e:	4b97      	ldr	r3, [pc, #604]	; (800f36c <_dtoa_r+0x2f4>)
 800f110:	e027      	b.n	800f162 <_dtoa_r+0xea>
 800f112:	4b97      	ldr	r3, [pc, #604]	; (800f370 <_dtoa_r+0x2f8>)
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	3308      	adds	r3, #8
 800f118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	9800      	ldr	r0, [sp, #0]
 800f11e:	b013      	add	sp, #76	; 0x4c
 800f120:	ecbd 8b04 	vpop	{d8-d9}
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	4b90      	ldr	r3, [pc, #576]	; (800f36c <_dtoa_r+0x2f4>)
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	3303      	adds	r3, #3
 800f12e:	e7f3      	b.n	800f118 <_dtoa_r+0xa0>
 800f130:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f134:	2200      	movs	r2, #0
 800f136:	ec51 0b17 	vmov	r0, r1, d7
 800f13a:	eeb0 8a47 	vmov.f32	s16, s14
 800f13e:	eef0 8a67 	vmov.f32	s17, s15
 800f142:	2300      	movs	r3, #0
 800f144:	f7f1 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f148:	4681      	mov	r9, r0
 800f14a:	b160      	cbz	r0, 800f166 <_dtoa_r+0xee>
 800f14c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f14e:	2301      	movs	r3, #1
 800f150:	6013      	str	r3, [r2, #0]
 800f152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 8568 	beq.w	800fc2a <_dtoa_r+0xbb2>
 800f15a:	4b86      	ldr	r3, [pc, #536]	; (800f374 <_dtoa_r+0x2fc>)
 800f15c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f15e:	6013      	str	r3, [r2, #0]
 800f160:	3b01      	subs	r3, #1
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	e7da      	b.n	800f11c <_dtoa_r+0xa4>
 800f166:	aa10      	add	r2, sp, #64	; 0x40
 800f168:	a911      	add	r1, sp, #68	; 0x44
 800f16a:	4620      	mov	r0, r4
 800f16c:	eeb0 0a48 	vmov.f32	s0, s16
 800f170:	eef0 0a68 	vmov.f32	s1, s17
 800f174:	f001 f994 	bl	80104a0 <__d2b>
 800f178:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f17c:	4682      	mov	sl, r0
 800f17e:	2d00      	cmp	r5, #0
 800f180:	d07f      	beq.n	800f282 <_dtoa_r+0x20a>
 800f182:	ee18 3a90 	vmov	r3, s17
 800f186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f18a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f18e:	ec51 0b18 	vmov	r0, r1, d8
 800f192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f19a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f19e:	4619      	mov	r1, r3
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4b75      	ldr	r3, [pc, #468]	; (800f378 <_dtoa_r+0x300>)
 800f1a4:	f7f1 f870 	bl	8000288 <__aeabi_dsub>
 800f1a8:	a367      	add	r3, pc, #412	; (adr r3, 800f348 <_dtoa_r+0x2d0>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f7f1 fa23 	bl	80005f8 <__aeabi_dmul>
 800f1b2:	a367      	add	r3, pc, #412	; (adr r3, 800f350 <_dtoa_r+0x2d8>)
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	f7f1 f868 	bl	800028c <__adddf3>
 800f1bc:	4606      	mov	r6, r0
 800f1be:	4628      	mov	r0, r5
 800f1c0:	460f      	mov	r7, r1
 800f1c2:	f7f1 f9af 	bl	8000524 <__aeabi_i2d>
 800f1c6:	a364      	add	r3, pc, #400	; (adr r3, 800f358 <_dtoa_r+0x2e0>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	f7f1 fa14 	bl	80005f8 <__aeabi_dmul>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 f858 	bl	800028c <__adddf3>
 800f1dc:	4606      	mov	r6, r0
 800f1de:	460f      	mov	r7, r1
 800f1e0:	f7f1 fcba 	bl	8000b58 <__aeabi_d2iz>
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	4683      	mov	fp, r0
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f7f1 fc75 	bl	8000adc <__aeabi_dcmplt>
 800f1f2:	b148      	cbz	r0, 800f208 <_dtoa_r+0x190>
 800f1f4:	4658      	mov	r0, fp
 800f1f6:	f7f1 f995 	bl	8000524 <__aeabi_i2d>
 800f1fa:	4632      	mov	r2, r6
 800f1fc:	463b      	mov	r3, r7
 800f1fe:	f7f1 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800f202:	b908      	cbnz	r0, 800f208 <_dtoa_r+0x190>
 800f204:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f208:	f1bb 0f16 	cmp.w	fp, #22
 800f20c:	d857      	bhi.n	800f2be <_dtoa_r+0x246>
 800f20e:	4b5b      	ldr	r3, [pc, #364]	; (800f37c <_dtoa_r+0x304>)
 800f210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	ec51 0b18 	vmov	r0, r1, d8
 800f21c:	f7f1 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800f220:	2800      	cmp	r0, #0
 800f222:	d04e      	beq.n	800f2c2 <_dtoa_r+0x24a>
 800f224:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f228:	2300      	movs	r3, #0
 800f22a:	930c      	str	r3, [sp, #48]	; 0x30
 800f22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f22e:	1b5b      	subs	r3, r3, r5
 800f230:	1e5a      	subs	r2, r3, #1
 800f232:	bf45      	ittet	mi
 800f234:	f1c3 0301 	rsbmi	r3, r3, #1
 800f238:	9305      	strmi	r3, [sp, #20]
 800f23a:	2300      	movpl	r3, #0
 800f23c:	2300      	movmi	r3, #0
 800f23e:	9206      	str	r2, [sp, #24]
 800f240:	bf54      	ite	pl
 800f242:	9305      	strpl	r3, [sp, #20]
 800f244:	9306      	strmi	r3, [sp, #24]
 800f246:	f1bb 0f00 	cmp.w	fp, #0
 800f24a:	db3c      	blt.n	800f2c6 <_dtoa_r+0x24e>
 800f24c:	9b06      	ldr	r3, [sp, #24]
 800f24e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f252:	445b      	add	r3, fp
 800f254:	9306      	str	r3, [sp, #24]
 800f256:	2300      	movs	r3, #0
 800f258:	9308      	str	r3, [sp, #32]
 800f25a:	9b07      	ldr	r3, [sp, #28]
 800f25c:	2b09      	cmp	r3, #9
 800f25e:	d868      	bhi.n	800f332 <_dtoa_r+0x2ba>
 800f260:	2b05      	cmp	r3, #5
 800f262:	bfc4      	itt	gt
 800f264:	3b04      	subgt	r3, #4
 800f266:	9307      	strgt	r3, [sp, #28]
 800f268:	9b07      	ldr	r3, [sp, #28]
 800f26a:	f1a3 0302 	sub.w	r3, r3, #2
 800f26e:	bfcc      	ite	gt
 800f270:	2500      	movgt	r5, #0
 800f272:	2501      	movle	r5, #1
 800f274:	2b03      	cmp	r3, #3
 800f276:	f200 8085 	bhi.w	800f384 <_dtoa_r+0x30c>
 800f27a:	e8df f003 	tbb	[pc, r3]
 800f27e:	3b2e      	.short	0x3b2e
 800f280:	5839      	.short	0x5839
 800f282:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f286:	441d      	add	r5, r3
 800f288:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f28c:	2b20      	cmp	r3, #32
 800f28e:	bfc1      	itttt	gt
 800f290:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f294:	fa08 f803 	lslgt.w	r8, r8, r3
 800f298:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f29c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f2a0:	bfd6      	itet	le
 800f2a2:	f1c3 0320 	rsble	r3, r3, #32
 800f2a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800f2aa:	fa06 f003 	lslle.w	r0, r6, r3
 800f2ae:	f7f1 f929 	bl	8000504 <__aeabi_ui2d>
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f2b8:	3d01      	subs	r5, #1
 800f2ba:	920e      	str	r2, [sp, #56]	; 0x38
 800f2bc:	e76f      	b.n	800f19e <_dtoa_r+0x126>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e7b3      	b.n	800f22a <_dtoa_r+0x1b2>
 800f2c2:	900c      	str	r0, [sp, #48]	; 0x30
 800f2c4:	e7b2      	b.n	800f22c <_dtoa_r+0x1b4>
 800f2c6:	9b05      	ldr	r3, [sp, #20]
 800f2c8:	eba3 030b 	sub.w	r3, r3, fp
 800f2cc:	9305      	str	r3, [sp, #20]
 800f2ce:	f1cb 0300 	rsb	r3, fp, #0
 800f2d2:	9308      	str	r3, [sp, #32]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2d8:	e7bf      	b.n	800f25a <_dtoa_r+0x1e2>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc52      	bgt.n	800f38a <_dtoa_r+0x312>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	9304      	str	r3, [sp, #16]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	920a      	str	r2, [sp, #40]	; 0x28
 800f2ee:	e00b      	b.n	800f308 <_dtoa_r+0x290>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e7f3      	b.n	800f2dc <_dtoa_r+0x264>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fa:	445b      	add	r3, fp
 800f2fc:	9301      	str	r3, [sp, #4]
 800f2fe:	3301      	adds	r3, #1
 800f300:	2b01      	cmp	r3, #1
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	bfb8      	it	lt
 800f306:	2301      	movlt	r3, #1
 800f308:	69e0      	ldr	r0, [r4, #28]
 800f30a:	2100      	movs	r1, #0
 800f30c:	2204      	movs	r2, #4
 800f30e:	f102 0614 	add.w	r6, r2, #20
 800f312:	429e      	cmp	r6, r3
 800f314:	d93d      	bls.n	800f392 <_dtoa_r+0x31a>
 800f316:	6041      	str	r1, [r0, #4]
 800f318:	4620      	mov	r0, r4
 800f31a:	f000 fd9f 	bl	800fe5c <_Balloc>
 800f31e:	9000      	str	r0, [sp, #0]
 800f320:	2800      	cmp	r0, #0
 800f322:	d139      	bne.n	800f398 <_dtoa_r+0x320>
 800f324:	4b16      	ldr	r3, [pc, #88]	; (800f380 <_dtoa_r+0x308>)
 800f326:	4602      	mov	r2, r0
 800f328:	f240 11af 	movw	r1, #431	; 0x1af
 800f32c:	e6bd      	b.n	800f0aa <_dtoa_r+0x32>
 800f32e:	2301      	movs	r3, #1
 800f330:	e7e1      	b.n	800f2f6 <_dtoa_r+0x27e>
 800f332:	2501      	movs	r5, #1
 800f334:	2300      	movs	r3, #0
 800f336:	9307      	str	r3, [sp, #28]
 800f338:	9509      	str	r5, [sp, #36]	; 0x24
 800f33a:	f04f 33ff 	mov.w	r3, #4294967295
 800f33e:	9301      	str	r3, [sp, #4]
 800f340:	9304      	str	r3, [sp, #16]
 800f342:	2200      	movs	r2, #0
 800f344:	2312      	movs	r3, #18
 800f346:	e7d1      	b.n	800f2ec <_dtoa_r+0x274>
 800f348:	636f4361 	.word	0x636f4361
 800f34c:	3fd287a7 	.word	0x3fd287a7
 800f350:	8b60c8b3 	.word	0x8b60c8b3
 800f354:	3fc68a28 	.word	0x3fc68a28
 800f358:	509f79fb 	.word	0x509f79fb
 800f35c:	3fd34413 	.word	0x3fd34413
 800f360:	08011b5d 	.word	0x08011b5d
 800f364:	08011b74 	.word	0x08011b74
 800f368:	7ff00000 	.word	0x7ff00000
 800f36c:	08011b59 	.word	0x08011b59
 800f370:	08011b50 	.word	0x08011b50
 800f374:	08011b2d 	.word	0x08011b2d
 800f378:	3ff80000 	.word	0x3ff80000
 800f37c:	08011c60 	.word	0x08011c60
 800f380:	08011bcc 	.word	0x08011bcc
 800f384:	2301      	movs	r3, #1
 800f386:	9309      	str	r3, [sp, #36]	; 0x24
 800f388:	e7d7      	b.n	800f33a <_dtoa_r+0x2c2>
 800f38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	9304      	str	r3, [sp, #16]
 800f390:	e7ba      	b.n	800f308 <_dtoa_r+0x290>
 800f392:	3101      	adds	r1, #1
 800f394:	0052      	lsls	r2, r2, #1
 800f396:	e7ba      	b.n	800f30e <_dtoa_r+0x296>
 800f398:	69e3      	ldr	r3, [r4, #28]
 800f39a:	9a00      	ldr	r2, [sp, #0]
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	9b04      	ldr	r3, [sp, #16]
 800f3a0:	2b0e      	cmp	r3, #14
 800f3a2:	f200 80a8 	bhi.w	800f4f6 <_dtoa_r+0x47e>
 800f3a6:	2d00      	cmp	r5, #0
 800f3a8:	f000 80a5 	beq.w	800f4f6 <_dtoa_r+0x47e>
 800f3ac:	f1bb 0f00 	cmp.w	fp, #0
 800f3b0:	dd38      	ble.n	800f424 <_dtoa_r+0x3ac>
 800f3b2:	4bc0      	ldr	r3, [pc, #768]	; (800f6b4 <_dtoa_r+0x63c>)
 800f3b4:	f00b 020f 	and.w	r2, fp, #15
 800f3b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f3c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f3c8:	d019      	beq.n	800f3fe <_dtoa_r+0x386>
 800f3ca:	4bbb      	ldr	r3, [pc, #748]	; (800f6b8 <_dtoa_r+0x640>)
 800f3cc:	ec51 0b18 	vmov	r0, r1, d8
 800f3d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3d4:	f7f1 fa3a 	bl	800084c <__aeabi_ddiv>
 800f3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3dc:	f008 080f 	and.w	r8, r8, #15
 800f3e0:	2503      	movs	r5, #3
 800f3e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f6b8 <_dtoa_r+0x640>
 800f3e6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ea:	d10a      	bne.n	800f402 <_dtoa_r+0x38a>
 800f3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	463b      	mov	r3, r7
 800f3f4:	f7f1 fa2a 	bl	800084c <__aeabi_ddiv>
 800f3f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3fc:	e02b      	b.n	800f456 <_dtoa_r+0x3de>
 800f3fe:	2502      	movs	r5, #2
 800f400:	e7ef      	b.n	800f3e2 <_dtoa_r+0x36a>
 800f402:	f018 0f01 	tst.w	r8, #1
 800f406:	d008      	beq.n	800f41a <_dtoa_r+0x3a2>
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f410:	f7f1 f8f2 	bl	80005f8 <__aeabi_dmul>
 800f414:	3501      	adds	r5, #1
 800f416:	4606      	mov	r6, r0
 800f418:	460f      	mov	r7, r1
 800f41a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f41e:	f109 0908 	add.w	r9, r9, #8
 800f422:	e7e0      	b.n	800f3e6 <_dtoa_r+0x36e>
 800f424:	f000 809f 	beq.w	800f566 <_dtoa_r+0x4ee>
 800f428:	f1cb 0600 	rsb	r6, fp, #0
 800f42c:	4ba1      	ldr	r3, [pc, #644]	; (800f6b4 <_dtoa_r+0x63c>)
 800f42e:	4fa2      	ldr	r7, [pc, #648]	; (800f6b8 <_dtoa_r+0x640>)
 800f430:	f006 020f 	and.w	r2, r6, #15
 800f434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	ec51 0b18 	vmov	r0, r1, d8
 800f440:	f7f1 f8da 	bl	80005f8 <__aeabi_dmul>
 800f444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f448:	1136      	asrs	r6, r6, #4
 800f44a:	2300      	movs	r3, #0
 800f44c:	2502      	movs	r5, #2
 800f44e:	2e00      	cmp	r6, #0
 800f450:	d17e      	bne.n	800f550 <_dtoa_r+0x4d8>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1d0      	bne.n	800f3f8 <_dtoa_r+0x380>
 800f456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f458:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 8084 	beq.w	800f56a <_dtoa_r+0x4f2>
 800f462:	4b96      	ldr	r3, [pc, #600]	; (800f6bc <_dtoa_r+0x644>)
 800f464:	2200      	movs	r2, #0
 800f466:	4640      	mov	r0, r8
 800f468:	4649      	mov	r1, r9
 800f46a:	f7f1 fb37 	bl	8000adc <__aeabi_dcmplt>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d07b      	beq.n	800f56a <_dtoa_r+0x4f2>
 800f472:	9b04      	ldr	r3, [sp, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d078      	beq.n	800f56a <_dtoa_r+0x4f2>
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	dd39      	ble.n	800f4f2 <_dtoa_r+0x47a>
 800f47e:	4b90      	ldr	r3, [pc, #576]	; (800f6c0 <_dtoa_r+0x648>)
 800f480:	2200      	movs	r2, #0
 800f482:	4640      	mov	r0, r8
 800f484:	4649      	mov	r1, r9
 800f486:	f7f1 f8b7 	bl	80005f8 <__aeabi_dmul>
 800f48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f48e:	9e01      	ldr	r6, [sp, #4]
 800f490:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f494:	3501      	adds	r5, #1
 800f496:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f49a:	4628      	mov	r0, r5
 800f49c:	f7f1 f842 	bl	8000524 <__aeabi_i2d>
 800f4a0:	4642      	mov	r2, r8
 800f4a2:	464b      	mov	r3, r9
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	4b86      	ldr	r3, [pc, #536]	; (800f6c4 <_dtoa_r+0x64c>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f7f0 feee 	bl	800028c <__adddf3>
 800f4b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4b8:	9303      	str	r3, [sp, #12]
 800f4ba:	2e00      	cmp	r6, #0
 800f4bc:	d158      	bne.n	800f570 <_dtoa_r+0x4f8>
 800f4be:	4b82      	ldr	r3, [pc, #520]	; (800f6c8 <_dtoa_r+0x650>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	4649      	mov	r1, r9
 800f4c6:	f7f0 fedf 	bl	8000288 <__aeabi_dsub>
 800f4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4ce:	4680      	mov	r8, r0
 800f4d0:	4689      	mov	r9, r1
 800f4d2:	f7f1 fb21 	bl	8000b18 <__aeabi_dcmpgt>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f040 8296 	bne.w	800fa08 <_dtoa_r+0x990>
 800f4dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f4e0:	4640      	mov	r0, r8
 800f4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4e6:	4649      	mov	r1, r9
 800f4e8:	f7f1 faf8 	bl	8000adc <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f040 8289 	bne.w	800fa04 <_dtoa_r+0x98c>
 800f4f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f2c0 814e 	blt.w	800f79a <_dtoa_r+0x722>
 800f4fe:	f1bb 0f0e 	cmp.w	fp, #14
 800f502:	f300 814a 	bgt.w	800f79a <_dtoa_r+0x722>
 800f506:	4b6b      	ldr	r3, [pc, #428]	; (800f6b4 <_dtoa_r+0x63c>)
 800f508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f50c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f512:	2b00      	cmp	r3, #0
 800f514:	f280 80dc 	bge.w	800f6d0 <_dtoa_r+0x658>
 800f518:	9b04      	ldr	r3, [sp, #16]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f300 80d8 	bgt.w	800f6d0 <_dtoa_r+0x658>
 800f520:	f040 826f 	bne.w	800fa02 <_dtoa_r+0x98a>
 800f524:	4b68      	ldr	r3, [pc, #416]	; (800f6c8 <_dtoa_r+0x650>)
 800f526:	2200      	movs	r2, #0
 800f528:	4640      	mov	r0, r8
 800f52a:	4649      	mov	r1, r9
 800f52c:	f7f1 f864 	bl	80005f8 <__aeabi_dmul>
 800f530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f534:	f7f1 fae6 	bl	8000b04 <__aeabi_dcmpge>
 800f538:	9e04      	ldr	r6, [sp, #16]
 800f53a:	4637      	mov	r7, r6
 800f53c:	2800      	cmp	r0, #0
 800f53e:	f040 8245 	bne.w	800f9cc <_dtoa_r+0x954>
 800f542:	9d00      	ldr	r5, [sp, #0]
 800f544:	2331      	movs	r3, #49	; 0x31
 800f546:	f805 3b01 	strb.w	r3, [r5], #1
 800f54a:	f10b 0b01 	add.w	fp, fp, #1
 800f54e:	e241      	b.n	800f9d4 <_dtoa_r+0x95c>
 800f550:	07f2      	lsls	r2, r6, #31
 800f552:	d505      	bpl.n	800f560 <_dtoa_r+0x4e8>
 800f554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f558:	f7f1 f84e 	bl	80005f8 <__aeabi_dmul>
 800f55c:	3501      	adds	r5, #1
 800f55e:	2301      	movs	r3, #1
 800f560:	1076      	asrs	r6, r6, #1
 800f562:	3708      	adds	r7, #8
 800f564:	e773      	b.n	800f44e <_dtoa_r+0x3d6>
 800f566:	2502      	movs	r5, #2
 800f568:	e775      	b.n	800f456 <_dtoa_r+0x3de>
 800f56a:	9e04      	ldr	r6, [sp, #16]
 800f56c:	465f      	mov	r7, fp
 800f56e:	e792      	b.n	800f496 <_dtoa_r+0x41e>
 800f570:	9900      	ldr	r1, [sp, #0]
 800f572:	4b50      	ldr	r3, [pc, #320]	; (800f6b4 <_dtoa_r+0x63c>)
 800f574:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f578:	4431      	add	r1, r6
 800f57a:	9102      	str	r1, [sp, #8]
 800f57c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f57e:	eeb0 9a47 	vmov.f32	s18, s14
 800f582:	eef0 9a67 	vmov.f32	s19, s15
 800f586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f58a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f58e:	2900      	cmp	r1, #0
 800f590:	d044      	beq.n	800f61c <_dtoa_r+0x5a4>
 800f592:	494e      	ldr	r1, [pc, #312]	; (800f6cc <_dtoa_r+0x654>)
 800f594:	2000      	movs	r0, #0
 800f596:	f7f1 f959 	bl	800084c <__aeabi_ddiv>
 800f59a:	ec53 2b19 	vmov	r2, r3, d9
 800f59e:	f7f0 fe73 	bl	8000288 <__aeabi_dsub>
 800f5a2:	9d00      	ldr	r5, [sp, #0]
 800f5a4:	ec41 0b19 	vmov	d9, r0, r1
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	4640      	mov	r0, r8
 800f5ac:	f7f1 fad4 	bl	8000b58 <__aeabi_d2iz>
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	f7f0 ffb7 	bl	8000524 <__aeabi_i2d>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	f7f0 fe63 	bl	8000288 <__aeabi_dsub>
 800f5c2:	3630      	adds	r6, #48	; 0x30
 800f5c4:	f805 6b01 	strb.w	r6, [r5], #1
 800f5c8:	ec53 2b19 	vmov	r2, r3, d9
 800f5cc:	4680      	mov	r8, r0
 800f5ce:	4689      	mov	r9, r1
 800f5d0:	f7f1 fa84 	bl	8000adc <__aeabi_dcmplt>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d164      	bne.n	800f6a2 <_dtoa_r+0x62a>
 800f5d8:	4642      	mov	r2, r8
 800f5da:	464b      	mov	r3, r9
 800f5dc:	4937      	ldr	r1, [pc, #220]	; (800f6bc <_dtoa_r+0x644>)
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f7f0 fe52 	bl	8000288 <__aeabi_dsub>
 800f5e4:	ec53 2b19 	vmov	r2, r3, d9
 800f5e8:	f7f1 fa78 	bl	8000adc <__aeabi_dcmplt>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f040 80b6 	bne.w	800f75e <_dtoa_r+0x6e6>
 800f5f2:	9b02      	ldr	r3, [sp, #8]
 800f5f4:	429d      	cmp	r5, r3
 800f5f6:	f43f af7c 	beq.w	800f4f2 <_dtoa_r+0x47a>
 800f5fa:	4b31      	ldr	r3, [pc, #196]	; (800f6c0 <_dtoa_r+0x648>)
 800f5fc:	ec51 0b19 	vmov	r0, r1, d9
 800f600:	2200      	movs	r2, #0
 800f602:	f7f0 fff9 	bl	80005f8 <__aeabi_dmul>
 800f606:	4b2e      	ldr	r3, [pc, #184]	; (800f6c0 <_dtoa_r+0x648>)
 800f608:	ec41 0b19 	vmov	d9, r0, r1
 800f60c:	2200      	movs	r2, #0
 800f60e:	4640      	mov	r0, r8
 800f610:	4649      	mov	r1, r9
 800f612:	f7f0 fff1 	bl	80005f8 <__aeabi_dmul>
 800f616:	4680      	mov	r8, r0
 800f618:	4689      	mov	r9, r1
 800f61a:	e7c5      	b.n	800f5a8 <_dtoa_r+0x530>
 800f61c:	ec51 0b17 	vmov	r0, r1, d7
 800f620:	f7f0 ffea 	bl	80005f8 <__aeabi_dmul>
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	9d00      	ldr	r5, [sp, #0]
 800f628:	930f      	str	r3, [sp, #60]	; 0x3c
 800f62a:	ec41 0b19 	vmov	d9, r0, r1
 800f62e:	4649      	mov	r1, r9
 800f630:	4640      	mov	r0, r8
 800f632:	f7f1 fa91 	bl	8000b58 <__aeabi_d2iz>
 800f636:	4606      	mov	r6, r0
 800f638:	f7f0 ff74 	bl	8000524 <__aeabi_i2d>
 800f63c:	3630      	adds	r6, #48	; 0x30
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4640      	mov	r0, r8
 800f644:	4649      	mov	r1, r9
 800f646:	f7f0 fe1f 	bl	8000288 <__aeabi_dsub>
 800f64a:	f805 6b01 	strb.w	r6, [r5], #1
 800f64e:	9b02      	ldr	r3, [sp, #8]
 800f650:	429d      	cmp	r5, r3
 800f652:	4680      	mov	r8, r0
 800f654:	4689      	mov	r9, r1
 800f656:	f04f 0200 	mov.w	r2, #0
 800f65a:	d124      	bne.n	800f6a6 <_dtoa_r+0x62e>
 800f65c:	4b1b      	ldr	r3, [pc, #108]	; (800f6cc <_dtoa_r+0x654>)
 800f65e:	ec51 0b19 	vmov	r0, r1, d9
 800f662:	f7f0 fe13 	bl	800028c <__adddf3>
 800f666:	4602      	mov	r2, r0
 800f668:	460b      	mov	r3, r1
 800f66a:	4640      	mov	r0, r8
 800f66c:	4649      	mov	r1, r9
 800f66e:	f7f1 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 800f672:	2800      	cmp	r0, #0
 800f674:	d173      	bne.n	800f75e <_dtoa_r+0x6e6>
 800f676:	ec53 2b19 	vmov	r2, r3, d9
 800f67a:	4914      	ldr	r1, [pc, #80]	; (800f6cc <_dtoa_r+0x654>)
 800f67c:	2000      	movs	r0, #0
 800f67e:	f7f0 fe03 	bl	8000288 <__aeabi_dsub>
 800f682:	4602      	mov	r2, r0
 800f684:	460b      	mov	r3, r1
 800f686:	4640      	mov	r0, r8
 800f688:	4649      	mov	r1, r9
 800f68a:	f7f1 fa27 	bl	8000adc <__aeabi_dcmplt>
 800f68e:	2800      	cmp	r0, #0
 800f690:	f43f af2f 	beq.w	800f4f2 <_dtoa_r+0x47a>
 800f694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f696:	1e6b      	subs	r3, r5, #1
 800f698:	930f      	str	r3, [sp, #60]	; 0x3c
 800f69a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f69e:	2b30      	cmp	r3, #48	; 0x30
 800f6a0:	d0f8      	beq.n	800f694 <_dtoa_r+0x61c>
 800f6a2:	46bb      	mov	fp, r7
 800f6a4:	e04a      	b.n	800f73c <_dtoa_r+0x6c4>
 800f6a6:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <_dtoa_r+0x648>)
 800f6a8:	f7f0 ffa6 	bl	80005f8 <__aeabi_dmul>
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	4689      	mov	r9, r1
 800f6b0:	e7bd      	b.n	800f62e <_dtoa_r+0x5b6>
 800f6b2:	bf00      	nop
 800f6b4:	08011c60 	.word	0x08011c60
 800f6b8:	08011c38 	.word	0x08011c38
 800f6bc:	3ff00000 	.word	0x3ff00000
 800f6c0:	40240000 	.word	0x40240000
 800f6c4:	401c0000 	.word	0x401c0000
 800f6c8:	40140000 	.word	0x40140000
 800f6cc:	3fe00000 	.word	0x3fe00000
 800f6d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f6d4:	9d00      	ldr	r5, [sp, #0]
 800f6d6:	4642      	mov	r2, r8
 800f6d8:	464b      	mov	r3, r9
 800f6da:	4630      	mov	r0, r6
 800f6dc:	4639      	mov	r1, r7
 800f6de:	f7f1 f8b5 	bl	800084c <__aeabi_ddiv>
 800f6e2:	f7f1 fa39 	bl	8000b58 <__aeabi_d2iz>
 800f6e6:	9001      	str	r0, [sp, #4]
 800f6e8:	f7f0 ff1c 	bl	8000524 <__aeabi_i2d>
 800f6ec:	4642      	mov	r2, r8
 800f6ee:	464b      	mov	r3, r9
 800f6f0:	f7f0 ff82 	bl	80005f8 <__aeabi_dmul>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	f7f0 fdc4 	bl	8000288 <__aeabi_dsub>
 800f700:	9e01      	ldr	r6, [sp, #4]
 800f702:	9f04      	ldr	r7, [sp, #16]
 800f704:	3630      	adds	r6, #48	; 0x30
 800f706:	f805 6b01 	strb.w	r6, [r5], #1
 800f70a:	9e00      	ldr	r6, [sp, #0]
 800f70c:	1bae      	subs	r6, r5, r6
 800f70e:	42b7      	cmp	r7, r6
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	d134      	bne.n	800f780 <_dtoa_r+0x708>
 800f716:	f7f0 fdb9 	bl	800028c <__adddf3>
 800f71a:	4642      	mov	r2, r8
 800f71c:	464b      	mov	r3, r9
 800f71e:	4606      	mov	r6, r0
 800f720:	460f      	mov	r7, r1
 800f722:	f7f1 f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 800f726:	b9c8      	cbnz	r0, 800f75c <_dtoa_r+0x6e4>
 800f728:	4642      	mov	r2, r8
 800f72a:	464b      	mov	r3, r9
 800f72c:	4630      	mov	r0, r6
 800f72e:	4639      	mov	r1, r7
 800f730:	f7f1 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 800f734:	b110      	cbz	r0, 800f73c <_dtoa_r+0x6c4>
 800f736:	9b01      	ldr	r3, [sp, #4]
 800f738:	07db      	lsls	r3, r3, #31
 800f73a:	d40f      	bmi.n	800f75c <_dtoa_r+0x6e4>
 800f73c:	4651      	mov	r1, sl
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 fbcc 	bl	800fedc <_Bfree>
 800f744:	2300      	movs	r3, #0
 800f746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f748:	702b      	strb	r3, [r5, #0]
 800f74a:	f10b 0301 	add.w	r3, fp, #1
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f752:	2b00      	cmp	r3, #0
 800f754:	f43f ace2 	beq.w	800f11c <_dtoa_r+0xa4>
 800f758:	601d      	str	r5, [r3, #0]
 800f75a:	e4df      	b.n	800f11c <_dtoa_r+0xa4>
 800f75c:	465f      	mov	r7, fp
 800f75e:	462b      	mov	r3, r5
 800f760:	461d      	mov	r5, r3
 800f762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f766:	2a39      	cmp	r2, #57	; 0x39
 800f768:	d106      	bne.n	800f778 <_dtoa_r+0x700>
 800f76a:	9a00      	ldr	r2, [sp, #0]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d1f7      	bne.n	800f760 <_dtoa_r+0x6e8>
 800f770:	9900      	ldr	r1, [sp, #0]
 800f772:	2230      	movs	r2, #48	; 0x30
 800f774:	3701      	adds	r7, #1
 800f776:	700a      	strb	r2, [r1, #0]
 800f778:	781a      	ldrb	r2, [r3, #0]
 800f77a:	3201      	adds	r2, #1
 800f77c:	701a      	strb	r2, [r3, #0]
 800f77e:	e790      	b.n	800f6a2 <_dtoa_r+0x62a>
 800f780:	4ba3      	ldr	r3, [pc, #652]	; (800fa10 <_dtoa_r+0x998>)
 800f782:	2200      	movs	r2, #0
 800f784:	f7f0 ff38 	bl	80005f8 <__aeabi_dmul>
 800f788:	2200      	movs	r2, #0
 800f78a:	2300      	movs	r3, #0
 800f78c:	4606      	mov	r6, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	f7f1 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f794:	2800      	cmp	r0, #0
 800f796:	d09e      	beq.n	800f6d6 <_dtoa_r+0x65e>
 800f798:	e7d0      	b.n	800f73c <_dtoa_r+0x6c4>
 800f79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f79c:	2a00      	cmp	r2, #0
 800f79e:	f000 80ca 	beq.w	800f936 <_dtoa_r+0x8be>
 800f7a2:	9a07      	ldr	r2, [sp, #28]
 800f7a4:	2a01      	cmp	r2, #1
 800f7a6:	f300 80ad 	bgt.w	800f904 <_dtoa_r+0x88c>
 800f7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	f000 80a5 	beq.w	800f8fc <_dtoa_r+0x884>
 800f7b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7b6:	9e08      	ldr	r6, [sp, #32]
 800f7b8:	9d05      	ldr	r5, [sp, #20]
 800f7ba:	9a05      	ldr	r2, [sp, #20]
 800f7bc:	441a      	add	r2, r3
 800f7be:	9205      	str	r2, [sp, #20]
 800f7c0:	9a06      	ldr	r2, [sp, #24]
 800f7c2:	2101      	movs	r1, #1
 800f7c4:	441a      	add	r2, r3
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	9206      	str	r2, [sp, #24]
 800f7ca:	f000 fc3d 	bl	8010048 <__i2b>
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	b165      	cbz	r5, 800f7ec <_dtoa_r+0x774>
 800f7d2:	9b06      	ldr	r3, [sp, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	dd09      	ble.n	800f7ec <_dtoa_r+0x774>
 800f7d8:	42ab      	cmp	r3, r5
 800f7da:	9a05      	ldr	r2, [sp, #20]
 800f7dc:	bfa8      	it	ge
 800f7de:	462b      	movge	r3, r5
 800f7e0:	1ad2      	subs	r2, r2, r3
 800f7e2:	9205      	str	r2, [sp, #20]
 800f7e4:	9a06      	ldr	r2, [sp, #24]
 800f7e6:	1aed      	subs	r5, r5, r3
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	9306      	str	r3, [sp, #24]
 800f7ec:	9b08      	ldr	r3, [sp, #32]
 800f7ee:	b1f3      	cbz	r3, 800f82e <_dtoa_r+0x7b6>
 800f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 80a3 	beq.w	800f93e <_dtoa_r+0x8c6>
 800f7f8:	2e00      	cmp	r6, #0
 800f7fa:	dd10      	ble.n	800f81e <_dtoa_r+0x7a6>
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4632      	mov	r2, r6
 800f800:	4620      	mov	r0, r4
 800f802:	f000 fce1 	bl	80101c8 <__pow5mult>
 800f806:	4652      	mov	r2, sl
 800f808:	4601      	mov	r1, r0
 800f80a:	4607      	mov	r7, r0
 800f80c:	4620      	mov	r0, r4
 800f80e:	f000 fc31 	bl	8010074 <__multiply>
 800f812:	4651      	mov	r1, sl
 800f814:	4680      	mov	r8, r0
 800f816:	4620      	mov	r0, r4
 800f818:	f000 fb60 	bl	800fedc <_Bfree>
 800f81c:	46c2      	mov	sl, r8
 800f81e:	9b08      	ldr	r3, [sp, #32]
 800f820:	1b9a      	subs	r2, r3, r6
 800f822:	d004      	beq.n	800f82e <_dtoa_r+0x7b6>
 800f824:	4651      	mov	r1, sl
 800f826:	4620      	mov	r0, r4
 800f828:	f000 fcce 	bl	80101c8 <__pow5mult>
 800f82c:	4682      	mov	sl, r0
 800f82e:	2101      	movs	r1, #1
 800f830:	4620      	mov	r0, r4
 800f832:	f000 fc09 	bl	8010048 <__i2b>
 800f836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	4606      	mov	r6, r0
 800f83c:	f340 8081 	ble.w	800f942 <_dtoa_r+0x8ca>
 800f840:	461a      	mov	r2, r3
 800f842:	4601      	mov	r1, r0
 800f844:	4620      	mov	r0, r4
 800f846:	f000 fcbf 	bl	80101c8 <__pow5mult>
 800f84a:	9b07      	ldr	r3, [sp, #28]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	4606      	mov	r6, r0
 800f850:	dd7a      	ble.n	800f948 <_dtoa_r+0x8d0>
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	6933      	ldr	r3, [r6, #16]
 800f858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f85c:	6918      	ldr	r0, [r3, #16]
 800f85e:	f000 fba5 	bl	800ffac <__hi0bits>
 800f862:	f1c0 0020 	rsb	r0, r0, #32
 800f866:	9b06      	ldr	r3, [sp, #24]
 800f868:	4418      	add	r0, r3
 800f86a:	f010 001f 	ands.w	r0, r0, #31
 800f86e:	f000 8094 	beq.w	800f99a <_dtoa_r+0x922>
 800f872:	f1c0 0320 	rsb	r3, r0, #32
 800f876:	2b04      	cmp	r3, #4
 800f878:	f340 8085 	ble.w	800f986 <_dtoa_r+0x90e>
 800f87c:	9b05      	ldr	r3, [sp, #20]
 800f87e:	f1c0 001c 	rsb	r0, r0, #28
 800f882:	4403      	add	r3, r0
 800f884:	9305      	str	r3, [sp, #20]
 800f886:	9b06      	ldr	r3, [sp, #24]
 800f888:	4403      	add	r3, r0
 800f88a:	4405      	add	r5, r0
 800f88c:	9306      	str	r3, [sp, #24]
 800f88e:	9b05      	ldr	r3, [sp, #20]
 800f890:	2b00      	cmp	r3, #0
 800f892:	dd05      	ble.n	800f8a0 <_dtoa_r+0x828>
 800f894:	4651      	mov	r1, sl
 800f896:	461a      	mov	r2, r3
 800f898:	4620      	mov	r0, r4
 800f89a:	f000 fcef 	bl	801027c <__lshift>
 800f89e:	4682      	mov	sl, r0
 800f8a0:	9b06      	ldr	r3, [sp, #24]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dd05      	ble.n	800f8b2 <_dtoa_r+0x83a>
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f000 fce6 	bl	801027c <__lshift>
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d072      	beq.n	800f99e <_dtoa_r+0x926>
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4650      	mov	r0, sl
 800f8bc:	f000 fd4a 	bl	8010354 <__mcmp>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	da6c      	bge.n	800f99e <_dtoa_r+0x926>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	4651      	mov	r1, sl
 800f8c8:	220a      	movs	r2, #10
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f000 fb28 	bl	800ff20 <__multadd>
 800f8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8d6:	4682      	mov	sl, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 81b0 	beq.w	800fc3e <_dtoa_r+0xbc6>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	220a      	movs	r2, #10
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 fb1b 	bl	800ff20 <__multadd>
 800f8ea:	9b01      	ldr	r3, [sp, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	4607      	mov	r7, r0
 800f8f0:	f300 8096 	bgt.w	800fa20 <_dtoa_r+0x9a8>
 800f8f4:	9b07      	ldr	r3, [sp, #28]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	dc59      	bgt.n	800f9ae <_dtoa_r+0x936>
 800f8fa:	e091      	b.n	800fa20 <_dtoa_r+0x9a8>
 800f8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f902:	e758      	b.n	800f7b6 <_dtoa_r+0x73e>
 800f904:	9b04      	ldr	r3, [sp, #16]
 800f906:	1e5e      	subs	r6, r3, #1
 800f908:	9b08      	ldr	r3, [sp, #32]
 800f90a:	42b3      	cmp	r3, r6
 800f90c:	bfbf      	itttt	lt
 800f90e:	9b08      	ldrlt	r3, [sp, #32]
 800f910:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f912:	9608      	strlt	r6, [sp, #32]
 800f914:	1af3      	sublt	r3, r6, r3
 800f916:	bfb4      	ite	lt
 800f918:	18d2      	addlt	r2, r2, r3
 800f91a:	1b9e      	subge	r6, r3, r6
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	bfbc      	itt	lt
 800f920:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f922:	2600      	movlt	r6, #0
 800f924:	2b00      	cmp	r3, #0
 800f926:	bfb7      	itett	lt
 800f928:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f92c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f930:	1a9d      	sublt	r5, r3, r2
 800f932:	2300      	movlt	r3, #0
 800f934:	e741      	b.n	800f7ba <_dtoa_r+0x742>
 800f936:	9e08      	ldr	r6, [sp, #32]
 800f938:	9d05      	ldr	r5, [sp, #20]
 800f93a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f93c:	e748      	b.n	800f7d0 <_dtoa_r+0x758>
 800f93e:	9a08      	ldr	r2, [sp, #32]
 800f940:	e770      	b.n	800f824 <_dtoa_r+0x7ac>
 800f942:	9b07      	ldr	r3, [sp, #28]
 800f944:	2b01      	cmp	r3, #1
 800f946:	dc19      	bgt.n	800f97c <_dtoa_r+0x904>
 800f948:	9b02      	ldr	r3, [sp, #8]
 800f94a:	b9bb      	cbnz	r3, 800f97c <_dtoa_r+0x904>
 800f94c:	9b03      	ldr	r3, [sp, #12]
 800f94e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f952:	b99b      	cbnz	r3, 800f97c <_dtoa_r+0x904>
 800f954:	9b03      	ldr	r3, [sp, #12]
 800f956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f95a:	0d1b      	lsrs	r3, r3, #20
 800f95c:	051b      	lsls	r3, r3, #20
 800f95e:	b183      	cbz	r3, 800f982 <_dtoa_r+0x90a>
 800f960:	9b05      	ldr	r3, [sp, #20]
 800f962:	3301      	adds	r3, #1
 800f964:	9305      	str	r3, [sp, #20]
 800f966:	9b06      	ldr	r3, [sp, #24]
 800f968:	3301      	adds	r3, #1
 800f96a:	9306      	str	r3, [sp, #24]
 800f96c:	f04f 0801 	mov.w	r8, #1
 800f970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f972:	2b00      	cmp	r3, #0
 800f974:	f47f af6f 	bne.w	800f856 <_dtoa_r+0x7de>
 800f978:	2001      	movs	r0, #1
 800f97a:	e774      	b.n	800f866 <_dtoa_r+0x7ee>
 800f97c:	f04f 0800 	mov.w	r8, #0
 800f980:	e7f6      	b.n	800f970 <_dtoa_r+0x8f8>
 800f982:	4698      	mov	r8, r3
 800f984:	e7f4      	b.n	800f970 <_dtoa_r+0x8f8>
 800f986:	d082      	beq.n	800f88e <_dtoa_r+0x816>
 800f988:	9a05      	ldr	r2, [sp, #20]
 800f98a:	331c      	adds	r3, #28
 800f98c:	441a      	add	r2, r3
 800f98e:	9205      	str	r2, [sp, #20]
 800f990:	9a06      	ldr	r2, [sp, #24]
 800f992:	441a      	add	r2, r3
 800f994:	441d      	add	r5, r3
 800f996:	9206      	str	r2, [sp, #24]
 800f998:	e779      	b.n	800f88e <_dtoa_r+0x816>
 800f99a:	4603      	mov	r3, r0
 800f99c:	e7f4      	b.n	800f988 <_dtoa_r+0x910>
 800f99e:	9b04      	ldr	r3, [sp, #16]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	dc37      	bgt.n	800fa14 <_dtoa_r+0x99c>
 800f9a4:	9b07      	ldr	r3, [sp, #28]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	dd34      	ble.n	800fa14 <_dtoa_r+0x99c>
 800f9aa:	9b04      	ldr	r3, [sp, #16]
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	9b01      	ldr	r3, [sp, #4]
 800f9b0:	b963      	cbnz	r3, 800f9cc <_dtoa_r+0x954>
 800f9b2:	4631      	mov	r1, r6
 800f9b4:	2205      	movs	r2, #5
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 fab2 	bl	800ff20 <__multadd>
 800f9bc:	4601      	mov	r1, r0
 800f9be:	4606      	mov	r6, r0
 800f9c0:	4650      	mov	r0, sl
 800f9c2:	f000 fcc7 	bl	8010354 <__mcmp>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f73f adbb 	bgt.w	800f542 <_dtoa_r+0x4ca>
 800f9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9ce:	9d00      	ldr	r5, [sp, #0]
 800f9d0:	ea6f 0b03 	mvn.w	fp, r3
 800f9d4:	f04f 0800 	mov.w	r8, #0
 800f9d8:	4631      	mov	r1, r6
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f000 fa7e 	bl	800fedc <_Bfree>
 800f9e0:	2f00      	cmp	r7, #0
 800f9e2:	f43f aeab 	beq.w	800f73c <_dtoa_r+0x6c4>
 800f9e6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ea:	d005      	beq.n	800f9f8 <_dtoa_r+0x980>
 800f9ec:	45b8      	cmp	r8, r7
 800f9ee:	d003      	beq.n	800f9f8 <_dtoa_r+0x980>
 800f9f0:	4641      	mov	r1, r8
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f000 fa72 	bl	800fedc <_Bfree>
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 fa6e 	bl	800fedc <_Bfree>
 800fa00:	e69c      	b.n	800f73c <_dtoa_r+0x6c4>
 800fa02:	2600      	movs	r6, #0
 800fa04:	4637      	mov	r7, r6
 800fa06:	e7e1      	b.n	800f9cc <_dtoa_r+0x954>
 800fa08:	46bb      	mov	fp, r7
 800fa0a:	4637      	mov	r7, r6
 800fa0c:	e599      	b.n	800f542 <_dtoa_r+0x4ca>
 800fa0e:	bf00      	nop
 800fa10:	40240000 	.word	0x40240000
 800fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f000 80c8 	beq.w	800fbac <_dtoa_r+0xb34>
 800fa1c:	9b04      	ldr	r3, [sp, #16]
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	2d00      	cmp	r5, #0
 800fa22:	dd05      	ble.n	800fa30 <_dtoa_r+0x9b8>
 800fa24:	4639      	mov	r1, r7
 800fa26:	462a      	mov	r2, r5
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fc27 	bl	801027c <__lshift>
 800fa2e:	4607      	mov	r7, r0
 800fa30:	f1b8 0f00 	cmp.w	r8, #0
 800fa34:	d05b      	beq.n	800faee <_dtoa_r+0xa76>
 800fa36:	6879      	ldr	r1, [r7, #4]
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f000 fa0f 	bl	800fe5c <_Balloc>
 800fa3e:	4605      	mov	r5, r0
 800fa40:	b928      	cbnz	r0, 800fa4e <_dtoa_r+0x9d6>
 800fa42:	4b83      	ldr	r3, [pc, #524]	; (800fc50 <_dtoa_r+0xbd8>)
 800fa44:	4602      	mov	r2, r0
 800fa46:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fa4a:	f7ff bb2e 	b.w	800f0aa <_dtoa_r+0x32>
 800fa4e:	693a      	ldr	r2, [r7, #16]
 800fa50:	3202      	adds	r2, #2
 800fa52:	0092      	lsls	r2, r2, #2
 800fa54:	f107 010c 	add.w	r1, r7, #12
 800fa58:	300c      	adds	r0, #12
 800fa5a:	f7ff fa76 	bl	800ef4a <memcpy>
 800fa5e:	2201      	movs	r2, #1
 800fa60:	4629      	mov	r1, r5
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fc0a 	bl	801027c <__lshift>
 800fa68:	9b00      	ldr	r3, [sp, #0]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	9304      	str	r3, [sp, #16]
 800fa6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa72:	4413      	add	r3, r2
 800fa74:	9308      	str	r3, [sp, #32]
 800fa76:	9b02      	ldr	r3, [sp, #8]
 800fa78:	f003 0301 	and.w	r3, r3, #1
 800fa7c:	46b8      	mov	r8, r7
 800fa7e:	9306      	str	r3, [sp, #24]
 800fa80:	4607      	mov	r7, r0
 800fa82:	9b04      	ldr	r3, [sp, #16]
 800fa84:	4631      	mov	r1, r6
 800fa86:	3b01      	subs	r3, #1
 800fa88:	4650      	mov	r0, sl
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	f7ff fa6b 	bl	800ef66 <quorem>
 800fa90:	4641      	mov	r1, r8
 800fa92:	9002      	str	r0, [sp, #8]
 800fa94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fa98:	4650      	mov	r0, sl
 800fa9a:	f000 fc5b 	bl	8010354 <__mcmp>
 800fa9e:	463a      	mov	r2, r7
 800faa0:	9005      	str	r0, [sp, #20]
 800faa2:	4631      	mov	r1, r6
 800faa4:	4620      	mov	r0, r4
 800faa6:	f000 fc71 	bl	801038c <__mdiff>
 800faaa:	68c2      	ldr	r2, [r0, #12]
 800faac:	4605      	mov	r5, r0
 800faae:	bb02      	cbnz	r2, 800faf2 <_dtoa_r+0xa7a>
 800fab0:	4601      	mov	r1, r0
 800fab2:	4650      	mov	r0, sl
 800fab4:	f000 fc4e 	bl	8010354 <__mcmp>
 800fab8:	4602      	mov	r2, r0
 800faba:	4629      	mov	r1, r5
 800fabc:	4620      	mov	r0, r4
 800fabe:	9209      	str	r2, [sp, #36]	; 0x24
 800fac0:	f000 fa0c 	bl	800fedc <_Bfree>
 800fac4:	9b07      	ldr	r3, [sp, #28]
 800fac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fac8:	9d04      	ldr	r5, [sp, #16]
 800faca:	ea43 0102 	orr.w	r1, r3, r2
 800face:	9b06      	ldr	r3, [sp, #24]
 800fad0:	4319      	orrs	r1, r3
 800fad2:	d110      	bne.n	800faf6 <_dtoa_r+0xa7e>
 800fad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fad8:	d029      	beq.n	800fb2e <_dtoa_r+0xab6>
 800fada:	9b05      	ldr	r3, [sp, #20]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dd02      	ble.n	800fae6 <_dtoa_r+0xa6e>
 800fae0:	9b02      	ldr	r3, [sp, #8]
 800fae2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fae6:	9b01      	ldr	r3, [sp, #4]
 800fae8:	f883 9000 	strb.w	r9, [r3]
 800faec:	e774      	b.n	800f9d8 <_dtoa_r+0x960>
 800faee:	4638      	mov	r0, r7
 800faf0:	e7ba      	b.n	800fa68 <_dtoa_r+0x9f0>
 800faf2:	2201      	movs	r2, #1
 800faf4:	e7e1      	b.n	800faba <_dtoa_r+0xa42>
 800faf6:	9b05      	ldr	r3, [sp, #20]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	db04      	blt.n	800fb06 <_dtoa_r+0xa8e>
 800fafc:	9907      	ldr	r1, [sp, #28]
 800fafe:	430b      	orrs	r3, r1
 800fb00:	9906      	ldr	r1, [sp, #24]
 800fb02:	430b      	orrs	r3, r1
 800fb04:	d120      	bne.n	800fb48 <_dtoa_r+0xad0>
 800fb06:	2a00      	cmp	r2, #0
 800fb08:	dded      	ble.n	800fae6 <_dtoa_r+0xa6e>
 800fb0a:	4651      	mov	r1, sl
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f000 fbb4 	bl	801027c <__lshift>
 800fb14:	4631      	mov	r1, r6
 800fb16:	4682      	mov	sl, r0
 800fb18:	f000 fc1c 	bl	8010354 <__mcmp>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	dc03      	bgt.n	800fb28 <_dtoa_r+0xab0>
 800fb20:	d1e1      	bne.n	800fae6 <_dtoa_r+0xa6e>
 800fb22:	f019 0f01 	tst.w	r9, #1
 800fb26:	d0de      	beq.n	800fae6 <_dtoa_r+0xa6e>
 800fb28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb2c:	d1d8      	bne.n	800fae0 <_dtoa_r+0xa68>
 800fb2e:	9a01      	ldr	r2, [sp, #4]
 800fb30:	2339      	movs	r3, #57	; 0x39
 800fb32:	7013      	strb	r3, [r2, #0]
 800fb34:	462b      	mov	r3, r5
 800fb36:	461d      	mov	r5, r3
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb3e:	2a39      	cmp	r2, #57	; 0x39
 800fb40:	d06c      	beq.n	800fc1c <_dtoa_r+0xba4>
 800fb42:	3201      	adds	r2, #1
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	e747      	b.n	800f9d8 <_dtoa_r+0x960>
 800fb48:	2a00      	cmp	r2, #0
 800fb4a:	dd07      	ble.n	800fb5c <_dtoa_r+0xae4>
 800fb4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb50:	d0ed      	beq.n	800fb2e <_dtoa_r+0xab6>
 800fb52:	9a01      	ldr	r2, [sp, #4]
 800fb54:	f109 0301 	add.w	r3, r9, #1
 800fb58:	7013      	strb	r3, [r2, #0]
 800fb5a:	e73d      	b.n	800f9d8 <_dtoa_r+0x960>
 800fb5c:	9b04      	ldr	r3, [sp, #16]
 800fb5e:	9a08      	ldr	r2, [sp, #32]
 800fb60:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d043      	beq.n	800fbf0 <_dtoa_r+0xb78>
 800fb68:	4651      	mov	r1, sl
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	220a      	movs	r2, #10
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 f9d6 	bl	800ff20 <__multadd>
 800fb74:	45b8      	cmp	r8, r7
 800fb76:	4682      	mov	sl, r0
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	f04f 020a 	mov.w	r2, #10
 800fb80:	4641      	mov	r1, r8
 800fb82:	4620      	mov	r0, r4
 800fb84:	d107      	bne.n	800fb96 <_dtoa_r+0xb1e>
 800fb86:	f000 f9cb 	bl	800ff20 <__multadd>
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	9b04      	ldr	r3, [sp, #16]
 800fb90:	3301      	adds	r3, #1
 800fb92:	9304      	str	r3, [sp, #16]
 800fb94:	e775      	b.n	800fa82 <_dtoa_r+0xa0a>
 800fb96:	f000 f9c3 	bl	800ff20 <__multadd>
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	4680      	mov	r8, r0
 800fb9e:	2300      	movs	r3, #0
 800fba0:	220a      	movs	r2, #10
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 f9bc 	bl	800ff20 <__multadd>
 800fba8:	4607      	mov	r7, r0
 800fbaa:	e7f0      	b.n	800fb8e <_dtoa_r+0xb16>
 800fbac:	9b04      	ldr	r3, [sp, #16]
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	9d00      	ldr	r5, [sp, #0]
 800fbb2:	4631      	mov	r1, r6
 800fbb4:	4650      	mov	r0, sl
 800fbb6:	f7ff f9d6 	bl	800ef66 <quorem>
 800fbba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fbbe:	9b00      	ldr	r3, [sp, #0]
 800fbc0:	f805 9b01 	strb.w	r9, [r5], #1
 800fbc4:	1aea      	subs	r2, r5, r3
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	dd07      	ble.n	800fbdc <_dtoa_r+0xb64>
 800fbcc:	4651      	mov	r1, sl
 800fbce:	2300      	movs	r3, #0
 800fbd0:	220a      	movs	r2, #10
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 f9a4 	bl	800ff20 <__multadd>
 800fbd8:	4682      	mov	sl, r0
 800fbda:	e7ea      	b.n	800fbb2 <_dtoa_r+0xb3a>
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfc8      	it	gt
 800fbe2:	461d      	movgt	r5, r3
 800fbe4:	9b00      	ldr	r3, [sp, #0]
 800fbe6:	bfd8      	it	le
 800fbe8:	2501      	movle	r5, #1
 800fbea:	441d      	add	r5, r3
 800fbec:	f04f 0800 	mov.w	r8, #0
 800fbf0:	4651      	mov	r1, sl
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 fb41 	bl	801027c <__lshift>
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	4682      	mov	sl, r0
 800fbfe:	f000 fba9 	bl	8010354 <__mcmp>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	dc96      	bgt.n	800fb34 <_dtoa_r+0xabc>
 800fc06:	d102      	bne.n	800fc0e <_dtoa_r+0xb96>
 800fc08:	f019 0f01 	tst.w	r9, #1
 800fc0c:	d192      	bne.n	800fb34 <_dtoa_r+0xabc>
 800fc0e:	462b      	mov	r3, r5
 800fc10:	461d      	mov	r5, r3
 800fc12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc16:	2a30      	cmp	r2, #48	; 0x30
 800fc18:	d0fa      	beq.n	800fc10 <_dtoa_r+0xb98>
 800fc1a:	e6dd      	b.n	800f9d8 <_dtoa_r+0x960>
 800fc1c:	9a00      	ldr	r2, [sp, #0]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d189      	bne.n	800fb36 <_dtoa_r+0xabe>
 800fc22:	f10b 0b01 	add.w	fp, fp, #1
 800fc26:	2331      	movs	r3, #49	; 0x31
 800fc28:	e796      	b.n	800fb58 <_dtoa_r+0xae0>
 800fc2a:	4b0a      	ldr	r3, [pc, #40]	; (800fc54 <_dtoa_r+0xbdc>)
 800fc2c:	f7ff ba99 	b.w	800f162 <_dtoa_r+0xea>
 800fc30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f47f aa6d 	bne.w	800f112 <_dtoa_r+0x9a>
 800fc38:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <_dtoa_r+0xbe0>)
 800fc3a:	f7ff ba92 	b.w	800f162 <_dtoa_r+0xea>
 800fc3e:	9b01      	ldr	r3, [sp, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	dcb5      	bgt.n	800fbb0 <_dtoa_r+0xb38>
 800fc44:	9b07      	ldr	r3, [sp, #28]
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	f73f aeb1 	bgt.w	800f9ae <_dtoa_r+0x936>
 800fc4c:	e7b0      	b.n	800fbb0 <_dtoa_r+0xb38>
 800fc4e:	bf00      	nop
 800fc50:	08011bcc 	.word	0x08011bcc
 800fc54:	08011b2c 	.word	0x08011b2c
 800fc58:	08011b50 	.word	0x08011b50

0800fc5c <_free_r>:
 800fc5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc5e:	2900      	cmp	r1, #0
 800fc60:	d044      	beq.n	800fcec <_free_r+0x90>
 800fc62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc66:	9001      	str	r0, [sp, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f1a1 0404 	sub.w	r4, r1, #4
 800fc6e:	bfb8      	it	lt
 800fc70:	18e4      	addlt	r4, r4, r3
 800fc72:	f000 f8e7 	bl	800fe44 <__malloc_lock>
 800fc76:	4a1e      	ldr	r2, [pc, #120]	; (800fcf0 <_free_r+0x94>)
 800fc78:	9801      	ldr	r0, [sp, #4]
 800fc7a:	6813      	ldr	r3, [r2, #0]
 800fc7c:	b933      	cbnz	r3, 800fc8c <_free_r+0x30>
 800fc7e:	6063      	str	r3, [r4, #4]
 800fc80:	6014      	str	r4, [r2, #0]
 800fc82:	b003      	add	sp, #12
 800fc84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc88:	f000 b8e2 	b.w	800fe50 <__malloc_unlock>
 800fc8c:	42a3      	cmp	r3, r4
 800fc8e:	d908      	bls.n	800fca2 <_free_r+0x46>
 800fc90:	6825      	ldr	r5, [r4, #0]
 800fc92:	1961      	adds	r1, r4, r5
 800fc94:	428b      	cmp	r3, r1
 800fc96:	bf01      	itttt	eq
 800fc98:	6819      	ldreq	r1, [r3, #0]
 800fc9a:	685b      	ldreq	r3, [r3, #4]
 800fc9c:	1949      	addeq	r1, r1, r5
 800fc9e:	6021      	streq	r1, [r4, #0]
 800fca0:	e7ed      	b.n	800fc7e <_free_r+0x22>
 800fca2:	461a      	mov	r2, r3
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	b10b      	cbz	r3, 800fcac <_free_r+0x50>
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	d9fa      	bls.n	800fca2 <_free_r+0x46>
 800fcac:	6811      	ldr	r1, [r2, #0]
 800fcae:	1855      	adds	r5, r2, r1
 800fcb0:	42a5      	cmp	r5, r4
 800fcb2:	d10b      	bne.n	800fccc <_free_r+0x70>
 800fcb4:	6824      	ldr	r4, [r4, #0]
 800fcb6:	4421      	add	r1, r4
 800fcb8:	1854      	adds	r4, r2, r1
 800fcba:	42a3      	cmp	r3, r4
 800fcbc:	6011      	str	r1, [r2, #0]
 800fcbe:	d1e0      	bne.n	800fc82 <_free_r+0x26>
 800fcc0:	681c      	ldr	r4, [r3, #0]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	6053      	str	r3, [r2, #4]
 800fcc6:	440c      	add	r4, r1
 800fcc8:	6014      	str	r4, [r2, #0]
 800fcca:	e7da      	b.n	800fc82 <_free_r+0x26>
 800fccc:	d902      	bls.n	800fcd4 <_free_r+0x78>
 800fcce:	230c      	movs	r3, #12
 800fcd0:	6003      	str	r3, [r0, #0]
 800fcd2:	e7d6      	b.n	800fc82 <_free_r+0x26>
 800fcd4:	6825      	ldr	r5, [r4, #0]
 800fcd6:	1961      	adds	r1, r4, r5
 800fcd8:	428b      	cmp	r3, r1
 800fcda:	bf04      	itt	eq
 800fcdc:	6819      	ldreq	r1, [r3, #0]
 800fcde:	685b      	ldreq	r3, [r3, #4]
 800fce0:	6063      	str	r3, [r4, #4]
 800fce2:	bf04      	itt	eq
 800fce4:	1949      	addeq	r1, r1, r5
 800fce6:	6021      	streq	r1, [r4, #0]
 800fce8:	6054      	str	r4, [r2, #4]
 800fcea:	e7ca      	b.n	800fc82 <_free_r+0x26>
 800fcec:	b003      	add	sp, #12
 800fcee:	bd30      	pop	{r4, r5, pc}
 800fcf0:	20004d20 	.word	0x20004d20

0800fcf4 <malloc>:
 800fcf4:	4b02      	ldr	r3, [pc, #8]	; (800fd00 <malloc+0xc>)
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	6818      	ldr	r0, [r3, #0]
 800fcfa:	f000 b823 	b.w	800fd44 <_malloc_r>
 800fcfe:	bf00      	nop
 800fd00:	20000070 	.word	0x20000070

0800fd04 <sbrk_aligned>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	4e0e      	ldr	r6, [pc, #56]	; (800fd40 <sbrk_aligned+0x3c>)
 800fd08:	460c      	mov	r4, r1
 800fd0a:	6831      	ldr	r1, [r6, #0]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	b911      	cbnz	r1, 800fd16 <sbrk_aligned+0x12>
 800fd10:	f000 ffee 	bl	8010cf0 <_sbrk_r>
 800fd14:	6030      	str	r0, [r6, #0]
 800fd16:	4621      	mov	r1, r4
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f000 ffe9 	bl	8010cf0 <_sbrk_r>
 800fd1e:	1c43      	adds	r3, r0, #1
 800fd20:	d00a      	beq.n	800fd38 <sbrk_aligned+0x34>
 800fd22:	1cc4      	adds	r4, r0, #3
 800fd24:	f024 0403 	bic.w	r4, r4, #3
 800fd28:	42a0      	cmp	r0, r4
 800fd2a:	d007      	beq.n	800fd3c <sbrk_aligned+0x38>
 800fd2c:	1a21      	subs	r1, r4, r0
 800fd2e:	4628      	mov	r0, r5
 800fd30:	f000 ffde 	bl	8010cf0 <_sbrk_r>
 800fd34:	3001      	adds	r0, #1
 800fd36:	d101      	bne.n	800fd3c <sbrk_aligned+0x38>
 800fd38:	f04f 34ff 	mov.w	r4, #4294967295
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	20004d24 	.word	0x20004d24

0800fd44 <_malloc_r>:
 800fd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd48:	1ccd      	adds	r5, r1, #3
 800fd4a:	f025 0503 	bic.w	r5, r5, #3
 800fd4e:	3508      	adds	r5, #8
 800fd50:	2d0c      	cmp	r5, #12
 800fd52:	bf38      	it	cc
 800fd54:	250c      	movcc	r5, #12
 800fd56:	2d00      	cmp	r5, #0
 800fd58:	4607      	mov	r7, r0
 800fd5a:	db01      	blt.n	800fd60 <_malloc_r+0x1c>
 800fd5c:	42a9      	cmp	r1, r5
 800fd5e:	d905      	bls.n	800fd6c <_malloc_r+0x28>
 800fd60:	230c      	movs	r3, #12
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	2600      	movs	r6, #0
 800fd66:	4630      	mov	r0, r6
 800fd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fe40 <_malloc_r+0xfc>
 800fd70:	f000 f868 	bl	800fe44 <__malloc_lock>
 800fd74:	f8d8 3000 	ldr.w	r3, [r8]
 800fd78:	461c      	mov	r4, r3
 800fd7a:	bb5c      	cbnz	r4, 800fdd4 <_malloc_r+0x90>
 800fd7c:	4629      	mov	r1, r5
 800fd7e:	4638      	mov	r0, r7
 800fd80:	f7ff ffc0 	bl	800fd04 <sbrk_aligned>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	4604      	mov	r4, r0
 800fd88:	d155      	bne.n	800fe36 <_malloc_r+0xf2>
 800fd8a:	f8d8 4000 	ldr.w	r4, [r8]
 800fd8e:	4626      	mov	r6, r4
 800fd90:	2e00      	cmp	r6, #0
 800fd92:	d145      	bne.n	800fe20 <_malloc_r+0xdc>
 800fd94:	2c00      	cmp	r4, #0
 800fd96:	d048      	beq.n	800fe2a <_malloc_r+0xe6>
 800fd98:	6823      	ldr	r3, [r4, #0]
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	4638      	mov	r0, r7
 800fd9e:	eb04 0903 	add.w	r9, r4, r3
 800fda2:	f000 ffa5 	bl	8010cf0 <_sbrk_r>
 800fda6:	4581      	cmp	r9, r0
 800fda8:	d13f      	bne.n	800fe2a <_malloc_r+0xe6>
 800fdaa:	6821      	ldr	r1, [r4, #0]
 800fdac:	1a6d      	subs	r5, r5, r1
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f7ff ffa7 	bl	800fd04 <sbrk_aligned>
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	d037      	beq.n	800fe2a <_malloc_r+0xe6>
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	442b      	add	r3, r5
 800fdbe:	6023      	str	r3, [r4, #0]
 800fdc0:	f8d8 3000 	ldr.w	r3, [r8]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d038      	beq.n	800fe3a <_malloc_r+0xf6>
 800fdc8:	685a      	ldr	r2, [r3, #4]
 800fdca:	42a2      	cmp	r2, r4
 800fdcc:	d12b      	bne.n	800fe26 <_malloc_r+0xe2>
 800fdce:	2200      	movs	r2, #0
 800fdd0:	605a      	str	r2, [r3, #4]
 800fdd2:	e00f      	b.n	800fdf4 <_malloc_r+0xb0>
 800fdd4:	6822      	ldr	r2, [r4, #0]
 800fdd6:	1b52      	subs	r2, r2, r5
 800fdd8:	d41f      	bmi.n	800fe1a <_malloc_r+0xd6>
 800fdda:	2a0b      	cmp	r2, #11
 800fddc:	d917      	bls.n	800fe0e <_malloc_r+0xca>
 800fdde:	1961      	adds	r1, r4, r5
 800fde0:	42a3      	cmp	r3, r4
 800fde2:	6025      	str	r5, [r4, #0]
 800fde4:	bf18      	it	ne
 800fde6:	6059      	strne	r1, [r3, #4]
 800fde8:	6863      	ldr	r3, [r4, #4]
 800fdea:	bf08      	it	eq
 800fdec:	f8c8 1000 	streq.w	r1, [r8]
 800fdf0:	5162      	str	r2, [r4, r5]
 800fdf2:	604b      	str	r3, [r1, #4]
 800fdf4:	4638      	mov	r0, r7
 800fdf6:	f104 060b 	add.w	r6, r4, #11
 800fdfa:	f000 f829 	bl	800fe50 <__malloc_unlock>
 800fdfe:	f026 0607 	bic.w	r6, r6, #7
 800fe02:	1d23      	adds	r3, r4, #4
 800fe04:	1af2      	subs	r2, r6, r3
 800fe06:	d0ae      	beq.n	800fd66 <_malloc_r+0x22>
 800fe08:	1b9b      	subs	r3, r3, r6
 800fe0a:	50a3      	str	r3, [r4, r2]
 800fe0c:	e7ab      	b.n	800fd66 <_malloc_r+0x22>
 800fe0e:	42a3      	cmp	r3, r4
 800fe10:	6862      	ldr	r2, [r4, #4]
 800fe12:	d1dd      	bne.n	800fdd0 <_malloc_r+0x8c>
 800fe14:	f8c8 2000 	str.w	r2, [r8]
 800fe18:	e7ec      	b.n	800fdf4 <_malloc_r+0xb0>
 800fe1a:	4623      	mov	r3, r4
 800fe1c:	6864      	ldr	r4, [r4, #4]
 800fe1e:	e7ac      	b.n	800fd7a <_malloc_r+0x36>
 800fe20:	4634      	mov	r4, r6
 800fe22:	6876      	ldr	r6, [r6, #4]
 800fe24:	e7b4      	b.n	800fd90 <_malloc_r+0x4c>
 800fe26:	4613      	mov	r3, r2
 800fe28:	e7cc      	b.n	800fdc4 <_malloc_r+0x80>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	603b      	str	r3, [r7, #0]
 800fe2e:	4638      	mov	r0, r7
 800fe30:	f000 f80e 	bl	800fe50 <__malloc_unlock>
 800fe34:	e797      	b.n	800fd66 <_malloc_r+0x22>
 800fe36:	6025      	str	r5, [r4, #0]
 800fe38:	e7dc      	b.n	800fdf4 <_malloc_r+0xb0>
 800fe3a:	605b      	str	r3, [r3, #4]
 800fe3c:	deff      	udf	#255	; 0xff
 800fe3e:	bf00      	nop
 800fe40:	20004d20 	.word	0x20004d20

0800fe44 <__malloc_lock>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__malloc_lock+0x8>)
 800fe46:	f7ff b87e 	b.w	800ef46 <__retarget_lock_acquire_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	20004d1c 	.word	0x20004d1c

0800fe50 <__malloc_unlock>:
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__malloc_unlock+0x8>)
 800fe52:	f7ff b879 	b.w	800ef48 <__retarget_lock_release_recursive>
 800fe56:	bf00      	nop
 800fe58:	20004d1c 	.word	0x20004d1c

0800fe5c <_Balloc>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	69c6      	ldr	r6, [r0, #28]
 800fe60:	4604      	mov	r4, r0
 800fe62:	460d      	mov	r5, r1
 800fe64:	b976      	cbnz	r6, 800fe84 <_Balloc+0x28>
 800fe66:	2010      	movs	r0, #16
 800fe68:	f7ff ff44 	bl	800fcf4 <malloc>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	61e0      	str	r0, [r4, #28]
 800fe70:	b920      	cbnz	r0, 800fe7c <_Balloc+0x20>
 800fe72:	4b18      	ldr	r3, [pc, #96]	; (800fed4 <_Balloc+0x78>)
 800fe74:	4818      	ldr	r0, [pc, #96]	; (800fed8 <_Balloc+0x7c>)
 800fe76:	216b      	movs	r1, #107	; 0x6b
 800fe78:	f000 ff4a 	bl	8010d10 <__assert_func>
 800fe7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe80:	6006      	str	r6, [r0, #0]
 800fe82:	60c6      	str	r6, [r0, #12]
 800fe84:	69e6      	ldr	r6, [r4, #28]
 800fe86:	68f3      	ldr	r3, [r6, #12]
 800fe88:	b183      	cbz	r3, 800feac <_Balloc+0x50>
 800fe8a:	69e3      	ldr	r3, [r4, #28]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe92:	b9b8      	cbnz	r0, 800fec4 <_Balloc+0x68>
 800fe94:	2101      	movs	r1, #1
 800fe96:	fa01 f605 	lsl.w	r6, r1, r5
 800fe9a:	1d72      	adds	r2, r6, #5
 800fe9c:	0092      	lsls	r2, r2, #2
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 ff54 	bl	8010d4c <_calloc_r>
 800fea4:	b160      	cbz	r0, 800fec0 <_Balloc+0x64>
 800fea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800feaa:	e00e      	b.n	800feca <_Balloc+0x6e>
 800feac:	2221      	movs	r2, #33	; 0x21
 800feae:	2104      	movs	r1, #4
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 ff4b 	bl	8010d4c <_calloc_r>
 800feb6:	69e3      	ldr	r3, [r4, #28]
 800feb8:	60f0      	str	r0, [r6, #12]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1e4      	bne.n	800fe8a <_Balloc+0x2e>
 800fec0:	2000      	movs	r0, #0
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	6802      	ldr	r2, [r0, #0]
 800fec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feca:	2300      	movs	r3, #0
 800fecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fed0:	e7f7      	b.n	800fec2 <_Balloc+0x66>
 800fed2:	bf00      	nop
 800fed4:	08011b5d 	.word	0x08011b5d
 800fed8:	08011bdd 	.word	0x08011bdd

0800fedc <_Bfree>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	69c6      	ldr	r6, [r0, #28]
 800fee0:	4605      	mov	r5, r0
 800fee2:	460c      	mov	r4, r1
 800fee4:	b976      	cbnz	r6, 800ff04 <_Bfree+0x28>
 800fee6:	2010      	movs	r0, #16
 800fee8:	f7ff ff04 	bl	800fcf4 <malloc>
 800feec:	4602      	mov	r2, r0
 800feee:	61e8      	str	r0, [r5, #28]
 800fef0:	b920      	cbnz	r0, 800fefc <_Bfree+0x20>
 800fef2:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <_Bfree+0x3c>)
 800fef4:	4809      	ldr	r0, [pc, #36]	; (800ff1c <_Bfree+0x40>)
 800fef6:	218f      	movs	r1, #143	; 0x8f
 800fef8:	f000 ff0a 	bl	8010d10 <__assert_func>
 800fefc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff00:	6006      	str	r6, [r0, #0]
 800ff02:	60c6      	str	r6, [r0, #12]
 800ff04:	b13c      	cbz	r4, 800ff16 <_Bfree+0x3a>
 800ff06:	69eb      	ldr	r3, [r5, #28]
 800ff08:	6862      	ldr	r2, [r4, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff10:	6021      	str	r1, [r4, #0]
 800ff12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff16:	bd70      	pop	{r4, r5, r6, pc}
 800ff18:	08011b5d 	.word	0x08011b5d
 800ff1c:	08011bdd 	.word	0x08011bdd

0800ff20 <__multadd>:
 800ff20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff24:	690d      	ldr	r5, [r1, #16]
 800ff26:	4607      	mov	r7, r0
 800ff28:	460c      	mov	r4, r1
 800ff2a:	461e      	mov	r6, r3
 800ff2c:	f101 0c14 	add.w	ip, r1, #20
 800ff30:	2000      	movs	r0, #0
 800ff32:	f8dc 3000 	ldr.w	r3, [ip]
 800ff36:	b299      	uxth	r1, r3
 800ff38:	fb02 6101 	mla	r1, r2, r1, r6
 800ff3c:	0c1e      	lsrs	r6, r3, #16
 800ff3e:	0c0b      	lsrs	r3, r1, #16
 800ff40:	fb02 3306 	mla	r3, r2, r6, r3
 800ff44:	b289      	uxth	r1, r1
 800ff46:	3001      	adds	r0, #1
 800ff48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff4c:	4285      	cmp	r5, r0
 800ff4e:	f84c 1b04 	str.w	r1, [ip], #4
 800ff52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff56:	dcec      	bgt.n	800ff32 <__multadd+0x12>
 800ff58:	b30e      	cbz	r6, 800ff9e <__multadd+0x7e>
 800ff5a:	68a3      	ldr	r3, [r4, #8]
 800ff5c:	42ab      	cmp	r3, r5
 800ff5e:	dc19      	bgt.n	800ff94 <__multadd+0x74>
 800ff60:	6861      	ldr	r1, [r4, #4]
 800ff62:	4638      	mov	r0, r7
 800ff64:	3101      	adds	r1, #1
 800ff66:	f7ff ff79 	bl	800fe5c <_Balloc>
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	b928      	cbnz	r0, 800ff7a <__multadd+0x5a>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	4b0c      	ldr	r3, [pc, #48]	; (800ffa4 <__multadd+0x84>)
 800ff72:	480d      	ldr	r0, [pc, #52]	; (800ffa8 <__multadd+0x88>)
 800ff74:	21ba      	movs	r1, #186	; 0xba
 800ff76:	f000 fecb 	bl	8010d10 <__assert_func>
 800ff7a:	6922      	ldr	r2, [r4, #16]
 800ff7c:	3202      	adds	r2, #2
 800ff7e:	f104 010c 	add.w	r1, r4, #12
 800ff82:	0092      	lsls	r2, r2, #2
 800ff84:	300c      	adds	r0, #12
 800ff86:	f7fe ffe0 	bl	800ef4a <memcpy>
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	4638      	mov	r0, r7
 800ff8e:	f7ff ffa5 	bl	800fedc <_Bfree>
 800ff92:	4644      	mov	r4, r8
 800ff94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff98:	3501      	adds	r5, #1
 800ff9a:	615e      	str	r6, [r3, #20]
 800ff9c:	6125      	str	r5, [r4, #16]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa4:	08011bcc 	.word	0x08011bcc
 800ffa8:	08011bdd 	.word	0x08011bdd

0800ffac <__hi0bits>:
 800ffac:	0c03      	lsrs	r3, r0, #16
 800ffae:	041b      	lsls	r3, r3, #16
 800ffb0:	b9d3      	cbnz	r3, 800ffe8 <__hi0bits+0x3c>
 800ffb2:	0400      	lsls	r0, r0, #16
 800ffb4:	2310      	movs	r3, #16
 800ffb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ffba:	bf04      	itt	eq
 800ffbc:	0200      	lsleq	r0, r0, #8
 800ffbe:	3308      	addeq	r3, #8
 800ffc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ffc4:	bf04      	itt	eq
 800ffc6:	0100      	lsleq	r0, r0, #4
 800ffc8:	3304      	addeq	r3, #4
 800ffca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ffce:	bf04      	itt	eq
 800ffd0:	0080      	lsleq	r0, r0, #2
 800ffd2:	3302      	addeq	r3, #2
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	db05      	blt.n	800ffe4 <__hi0bits+0x38>
 800ffd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ffdc:	f103 0301 	add.w	r3, r3, #1
 800ffe0:	bf08      	it	eq
 800ffe2:	2320      	moveq	r3, #32
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	4770      	bx	lr
 800ffe8:	2300      	movs	r3, #0
 800ffea:	e7e4      	b.n	800ffb6 <__hi0bits+0xa>

0800ffec <__lo0bits>:
 800ffec:	6803      	ldr	r3, [r0, #0]
 800ffee:	f013 0207 	ands.w	r2, r3, #7
 800fff2:	d00c      	beq.n	801000e <__lo0bits+0x22>
 800fff4:	07d9      	lsls	r1, r3, #31
 800fff6:	d422      	bmi.n	801003e <__lo0bits+0x52>
 800fff8:	079a      	lsls	r2, r3, #30
 800fffa:	bf49      	itett	mi
 800fffc:	085b      	lsrmi	r3, r3, #1
 800fffe:	089b      	lsrpl	r3, r3, #2
 8010000:	6003      	strmi	r3, [r0, #0]
 8010002:	2201      	movmi	r2, #1
 8010004:	bf5c      	itt	pl
 8010006:	6003      	strpl	r3, [r0, #0]
 8010008:	2202      	movpl	r2, #2
 801000a:	4610      	mov	r0, r2
 801000c:	4770      	bx	lr
 801000e:	b299      	uxth	r1, r3
 8010010:	b909      	cbnz	r1, 8010016 <__lo0bits+0x2a>
 8010012:	0c1b      	lsrs	r3, r3, #16
 8010014:	2210      	movs	r2, #16
 8010016:	b2d9      	uxtb	r1, r3
 8010018:	b909      	cbnz	r1, 801001e <__lo0bits+0x32>
 801001a:	3208      	adds	r2, #8
 801001c:	0a1b      	lsrs	r3, r3, #8
 801001e:	0719      	lsls	r1, r3, #28
 8010020:	bf04      	itt	eq
 8010022:	091b      	lsreq	r3, r3, #4
 8010024:	3204      	addeq	r2, #4
 8010026:	0799      	lsls	r1, r3, #30
 8010028:	bf04      	itt	eq
 801002a:	089b      	lsreq	r3, r3, #2
 801002c:	3202      	addeq	r2, #2
 801002e:	07d9      	lsls	r1, r3, #31
 8010030:	d403      	bmi.n	801003a <__lo0bits+0x4e>
 8010032:	085b      	lsrs	r3, r3, #1
 8010034:	f102 0201 	add.w	r2, r2, #1
 8010038:	d003      	beq.n	8010042 <__lo0bits+0x56>
 801003a:	6003      	str	r3, [r0, #0]
 801003c:	e7e5      	b.n	801000a <__lo0bits+0x1e>
 801003e:	2200      	movs	r2, #0
 8010040:	e7e3      	b.n	801000a <__lo0bits+0x1e>
 8010042:	2220      	movs	r2, #32
 8010044:	e7e1      	b.n	801000a <__lo0bits+0x1e>
	...

08010048 <__i2b>:
 8010048:	b510      	push	{r4, lr}
 801004a:	460c      	mov	r4, r1
 801004c:	2101      	movs	r1, #1
 801004e:	f7ff ff05 	bl	800fe5c <_Balloc>
 8010052:	4602      	mov	r2, r0
 8010054:	b928      	cbnz	r0, 8010062 <__i2b+0x1a>
 8010056:	4b05      	ldr	r3, [pc, #20]	; (801006c <__i2b+0x24>)
 8010058:	4805      	ldr	r0, [pc, #20]	; (8010070 <__i2b+0x28>)
 801005a:	f240 1145 	movw	r1, #325	; 0x145
 801005e:	f000 fe57 	bl	8010d10 <__assert_func>
 8010062:	2301      	movs	r3, #1
 8010064:	6144      	str	r4, [r0, #20]
 8010066:	6103      	str	r3, [r0, #16]
 8010068:	bd10      	pop	{r4, pc}
 801006a:	bf00      	nop
 801006c:	08011bcc 	.word	0x08011bcc
 8010070:	08011bdd 	.word	0x08011bdd

08010074 <__multiply>:
 8010074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010078:	4691      	mov	r9, r2
 801007a:	690a      	ldr	r2, [r1, #16]
 801007c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010080:	429a      	cmp	r2, r3
 8010082:	bfb8      	it	lt
 8010084:	460b      	movlt	r3, r1
 8010086:	460c      	mov	r4, r1
 8010088:	bfbc      	itt	lt
 801008a:	464c      	movlt	r4, r9
 801008c:	4699      	movlt	r9, r3
 801008e:	6927      	ldr	r7, [r4, #16]
 8010090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	6861      	ldr	r1, [r4, #4]
 8010098:	eb07 060a 	add.w	r6, r7, sl
 801009c:	42b3      	cmp	r3, r6
 801009e:	b085      	sub	sp, #20
 80100a0:	bfb8      	it	lt
 80100a2:	3101      	addlt	r1, #1
 80100a4:	f7ff feda 	bl	800fe5c <_Balloc>
 80100a8:	b930      	cbnz	r0, 80100b8 <__multiply+0x44>
 80100aa:	4602      	mov	r2, r0
 80100ac:	4b44      	ldr	r3, [pc, #272]	; (80101c0 <__multiply+0x14c>)
 80100ae:	4845      	ldr	r0, [pc, #276]	; (80101c4 <__multiply+0x150>)
 80100b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80100b4:	f000 fe2c 	bl	8010d10 <__assert_func>
 80100b8:	f100 0514 	add.w	r5, r0, #20
 80100bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100c0:	462b      	mov	r3, r5
 80100c2:	2200      	movs	r2, #0
 80100c4:	4543      	cmp	r3, r8
 80100c6:	d321      	bcc.n	801010c <__multiply+0x98>
 80100c8:	f104 0314 	add.w	r3, r4, #20
 80100cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80100d0:	f109 0314 	add.w	r3, r9, #20
 80100d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80100d8:	9202      	str	r2, [sp, #8]
 80100da:	1b3a      	subs	r2, r7, r4
 80100dc:	3a15      	subs	r2, #21
 80100de:	f022 0203 	bic.w	r2, r2, #3
 80100e2:	3204      	adds	r2, #4
 80100e4:	f104 0115 	add.w	r1, r4, #21
 80100e8:	428f      	cmp	r7, r1
 80100ea:	bf38      	it	cc
 80100ec:	2204      	movcc	r2, #4
 80100ee:	9201      	str	r2, [sp, #4]
 80100f0:	9a02      	ldr	r2, [sp, #8]
 80100f2:	9303      	str	r3, [sp, #12]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d80c      	bhi.n	8010112 <__multiply+0x9e>
 80100f8:	2e00      	cmp	r6, #0
 80100fa:	dd03      	ble.n	8010104 <__multiply+0x90>
 80100fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010100:	2b00      	cmp	r3, #0
 8010102:	d05b      	beq.n	80101bc <__multiply+0x148>
 8010104:	6106      	str	r6, [r0, #16]
 8010106:	b005      	add	sp, #20
 8010108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010c:	f843 2b04 	str.w	r2, [r3], #4
 8010110:	e7d8      	b.n	80100c4 <__multiply+0x50>
 8010112:	f8b3 a000 	ldrh.w	sl, [r3]
 8010116:	f1ba 0f00 	cmp.w	sl, #0
 801011a:	d024      	beq.n	8010166 <__multiply+0xf2>
 801011c:	f104 0e14 	add.w	lr, r4, #20
 8010120:	46a9      	mov	r9, r5
 8010122:	f04f 0c00 	mov.w	ip, #0
 8010126:	f85e 2b04 	ldr.w	r2, [lr], #4
 801012a:	f8d9 1000 	ldr.w	r1, [r9]
 801012e:	fa1f fb82 	uxth.w	fp, r2
 8010132:	b289      	uxth	r1, r1
 8010134:	fb0a 110b 	mla	r1, sl, fp, r1
 8010138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801013c:	f8d9 2000 	ldr.w	r2, [r9]
 8010140:	4461      	add	r1, ip
 8010142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010146:	fb0a c20b 	mla	r2, sl, fp, ip
 801014a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801014e:	b289      	uxth	r1, r1
 8010150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010154:	4577      	cmp	r7, lr
 8010156:	f849 1b04 	str.w	r1, [r9], #4
 801015a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801015e:	d8e2      	bhi.n	8010126 <__multiply+0xb2>
 8010160:	9a01      	ldr	r2, [sp, #4]
 8010162:	f845 c002 	str.w	ip, [r5, r2]
 8010166:	9a03      	ldr	r2, [sp, #12]
 8010168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801016c:	3304      	adds	r3, #4
 801016e:	f1b9 0f00 	cmp.w	r9, #0
 8010172:	d021      	beq.n	80101b8 <__multiply+0x144>
 8010174:	6829      	ldr	r1, [r5, #0]
 8010176:	f104 0c14 	add.w	ip, r4, #20
 801017a:	46ae      	mov	lr, r5
 801017c:	f04f 0a00 	mov.w	sl, #0
 8010180:	f8bc b000 	ldrh.w	fp, [ip]
 8010184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010188:	fb09 220b 	mla	r2, r9, fp, r2
 801018c:	4452      	add	r2, sl
 801018e:	b289      	uxth	r1, r1
 8010190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010194:	f84e 1b04 	str.w	r1, [lr], #4
 8010198:	f85c 1b04 	ldr.w	r1, [ip], #4
 801019c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101a0:	f8be 1000 	ldrh.w	r1, [lr]
 80101a4:	fb09 110a 	mla	r1, r9, sl, r1
 80101a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80101ac:	4567      	cmp	r7, ip
 80101ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101b2:	d8e5      	bhi.n	8010180 <__multiply+0x10c>
 80101b4:	9a01      	ldr	r2, [sp, #4]
 80101b6:	50a9      	str	r1, [r5, r2]
 80101b8:	3504      	adds	r5, #4
 80101ba:	e799      	b.n	80100f0 <__multiply+0x7c>
 80101bc:	3e01      	subs	r6, #1
 80101be:	e79b      	b.n	80100f8 <__multiply+0x84>
 80101c0:	08011bcc 	.word	0x08011bcc
 80101c4:	08011bdd 	.word	0x08011bdd

080101c8 <__pow5mult>:
 80101c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101cc:	4615      	mov	r5, r2
 80101ce:	f012 0203 	ands.w	r2, r2, #3
 80101d2:	4606      	mov	r6, r0
 80101d4:	460f      	mov	r7, r1
 80101d6:	d007      	beq.n	80101e8 <__pow5mult+0x20>
 80101d8:	4c25      	ldr	r4, [pc, #148]	; (8010270 <__pow5mult+0xa8>)
 80101da:	3a01      	subs	r2, #1
 80101dc:	2300      	movs	r3, #0
 80101de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101e2:	f7ff fe9d 	bl	800ff20 <__multadd>
 80101e6:	4607      	mov	r7, r0
 80101e8:	10ad      	asrs	r5, r5, #2
 80101ea:	d03d      	beq.n	8010268 <__pow5mult+0xa0>
 80101ec:	69f4      	ldr	r4, [r6, #28]
 80101ee:	b97c      	cbnz	r4, 8010210 <__pow5mult+0x48>
 80101f0:	2010      	movs	r0, #16
 80101f2:	f7ff fd7f 	bl	800fcf4 <malloc>
 80101f6:	4602      	mov	r2, r0
 80101f8:	61f0      	str	r0, [r6, #28]
 80101fa:	b928      	cbnz	r0, 8010208 <__pow5mult+0x40>
 80101fc:	4b1d      	ldr	r3, [pc, #116]	; (8010274 <__pow5mult+0xac>)
 80101fe:	481e      	ldr	r0, [pc, #120]	; (8010278 <__pow5mult+0xb0>)
 8010200:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010204:	f000 fd84 	bl	8010d10 <__assert_func>
 8010208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801020c:	6004      	str	r4, [r0, #0]
 801020e:	60c4      	str	r4, [r0, #12]
 8010210:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010218:	b94c      	cbnz	r4, 801022e <__pow5mult+0x66>
 801021a:	f240 2171 	movw	r1, #625	; 0x271
 801021e:	4630      	mov	r0, r6
 8010220:	f7ff ff12 	bl	8010048 <__i2b>
 8010224:	2300      	movs	r3, #0
 8010226:	f8c8 0008 	str.w	r0, [r8, #8]
 801022a:	4604      	mov	r4, r0
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	f04f 0900 	mov.w	r9, #0
 8010232:	07eb      	lsls	r3, r5, #31
 8010234:	d50a      	bpl.n	801024c <__pow5mult+0x84>
 8010236:	4639      	mov	r1, r7
 8010238:	4622      	mov	r2, r4
 801023a:	4630      	mov	r0, r6
 801023c:	f7ff ff1a 	bl	8010074 <__multiply>
 8010240:	4639      	mov	r1, r7
 8010242:	4680      	mov	r8, r0
 8010244:	4630      	mov	r0, r6
 8010246:	f7ff fe49 	bl	800fedc <_Bfree>
 801024a:	4647      	mov	r7, r8
 801024c:	106d      	asrs	r5, r5, #1
 801024e:	d00b      	beq.n	8010268 <__pow5mult+0xa0>
 8010250:	6820      	ldr	r0, [r4, #0]
 8010252:	b938      	cbnz	r0, 8010264 <__pow5mult+0x9c>
 8010254:	4622      	mov	r2, r4
 8010256:	4621      	mov	r1, r4
 8010258:	4630      	mov	r0, r6
 801025a:	f7ff ff0b 	bl	8010074 <__multiply>
 801025e:	6020      	str	r0, [r4, #0]
 8010260:	f8c0 9000 	str.w	r9, [r0]
 8010264:	4604      	mov	r4, r0
 8010266:	e7e4      	b.n	8010232 <__pow5mult+0x6a>
 8010268:	4638      	mov	r0, r7
 801026a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801026e:	bf00      	nop
 8010270:	08011d28 	.word	0x08011d28
 8010274:	08011b5d 	.word	0x08011b5d
 8010278:	08011bdd 	.word	0x08011bdd

0801027c <__lshift>:
 801027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010280:	460c      	mov	r4, r1
 8010282:	6849      	ldr	r1, [r1, #4]
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	4607      	mov	r7, r0
 801028e:	4691      	mov	r9, r2
 8010290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010294:	f108 0601 	add.w	r6, r8, #1
 8010298:	42b3      	cmp	r3, r6
 801029a:	db0b      	blt.n	80102b4 <__lshift+0x38>
 801029c:	4638      	mov	r0, r7
 801029e:	f7ff fddd 	bl	800fe5c <_Balloc>
 80102a2:	4605      	mov	r5, r0
 80102a4:	b948      	cbnz	r0, 80102ba <__lshift+0x3e>
 80102a6:	4602      	mov	r2, r0
 80102a8:	4b28      	ldr	r3, [pc, #160]	; (801034c <__lshift+0xd0>)
 80102aa:	4829      	ldr	r0, [pc, #164]	; (8010350 <__lshift+0xd4>)
 80102ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80102b0:	f000 fd2e 	bl	8010d10 <__assert_func>
 80102b4:	3101      	adds	r1, #1
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	e7ee      	b.n	8010298 <__lshift+0x1c>
 80102ba:	2300      	movs	r3, #0
 80102bc:	f100 0114 	add.w	r1, r0, #20
 80102c0:	f100 0210 	add.w	r2, r0, #16
 80102c4:	4618      	mov	r0, r3
 80102c6:	4553      	cmp	r3, sl
 80102c8:	db33      	blt.n	8010332 <__lshift+0xb6>
 80102ca:	6920      	ldr	r0, [r4, #16]
 80102cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102d0:	f104 0314 	add.w	r3, r4, #20
 80102d4:	f019 091f 	ands.w	r9, r9, #31
 80102d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102e0:	d02b      	beq.n	801033a <__lshift+0xbe>
 80102e2:	f1c9 0e20 	rsb	lr, r9, #32
 80102e6:	468a      	mov	sl, r1
 80102e8:	2200      	movs	r2, #0
 80102ea:	6818      	ldr	r0, [r3, #0]
 80102ec:	fa00 f009 	lsl.w	r0, r0, r9
 80102f0:	4310      	orrs	r0, r2
 80102f2:	f84a 0b04 	str.w	r0, [sl], #4
 80102f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102fa:	459c      	cmp	ip, r3
 80102fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010300:	d8f3      	bhi.n	80102ea <__lshift+0x6e>
 8010302:	ebac 0304 	sub.w	r3, ip, r4
 8010306:	3b15      	subs	r3, #21
 8010308:	f023 0303 	bic.w	r3, r3, #3
 801030c:	3304      	adds	r3, #4
 801030e:	f104 0015 	add.w	r0, r4, #21
 8010312:	4584      	cmp	ip, r0
 8010314:	bf38      	it	cc
 8010316:	2304      	movcc	r3, #4
 8010318:	50ca      	str	r2, [r1, r3]
 801031a:	b10a      	cbz	r2, 8010320 <__lshift+0xa4>
 801031c:	f108 0602 	add.w	r6, r8, #2
 8010320:	3e01      	subs	r6, #1
 8010322:	4638      	mov	r0, r7
 8010324:	612e      	str	r6, [r5, #16]
 8010326:	4621      	mov	r1, r4
 8010328:	f7ff fdd8 	bl	800fedc <_Bfree>
 801032c:	4628      	mov	r0, r5
 801032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010332:	f842 0f04 	str.w	r0, [r2, #4]!
 8010336:	3301      	adds	r3, #1
 8010338:	e7c5      	b.n	80102c6 <__lshift+0x4a>
 801033a:	3904      	subs	r1, #4
 801033c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010340:	f841 2f04 	str.w	r2, [r1, #4]!
 8010344:	459c      	cmp	ip, r3
 8010346:	d8f9      	bhi.n	801033c <__lshift+0xc0>
 8010348:	e7ea      	b.n	8010320 <__lshift+0xa4>
 801034a:	bf00      	nop
 801034c:	08011bcc 	.word	0x08011bcc
 8010350:	08011bdd 	.word	0x08011bdd

08010354 <__mcmp>:
 8010354:	b530      	push	{r4, r5, lr}
 8010356:	6902      	ldr	r2, [r0, #16]
 8010358:	690c      	ldr	r4, [r1, #16]
 801035a:	1b12      	subs	r2, r2, r4
 801035c:	d10e      	bne.n	801037c <__mcmp+0x28>
 801035e:	f100 0314 	add.w	r3, r0, #20
 8010362:	3114      	adds	r1, #20
 8010364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801036c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010374:	42a5      	cmp	r5, r4
 8010376:	d003      	beq.n	8010380 <__mcmp+0x2c>
 8010378:	d305      	bcc.n	8010386 <__mcmp+0x32>
 801037a:	2201      	movs	r2, #1
 801037c:	4610      	mov	r0, r2
 801037e:	bd30      	pop	{r4, r5, pc}
 8010380:	4283      	cmp	r3, r0
 8010382:	d3f3      	bcc.n	801036c <__mcmp+0x18>
 8010384:	e7fa      	b.n	801037c <__mcmp+0x28>
 8010386:	f04f 32ff 	mov.w	r2, #4294967295
 801038a:	e7f7      	b.n	801037c <__mcmp+0x28>

0801038c <__mdiff>:
 801038c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010390:	460c      	mov	r4, r1
 8010392:	4606      	mov	r6, r0
 8010394:	4611      	mov	r1, r2
 8010396:	4620      	mov	r0, r4
 8010398:	4690      	mov	r8, r2
 801039a:	f7ff ffdb 	bl	8010354 <__mcmp>
 801039e:	1e05      	subs	r5, r0, #0
 80103a0:	d110      	bne.n	80103c4 <__mdiff+0x38>
 80103a2:	4629      	mov	r1, r5
 80103a4:	4630      	mov	r0, r6
 80103a6:	f7ff fd59 	bl	800fe5c <_Balloc>
 80103aa:	b930      	cbnz	r0, 80103ba <__mdiff+0x2e>
 80103ac:	4b3a      	ldr	r3, [pc, #232]	; (8010498 <__mdiff+0x10c>)
 80103ae:	4602      	mov	r2, r0
 80103b0:	f240 2137 	movw	r1, #567	; 0x237
 80103b4:	4839      	ldr	r0, [pc, #228]	; (801049c <__mdiff+0x110>)
 80103b6:	f000 fcab 	bl	8010d10 <__assert_func>
 80103ba:	2301      	movs	r3, #1
 80103bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c4:	bfa4      	itt	ge
 80103c6:	4643      	movge	r3, r8
 80103c8:	46a0      	movge	r8, r4
 80103ca:	4630      	mov	r0, r6
 80103cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80103d0:	bfa6      	itte	ge
 80103d2:	461c      	movge	r4, r3
 80103d4:	2500      	movge	r5, #0
 80103d6:	2501      	movlt	r5, #1
 80103d8:	f7ff fd40 	bl	800fe5c <_Balloc>
 80103dc:	b920      	cbnz	r0, 80103e8 <__mdiff+0x5c>
 80103de:	4b2e      	ldr	r3, [pc, #184]	; (8010498 <__mdiff+0x10c>)
 80103e0:	4602      	mov	r2, r0
 80103e2:	f240 2145 	movw	r1, #581	; 0x245
 80103e6:	e7e5      	b.n	80103b4 <__mdiff+0x28>
 80103e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80103ec:	6926      	ldr	r6, [r4, #16]
 80103ee:	60c5      	str	r5, [r0, #12]
 80103f0:	f104 0914 	add.w	r9, r4, #20
 80103f4:	f108 0514 	add.w	r5, r8, #20
 80103f8:	f100 0e14 	add.w	lr, r0, #20
 80103fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010404:	f108 0210 	add.w	r2, r8, #16
 8010408:	46f2      	mov	sl, lr
 801040a:	2100      	movs	r1, #0
 801040c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010414:	fa11 f88b 	uxtah	r8, r1, fp
 8010418:	b299      	uxth	r1, r3
 801041a:	0c1b      	lsrs	r3, r3, #16
 801041c:	eba8 0801 	sub.w	r8, r8, r1
 8010420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010424:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010428:	fa1f f888 	uxth.w	r8, r8
 801042c:	1419      	asrs	r1, r3, #16
 801042e:	454e      	cmp	r6, r9
 8010430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010434:	f84a 3b04 	str.w	r3, [sl], #4
 8010438:	d8e8      	bhi.n	801040c <__mdiff+0x80>
 801043a:	1b33      	subs	r3, r6, r4
 801043c:	3b15      	subs	r3, #21
 801043e:	f023 0303 	bic.w	r3, r3, #3
 8010442:	3304      	adds	r3, #4
 8010444:	3415      	adds	r4, #21
 8010446:	42a6      	cmp	r6, r4
 8010448:	bf38      	it	cc
 801044a:	2304      	movcc	r3, #4
 801044c:	441d      	add	r5, r3
 801044e:	4473      	add	r3, lr
 8010450:	469e      	mov	lr, r3
 8010452:	462e      	mov	r6, r5
 8010454:	4566      	cmp	r6, ip
 8010456:	d30e      	bcc.n	8010476 <__mdiff+0xea>
 8010458:	f10c 0203 	add.w	r2, ip, #3
 801045c:	1b52      	subs	r2, r2, r5
 801045e:	f022 0203 	bic.w	r2, r2, #3
 8010462:	3d03      	subs	r5, #3
 8010464:	45ac      	cmp	ip, r5
 8010466:	bf38      	it	cc
 8010468:	2200      	movcc	r2, #0
 801046a:	4413      	add	r3, r2
 801046c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010470:	b17a      	cbz	r2, 8010492 <__mdiff+0x106>
 8010472:	6107      	str	r7, [r0, #16]
 8010474:	e7a4      	b.n	80103c0 <__mdiff+0x34>
 8010476:	f856 8b04 	ldr.w	r8, [r6], #4
 801047a:	fa11 f288 	uxtah	r2, r1, r8
 801047e:	1414      	asrs	r4, r2, #16
 8010480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010484:	b292      	uxth	r2, r2
 8010486:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801048a:	f84e 2b04 	str.w	r2, [lr], #4
 801048e:	1421      	asrs	r1, r4, #16
 8010490:	e7e0      	b.n	8010454 <__mdiff+0xc8>
 8010492:	3f01      	subs	r7, #1
 8010494:	e7ea      	b.n	801046c <__mdiff+0xe0>
 8010496:	bf00      	nop
 8010498:	08011bcc 	.word	0x08011bcc
 801049c:	08011bdd 	.word	0x08011bdd

080104a0 <__d2b>:
 80104a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104a4:	460f      	mov	r7, r1
 80104a6:	2101      	movs	r1, #1
 80104a8:	ec59 8b10 	vmov	r8, r9, d0
 80104ac:	4616      	mov	r6, r2
 80104ae:	f7ff fcd5 	bl	800fe5c <_Balloc>
 80104b2:	4604      	mov	r4, r0
 80104b4:	b930      	cbnz	r0, 80104c4 <__d2b+0x24>
 80104b6:	4602      	mov	r2, r0
 80104b8:	4b24      	ldr	r3, [pc, #144]	; (801054c <__d2b+0xac>)
 80104ba:	4825      	ldr	r0, [pc, #148]	; (8010550 <__d2b+0xb0>)
 80104bc:	f240 310f 	movw	r1, #783	; 0x30f
 80104c0:	f000 fc26 	bl	8010d10 <__assert_func>
 80104c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104cc:	bb2d      	cbnz	r5, 801051a <__d2b+0x7a>
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	f1b8 0300 	subs.w	r3, r8, #0
 80104d4:	d026      	beq.n	8010524 <__d2b+0x84>
 80104d6:	4668      	mov	r0, sp
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	f7ff fd87 	bl	800ffec <__lo0bits>
 80104de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104e2:	b1e8      	cbz	r0, 8010520 <__d2b+0x80>
 80104e4:	f1c0 0320 	rsb	r3, r0, #32
 80104e8:	fa02 f303 	lsl.w	r3, r2, r3
 80104ec:	430b      	orrs	r3, r1
 80104ee:	40c2      	lsrs	r2, r0
 80104f0:	6163      	str	r3, [r4, #20]
 80104f2:	9201      	str	r2, [sp, #4]
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	61a3      	str	r3, [r4, #24]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	bf14      	ite	ne
 80104fc:	2202      	movne	r2, #2
 80104fe:	2201      	moveq	r2, #1
 8010500:	6122      	str	r2, [r4, #16]
 8010502:	b1bd      	cbz	r5, 8010534 <__d2b+0x94>
 8010504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010508:	4405      	add	r5, r0
 801050a:	603d      	str	r5, [r7, #0]
 801050c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010510:	6030      	str	r0, [r6, #0]
 8010512:	4620      	mov	r0, r4
 8010514:	b003      	add	sp, #12
 8010516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801051a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801051e:	e7d6      	b.n	80104ce <__d2b+0x2e>
 8010520:	6161      	str	r1, [r4, #20]
 8010522:	e7e7      	b.n	80104f4 <__d2b+0x54>
 8010524:	a801      	add	r0, sp, #4
 8010526:	f7ff fd61 	bl	800ffec <__lo0bits>
 801052a:	9b01      	ldr	r3, [sp, #4]
 801052c:	6163      	str	r3, [r4, #20]
 801052e:	3020      	adds	r0, #32
 8010530:	2201      	movs	r2, #1
 8010532:	e7e5      	b.n	8010500 <__d2b+0x60>
 8010534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801053c:	6038      	str	r0, [r7, #0]
 801053e:	6918      	ldr	r0, [r3, #16]
 8010540:	f7ff fd34 	bl	800ffac <__hi0bits>
 8010544:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010548:	e7e2      	b.n	8010510 <__d2b+0x70>
 801054a:	bf00      	nop
 801054c:	08011bcc 	.word	0x08011bcc
 8010550:	08011bdd 	.word	0x08011bdd

08010554 <__ssputs_r>:
 8010554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010558:	688e      	ldr	r6, [r1, #8]
 801055a:	461f      	mov	r7, r3
 801055c:	42be      	cmp	r6, r7
 801055e:	680b      	ldr	r3, [r1, #0]
 8010560:	4682      	mov	sl, r0
 8010562:	460c      	mov	r4, r1
 8010564:	4690      	mov	r8, r2
 8010566:	d82c      	bhi.n	80105c2 <__ssputs_r+0x6e>
 8010568:	898a      	ldrh	r2, [r1, #12]
 801056a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801056e:	d026      	beq.n	80105be <__ssputs_r+0x6a>
 8010570:	6965      	ldr	r5, [r4, #20]
 8010572:	6909      	ldr	r1, [r1, #16]
 8010574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010578:	eba3 0901 	sub.w	r9, r3, r1
 801057c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010580:	1c7b      	adds	r3, r7, #1
 8010582:	444b      	add	r3, r9
 8010584:	106d      	asrs	r5, r5, #1
 8010586:	429d      	cmp	r5, r3
 8010588:	bf38      	it	cc
 801058a:	461d      	movcc	r5, r3
 801058c:	0553      	lsls	r3, r2, #21
 801058e:	d527      	bpl.n	80105e0 <__ssputs_r+0x8c>
 8010590:	4629      	mov	r1, r5
 8010592:	f7ff fbd7 	bl	800fd44 <_malloc_r>
 8010596:	4606      	mov	r6, r0
 8010598:	b360      	cbz	r0, 80105f4 <__ssputs_r+0xa0>
 801059a:	6921      	ldr	r1, [r4, #16]
 801059c:	464a      	mov	r2, r9
 801059e:	f7fe fcd4 	bl	800ef4a <memcpy>
 80105a2:	89a3      	ldrh	r3, [r4, #12]
 80105a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105ac:	81a3      	strh	r3, [r4, #12]
 80105ae:	6126      	str	r6, [r4, #16]
 80105b0:	6165      	str	r5, [r4, #20]
 80105b2:	444e      	add	r6, r9
 80105b4:	eba5 0509 	sub.w	r5, r5, r9
 80105b8:	6026      	str	r6, [r4, #0]
 80105ba:	60a5      	str	r5, [r4, #8]
 80105bc:	463e      	mov	r6, r7
 80105be:	42be      	cmp	r6, r7
 80105c0:	d900      	bls.n	80105c4 <__ssputs_r+0x70>
 80105c2:	463e      	mov	r6, r7
 80105c4:	6820      	ldr	r0, [r4, #0]
 80105c6:	4632      	mov	r2, r6
 80105c8:	4641      	mov	r1, r8
 80105ca:	f7fe fc25 	bl	800ee18 <memmove>
 80105ce:	68a3      	ldr	r3, [r4, #8]
 80105d0:	1b9b      	subs	r3, r3, r6
 80105d2:	60a3      	str	r3, [r4, #8]
 80105d4:	6823      	ldr	r3, [r4, #0]
 80105d6:	4433      	add	r3, r6
 80105d8:	6023      	str	r3, [r4, #0]
 80105da:	2000      	movs	r0, #0
 80105dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e0:	462a      	mov	r2, r5
 80105e2:	f000 fbdb 	bl	8010d9c <_realloc_r>
 80105e6:	4606      	mov	r6, r0
 80105e8:	2800      	cmp	r0, #0
 80105ea:	d1e0      	bne.n	80105ae <__ssputs_r+0x5a>
 80105ec:	6921      	ldr	r1, [r4, #16]
 80105ee:	4650      	mov	r0, sl
 80105f0:	f7ff fb34 	bl	800fc5c <_free_r>
 80105f4:	230c      	movs	r3, #12
 80105f6:	f8ca 3000 	str.w	r3, [sl]
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010600:	81a3      	strh	r3, [r4, #12]
 8010602:	f04f 30ff 	mov.w	r0, #4294967295
 8010606:	e7e9      	b.n	80105dc <__ssputs_r+0x88>

08010608 <_svfiprintf_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	4698      	mov	r8, r3
 801060e:	898b      	ldrh	r3, [r1, #12]
 8010610:	061b      	lsls	r3, r3, #24
 8010612:	b09d      	sub	sp, #116	; 0x74
 8010614:	4607      	mov	r7, r0
 8010616:	460d      	mov	r5, r1
 8010618:	4614      	mov	r4, r2
 801061a:	d50e      	bpl.n	801063a <_svfiprintf_r+0x32>
 801061c:	690b      	ldr	r3, [r1, #16]
 801061e:	b963      	cbnz	r3, 801063a <_svfiprintf_r+0x32>
 8010620:	2140      	movs	r1, #64	; 0x40
 8010622:	f7ff fb8f 	bl	800fd44 <_malloc_r>
 8010626:	6028      	str	r0, [r5, #0]
 8010628:	6128      	str	r0, [r5, #16]
 801062a:	b920      	cbnz	r0, 8010636 <_svfiprintf_r+0x2e>
 801062c:	230c      	movs	r3, #12
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	f04f 30ff 	mov.w	r0, #4294967295
 8010634:	e0d0      	b.n	80107d8 <_svfiprintf_r+0x1d0>
 8010636:	2340      	movs	r3, #64	; 0x40
 8010638:	616b      	str	r3, [r5, #20]
 801063a:	2300      	movs	r3, #0
 801063c:	9309      	str	r3, [sp, #36]	; 0x24
 801063e:	2320      	movs	r3, #32
 8010640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010644:	f8cd 800c 	str.w	r8, [sp, #12]
 8010648:	2330      	movs	r3, #48	; 0x30
 801064a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80107f0 <_svfiprintf_r+0x1e8>
 801064e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010652:	f04f 0901 	mov.w	r9, #1
 8010656:	4623      	mov	r3, r4
 8010658:	469a      	mov	sl, r3
 801065a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065e:	b10a      	cbz	r2, 8010664 <_svfiprintf_r+0x5c>
 8010660:	2a25      	cmp	r2, #37	; 0x25
 8010662:	d1f9      	bne.n	8010658 <_svfiprintf_r+0x50>
 8010664:	ebba 0b04 	subs.w	fp, sl, r4
 8010668:	d00b      	beq.n	8010682 <_svfiprintf_r+0x7a>
 801066a:	465b      	mov	r3, fp
 801066c:	4622      	mov	r2, r4
 801066e:	4629      	mov	r1, r5
 8010670:	4638      	mov	r0, r7
 8010672:	f7ff ff6f 	bl	8010554 <__ssputs_r>
 8010676:	3001      	adds	r0, #1
 8010678:	f000 80a9 	beq.w	80107ce <_svfiprintf_r+0x1c6>
 801067c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801067e:	445a      	add	r2, fp
 8010680:	9209      	str	r2, [sp, #36]	; 0x24
 8010682:	f89a 3000 	ldrb.w	r3, [sl]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 80a1 	beq.w	80107ce <_svfiprintf_r+0x1c6>
 801068c:	2300      	movs	r3, #0
 801068e:	f04f 32ff 	mov.w	r2, #4294967295
 8010692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010696:	f10a 0a01 	add.w	sl, sl, #1
 801069a:	9304      	str	r3, [sp, #16]
 801069c:	9307      	str	r3, [sp, #28]
 801069e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106a2:	931a      	str	r3, [sp, #104]	; 0x68
 80106a4:	4654      	mov	r4, sl
 80106a6:	2205      	movs	r2, #5
 80106a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ac:	4850      	ldr	r0, [pc, #320]	; (80107f0 <_svfiprintf_r+0x1e8>)
 80106ae:	f7ef fd8f 	bl	80001d0 <memchr>
 80106b2:	9a04      	ldr	r2, [sp, #16]
 80106b4:	b9d8      	cbnz	r0, 80106ee <_svfiprintf_r+0xe6>
 80106b6:	06d0      	lsls	r0, r2, #27
 80106b8:	bf44      	itt	mi
 80106ba:	2320      	movmi	r3, #32
 80106bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c0:	0711      	lsls	r1, r2, #28
 80106c2:	bf44      	itt	mi
 80106c4:	232b      	movmi	r3, #43	; 0x2b
 80106c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106ca:	f89a 3000 	ldrb.w	r3, [sl]
 80106ce:	2b2a      	cmp	r3, #42	; 0x2a
 80106d0:	d015      	beq.n	80106fe <_svfiprintf_r+0xf6>
 80106d2:	9a07      	ldr	r2, [sp, #28]
 80106d4:	4654      	mov	r4, sl
 80106d6:	2000      	movs	r0, #0
 80106d8:	f04f 0c0a 	mov.w	ip, #10
 80106dc:	4621      	mov	r1, r4
 80106de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106e2:	3b30      	subs	r3, #48	; 0x30
 80106e4:	2b09      	cmp	r3, #9
 80106e6:	d94d      	bls.n	8010784 <_svfiprintf_r+0x17c>
 80106e8:	b1b0      	cbz	r0, 8010718 <_svfiprintf_r+0x110>
 80106ea:	9207      	str	r2, [sp, #28]
 80106ec:	e014      	b.n	8010718 <_svfiprintf_r+0x110>
 80106ee:	eba0 0308 	sub.w	r3, r0, r8
 80106f2:	fa09 f303 	lsl.w	r3, r9, r3
 80106f6:	4313      	orrs	r3, r2
 80106f8:	9304      	str	r3, [sp, #16]
 80106fa:	46a2      	mov	sl, r4
 80106fc:	e7d2      	b.n	80106a4 <_svfiprintf_r+0x9c>
 80106fe:	9b03      	ldr	r3, [sp, #12]
 8010700:	1d19      	adds	r1, r3, #4
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	9103      	str	r1, [sp, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	bfbb      	ittet	lt
 801070a:	425b      	neglt	r3, r3
 801070c:	f042 0202 	orrlt.w	r2, r2, #2
 8010710:	9307      	strge	r3, [sp, #28]
 8010712:	9307      	strlt	r3, [sp, #28]
 8010714:	bfb8      	it	lt
 8010716:	9204      	strlt	r2, [sp, #16]
 8010718:	7823      	ldrb	r3, [r4, #0]
 801071a:	2b2e      	cmp	r3, #46	; 0x2e
 801071c:	d10c      	bne.n	8010738 <_svfiprintf_r+0x130>
 801071e:	7863      	ldrb	r3, [r4, #1]
 8010720:	2b2a      	cmp	r3, #42	; 0x2a
 8010722:	d134      	bne.n	801078e <_svfiprintf_r+0x186>
 8010724:	9b03      	ldr	r3, [sp, #12]
 8010726:	1d1a      	adds	r2, r3, #4
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	9203      	str	r2, [sp, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	bfb8      	it	lt
 8010730:	f04f 33ff 	movlt.w	r3, #4294967295
 8010734:	3402      	adds	r4, #2
 8010736:	9305      	str	r3, [sp, #20]
 8010738:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010800 <_svfiprintf_r+0x1f8>
 801073c:	7821      	ldrb	r1, [r4, #0]
 801073e:	2203      	movs	r2, #3
 8010740:	4650      	mov	r0, sl
 8010742:	f7ef fd45 	bl	80001d0 <memchr>
 8010746:	b138      	cbz	r0, 8010758 <_svfiprintf_r+0x150>
 8010748:	9b04      	ldr	r3, [sp, #16]
 801074a:	eba0 000a 	sub.w	r0, r0, sl
 801074e:	2240      	movs	r2, #64	; 0x40
 8010750:	4082      	lsls	r2, r0
 8010752:	4313      	orrs	r3, r2
 8010754:	3401      	adds	r4, #1
 8010756:	9304      	str	r3, [sp, #16]
 8010758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801075c:	4825      	ldr	r0, [pc, #148]	; (80107f4 <_svfiprintf_r+0x1ec>)
 801075e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010762:	2206      	movs	r2, #6
 8010764:	f7ef fd34 	bl	80001d0 <memchr>
 8010768:	2800      	cmp	r0, #0
 801076a:	d038      	beq.n	80107de <_svfiprintf_r+0x1d6>
 801076c:	4b22      	ldr	r3, [pc, #136]	; (80107f8 <_svfiprintf_r+0x1f0>)
 801076e:	bb1b      	cbnz	r3, 80107b8 <_svfiprintf_r+0x1b0>
 8010770:	9b03      	ldr	r3, [sp, #12]
 8010772:	3307      	adds	r3, #7
 8010774:	f023 0307 	bic.w	r3, r3, #7
 8010778:	3308      	adds	r3, #8
 801077a:	9303      	str	r3, [sp, #12]
 801077c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801077e:	4433      	add	r3, r6
 8010780:	9309      	str	r3, [sp, #36]	; 0x24
 8010782:	e768      	b.n	8010656 <_svfiprintf_r+0x4e>
 8010784:	fb0c 3202 	mla	r2, ip, r2, r3
 8010788:	460c      	mov	r4, r1
 801078a:	2001      	movs	r0, #1
 801078c:	e7a6      	b.n	80106dc <_svfiprintf_r+0xd4>
 801078e:	2300      	movs	r3, #0
 8010790:	3401      	adds	r4, #1
 8010792:	9305      	str	r3, [sp, #20]
 8010794:	4619      	mov	r1, r3
 8010796:	f04f 0c0a 	mov.w	ip, #10
 801079a:	4620      	mov	r0, r4
 801079c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107a0:	3a30      	subs	r2, #48	; 0x30
 80107a2:	2a09      	cmp	r2, #9
 80107a4:	d903      	bls.n	80107ae <_svfiprintf_r+0x1a6>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d0c6      	beq.n	8010738 <_svfiprintf_r+0x130>
 80107aa:	9105      	str	r1, [sp, #20]
 80107ac:	e7c4      	b.n	8010738 <_svfiprintf_r+0x130>
 80107ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80107b2:	4604      	mov	r4, r0
 80107b4:	2301      	movs	r3, #1
 80107b6:	e7f0      	b.n	801079a <_svfiprintf_r+0x192>
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	462a      	mov	r2, r5
 80107be:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <_svfiprintf_r+0x1f4>)
 80107c0:	a904      	add	r1, sp, #16
 80107c2:	4638      	mov	r0, r7
 80107c4:	f7fd fd3a 	bl	800e23c <_printf_float>
 80107c8:	1c42      	adds	r2, r0, #1
 80107ca:	4606      	mov	r6, r0
 80107cc:	d1d6      	bne.n	801077c <_svfiprintf_r+0x174>
 80107ce:	89ab      	ldrh	r3, [r5, #12]
 80107d0:	065b      	lsls	r3, r3, #25
 80107d2:	f53f af2d 	bmi.w	8010630 <_svfiprintf_r+0x28>
 80107d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107d8:	b01d      	add	sp, #116	; 0x74
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107de:	ab03      	add	r3, sp, #12
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	462a      	mov	r2, r5
 80107e4:	4b05      	ldr	r3, [pc, #20]	; (80107fc <_svfiprintf_r+0x1f4>)
 80107e6:	a904      	add	r1, sp, #16
 80107e8:	4638      	mov	r0, r7
 80107ea:	f7fd ffcb 	bl	800e784 <_printf_i>
 80107ee:	e7eb      	b.n	80107c8 <_svfiprintf_r+0x1c0>
 80107f0:	08011d34 	.word	0x08011d34
 80107f4:	08011d3e 	.word	0x08011d3e
 80107f8:	0800e23d 	.word	0x0800e23d
 80107fc:	08010555 	.word	0x08010555
 8010800:	08011d3a 	.word	0x08011d3a

08010804 <__sfputc_r>:
 8010804:	6893      	ldr	r3, [r2, #8]
 8010806:	3b01      	subs	r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	b410      	push	{r4}
 801080c:	6093      	str	r3, [r2, #8]
 801080e:	da08      	bge.n	8010822 <__sfputc_r+0x1e>
 8010810:	6994      	ldr	r4, [r2, #24]
 8010812:	42a3      	cmp	r3, r4
 8010814:	db01      	blt.n	801081a <__sfputc_r+0x16>
 8010816:	290a      	cmp	r1, #10
 8010818:	d103      	bne.n	8010822 <__sfputc_r+0x1e>
 801081a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801081e:	f7fe ba66 	b.w	800ecee <__swbuf_r>
 8010822:	6813      	ldr	r3, [r2, #0]
 8010824:	1c58      	adds	r0, r3, #1
 8010826:	6010      	str	r0, [r2, #0]
 8010828:	7019      	strb	r1, [r3, #0]
 801082a:	4608      	mov	r0, r1
 801082c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010830:	4770      	bx	lr

08010832 <__sfputs_r>:
 8010832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010834:	4606      	mov	r6, r0
 8010836:	460f      	mov	r7, r1
 8010838:	4614      	mov	r4, r2
 801083a:	18d5      	adds	r5, r2, r3
 801083c:	42ac      	cmp	r4, r5
 801083e:	d101      	bne.n	8010844 <__sfputs_r+0x12>
 8010840:	2000      	movs	r0, #0
 8010842:	e007      	b.n	8010854 <__sfputs_r+0x22>
 8010844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010848:	463a      	mov	r2, r7
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff ffda 	bl	8010804 <__sfputc_r>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d1f3      	bne.n	801083c <__sfputs_r+0xa>
 8010854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010858 <_vfiprintf_r>:
 8010858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	460d      	mov	r5, r1
 801085e:	b09d      	sub	sp, #116	; 0x74
 8010860:	4614      	mov	r4, r2
 8010862:	4698      	mov	r8, r3
 8010864:	4606      	mov	r6, r0
 8010866:	b118      	cbz	r0, 8010870 <_vfiprintf_r+0x18>
 8010868:	6a03      	ldr	r3, [r0, #32]
 801086a:	b90b      	cbnz	r3, 8010870 <_vfiprintf_r+0x18>
 801086c:	f7fe f938 	bl	800eae0 <__sinit>
 8010870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010872:	07d9      	lsls	r1, r3, #31
 8010874:	d405      	bmi.n	8010882 <_vfiprintf_r+0x2a>
 8010876:	89ab      	ldrh	r3, [r5, #12]
 8010878:	059a      	lsls	r2, r3, #22
 801087a:	d402      	bmi.n	8010882 <_vfiprintf_r+0x2a>
 801087c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801087e:	f7fe fb62 	bl	800ef46 <__retarget_lock_acquire_recursive>
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	071b      	lsls	r3, r3, #28
 8010886:	d501      	bpl.n	801088c <_vfiprintf_r+0x34>
 8010888:	692b      	ldr	r3, [r5, #16]
 801088a:	b99b      	cbnz	r3, 80108b4 <_vfiprintf_r+0x5c>
 801088c:	4629      	mov	r1, r5
 801088e:	4630      	mov	r0, r6
 8010890:	f7fe fa6a 	bl	800ed68 <__swsetup_r>
 8010894:	b170      	cbz	r0, 80108b4 <_vfiprintf_r+0x5c>
 8010896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010898:	07dc      	lsls	r4, r3, #31
 801089a:	d504      	bpl.n	80108a6 <_vfiprintf_r+0x4e>
 801089c:	f04f 30ff 	mov.w	r0, #4294967295
 80108a0:	b01d      	add	sp, #116	; 0x74
 80108a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a6:	89ab      	ldrh	r3, [r5, #12]
 80108a8:	0598      	lsls	r0, r3, #22
 80108aa:	d4f7      	bmi.n	801089c <_vfiprintf_r+0x44>
 80108ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108ae:	f7fe fb4b 	bl	800ef48 <__retarget_lock_release_recursive>
 80108b2:	e7f3      	b.n	801089c <_vfiprintf_r+0x44>
 80108b4:	2300      	movs	r3, #0
 80108b6:	9309      	str	r3, [sp, #36]	; 0x24
 80108b8:	2320      	movs	r3, #32
 80108ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108be:	f8cd 800c 	str.w	r8, [sp, #12]
 80108c2:	2330      	movs	r3, #48	; 0x30
 80108c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010a78 <_vfiprintf_r+0x220>
 80108c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108cc:	f04f 0901 	mov.w	r9, #1
 80108d0:	4623      	mov	r3, r4
 80108d2:	469a      	mov	sl, r3
 80108d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108d8:	b10a      	cbz	r2, 80108de <_vfiprintf_r+0x86>
 80108da:	2a25      	cmp	r2, #37	; 0x25
 80108dc:	d1f9      	bne.n	80108d2 <_vfiprintf_r+0x7a>
 80108de:	ebba 0b04 	subs.w	fp, sl, r4
 80108e2:	d00b      	beq.n	80108fc <_vfiprintf_r+0xa4>
 80108e4:	465b      	mov	r3, fp
 80108e6:	4622      	mov	r2, r4
 80108e8:	4629      	mov	r1, r5
 80108ea:	4630      	mov	r0, r6
 80108ec:	f7ff ffa1 	bl	8010832 <__sfputs_r>
 80108f0:	3001      	adds	r0, #1
 80108f2:	f000 80a9 	beq.w	8010a48 <_vfiprintf_r+0x1f0>
 80108f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108f8:	445a      	add	r2, fp
 80108fa:	9209      	str	r2, [sp, #36]	; 0x24
 80108fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010900:	2b00      	cmp	r3, #0
 8010902:	f000 80a1 	beq.w	8010a48 <_vfiprintf_r+0x1f0>
 8010906:	2300      	movs	r3, #0
 8010908:	f04f 32ff 	mov.w	r2, #4294967295
 801090c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010910:	f10a 0a01 	add.w	sl, sl, #1
 8010914:	9304      	str	r3, [sp, #16]
 8010916:	9307      	str	r3, [sp, #28]
 8010918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801091c:	931a      	str	r3, [sp, #104]	; 0x68
 801091e:	4654      	mov	r4, sl
 8010920:	2205      	movs	r2, #5
 8010922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010926:	4854      	ldr	r0, [pc, #336]	; (8010a78 <_vfiprintf_r+0x220>)
 8010928:	f7ef fc52 	bl	80001d0 <memchr>
 801092c:	9a04      	ldr	r2, [sp, #16]
 801092e:	b9d8      	cbnz	r0, 8010968 <_vfiprintf_r+0x110>
 8010930:	06d1      	lsls	r1, r2, #27
 8010932:	bf44      	itt	mi
 8010934:	2320      	movmi	r3, #32
 8010936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801093a:	0713      	lsls	r3, r2, #28
 801093c:	bf44      	itt	mi
 801093e:	232b      	movmi	r3, #43	; 0x2b
 8010940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010944:	f89a 3000 	ldrb.w	r3, [sl]
 8010948:	2b2a      	cmp	r3, #42	; 0x2a
 801094a:	d015      	beq.n	8010978 <_vfiprintf_r+0x120>
 801094c:	9a07      	ldr	r2, [sp, #28]
 801094e:	4654      	mov	r4, sl
 8010950:	2000      	movs	r0, #0
 8010952:	f04f 0c0a 	mov.w	ip, #10
 8010956:	4621      	mov	r1, r4
 8010958:	f811 3b01 	ldrb.w	r3, [r1], #1
 801095c:	3b30      	subs	r3, #48	; 0x30
 801095e:	2b09      	cmp	r3, #9
 8010960:	d94d      	bls.n	80109fe <_vfiprintf_r+0x1a6>
 8010962:	b1b0      	cbz	r0, 8010992 <_vfiprintf_r+0x13a>
 8010964:	9207      	str	r2, [sp, #28]
 8010966:	e014      	b.n	8010992 <_vfiprintf_r+0x13a>
 8010968:	eba0 0308 	sub.w	r3, r0, r8
 801096c:	fa09 f303 	lsl.w	r3, r9, r3
 8010970:	4313      	orrs	r3, r2
 8010972:	9304      	str	r3, [sp, #16]
 8010974:	46a2      	mov	sl, r4
 8010976:	e7d2      	b.n	801091e <_vfiprintf_r+0xc6>
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	1d19      	adds	r1, r3, #4
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	9103      	str	r1, [sp, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	bfbb      	ittet	lt
 8010984:	425b      	neglt	r3, r3
 8010986:	f042 0202 	orrlt.w	r2, r2, #2
 801098a:	9307      	strge	r3, [sp, #28]
 801098c:	9307      	strlt	r3, [sp, #28]
 801098e:	bfb8      	it	lt
 8010990:	9204      	strlt	r2, [sp, #16]
 8010992:	7823      	ldrb	r3, [r4, #0]
 8010994:	2b2e      	cmp	r3, #46	; 0x2e
 8010996:	d10c      	bne.n	80109b2 <_vfiprintf_r+0x15a>
 8010998:	7863      	ldrb	r3, [r4, #1]
 801099a:	2b2a      	cmp	r3, #42	; 0x2a
 801099c:	d134      	bne.n	8010a08 <_vfiprintf_r+0x1b0>
 801099e:	9b03      	ldr	r3, [sp, #12]
 80109a0:	1d1a      	adds	r2, r3, #4
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	9203      	str	r2, [sp, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	bfb8      	it	lt
 80109aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80109ae:	3402      	adds	r4, #2
 80109b0:	9305      	str	r3, [sp, #20]
 80109b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010a88 <_vfiprintf_r+0x230>
 80109b6:	7821      	ldrb	r1, [r4, #0]
 80109b8:	2203      	movs	r2, #3
 80109ba:	4650      	mov	r0, sl
 80109bc:	f7ef fc08 	bl	80001d0 <memchr>
 80109c0:	b138      	cbz	r0, 80109d2 <_vfiprintf_r+0x17a>
 80109c2:	9b04      	ldr	r3, [sp, #16]
 80109c4:	eba0 000a 	sub.w	r0, r0, sl
 80109c8:	2240      	movs	r2, #64	; 0x40
 80109ca:	4082      	lsls	r2, r0
 80109cc:	4313      	orrs	r3, r2
 80109ce:	3401      	adds	r4, #1
 80109d0:	9304      	str	r3, [sp, #16]
 80109d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d6:	4829      	ldr	r0, [pc, #164]	; (8010a7c <_vfiprintf_r+0x224>)
 80109d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109dc:	2206      	movs	r2, #6
 80109de:	f7ef fbf7 	bl	80001d0 <memchr>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d03f      	beq.n	8010a66 <_vfiprintf_r+0x20e>
 80109e6:	4b26      	ldr	r3, [pc, #152]	; (8010a80 <_vfiprintf_r+0x228>)
 80109e8:	bb1b      	cbnz	r3, 8010a32 <_vfiprintf_r+0x1da>
 80109ea:	9b03      	ldr	r3, [sp, #12]
 80109ec:	3307      	adds	r3, #7
 80109ee:	f023 0307 	bic.w	r3, r3, #7
 80109f2:	3308      	adds	r3, #8
 80109f4:	9303      	str	r3, [sp, #12]
 80109f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f8:	443b      	add	r3, r7
 80109fa:	9309      	str	r3, [sp, #36]	; 0x24
 80109fc:	e768      	b.n	80108d0 <_vfiprintf_r+0x78>
 80109fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a02:	460c      	mov	r4, r1
 8010a04:	2001      	movs	r0, #1
 8010a06:	e7a6      	b.n	8010956 <_vfiprintf_r+0xfe>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	3401      	adds	r4, #1
 8010a0c:	9305      	str	r3, [sp, #20]
 8010a0e:	4619      	mov	r1, r3
 8010a10:	f04f 0c0a 	mov.w	ip, #10
 8010a14:	4620      	mov	r0, r4
 8010a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a1a:	3a30      	subs	r2, #48	; 0x30
 8010a1c:	2a09      	cmp	r2, #9
 8010a1e:	d903      	bls.n	8010a28 <_vfiprintf_r+0x1d0>
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0c6      	beq.n	80109b2 <_vfiprintf_r+0x15a>
 8010a24:	9105      	str	r1, [sp, #20]
 8010a26:	e7c4      	b.n	80109b2 <_vfiprintf_r+0x15a>
 8010a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e7f0      	b.n	8010a14 <_vfiprintf_r+0x1bc>
 8010a32:	ab03      	add	r3, sp, #12
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	462a      	mov	r2, r5
 8010a38:	4b12      	ldr	r3, [pc, #72]	; (8010a84 <_vfiprintf_r+0x22c>)
 8010a3a:	a904      	add	r1, sp, #16
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7fd fbfd 	bl	800e23c <_printf_float>
 8010a42:	4607      	mov	r7, r0
 8010a44:	1c78      	adds	r0, r7, #1
 8010a46:	d1d6      	bne.n	80109f6 <_vfiprintf_r+0x19e>
 8010a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a4a:	07d9      	lsls	r1, r3, #31
 8010a4c:	d405      	bmi.n	8010a5a <_vfiprintf_r+0x202>
 8010a4e:	89ab      	ldrh	r3, [r5, #12]
 8010a50:	059a      	lsls	r2, r3, #22
 8010a52:	d402      	bmi.n	8010a5a <_vfiprintf_r+0x202>
 8010a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a56:	f7fe fa77 	bl	800ef48 <__retarget_lock_release_recursive>
 8010a5a:	89ab      	ldrh	r3, [r5, #12]
 8010a5c:	065b      	lsls	r3, r3, #25
 8010a5e:	f53f af1d 	bmi.w	801089c <_vfiprintf_r+0x44>
 8010a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a64:	e71c      	b.n	80108a0 <_vfiprintf_r+0x48>
 8010a66:	ab03      	add	r3, sp, #12
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	462a      	mov	r2, r5
 8010a6c:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <_vfiprintf_r+0x22c>)
 8010a6e:	a904      	add	r1, sp, #16
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7fd fe87 	bl	800e784 <_printf_i>
 8010a76:	e7e4      	b.n	8010a42 <_vfiprintf_r+0x1ea>
 8010a78:	08011d34 	.word	0x08011d34
 8010a7c:	08011d3e 	.word	0x08011d3e
 8010a80:	0800e23d 	.word	0x0800e23d
 8010a84:	08010833 	.word	0x08010833
 8010a88:	08011d3a 	.word	0x08011d3a

08010a8c <__sflush_r>:
 8010a8c:	898a      	ldrh	r2, [r1, #12]
 8010a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a92:	4605      	mov	r5, r0
 8010a94:	0710      	lsls	r0, r2, #28
 8010a96:	460c      	mov	r4, r1
 8010a98:	d458      	bmi.n	8010b4c <__sflush_r+0xc0>
 8010a9a:	684b      	ldr	r3, [r1, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	dc05      	bgt.n	8010aac <__sflush_r+0x20>
 8010aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	dc02      	bgt.n	8010aac <__sflush_r+0x20>
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010aae:	2e00      	cmp	r6, #0
 8010ab0:	d0f9      	beq.n	8010aa6 <__sflush_r+0x1a>
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ab8:	682f      	ldr	r7, [r5, #0]
 8010aba:	6a21      	ldr	r1, [r4, #32]
 8010abc:	602b      	str	r3, [r5, #0]
 8010abe:	d032      	beq.n	8010b26 <__sflush_r+0x9a>
 8010ac0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	075a      	lsls	r2, r3, #29
 8010ac6:	d505      	bpl.n	8010ad4 <__sflush_r+0x48>
 8010ac8:	6863      	ldr	r3, [r4, #4]
 8010aca:	1ac0      	subs	r0, r0, r3
 8010acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ace:	b10b      	cbz	r3, 8010ad4 <__sflush_r+0x48>
 8010ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ad2:	1ac0      	subs	r0, r0, r3
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ada:	6a21      	ldr	r1, [r4, #32]
 8010adc:	4628      	mov	r0, r5
 8010ade:	47b0      	blx	r6
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	89a3      	ldrh	r3, [r4, #12]
 8010ae4:	d106      	bne.n	8010af4 <__sflush_r+0x68>
 8010ae6:	6829      	ldr	r1, [r5, #0]
 8010ae8:	291d      	cmp	r1, #29
 8010aea:	d82b      	bhi.n	8010b44 <__sflush_r+0xb8>
 8010aec:	4a29      	ldr	r2, [pc, #164]	; (8010b94 <__sflush_r+0x108>)
 8010aee:	410a      	asrs	r2, r1
 8010af0:	07d6      	lsls	r6, r2, #31
 8010af2:	d427      	bmi.n	8010b44 <__sflush_r+0xb8>
 8010af4:	2200      	movs	r2, #0
 8010af6:	6062      	str	r2, [r4, #4]
 8010af8:	04d9      	lsls	r1, r3, #19
 8010afa:	6922      	ldr	r2, [r4, #16]
 8010afc:	6022      	str	r2, [r4, #0]
 8010afe:	d504      	bpl.n	8010b0a <__sflush_r+0x7e>
 8010b00:	1c42      	adds	r2, r0, #1
 8010b02:	d101      	bne.n	8010b08 <__sflush_r+0x7c>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	b903      	cbnz	r3, 8010b0a <__sflush_r+0x7e>
 8010b08:	6560      	str	r0, [r4, #84]	; 0x54
 8010b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b0c:	602f      	str	r7, [r5, #0]
 8010b0e:	2900      	cmp	r1, #0
 8010b10:	d0c9      	beq.n	8010aa6 <__sflush_r+0x1a>
 8010b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b16:	4299      	cmp	r1, r3
 8010b18:	d002      	beq.n	8010b20 <__sflush_r+0x94>
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f7ff f89e 	bl	800fc5c <_free_r>
 8010b20:	2000      	movs	r0, #0
 8010b22:	6360      	str	r0, [r4, #52]	; 0x34
 8010b24:	e7c0      	b.n	8010aa8 <__sflush_r+0x1c>
 8010b26:	2301      	movs	r3, #1
 8010b28:	4628      	mov	r0, r5
 8010b2a:	47b0      	blx	r6
 8010b2c:	1c41      	adds	r1, r0, #1
 8010b2e:	d1c8      	bne.n	8010ac2 <__sflush_r+0x36>
 8010b30:	682b      	ldr	r3, [r5, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0c5      	beq.n	8010ac2 <__sflush_r+0x36>
 8010b36:	2b1d      	cmp	r3, #29
 8010b38:	d001      	beq.n	8010b3e <__sflush_r+0xb2>
 8010b3a:	2b16      	cmp	r3, #22
 8010b3c:	d101      	bne.n	8010b42 <__sflush_r+0xb6>
 8010b3e:	602f      	str	r7, [r5, #0]
 8010b40:	e7b1      	b.n	8010aa6 <__sflush_r+0x1a>
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b48:	81a3      	strh	r3, [r4, #12]
 8010b4a:	e7ad      	b.n	8010aa8 <__sflush_r+0x1c>
 8010b4c:	690f      	ldr	r7, [r1, #16]
 8010b4e:	2f00      	cmp	r7, #0
 8010b50:	d0a9      	beq.n	8010aa6 <__sflush_r+0x1a>
 8010b52:	0793      	lsls	r3, r2, #30
 8010b54:	680e      	ldr	r6, [r1, #0]
 8010b56:	bf08      	it	eq
 8010b58:	694b      	ldreq	r3, [r1, #20]
 8010b5a:	600f      	str	r7, [r1, #0]
 8010b5c:	bf18      	it	ne
 8010b5e:	2300      	movne	r3, #0
 8010b60:	eba6 0807 	sub.w	r8, r6, r7
 8010b64:	608b      	str	r3, [r1, #8]
 8010b66:	f1b8 0f00 	cmp.w	r8, #0
 8010b6a:	dd9c      	ble.n	8010aa6 <__sflush_r+0x1a>
 8010b6c:	6a21      	ldr	r1, [r4, #32]
 8010b6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b70:	4643      	mov	r3, r8
 8010b72:	463a      	mov	r2, r7
 8010b74:	4628      	mov	r0, r5
 8010b76:	47b0      	blx	r6
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	dc06      	bgt.n	8010b8a <__sflush_r+0xfe>
 8010b7c:	89a3      	ldrh	r3, [r4, #12]
 8010b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b82:	81a3      	strh	r3, [r4, #12]
 8010b84:	f04f 30ff 	mov.w	r0, #4294967295
 8010b88:	e78e      	b.n	8010aa8 <__sflush_r+0x1c>
 8010b8a:	4407      	add	r7, r0
 8010b8c:	eba8 0800 	sub.w	r8, r8, r0
 8010b90:	e7e9      	b.n	8010b66 <__sflush_r+0xda>
 8010b92:	bf00      	nop
 8010b94:	dfbffffe 	.word	0xdfbffffe

08010b98 <_fflush_r>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	690b      	ldr	r3, [r1, #16]
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	b913      	cbnz	r3, 8010ba8 <_fflush_r+0x10>
 8010ba2:	2500      	movs	r5, #0
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	bd38      	pop	{r3, r4, r5, pc}
 8010ba8:	b118      	cbz	r0, 8010bb2 <_fflush_r+0x1a>
 8010baa:	6a03      	ldr	r3, [r0, #32]
 8010bac:	b90b      	cbnz	r3, 8010bb2 <_fflush_r+0x1a>
 8010bae:	f7fd ff97 	bl	800eae0 <__sinit>
 8010bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d0f3      	beq.n	8010ba2 <_fflush_r+0xa>
 8010bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bbc:	07d0      	lsls	r0, r2, #31
 8010bbe:	d404      	bmi.n	8010bca <_fflush_r+0x32>
 8010bc0:	0599      	lsls	r1, r3, #22
 8010bc2:	d402      	bmi.n	8010bca <_fflush_r+0x32>
 8010bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bc6:	f7fe f9be 	bl	800ef46 <__retarget_lock_acquire_recursive>
 8010bca:	4628      	mov	r0, r5
 8010bcc:	4621      	mov	r1, r4
 8010bce:	f7ff ff5d 	bl	8010a8c <__sflush_r>
 8010bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bd4:	07da      	lsls	r2, r3, #31
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	d4e4      	bmi.n	8010ba4 <_fflush_r+0xc>
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	059b      	lsls	r3, r3, #22
 8010bde:	d4e1      	bmi.n	8010ba4 <_fflush_r+0xc>
 8010be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010be2:	f7fe f9b1 	bl	800ef48 <__retarget_lock_release_recursive>
 8010be6:	e7dd      	b.n	8010ba4 <_fflush_r+0xc>

08010be8 <__swhatbuf_r>:
 8010be8:	b570      	push	{r4, r5, r6, lr}
 8010bea:	460c      	mov	r4, r1
 8010bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf0:	2900      	cmp	r1, #0
 8010bf2:	b096      	sub	sp, #88	; 0x58
 8010bf4:	4615      	mov	r5, r2
 8010bf6:	461e      	mov	r6, r3
 8010bf8:	da0d      	bge.n	8010c16 <__swhatbuf_r+0x2e>
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c00:	f04f 0100 	mov.w	r1, #0
 8010c04:	bf0c      	ite	eq
 8010c06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c0a:	2340      	movne	r3, #64	; 0x40
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	6031      	str	r1, [r6, #0]
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	b016      	add	sp, #88	; 0x58
 8010c14:	bd70      	pop	{r4, r5, r6, pc}
 8010c16:	466a      	mov	r2, sp
 8010c18:	f000 f848 	bl	8010cac <_fstat_r>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	dbec      	blt.n	8010bfa <__swhatbuf_r+0x12>
 8010c20:	9901      	ldr	r1, [sp, #4]
 8010c22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010c26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010c2a:	4259      	negs	r1, r3
 8010c2c:	4159      	adcs	r1, r3
 8010c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c32:	e7eb      	b.n	8010c0c <__swhatbuf_r+0x24>

08010c34 <__smakebuf_r>:
 8010c34:	898b      	ldrh	r3, [r1, #12]
 8010c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c38:	079d      	lsls	r5, r3, #30
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	460c      	mov	r4, r1
 8010c3e:	d507      	bpl.n	8010c50 <__smakebuf_r+0x1c>
 8010c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	6123      	str	r3, [r4, #16]
 8010c48:	2301      	movs	r3, #1
 8010c4a:	6163      	str	r3, [r4, #20]
 8010c4c:	b002      	add	sp, #8
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
 8010c50:	ab01      	add	r3, sp, #4
 8010c52:	466a      	mov	r2, sp
 8010c54:	f7ff ffc8 	bl	8010be8 <__swhatbuf_r>
 8010c58:	9900      	ldr	r1, [sp, #0]
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f7ff f871 	bl	800fd44 <_malloc_r>
 8010c62:	b948      	cbnz	r0, 8010c78 <__smakebuf_r+0x44>
 8010c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c68:	059a      	lsls	r2, r3, #22
 8010c6a:	d4ef      	bmi.n	8010c4c <__smakebuf_r+0x18>
 8010c6c:	f023 0303 	bic.w	r3, r3, #3
 8010c70:	f043 0302 	orr.w	r3, r3, #2
 8010c74:	81a3      	strh	r3, [r4, #12]
 8010c76:	e7e3      	b.n	8010c40 <__smakebuf_r+0xc>
 8010c78:	89a3      	ldrh	r3, [r4, #12]
 8010c7a:	6020      	str	r0, [r4, #0]
 8010c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c80:	81a3      	strh	r3, [r4, #12]
 8010c82:	9b00      	ldr	r3, [sp, #0]
 8010c84:	6163      	str	r3, [r4, #20]
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	6120      	str	r0, [r4, #16]
 8010c8a:	b15b      	cbz	r3, 8010ca4 <__smakebuf_r+0x70>
 8010c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c90:	4630      	mov	r0, r6
 8010c92:	f000 f81d 	bl	8010cd0 <_isatty_r>
 8010c96:	b128      	cbz	r0, 8010ca4 <__smakebuf_r+0x70>
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	f023 0303 	bic.w	r3, r3, #3
 8010c9e:	f043 0301 	orr.w	r3, r3, #1
 8010ca2:	81a3      	strh	r3, [r4, #12]
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	431d      	orrs	r5, r3
 8010ca8:	81a5      	strh	r5, [r4, #12]
 8010caa:	e7cf      	b.n	8010c4c <__smakebuf_r+0x18>

08010cac <_fstat_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4d07      	ldr	r5, [pc, #28]	; (8010ccc <_fstat_r+0x20>)
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	4608      	mov	r0, r1
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	602b      	str	r3, [r5, #0]
 8010cba:	f7f3 fa5c 	bl	8004176 <_fstat>
 8010cbe:	1c43      	adds	r3, r0, #1
 8010cc0:	d102      	bne.n	8010cc8 <_fstat_r+0x1c>
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	b103      	cbz	r3, 8010cc8 <_fstat_r+0x1c>
 8010cc6:	6023      	str	r3, [r4, #0]
 8010cc8:	bd38      	pop	{r3, r4, r5, pc}
 8010cca:	bf00      	nop
 8010ccc:	20004d18 	.word	0x20004d18

08010cd0 <_isatty_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d06      	ldr	r5, [pc, #24]	; (8010cec <_isatty_r+0x1c>)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f3 fa5b 	bl	8004196 <_isatty>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_isatty_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_isatty_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	20004d18 	.word	0x20004d18

08010cf0 <_sbrk_r>:
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	4d06      	ldr	r5, [pc, #24]	; (8010d0c <_sbrk_r+0x1c>)
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	602b      	str	r3, [r5, #0]
 8010cfc:	f7f3 fa64 	bl	80041c8 <_sbrk>
 8010d00:	1c43      	adds	r3, r0, #1
 8010d02:	d102      	bne.n	8010d0a <_sbrk_r+0x1a>
 8010d04:	682b      	ldr	r3, [r5, #0]
 8010d06:	b103      	cbz	r3, 8010d0a <_sbrk_r+0x1a>
 8010d08:	6023      	str	r3, [r4, #0]
 8010d0a:	bd38      	pop	{r3, r4, r5, pc}
 8010d0c:	20004d18 	.word	0x20004d18

08010d10 <__assert_func>:
 8010d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d12:	4614      	mov	r4, r2
 8010d14:	461a      	mov	r2, r3
 8010d16:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <__assert_func+0x2c>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	68d8      	ldr	r0, [r3, #12]
 8010d1e:	b14c      	cbz	r4, 8010d34 <__assert_func+0x24>
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <__assert_func+0x30>)
 8010d22:	9100      	str	r1, [sp, #0]
 8010d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d28:	4906      	ldr	r1, [pc, #24]	; (8010d44 <__assert_func+0x34>)
 8010d2a:	462b      	mov	r3, r5
 8010d2c:	f000 f872 	bl	8010e14 <fiprintf>
 8010d30:	f000 f882 	bl	8010e38 <abort>
 8010d34:	4b04      	ldr	r3, [pc, #16]	; (8010d48 <__assert_func+0x38>)
 8010d36:	461c      	mov	r4, r3
 8010d38:	e7f3      	b.n	8010d22 <__assert_func+0x12>
 8010d3a:	bf00      	nop
 8010d3c:	20000070 	.word	0x20000070
 8010d40:	08011d4f 	.word	0x08011d4f
 8010d44:	08011d5c 	.word	0x08011d5c
 8010d48:	08011d8a 	.word	0x08011d8a

08010d4c <_calloc_r>:
 8010d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d4e:	fba1 2402 	umull	r2, r4, r1, r2
 8010d52:	b94c      	cbnz	r4, 8010d68 <_calloc_r+0x1c>
 8010d54:	4611      	mov	r1, r2
 8010d56:	9201      	str	r2, [sp, #4]
 8010d58:	f7fe fff4 	bl	800fd44 <_malloc_r>
 8010d5c:	9a01      	ldr	r2, [sp, #4]
 8010d5e:	4605      	mov	r5, r0
 8010d60:	b930      	cbnz	r0, 8010d70 <_calloc_r+0x24>
 8010d62:	4628      	mov	r0, r5
 8010d64:	b003      	add	sp, #12
 8010d66:	bd30      	pop	{r4, r5, pc}
 8010d68:	220c      	movs	r2, #12
 8010d6a:	6002      	str	r2, [r0, #0]
 8010d6c:	2500      	movs	r5, #0
 8010d6e:	e7f8      	b.n	8010d62 <_calloc_r+0x16>
 8010d70:	4621      	mov	r1, r4
 8010d72:	f7fe f86b 	bl	800ee4c <memset>
 8010d76:	e7f4      	b.n	8010d62 <_calloc_r+0x16>

08010d78 <__ascii_mbtowc>:
 8010d78:	b082      	sub	sp, #8
 8010d7a:	b901      	cbnz	r1, 8010d7e <__ascii_mbtowc+0x6>
 8010d7c:	a901      	add	r1, sp, #4
 8010d7e:	b142      	cbz	r2, 8010d92 <__ascii_mbtowc+0x1a>
 8010d80:	b14b      	cbz	r3, 8010d96 <__ascii_mbtowc+0x1e>
 8010d82:	7813      	ldrb	r3, [r2, #0]
 8010d84:	600b      	str	r3, [r1, #0]
 8010d86:	7812      	ldrb	r2, [r2, #0]
 8010d88:	1e10      	subs	r0, r2, #0
 8010d8a:	bf18      	it	ne
 8010d8c:	2001      	movne	r0, #1
 8010d8e:	b002      	add	sp, #8
 8010d90:	4770      	bx	lr
 8010d92:	4610      	mov	r0, r2
 8010d94:	e7fb      	b.n	8010d8e <__ascii_mbtowc+0x16>
 8010d96:	f06f 0001 	mvn.w	r0, #1
 8010d9a:	e7f8      	b.n	8010d8e <__ascii_mbtowc+0x16>

08010d9c <_realloc_r>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	4680      	mov	r8, r0
 8010da2:	4614      	mov	r4, r2
 8010da4:	460e      	mov	r6, r1
 8010da6:	b921      	cbnz	r1, 8010db2 <_realloc_r+0x16>
 8010da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	4611      	mov	r1, r2
 8010dae:	f7fe bfc9 	b.w	800fd44 <_malloc_r>
 8010db2:	b92a      	cbnz	r2, 8010dc0 <_realloc_r+0x24>
 8010db4:	f7fe ff52 	bl	800fc5c <_free_r>
 8010db8:	4625      	mov	r5, r4
 8010dba:	4628      	mov	r0, r5
 8010dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc0:	f000 f841 	bl	8010e46 <_malloc_usable_size_r>
 8010dc4:	4284      	cmp	r4, r0
 8010dc6:	4607      	mov	r7, r0
 8010dc8:	d802      	bhi.n	8010dd0 <_realloc_r+0x34>
 8010dca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dce:	d812      	bhi.n	8010df6 <_realloc_r+0x5a>
 8010dd0:	4621      	mov	r1, r4
 8010dd2:	4640      	mov	r0, r8
 8010dd4:	f7fe ffb6 	bl	800fd44 <_malloc_r>
 8010dd8:	4605      	mov	r5, r0
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0ed      	beq.n	8010dba <_realloc_r+0x1e>
 8010dde:	42bc      	cmp	r4, r7
 8010de0:	4622      	mov	r2, r4
 8010de2:	4631      	mov	r1, r6
 8010de4:	bf28      	it	cs
 8010de6:	463a      	movcs	r2, r7
 8010de8:	f7fe f8af 	bl	800ef4a <memcpy>
 8010dec:	4631      	mov	r1, r6
 8010dee:	4640      	mov	r0, r8
 8010df0:	f7fe ff34 	bl	800fc5c <_free_r>
 8010df4:	e7e1      	b.n	8010dba <_realloc_r+0x1e>
 8010df6:	4635      	mov	r5, r6
 8010df8:	e7df      	b.n	8010dba <_realloc_r+0x1e>

08010dfa <__ascii_wctomb>:
 8010dfa:	b149      	cbz	r1, 8010e10 <__ascii_wctomb+0x16>
 8010dfc:	2aff      	cmp	r2, #255	; 0xff
 8010dfe:	bf85      	ittet	hi
 8010e00:	238a      	movhi	r3, #138	; 0x8a
 8010e02:	6003      	strhi	r3, [r0, #0]
 8010e04:	700a      	strbls	r2, [r1, #0]
 8010e06:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e0a:	bf98      	it	ls
 8010e0c:	2001      	movls	r0, #1
 8010e0e:	4770      	bx	lr
 8010e10:	4608      	mov	r0, r1
 8010e12:	4770      	bx	lr

08010e14 <fiprintf>:
 8010e14:	b40e      	push	{r1, r2, r3}
 8010e16:	b503      	push	{r0, r1, lr}
 8010e18:	4601      	mov	r1, r0
 8010e1a:	ab03      	add	r3, sp, #12
 8010e1c:	4805      	ldr	r0, [pc, #20]	; (8010e34 <fiprintf+0x20>)
 8010e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e22:	6800      	ldr	r0, [r0, #0]
 8010e24:	9301      	str	r3, [sp, #4]
 8010e26:	f7ff fd17 	bl	8010858 <_vfiprintf_r>
 8010e2a:	b002      	add	sp, #8
 8010e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e30:	b003      	add	sp, #12
 8010e32:	4770      	bx	lr
 8010e34:	20000070 	.word	0x20000070

08010e38 <abort>:
 8010e38:	b508      	push	{r3, lr}
 8010e3a:	2006      	movs	r0, #6
 8010e3c:	f000 f834 	bl	8010ea8 <raise>
 8010e40:	2001      	movs	r0, #1
 8010e42:	f7f3 f965 	bl	8004110 <_exit>

08010e46 <_malloc_usable_size_r>:
 8010e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e4a:	1f18      	subs	r0, r3, #4
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	bfbc      	itt	lt
 8010e50:	580b      	ldrlt	r3, [r1, r0]
 8010e52:	18c0      	addlt	r0, r0, r3
 8010e54:	4770      	bx	lr

08010e56 <_raise_r>:
 8010e56:	291f      	cmp	r1, #31
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	460d      	mov	r5, r1
 8010e5e:	d904      	bls.n	8010e6a <_raise_r+0x14>
 8010e60:	2316      	movs	r3, #22
 8010e62:	6003      	str	r3, [r0, #0]
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	bd38      	pop	{r3, r4, r5, pc}
 8010e6a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010e6c:	b112      	cbz	r2, 8010e74 <_raise_r+0x1e>
 8010e6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e72:	b94b      	cbnz	r3, 8010e88 <_raise_r+0x32>
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 f831 	bl	8010edc <_getpid_r>
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e84:	f000 b818 	b.w	8010eb8 <_kill_r>
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d00a      	beq.n	8010ea2 <_raise_r+0x4c>
 8010e8c:	1c59      	adds	r1, r3, #1
 8010e8e:	d103      	bne.n	8010e98 <_raise_r+0x42>
 8010e90:	2316      	movs	r3, #22
 8010e92:	6003      	str	r3, [r0, #0]
 8010e94:	2001      	movs	r0, #1
 8010e96:	e7e7      	b.n	8010e68 <_raise_r+0x12>
 8010e98:	2400      	movs	r4, #0
 8010e9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	4798      	blx	r3
 8010ea2:	2000      	movs	r0, #0
 8010ea4:	e7e0      	b.n	8010e68 <_raise_r+0x12>
	...

08010ea8 <raise>:
 8010ea8:	4b02      	ldr	r3, [pc, #8]	; (8010eb4 <raise+0xc>)
 8010eaa:	4601      	mov	r1, r0
 8010eac:	6818      	ldr	r0, [r3, #0]
 8010eae:	f7ff bfd2 	b.w	8010e56 <_raise_r>
 8010eb2:	bf00      	nop
 8010eb4:	20000070 	.word	0x20000070

08010eb8 <_kill_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d07      	ldr	r5, [pc, #28]	; (8010ed8 <_kill_r+0x20>)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	602b      	str	r3, [r5, #0]
 8010ec6:	f7f3 f913 	bl	80040f0 <_kill>
 8010eca:	1c43      	adds	r3, r0, #1
 8010ecc:	d102      	bne.n	8010ed4 <_kill_r+0x1c>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	b103      	cbz	r3, 8010ed4 <_kill_r+0x1c>
 8010ed2:	6023      	str	r3, [r4, #0]
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20004d18 	.word	0x20004d18

08010edc <_getpid_r>:
 8010edc:	f7f3 b900 	b.w	80040e0 <_getpid>

08010ee0 <_init>:
 8010ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee2:	bf00      	nop
 8010ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee6:	bc08      	pop	{r3}
 8010ee8:	469e      	mov	lr, r3
 8010eea:	4770      	bx	lr

08010eec <_fini>:
 8010eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eee:	bf00      	nop
 8010ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ef2:	bc08      	pop	{r3}
 8010ef4:	469e      	mov	lr, r3
 8010ef6:	4770      	bx	lr
