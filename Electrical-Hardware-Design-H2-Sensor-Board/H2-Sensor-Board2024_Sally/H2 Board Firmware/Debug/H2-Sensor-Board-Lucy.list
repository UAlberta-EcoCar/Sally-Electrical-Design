
H2-Sensor-Board-Lucy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d8  080125c0  080125c0  000225c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013898  08013898  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08013898  08013898  00023898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138a0  080138a0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138a0  080138a0  000238a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138a4  080138a4  000238a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080138a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cec  20000200  08013aa8  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eec  08013aa8  00033eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   000287a7  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a36  00000000  00000000  00058a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c8  00000000  00000000  0005e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a18  00000000  00000000  00060618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028661  00000000  00000000  00062030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002967e  00000000  00000000  0008a691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee34d  00000000  00000000  000b3d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a3d4  00000000  00000000  001a205c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001ac430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080125a8 	.word	0x080125a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080125a8 	.word	0x080125a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <MQ8_GetPercentage>:
//to the original curve.
//data format:{ x, y, slope}; point1: (lg200, lg8.5), point2: (lg10000, lg0.03)

float Ro = 10;                  //Ro is initialized to 10 kilo ohms

int MQ8_GetPercentage(float rs_ro_ratio, float *pcurve) {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ff2:	6038      	str	r0, [r7, #0]
	return (pow(10, (((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0])));
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	ec43 2b10 	vmov	d0, r2, r3
 8001002:	f010 f995 	bl	8011330 <log>
 8001006:	ec55 4b10 	vmov	r4, r5, d0
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f933 	bl	8000288 <__aeabi_dsub>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4614      	mov	r4, r2
 8001028:	461d      	mov	r5, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3308      	adds	r3, #8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa89 	bl	8000548 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4620      	mov	r0, r4
 800103c:	4629      	mov	r1, r5
 800103e:	f7ff fc05 	bl	800084c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa7a 	bl	8000548 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff f916 	bl	800028c <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b17 	vmov	d7, r2, r3
 8001068:	eeb0 1a47 	vmov.f32	s2, s14
 800106c:	eef0 1a67 	vmov.f32	s3, s15
 8001070:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001090 <MQ8_GetPercentage+0xa8>
 8001074:	f010 f99a 	bl	80113ac <pow>
 8001078:	ec53 2b10 	vmov	r2, r3, d0
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd6a 	bl	8000b58 <__aeabi_d2iz>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40240000 	.word	0x40240000

08001098 <MQ8_GetH2Percentage>:

int MQ8_GetH2Percentage(float rs_ro_ratio) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	return MQ8_GetPercentage(rs_ro_ratio, H2Curve);
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MQ8_GetH2Percentage+0x20>)
 80010a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a8:	f7ff ff9e 	bl	8000fe8 <MQ8_GetPercentage>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <MQ8_ResistanceCalculation>:

float MQ8_ResistanceCalculation(float real_adc) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	ed87 0a01 	vstr	s0, [r7, #4]
//	return ((float) (RL_VALUE * real_adc));
	// 4095 is adc resolution origitan was 1023
	return (((float) RL_VALUE * (4095 - real_adc) / real_adc));
 80010c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010f4 <MQ8_ResistanceCalculation+0x38>
 80010ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010da:	edd7 7a01 	vldr	s15, [r7, #4]
 80010de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	457ff000 	.word	0x457ff000

080010f8 <MQ8_Compensate>:

float MQ8_Compensate(float real_adc) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	float rs = 0;
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e011      	b.n	8001132 <MQ8_Compensate+0x3a>
		rs += MQ8_ResistanceCalculation(real_adc);
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	f7ff ffd3 	bl	80010bc <MQ8_ResistanceCalculation>
 8001116:	eeb0 7a40 	vmov.f32	s14, s0
 800111a:	edd7 7a02 	vldr	s15, [r7, #8]
 800111e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001122:	edc7 7a02 	vstr	s15, [r7, #8]
		osDelay(READ_SAMPLE_INTERVAL);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f009 fda8 	bl	800ac7c <osDelay>
	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b09      	cmp	r3, #9
 8001136:	ddea      	ble.n	800110e <MQ8_Compensate+0x16>

	}

	rs = rs / READ_SAMPLE_TIMES;
 8001138:	ed97 7a02 	vldr	s14, [r7, #8]
 800113c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	edc7 7a02 	vstr	s15, [r7, #8]

	return rs;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_ADC1_Init+0xbc>)
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <MX_ADC1_Init+0xc0>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_ADC1_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_ADC1_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_ADC1_Init+0xbc>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_ADC1_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_ADC1_Init+0xbc>)
 800118e:	2204      	movs	r2, #4
 8001190:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC1_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_ADC1_Init+0xbc>)
 800119a:	2201      	movs	r2, #1
 800119c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011d0:	f003 fd10 	bl	8004bf4 <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011da:	f001 f9ab 	bl	8002534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0xc4>)
 80011e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e2:	2306      	movs	r3, #6
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ea:	237f      	movs	r3, #127	; 0x7f
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ee:	2304      	movs	r3, #4
 80011f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_ADC1_Init+0xbc>)
 80011fc:	f003 fee4 	bl	8004fc8 <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001206:	f001 f995 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000021c 	.word	0x2000021c
 8001218:	50040000 	.word	0x50040000
 800121c:	21800100 	.word	0x21800100

08001220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09e      	sub	sp, #120	; 0x78
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2254      	movs	r2, #84	; 0x54
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00e f82b 	bl	800f29c <memset>
  if(adcHandle->Instance==ADC1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <HAL_ADC_MspInit+0x118>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d16e      	bne.n	800132e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001254:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800125c:	2303      	movs	r3, #3
 800125e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001264:	2308      	movs	r3, #8
 8001266:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001268:	2307      	movs	r3, #7
 800126a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fc62 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800128a:	f001 f953 	bl	8002534 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_ADC_MspInit+0x11c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <HAL_ADC_MspInit+0x11c>)
 8001294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_ADC_MspInit+0x11c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_ADC_MspInit+0x11c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <HAL_ADC_MspInit+0x11c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_ADC_MspInit+0x11c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = H2_SENSE_ADC_Pin;
 80012be:	2308      	movs	r3, #8
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(H2_SENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f005 fc64 	bl	8006ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_ADC_MspInit+0x124>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_ADC_MspInit+0x120>)
 80012f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_ADC_MspInit+0x120>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_ADC_MspInit+0x120>)
 8001308:	2220      	movs	r2, #32
 800130a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_ADC_MspInit+0x120>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_ADC_MspInit+0x120>)
 8001314:	f005 fa4c 	bl	80067b0 <HAL_DMA_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800131e:	f001 f909 	bl	8002534 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_ADC_MspInit+0x120>)
 8001326:	64da      	str	r2, [r3, #76]	; 0x4c
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_ADC_MspInit+0x120>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	3778      	adds	r7, #120	; 0x78
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	50040000 	.word	0x50040000
 800133c:	40021000 	.word	0x40021000
 8001340:	20000280 	.word	0x20000280
 8001344:	40020008 	.word	0x40020008

08001348 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_CAN1_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_CAN1_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_CAN1_Init+0x64>)
 8001354:	2205      	movs	r2, #5
 8001356:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_CAN1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_CAN1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_CAN1_Init+0x64>)
 8001366:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800136a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_CAN1_Init+0x64>)
 800136e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001372:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_CAN1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_CAN1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_CAN1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_CAN1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_CAN1_Init+0x64>)
 800139a:	f004 fb0f 	bl	80059bc <HAL_CAN_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013a4:	f001 f8c6 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002c8 	.word	0x200002c8
 80013b0:	40006400 	.word	0x40006400

080013b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_CAN_MspInit+0x90>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d131      	bne.n	800143a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_CAN_MspInit+0x94>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001406:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001418:	2309      	movs	r3, #9
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f005 fbbb 	bl	8006ba0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2014      	movs	r0, #20
 8001430:	f005 f994 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001434:	2014      	movs	r0, #20
 8001436:	f005 f9ad 	bl	8006794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40006400 	.word	0x40006400
 8001448:	40021000 	.word	0x40021000

0800144c <CAN_Initialize>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CAN_Initialize() {
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
	//MX_CAN1_Init();
	/* USER CODE BEGIN 2 */
	CAN_FilterTypeDef high_priority_filter;
	high_priority_filter.FilterIdHigh = 0x100 << 5;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
	high_priority_filter.FilterMaskIdHigh = 0x100 << 5;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
	high_priority_filter.FilterIdLow = 0x0000;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
	high_priority_filter.FilterMaskIdLow = 0x0000;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
	high_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	; 0x38
	high_priority_filter.FilterBank = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
	high_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800146e:	2300      	movs	r3, #0
 8001470:	643b      	str	r3, [r7, #64]	; 0x40
	high_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001472:	2301      	movs	r3, #1
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
	high_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_CAN_ConfigFilter(&hcan1, &high_priority_filter) != HAL_OK) {
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	4619      	mov	r1, r3
 8001480:	482d      	ldr	r0, [pc, #180]	; (8001538 <CAN_Initialize+0xec>)
 8001482:	f004 fb96 	bl	8005bb2 <HAL_CAN_ConfigFilter>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <CAN_Initialize+0x44>
		/* Filter configuration Error */
		Error_Handler();
 800148c:	f001 f852 	bl	8002534 <Error_Handler>
	}

	CAN_FilterTypeDef low_priority_filter;
	low_priority_filter.FilterIdHigh = 0x200 << 5;
 8001490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001494:	603b      	str	r3, [r7, #0]
	low_priority_filter.FilterMaskIdHigh = 0x200 << 5;
 8001496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800149a:	60bb      	str	r3, [r7, #8]
	low_priority_filter.FilterIdLow = 0x0000;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
	low_priority_filter.FilterMaskIdLow = 0x0000;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
	low_priority_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
	low_priority_filter.FilterBank = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
	low_priority_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
	low_priority_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
	low_priority_filter.FilterActivation = CAN_FILTER_ENABLE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80014b8:	481f      	ldr	r0, [pc, #124]	; (8001538 <CAN_Initialize+0xec>)
 80014ba:	f004 fc44 	bl	8005d46 <HAL_CAN_Start>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <CAN_Initialize+0x82>
		printf("[!SYSTEM ERROR]CAN Initialization Error At CAN Start");
 80014c4:	481d      	ldr	r0, [pc, #116]	; (800153c <CAN_Initialize+0xf0>)
 80014c6:	f00d fd69 	bl	800ef9c <iprintf>
		Error_Handler();
 80014ca:	f001 f833 	bl	8002534 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 80014ce:	2102      	movs	r1, #2
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <CAN_Initialize+0xec>)
 80014d2:	f004 fe5e 	bl	8006192 <HAL_CAN_ActivateNotification>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <CAN_Initialize+0x9a>
			!= HAL_OK) {
		printf(
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <CAN_Initialize+0xf4>)
 80014de:	f00d fd5d 	bl	800ef9c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 0");
		Error_Handler();
 80014e2:	f001 f827 	bl	8002534 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)
 80014e6:	2110      	movs	r1, #16
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <CAN_Initialize+0xec>)
 80014ea:	f004 fe52 	bl	8006192 <HAL_CAN_ActivateNotification>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <CAN_Initialize+0xb2>
			!= HAL_OK) {
		printf(
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <CAN_Initialize+0xf8>)
 80014f6:	f00d fd51 	bl	800ef9c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT MESSAGE PENDING RX FIFO 1");
		Error_Handler();
 80014fa:	f001 f81b 	bl	8002534 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 80014fe:	2104      	movs	r1, #4
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <CAN_Initialize+0xec>)
 8001502:	f004 fe46 	bl	8006192 <HAL_CAN_ActivateNotification>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <CAN_Initialize+0xca>
		printf(
 800150c:	480e      	ldr	r0, [pc, #56]	; (8001548 <CAN_Initialize+0xfc>)
 800150e:	f00d fd45 	bl	800ef9c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 0 FULL");
		Error_Handler();
 8001512:	f001 f80f 	bl	8002534 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_FULL) != HAL_OK) {
 8001516:	2120      	movs	r1, #32
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <CAN_Initialize+0xec>)
 800151a:	f004 fe3a 	bl	8006192 <HAL_CAN_ActivateNotification>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <CAN_Initialize+0xe2>
		printf(
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <CAN_Initialize+0x100>)
 8001526:	f00d fd39 	bl	800ef9c <iprintf>
				"[!SYSTEM ERROR]CAN Initialization Error At CAN INTURRUPT RX FIFO 1 FULL");
		Error_Handler();
 800152a:	f001 f803 	bl	8002534 <Error_Handler>
//	}
//	TxHeader.RTR = CAN_RTR_DATA;
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.DLC = 8;
//	TxHeader.TransmitGlobalTime = DISABLE;
}
 800152e:	bf00      	nop
 8001530:	3750      	adds	r7, #80	; 0x50
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200002c8 	.word	0x200002c8
 800153c:	080125c0 	.word	0x080125c0
 8001540:	080125f8 	.word	0x080125f8
 8001544:	0801264c 	.word	0x0801264c
 8001548:	080126a0 	.word	0x080126a0
 800154c:	080126e8 	.word	0x080126e8

08001550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_DMA_Init+0x38>)
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <MX_DMA_Init+0x38>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6493      	str	r3, [r2, #72]	; 0x48
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_DMA_Init+0x38>)
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	200b      	movs	r0, #11
 8001574:	f005 f8f2 	bl	800675c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001578:	200b      	movs	r0, #11
 800157a:	f005 f90b 	bl	8006794 <HAL_NVIC_EnableIRQ>

}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <CAN_Transmit_Intrim>:
}

/**
 * Send 8 bytes at a time, with standard id size.
 */
int CAN_Transmit_Intrim(IntrimPacket _to_send) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	TxHeader.StdId = _to_send.id;
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	461a      	mov	r2, r3
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <CAN_Transmit_Intrim+0x5c>)
 800159e:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = _to_send.rtr_type;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <CAN_Transmit_Intrim+0x5c>)
 80015a6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = _to_send.dlc;
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <CAN_Transmit_Intrim+0x5c>)
 80015ae:	611a      	str	r2, [r3, #16]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, _to_send.data, &TxMailbox)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	1d1a      	adds	r2, r3, #4
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <CAN_Transmit_Intrim+0x60>)
 80015b6:	490c      	ldr	r1, [pc, #48]	; (80015e8 <CAN_Transmit_Intrim+0x5c>)
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <CAN_Transmit_Intrim+0x64>)
 80015ba:	f004 fc08 	bl	8005dce <HAL_CAN_AddTxMessage>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00c      	beq.n	80015de <CAN_Transmit_Intrim+0x52>
			!= HAL_OK) {
		printf("Can transmission error on packet id: %hu\r\n", _to_send.id);
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <CAN_Transmit_Intrim+0x68>)
 80015ca:	f00d fce7 	bl	800ef9c <iprintf>
		printf(
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <CAN_Transmit_Intrim+0x6c>)
 80015d0:	f00d fd4a 	bl	800f068 <puts>
				"[!CAN TRANSMIT FUNCTION]: TX MAILBOX FULL (CHECK CAN BUS CONNECTION)!\r\n");
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <CAN_Transmit_Intrim+0x70>)
 80015da:	f005 fc4b 	bl	8006e74 <HAL_GPIO_WritePin>
		//Error_Handler();
	}

	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002f0 	.word	0x200002f0
 80015ec:	20000308 	.word	0x20000308
 80015f0:	200002c8 	.word	0x200002c8
 80015f4:	080127fc 	.word	0x080127fc
 80015f8:	08012828 	.word	0x08012828
 80015fc:	48000400 	.word	0x48000400

08001600 <user_i2c_read>:

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af02      	add	r7, sp, #8
 8001606:	603a      	str	r2, [r7, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	460b      	mov	r3, r1
 8001610:	71bb      	strb	r3, [r7, #6]
 8001612:	4613      	mov	r3, r2
 8001614:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	b29b      	uxth	r3, r3
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	b299      	uxth	r1, r3
 800161e:	1dba      	adds	r2, r7, #6
 8001620:	230a      	movs	r3, #10
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <user_i2c_read+0x6c>)
 8001628:	f005 fcfe 	bl	8007028 <HAL_I2C_Master_Transmit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <user_i2c_read+0x38>
		return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e014      	b.n	8001662 <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	b21b      	sxth	r3, r3
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	b21b      	sxth	r3, r3
 8001644:	b299      	uxth	r1, r3
 8001646:	88bb      	ldrh	r3, [r7, #4]
 8001648:	220a      	movs	r2, #10
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <user_i2c_read+0x6c>)
 8001650:	f005 fdde 	bl	8007210 <HAL_I2C_Master_Receive>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e000      	b.n	8001662 <user_i2c_read+0x62>

	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20001f18 	.word	0x20001f18

08001670 <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f009 faff 	bl	800ac7c <osDelay>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8001688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800168c:	b087      	sub	sp, #28
 800168e:	af02      	add	r7, sp, #8
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	460b      	mov	r3, r1
 800169a:	71bb      	strb	r3, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
 80016a0:	466b      	mov	r3, sp
 80016a2:	461e      	mov	r6, r3
	uint8_t buf[len + 1];
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	1c59      	adds	r1, r3, #1
 80016a8:	1e4b      	subs	r3, r1, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	460a      	mov	r2, r1
 80016ae:	2300      	movs	r3, #0
 80016b0:	4690      	mov	r8, r2
 80016b2:	4699      	mov	r9, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c8:	460a      	mov	r2, r1
 80016ca:	2300      	movs	r3, #0
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	00eb      	lsls	r3, r5, #3
 80016da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016de:	00e2      	lsls	r2, r4, #3
 80016e0:	460b      	mov	r3, r1
 80016e2:	3307      	adds	r3, #7
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	ebad 0d03 	sub.w	sp, sp, r3
 80016ec:	ab02      	add	r3, sp, #8
 80016ee:	3300      	adds	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	79ba      	ldrb	r2, [r7, #6]
 80016f6:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	88ba      	ldrh	r2, [r7, #4]
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f00d fe4a 	bl	800f39a <memcpy>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8001706:	e002      	b.n	800170e <user_i2c_write+0x86>
	HAL_MAX_DELAY) != HAL_OK)
		printf("I2C Error\r\n");
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <user_i2c_write+0xb8>)
 800170a:	f00d fcad 	bl	800f068 <puts>
	while (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	b29b      	uxth	r3, r3
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	b299      	uxth	r1, r3
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	3301      	adds	r3, #1
 800171a:	b29b      	uxth	r3, r3
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <user_i2c_write+0xbc>)
 8001726:	f005 fc7f 	bl	8007028 <HAL_I2C_Master_Transmit>
 800172a:	4603      	mov	r3, r0
	HAL_MAX_DELAY) != HAL_OK)
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1eb      	bne.n	8001708 <user_i2c_write+0x80>
//	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
//	HAL_MAX_DELAY) != HAL_OK)
//		return -1;
//
//	free(buf);
	return 0;
 8001730:	2300      	movs	r3, #0
 8001732:	46b5      	mov	sp, r6
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	bf00      	nop
 8001740:	08012870 	.word	0x08012870
 8001744:	20001f18 	.word	0x20001f18

08001748 <HAL_CAN_RxFifo0MsgPendingCallback>:

IntrimPacket packet; // Declared as a temporary variable outside ISR as this is being allocated and re allocated,
// therefore to save ISR time declaring it out side. Also volatile since only used in ISR.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, packet.data)
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001754:	2100      	movs	r1, #0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f004 fc09 	bl	8005f6e <HAL_CAN_GetRxMessage>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
			!= HAL_OK) {
		Error_Handler();
 8001762:	f000 fee7 	bl	8002534 <Error_Handler>
	}
	// Just check if there is atleast 1 spot open
	// If we dont and call get message we will loose that message since it wont fit and the ISR will exit.
	if (osMessageQueueGetSpace(CAN_HighPro_QHandle) >= 1) {
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f009 fdbc 	bl	800b2e8 <osMessageQueueGetSpace>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d013      	beq.n	800179e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>

		printf("[CAN RX Inturrupt] Got message\r\n");
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001778:	f00d fc76 	bl	800f068 <puts>
		// Mask the packet ID out.
		packet.id = RxHeader.StdId;	// & 0x0FF;
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001784:	801a      	strh	r2, [r3, #0]
		packet.rtr_type = RxHeader.RTR;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800178e:	70da      	strb	r2, [r3, #3]
		//memcpy(packet.data, RxData, 8); // this is always 8 bytes therefore there
		// is pretty much no added iteration time. The compiler will optimize the loop away.

		osMessageQueuePut(CAN_HighPro_QHandle, &packet, 0, 0);
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	2200      	movs	r2, #0
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800179a:	f009 fce7 	bl	800b16c <osMessageQueuePut>
	}

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001f00 	.word	0x20001f00
 80017ac:	2000030c 	.word	0x2000030c
 80017b0:	20001d90 	.word	0x20001d90
 80017b4:	0801287c 	.word	0x0801287c
 80017b8:	20001efc 	.word	0x20001efc

080017bc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox0CompleteCallback] Sent\r\n");
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80017da:	f00d fc45 	bl	800f068 <puts>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0801289c 	.word	0x0801289c

080017ec <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox1CompleteCallback] Sent\r\n");
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80017f6:	f00d fc37 	bl	800f068 <puts>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	080128c0 	.word	0x080128c0

08001808 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	printf("[!TxMailbox2CompleteCallback] Sent\r\n");
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8001812:	f00d fc29 	bl	800f068 <puts>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	080128e4 	.word	0x080128e4

08001824 <HAL_GPIO_EXTI_Callback>:
IntrimPacket empack;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == H2_TARE_Pin) {
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	2b10      	cmp	r3, #16
 8001832:	d11e      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0x4e>
		static int debaunce_tick = 0;
		if (!debaunce_tick) {
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_GPIO_EXTI_Callback+0x58>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_GPIO_EXTI_Callback+0x2c>
			debaunce_tick += HAL_GetTick();
 800183c:	f002 ffe2 	bl	8004804 <HAL_GetTick>
 8001840:	4603      	mov	r3, r0
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_GPIO_EXTI_Callback+0x58>)
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4413      	add	r3, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_GPIO_EXTI_Callback+0x58>)
 800184c:	601a      	str	r2, [r3, #0]
				//system_state = H2_SYSTEM_STATE_ALARM_TRIPPED;
				CAN_Transmit_Intrim(empack);
			}
		}
	}
}
 800184e:	e010      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x4e>
			if ((debaunce_tick - HAL_GetTick() > 50)) {
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_GPIO_EXTI_Callback+0x58>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461c      	mov	r4, r3
 8001856:	f002 ffd5 	bl	8004804 <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	1ae3      	subs	r3, r4, r3
 800185e:	2b32      	cmp	r3, #50	; 0x32
 8001860:	d907      	bls.n	8001872 <HAL_GPIO_EXTI_Callback+0x4e>
				system_state = H2_SYSTEM_STATE_ALARM_TRIPPED;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001864:	2205      	movs	r2, #5
 8001866:	701a      	strb	r2, [r3, #0]
				CAN_Transmit_Intrim(empack);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_GPIO_EXTI_Callback+0x60>)
 800186a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800186e:	f7ff fe8d 	bl	800158c <CAN_Transmit_Intrim>
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	bf00      	nop
 800187c:	20001f14 	.word	0x20001f14
 8001880:	200007a8 	.word	0x200007a8
 8001884:	20001f08 	.word	0x20001f08

08001888 <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	empack.rtr_type = CAN_RTR_DATA;
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_FREERTOS_Init+0xac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	70da      	strb	r2, [r3, #3]
	empack.id = RESPOND_EMERGENCY_H2_ALERT;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <MX_FREERTOS_Init+0xac>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	801a      	strh	r2, [r3, #0]
	empack.dlc = 1;
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_FREERTOS_Init+0xac>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	709a      	strb	r2, [r3, #2]
	empack.data[0] = 1;
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_FREERTOS_Init+0xac>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	711a      	strb	r2, [r3, #4]
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of I2CBusControl */
  I2CBusControlHandle = osMutexNew(&I2CBusControl_attributes);
 80018bc:	4824      	ldr	r0, [pc, #144]	; (8001950 <MX_FREERTOS_Init+0xb0>)
 80018be:	f009 f9f8 	bl	800acb2 <osMutexNew>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_FREERTOS_Init+0xb4>)
 80018c6:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of calibrateSensor */
  calibrateSensorHandle = osSemaphoreNew(1, 0, &calibrateSensor_attributes);
 80018c8:	4a23      	ldr	r2, [pc, #140]	; (8001958 <MX_FREERTOS_Init+0xb8>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	2001      	movs	r0, #1
 80018ce:	f009 fafe 	bl	800aece <osSemaphoreNew>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a21      	ldr	r2, [pc, #132]	; (800195c <MX_FREERTOS_Init+0xbc>)
 80018d6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN_HighPro_Q */
  CAN_HighPro_QHandle = osMessageQueueNew (16, sizeof(IntrimPacket), &CAN_HighPro_Q_attributes);
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <MX_FREERTOS_Init+0xc0>)
 80018da:	210c      	movs	r1, #12
 80018dc:	2010      	movs	r0, #16
 80018de:	f009 fbd1 	bl	800b084 <osMessageQueueNew>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <MX_FREERTOS_Init+0xc4>)
 80018e6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <MX_FREERTOS_Init+0xc8>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	481f      	ldr	r0, [pc, #124]	; (800196c <MX_FREERTOS_Init+0xcc>)
 80018ee:	f009 f933 	bl	800ab58 <osThreadNew>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <MX_FREERTOS_Init+0xd0>)
 80018f6:	6013      	str	r3, [r2, #0]

  /* creation of SensorReadT */
  SensorReadTHandle = osThreadNew(startSensorReadThread, NULL, &SensorReadT_attributes);
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <MX_FREERTOS_Init+0xd4>)
 80018fa:	2100      	movs	r1, #0
 80018fc:	481e      	ldr	r0, [pc, #120]	; (8001978 <MX_FREERTOS_Init+0xd8>)
 80018fe:	f009 f92b 	bl	800ab58 <osThreadNew>
 8001902:	4603      	mov	r3, r0
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <MX_FREERTOS_Init+0xdc>)
 8001906:	6013      	str	r3, [r2, #0]

  /* creation of AuxilaryPrintT */
  AuxilaryPrintTHandle = osThreadNew(startAuxilaryPrintThread, NULL, &AuxilaryPrintT_attributes);
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <MX_FREERTOS_Init+0xe0>)
 800190a:	2100      	movs	r1, #0
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <MX_FREERTOS_Init+0xe4>)
 800190e:	f009 f923 	bl	800ab58 <osThreadNew>
 8001912:	4603      	mov	r3, r0
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <MX_FREERTOS_Init+0xe8>)
 8001916:	6013      	str	r3, [r2, #0]

  /* creation of SensorTransmitT */
  SensorTransmitTHandle = osThreadNew(startSensorTransmitThread, NULL, &SensorTransmitT_attributes);
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <MX_FREERTOS_Init+0xec>)
 800191a:	2100      	movs	r1, #0
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <MX_FREERTOS_Init+0xf0>)
 800191e:	f009 f91b 	bl	800ab58 <osThreadNew>
 8001922:	4603      	mov	r3, r0
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <MX_FREERTOS_Init+0xf4>)
 8001926:	6013      	str	r3, [r2, #0]

  /* creation of LeakWatchdogT */
  LeakWatchdogTHandle = osThreadNew(startLeakWatchdogThread, NULL, &LeakWatchdogT_attributes);
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <MX_FREERTOS_Init+0xf8>)
 800192a:	2100      	movs	r1, #0
 800192c:	481b      	ldr	r0, [pc, #108]	; (800199c <MX_FREERTOS_Init+0xfc>)
 800192e:	f009 f913 	bl	800ab58 <osThreadNew>
 8001932:	4603      	mov	r3, r0
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <MX_FREERTOS_Init+0x100>)
 8001936:	6013      	str	r3, [r2, #0]

  /* creation of SensorCalibrate */
  SensorCalibrateHandle = osThreadNew(startSensorCalibrateThread, NULL, &SensorCalibrate_attributes);
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <MX_FREERTOS_Init+0x104>)
 800193a:	2100      	movs	r1, #0
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <MX_FREERTOS_Init+0x108>)
 800193e:	f009 f90b 	bl	800ab58 <osThreadNew>
 8001942:	4603      	mov	r3, r0
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <MX_FREERTOS_Init+0x10c>)
 8001946:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20001f08 	.word	0x20001f08
 8001950:	08012d20 	.word	0x08012d20
 8001954:	20001ea4 	.word	0x20001ea4
 8001958:	08012d30 	.word	0x08012d30
 800195c:	20001ea8 	.word	0x20001ea8
 8001960:	08012d08 	.word	0x08012d08
 8001964:	20001d90 	.word	0x20001d90
 8001968:	08012c30 	.word	0x08012c30
 800196c:	080019b1 	.word	0x080019b1
 8001970:	200007ac 	.word	0x200007ac
 8001974:	08012c54 	.word	0x08012c54
 8001978:	080019c1 	.word	0x080019c1
 800197c:	200007b0 	.word	0x200007b0
 8001980:	08012c78 	.word	0x08012c78
 8001984:	08001c21 	.word	0x08001c21
 8001988:	20000c10 	.word	0x20000c10
 800198c:	08012c9c 	.word	0x08012c9c
 8001990:	08001ed1 	.word	0x08001ed1
 8001994:	20001070 	.word	0x20001070
 8001998:	08012cc0 	.word	0x08012cc0
 800199c:	0800202d 	.word	0x0800202d
 80019a0:	200014d0 	.word	0x200014d0
 80019a4:	08012ce4 	.word	0x08012ce4
 80019a8:	080020f1 	.word	0x080020f1
 80019ac:	20001930 	.word	0x20001930

080019b0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	for (;;) {
		//printf("[!Default task]: s\r\n");
		osDelay(100);
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	f009 f95f 	bl	800ac7c <osDelay>
 80019be:	e7fb      	b.n	80019b8 <StartDefaultTask+0x8>

080019c0 <startSensorReadThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorReadThread */
void startSensorReadThread(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b096      	sub	sp, #88	; 0x58
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSensorReadThread */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80019c8:	2228      	movs	r2, #40	; 0x28
 80019ca:	497f      	ldr	r1, [pc, #508]	; (8001bc8 <startSensorReadThread+0x208>)
 80019cc:	487f      	ldr	r0, [pc, #508]	; (8001bcc <startSensorReadThread+0x20c>)
 80019ce:	f003 fa59 	bl	8004e84 <HAL_ADC_Start_DMA>

	struct bme280_dev dev;
	struct bme280_data comp_data;
	int8_t rslt;

	osMutexAcquire(I2CBusControlHandle, osWaitForever);
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <startSensorReadThread+0x210>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 31ff 	mov.w	r1, #4294967295
 80019da:	4618      	mov	r0, r3
 80019dc:	f009 f9ef 	bl	800adbe <osMutexAcquire>
	dev.dev_id = BME280_I2C_ADDR_SEC;
 80019e0:	2377      	movs	r3, #119	; 0x77
 80019e2:	757b      	strb	r3, [r7, #21]
	dev.intf = BME280_I2C_INTF;
 80019e4:	2301      	movs	r3, #1
 80019e6:	75bb      	strb	r3, [r7, #22]
	dev.read = user_i2c_read;
 80019e8:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <startSensorReadThread+0x214>)
 80019ea:	61bb      	str	r3, [r7, #24]
	dev.write = user_i2c_write;
 80019ec:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <startSensorReadThread+0x218>)
 80019ee:	61fb      	str	r3, [r7, #28]
	dev.delay_ms = user_delay_ms;
 80019f0:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <startSensorReadThread+0x21c>)
 80019f2:	623b      	str	r3, [r7, #32]
	rslt = bme280_init(&dev);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fbb7 	bl	800316c <bme280_init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001a10:	2302      	movs	r3, #2
 8001a12:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8001a16:	2304      	movs	r3, #4
 8001a18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	rslt = bme280_set_sensor_settings(
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	200f      	movs	r0, #15
 8001a24:	f001 fc96 	bl	8003354 <bme280_set_sensor_settings>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	2003      	movs	r0, #3
 8001a36:	f001 fce2 	bl	80033fe <bme280_set_sensor_mode>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	osDelay(50);
 8001a40:	2032      	movs	r0, #50	; 0x32
 8001a42:	f009 f91b 	bl	800ac7c <osDelay>
	osMutexRelease(I2CBusControlHandle);
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <startSensorReadThread+0x210>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f009 fa02 	bl	800ae54 <osMutexRelease>
	/* Infinite loop */
	// \033[2J\033[0;0H
	for (;;) {

		//HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_SET);
		printf("[Main Thread] ");
 8001a50:	4863      	ldr	r0, [pc, #396]	; (8001be0 <startSensorReadThread+0x220>)
 8001a52:	f00d faa3 	bl	800ef9c <iprintf>
		printf("H2 ADC: ");
 8001a56:	4863      	ldr	r0, [pc, #396]	; (8001be4 <startSensorReadThread+0x224>)
 8001a58:	f00d faa0 	bl	800ef9c <iprintf>
		printf("%f\r\n", adc_buf[ADC_BUF_LEN - 1] * 0.8f);
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <startSensorReadThread+0x208>)
 8001a5e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001be8 <startSensorReadThread+0x228>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	ee17 0a90 	vmov	r0, s15
 8001a76:	f7fe fd67 	bl	8000548 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	485b      	ldr	r0, [pc, #364]	; (8001bec <startSensorReadThread+0x22c>)
 8001a80:	f00d fa8c 	bl	800ef9c <iprintf>
		//		TxHeader.StdId = 0x102;
		printf("[!Main Thread] Calibrated H2 Sensor Reading: %d\r\n",
				(h2_conc_ppm = MQ8_GetH2Percentage(
						MQ8_Compensate(adc_buf[ADC_BUF_LEN - 1]) / Ro)));
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <startSensorReadThread+0x208>)
 8001a86:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	f7ff fb2f 	bl	80010f8 <MQ8_Compensate>
 8001a9a:	eef0 6a40 	vmov.f32	s13, s0
				(h2_conc_ppm = MQ8_GetH2Percentage(
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <startSensorReadThread+0x230>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aac:	f7ff faf4 	bl	8001098 <MQ8_GetH2Percentage>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <startSensorReadThread+0x234>)
 8001ab6:	801a      	strh	r2, [r3, #0]
 8001ab8:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <startSensorReadThread+0x234>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
		printf("[!Main Thread] Calibrated H2 Sensor Reading: %d\r\n",
 8001abc:	4619      	mov	r1, r3
 8001abe:	484e      	ldr	r0, [pc, #312]	; (8001bf8 <startSensorReadThread+0x238>)
 8001ac0:	f00d fa6c 	bl	800ef9c <iprintf>
		if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <startSensorReadThread+0x210>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	4618      	mov	r0, r3
 8001ace:	f009 f976 	bl	800adbe <osMutexAcquire>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d14a      	bne.n	8001b6e <startSensorReadThread+0x1ae>
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8001ad8:	f107 0214 	add.w	r2, r7, #20
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	f001 fd07 	bl	80034f6 <bme280_get_sensor_data>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			osMutexRelease(I2CBusControlHandle);
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <startSensorReadThread+0x210>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f009 f9ae 	bl	800ae54 <osMutexRelease>
			if (rslt == BME280_OK) {
 8001af8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d139      	bne.n	8001b74 <startSensorReadThread+0x1b4>
				temperature = comp_data.temperature / 100.0; /* °C  */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd0e 	bl	8000524 <__aeabi_i2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <startSensorReadThread+0x23c>)
 8001b0e:	f7fe fe9d 	bl	800084c <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f845 	bl	8000ba8 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a37      	ldr	r2, [pc, #220]	; (8001c00 <startSensorReadThread+0x240>)
 8001b22:	6013      	str	r3, [r2, #0]
				humidity = comp_data.humidity / 1024.0; /* %   */
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcec 	bl	8000504 <__aeabi_ui2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <startSensorReadThread+0x244>)
 8001b32:	f7fe fe8b 	bl	800084c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f833 	bl	8000ba8 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a30      	ldr	r2, [pc, #192]	; (8001c08 <startSensorReadThread+0x248>)
 8001b46:	6013      	str	r3, [r2, #0]
				pressure = comp_data.pressure / 10000.0; /* hPa */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcda 	bl	8000504 <__aeabi_ui2d>
 8001b50:	a31b      	add	r3, pc, #108	; (adr r3, 8001bc0 <startSensorReadThread+0x200>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fe79 	bl	800084c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff f821 	bl	8000ba8 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <startSensorReadThread+0x24c>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e002      	b.n	8001b74 <startSensorReadThread+0x1b4>
			}

		} else {
			printf("[!Main Thread] Failed to aquire control of I2C Bus\r\n");
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <startSensorReadThread+0x250>)
 8001b70:	f00d fa7a 	bl	800f068 <puts>
		}

		printf("[!Main Thread] Humidity: %03.1f\r\n", humidity);
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <startSensorReadThread+0x248>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fce5 	bl	8000548 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4824      	ldr	r0, [pc, #144]	; (8001c14 <startSensorReadThread+0x254>)
 8001b84:	f00d fa0a 	bl	800ef9c <iprintf>
		printf("[!Main Thread] Temprature: %03.1f\r\n", temperature);
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <startSensorReadThread+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcdb 	bl	8000548 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4820      	ldr	r0, [pc, #128]	; (8001c18 <startSensorReadThread+0x258>)
 8001b98:	f00d fa00 	bl	800ef9c <iprintf>
		printf("[!Main Thread] Pressure: %03.1f\r\n", pressure);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <startSensorReadThread+0x24c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <startSensorReadThread+0x25c>)
 8001bac:	f00d f9f6 	bl	800ef9c <iprintf>
		//		packet.rtr_type = CAN_RTR_REMOTE;
		//		TxHeader.DLC = 0;
		//		packet.id = 0x111;
		//		CAN_Transmit_Intrim(packet);

		osDelay(500);
 8001bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb4:	f009 f862 	bl	800ac7c <osDelay>
		printf("[Main Thread] ");
 8001bb8:	e74a      	b.n	8001a50 <startSensorReadThread+0x90>
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40c38800 	.word	0x40c38800
 8001bc8:	2000032c 	.word	0x2000032c
 8001bcc:	2000021c 	.word	0x2000021c
 8001bd0:	20001ea4 	.word	0x20001ea4
 8001bd4:	08001601 	.word	0x08001601
 8001bd8:	08001689 	.word	0x08001689
 8001bdc:	08001671 	.word	0x08001671
 8001be0:	08012908 	.word	0x08012908
 8001be4:	08012918 	.word	0x08012918
 8001be8:	3f4ccccd 	.word	0x3f4ccccd
 8001bec:	08012924 	.word	0x08012924
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	20000328 	.word	0x20000328
 8001bf8:	0801292c 	.word	0x0801292c
 8001bfc:	40590000 	.word	0x40590000
 8001c00:	2000079c 	.word	0x2000079c
 8001c04:	40900000 	.word	0x40900000
 8001c08:	200007a0 	.word	0x200007a0
 8001c0c:	200007a4 	.word	0x200007a4
 8001c10:	08012960 	.word	0x08012960
 8001c14:	08012994 	.word	0x08012994
 8001c18:	080129b8 	.word	0x080129b8
 8001c1c:	080129dc 	.word	0x080129dc

08001c20 <startAuxilaryPrintThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startAuxilaryPrintThread */
void startAuxilaryPrintThread(void *argument)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAuxilaryPrintThread */
	osDelay(500);
 8001c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c2c:	f009 f826 	bl	800ac7c <osDelay>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c30:	2104      	movs	r1, #4
 8001c32:	488d      	ldr	r0, [pc, #564]	; (8001e68 <startAuxilaryPrintThread+0x248>)
 8001c34:	f007 fb7e 	bl	8009334 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR2 = 0;
 8001c38:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <startAuxilaryPrintThread+0x248>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
	if (osMutexAcquire(I2CBusControlHandle, osWaitForever) == osOK) {
 8001c40:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <startAuxilaryPrintThread+0x24c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f009 f8b8 	bl	800adbe <osMutexAcquire>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <startAuxilaryPrintThread+0x44>
		ssd1306_Init();
 8001c54:	f000 fcb4 	bl	80025c0 <ssd1306_Init>
		osMutexRelease(I2CBusControlHandle);
 8001c58:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <startAuxilaryPrintThread+0x24c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f009 f8f9 	bl	800ae54 <osMutexRelease>
 8001c62:	e002      	b.n	8001c6a <startAuxilaryPrintThread+0x4a>
	} else {
		printf("[!Secondary Thread] I2C Busy\r\n");
 8001c64:	4882      	ldr	r0, [pc, #520]	; (8001e70 <startAuxilaryPrintThread+0x250>)
 8001c66:	f00d f9ff 	bl	800f068 <puts>
	}

	int temp_blink = 1, temp_blink2 = 0;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		htim2.Instance->CCR2 = 1 * (temp_blink2 = !temp_blink2);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <startAuxilaryPrintThread+0x248>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38

		ssd1306_Fill(Black);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f000 fd03 	bl	8002694 <ssd1306_Fill>
		ssd1306_Line(0, 0, SSD1306_WIDTH, 0, White);
 8001c8e:	2301      	movs	r3, #1
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	2100      	movs	r1, #0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 fe55 	bl	8002948 <ssd1306_Line>
		ssd1306_SetCursor(0, 2);
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 fe39 	bl	8002918 <ssd1306_SetCursor>
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
				adc_buf[ADC_BUF_LEN - 1] * 0.8f);
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <startAuxilaryPrintThread+0x254>)
 8001ca8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001e78 <startAuxilaryPrintThread+0x258>
 8001cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
		sprintf(h2_conc_str, "H2 Conc: %0.2f (mV)",
 8001cbc:	ee17 0a90 	vmov	r0, s15
 8001cc0:	f7fe fc42 	bl	8000548 <__aeabi_f2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	496c      	ldr	r1, [pc, #432]	; (8001e7c <startAuxilaryPrintThread+0x25c>)
 8001cca:	486d      	ldr	r0, [pc, #436]	; (8001e80 <startAuxilaryPrintThread+0x260>)
 8001ccc:	f00d f9d4 	bl	800f078 <siprintf>
		ssd1306_WriteString(h2_conc_str, Font_7x10, White);
 8001cd0:	4a6c      	ldr	r2, [pc, #432]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	ca06      	ldmia	r2, {r1, r2}
 8001cd6:	486a      	ldr	r0, [pc, #424]	; (8001e80 <startAuxilaryPrintThread+0x260>)
 8001cd8:	f000 fdf8 	bl	80028cc <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 8001cdc:	210c      	movs	r1, #12
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 fe1a 	bl	8002918 <ssd1306_SetCursor>
		sprintf(bme_data_str, "Temperature: %2.0fC", temperature);
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <startAuxilaryPrintThread+0x268>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4966      	ldr	r1, [pc, #408]	; (8001e8c <startAuxilaryPrintThread+0x26c>)
 8001cf4:	4866      	ldr	r0, [pc, #408]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001cf6:	f00d f9bf 	bl	800f078 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001cfa:	4a62      	ldr	r2, [pc, #392]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	ca06      	ldmia	r2, {r1, r2}
 8001d00:	4863      	ldr	r0, [pc, #396]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d02:	f000 fde3 	bl	80028cc <ssd1306_WriteString>

		ssd1306_SetCursor(0, 22);
 8001d06:	2116      	movs	r1, #22
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 fe05 	bl	8002918 <ssd1306_SetCursor>
		sprintf(bme_data_str, "Humidity: %2.0f%%", humidity);
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <startAuxilaryPrintThread+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	495e      	ldr	r1, [pc, #376]	; (8001e98 <startAuxilaryPrintThread+0x278>)
 8001d1e:	485c      	ldr	r0, [pc, #368]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d20:	f00d f9aa 	bl	800f078 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001d24:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001d26:	2301      	movs	r3, #1
 8001d28:	ca06      	ldmia	r2, {r1, r2}
 8001d2a:	4859      	ldr	r0, [pc, #356]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d2c:	f000 fdce 	bl	80028cc <ssd1306_WriteString>

		ssd1306_SetCursor(0, 32);
 8001d30:	2120      	movs	r1, #32
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 fdf0 	bl	8002918 <ssd1306_SetCursor>
		sprintf(bme_data_str, "Pressure: %3.0f hPa", pressure);
 8001d38:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <startAuxilaryPrintThread+0x27c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4956      	ldr	r1, [pc, #344]	; (8001ea0 <startAuxilaryPrintThread+0x280>)
 8001d48:	4851      	ldr	r0, [pc, #324]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d4a:	f00d f995 	bl	800f078 <siprintf>
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001d4e:	4a4d      	ldr	r2, [pc, #308]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001d50:	2301      	movs	r3, #1
 8001d52:	ca06      	ldmia	r2, {r1, r2}
 8001d54:	484e      	ldr	r0, [pc, #312]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d56:	f000 fdb9 	bl	80028cc <ssd1306_WriteString>

		ssd1306_SetCursor(0, 42);
 8001d5a:	212a      	movs	r1, #42	; 0x2a
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 fddb 	bl	8002918 <ssd1306_SetCursor>
		sprintf(bme_data_str,
				(system_state != H2_SYSTEM_STATE_CALIBRATE) ?
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <startAuxilaryPrintThread+0x284>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
		sprintf(bme_data_str,
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d001      	beq.n	8001d6e <startAuxilaryPrintThread+0x14e>
 8001d6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <startAuxilaryPrintThread+0x288>)
 8001d6c:	e000      	b.n	8001d70 <startAuxilaryPrintThread+0x150>
 8001d6e:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <startAuxilaryPrintThread+0x28c>)
 8001d70:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <startAuxilaryPrintThread+0x290>)
 8001d72:	8812      	ldrh	r2, [r2, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4846      	ldr	r0, [pc, #280]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d78:	f00d f97e 	bl	800f078 <siprintf>
						"H2 Conc: %d ppm" : "Calibrating ppm", h2_conc_ppm);
		ssd1306_WriteString(bme_data_str, Font_7x10, White);
 8001d7c:	4a41      	ldr	r2, [pc, #260]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001d7e:	2301      	movs	r3, #1
 8001d80:	ca06      	ldmia	r2, {r1, r2}
 8001d82:	4843      	ldr	r0, [pc, #268]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001d84:	f000 fda2 	bl	80028cc <ssd1306_WriteString>
		ssd1306_Line(0, 62, SSD1306_WIDTH, 62, White);
 8001d88:	2301      	movs	r3, #1
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	233e      	movs	r3, #62	; 0x3e
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	213e      	movs	r1, #62	; 0x3e
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 fdd8 	bl	8002948 <ssd1306_Line>

		ssd1306_SetCursor(0, 52);
 8001d98:	2134      	movs	r1, #52	; 0x34
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 fdbc 	bl	8002918 <ssd1306_SetCursor>

		switch (system_state) {
 8001da0:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <startAuxilaryPrintThread+0x284>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d83a      	bhi.n	8001e1e <startAuxilaryPrintThread+0x1fe>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <startAuxilaryPrintThread+0x190>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001dd5 	.word	0x08001dd5
 8001db8:	08001de1 	.word	0x08001de1
 8001dbc:	08001ded 	.word	0x08001ded
 8001dc0:	08001df9 	.word	0x08001df9
 8001dc4:	08001e05 	.word	0x08001e05
		case H2_SYSTEM_STATE_INACTIVE:
			sprintf(bme_data_str, "%s", "-ALARM INACTIVE-");
 8001dc8:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <startAuxilaryPrintThread+0x294>)
 8001dca:	493b      	ldr	r1, [pc, #236]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001dcc:	4830      	ldr	r0, [pc, #192]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001dce:	f00d f953 	bl	800f078 <siprintf>
			break;
 8001dd2:	e024      	b.n	8001e1e <startAuxilaryPrintThread+0x1fe>
		case H2_SYSTEM_STATE_ALARM_ACTIVE:
			sprintf(bme_data_str, "%s", "-ALARM ACTIVE-");
 8001dd4:	4a39      	ldr	r2, [pc, #228]	; (8001ebc <startAuxilaryPrintThread+0x29c>)
 8001dd6:	4938      	ldr	r1, [pc, #224]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001dd8:	482d      	ldr	r0, [pc, #180]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001dda:	f00d f94d 	bl	800f078 <siprintf>
			break;
 8001dde:	e01e      	b.n	8001e1e <startAuxilaryPrintThread+0x1fe>
		case H2_SYSTEM_STATE_ALARM_TEST:
			sprintf(bme_data_str, "%s", "-ALARM TEST-");
 8001de0:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <startAuxilaryPrintThread+0x2a0>)
 8001de2:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001de4:	482a      	ldr	r0, [pc, #168]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001de6:	f00d f947 	bl	800f078 <siprintf>
			break;
 8001dea:	e018      	b.n	8001e1e <startAuxilaryPrintThread+0x1fe>
		case H2_SYSTEM_STATE_ALARM_TEST_SILENT:
			sprintf(bme_data_str, "%s", "-ALARM TEST SILENT-");
 8001dec:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <startAuxilaryPrintThread+0x2a4>)
 8001dee:	4932      	ldr	r1, [pc, #200]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001df0:	4827      	ldr	r0, [pc, #156]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001df2:	f00d f941 	bl	800f078 <siprintf>
			break;
 8001df6:	e012      	b.n	8001e1e <startAuxilaryPrintThread+0x1fe>
		case H2_SYSTEM_STATE_CALIBRATE:
			sprintf(bme_data_str, "%s", "-CALIBRATE-");
 8001df8:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <startAuxilaryPrintThread+0x2a8>)
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001dfc:	4824      	ldr	r0, [pc, #144]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001dfe:	f00d f93b 	bl	800f078 <siprintf>
			break;
 8001e02:	e00c      	b.n	8001e1e <startAuxilaryPrintThread+0x1fe>
		case H2_SYSTEM_STATE_ALARM_TRIPPED:
			sprintf(bme_data_str, "%s", "-!ALARM TRIPPED!-");
 8001e04:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <startAuxilaryPrintThread+0x2ac>)
 8001e06:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <startAuxilaryPrintThread+0x298>)
 8001e08:	4821      	ldr	r0, [pc, #132]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001e0a:	f00d f935 	bl	800f078 <siprintf>
			temp_blink = !temp_blink;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
			break;
 8001e1c:	bf00      	nop
		}

		ssd1306_WriteString(bme_data_str, Font_7x10,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <startAuxilaryPrintThread+0x264>)
 8001e2c:	ca06      	ldmia	r2, {r1, r2}
 8001e2e:	4818      	ldr	r0, [pc, #96]	; (8001e90 <startAuxilaryPrintThread+0x270>)
 8001e30:	f000 fd4c 	bl	80028cc <ssd1306_WriteString>
				temp_blink ? White : Black);

		ssd1306_Line(0, 62, SSD1306_WIDTH, 62, White);
 8001e34:	2301      	movs	r3, #1
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	233e      	movs	r3, #62	; 0x3e
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	213e      	movs	r1, #62	; 0x3e
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 fd82 	bl	8002948 <ssd1306_Line>

		osMutexAcquire(I2CBusControlHandle, osWaitForever);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <startAuxilaryPrintThread+0x24c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f008 ffb6 	bl	800adbe <osMutexAcquire>
		ssd1306_UpdateScreen();
 8001e52:	f000 fc37 	bl	80026c4 <ssd1306_UpdateScreen>
		osMutexRelease(I2CBusControlHandle);
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <startAuxilaryPrintThread+0x24c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fffa 	bl	800ae54 <osMutexRelease>
		osDelay(100);
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	f008 ff0b 	bl	800ac7c <osDelay>
		htim2.Instance->CCR2 = 1 * (temp_blink2 = !temp_blink2);
 8001e66:	e704      	b.n	8001c72 <startAuxilaryPrintThread+0x52>
 8001e68:	200023c4 	.word	0x200023c4
 8001e6c:	20001ea4 	.word	0x20001ea4
 8001e70:	08012a00 	.word	0x08012a00
 8001e74:	2000032c 	.word	0x2000032c
 8001e78:	3f4ccccd 	.word	0x3f4ccccd
 8001e7c:	08012a20 	.word	0x08012a20
 8001e80:	2000037c 	.word	0x2000037c
 8001e84:	20000010 	.word	0x20000010
 8001e88:	2000079c 	.word	0x2000079c
 8001e8c:	08012a34 	.word	0x08012a34
 8001e90:	2000039c 	.word	0x2000039c
 8001e94:	200007a0 	.word	0x200007a0
 8001e98:	08012a48 	.word	0x08012a48
 8001e9c:	200007a4 	.word	0x200007a4
 8001ea0:	08012a5c 	.word	0x08012a5c
 8001ea4:	200007a8 	.word	0x200007a8
 8001ea8:	08012a70 	.word	0x08012a70
 8001eac:	08012a80 	.word	0x08012a80
 8001eb0:	20000328 	.word	0x20000328
 8001eb4:	08012a90 	.word	0x08012a90
 8001eb8:	08012aa4 	.word	0x08012aa4
 8001ebc:	08012aa8 	.word	0x08012aa8
 8001ec0:	08012ab8 	.word	0x08012ab8
 8001ec4:	08012ac8 	.word	0x08012ac8
 8001ec8:	08012adc 	.word	0x08012adc
 8001ecc:	08012ae8 	.word	0x08012ae8

08001ed0 <startSensorTransmitThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorTransmitThread */
void startSensorTransmitThread(void *argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float temp_h2;
	/* Infinite loop */
	for (;;) {

		//if (osMessageQueueGetCount(CAN_HighPro_QHandle) > 0) {
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <startSensorTransmitThread+0x130>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f107 0110 	add.w	r1, r7, #16
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f009 f9a1 	bl	800b22c <osMessageQueueGet>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 8081 	bne.w	8001ff4 <startSensorTransmitThread+0x124>
		osWaitForever) == osOK) {
			response_packet.dlc = 8;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	74bb      	strb	r3, [r7, #18]
			if (response_packet.rtr_type == CAN_RTR_REMOTE) {
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d17b      	bne.n	8001ff4 <startSensorTransmitThread+0x124>
				switch (response_packet.id) {
 8001efc:	8a3b      	ldrh	r3, [r7, #16]
 8001efe:	f240 2223 	movw	r2, #547	; 0x223
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d032      	beq.n	8001f6c <startSensorTransmitThread+0x9c>
 8001f06:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8001f0a:	da6b      	bge.n	8001fe4 <startSensorTransmitThread+0x114>
 8001f0c:	f240 2222 	movw	r2, #546	; 0x222
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d03f      	beq.n	8001f94 <startSensorTransmitThread+0xc4>
 8001f14:	f240 2222 	movw	r2, #546	; 0x222
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	dc63      	bgt.n	8001fe4 <startSensorTransmitThread+0x114>
 8001f1c:	f240 1211 	movw	r2, #273	; 0x111
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <startSensorTransmitThread+0x5e>
 8001f24:	f240 2221 	movw	r2, #545	; 0x221
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d047      	beq.n	8001fbc <startSensorTransmitThread+0xec>
 8001f2c:	e05a      	b.n	8001fe4 <startSensorTransmitThread+0x114>
				case GET_H2_CONC_MV:
					response_packet.id = RESPOND_H2_CONC;
 8001f2e:	f240 1311 	movw	r3, #273	; 0x111
 8001f32:	823b      	strh	r3, [r7, #16]
					temp_h2 = adc_buf[ADC_BUF_LEN - 1] * 0.80f;
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <startSensorTransmitThread+0x134>)
 8001f36:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002008 <startSensorTransmitThread+0x138>
 8001f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4a:	edc7 7a03 	vstr	s15, [r7, #12]
					//							!= HAL_OK) {
					////						printf("Can transmission error on packet id: %hu\r\n",
					////								_to_send.id);
					//						Error_Handler();
					//					}
					response_packet.dlc = 4;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	74bb      	strb	r3, [r7, #18]
					memcpy(&response_packet.data, (uint8_t*) &temp_h2, 8);
 8001f52:	f107 010c 	add.w	r1, r7, #12
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00d fa1b 	bl	800f39a <memcpy>
					printf("[!SensorTransmitThread]Sending CAN H2 Conc\r\n");
 8001f64:	4829      	ldr	r0, [pc, #164]	; (800200c <startSensorTransmitThread+0x13c>)
 8001f66:	f00d f87f 	bl	800f068 <puts>
					break;
 8001f6a:	e03b      	b.n	8001fe4 <startSensorTransmitThread+0x114>
				case GET_HUMIDITY:
					response_packet.id = RESPOND_HUMIDITY;
 8001f6c:	f240 2323 	movw	r3, #547	; 0x223
 8001f70:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", humidity);
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <startSensorTransmitThread+0x140>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fae6 	bl	8000548 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	f107 0110 	add.w	r1, r7, #16
 8001f84:	1d08      	adds	r0, r1, #4
 8001f86:	4923      	ldr	r1, [pc, #140]	; (8002014 <startSensorTransmitThread+0x144>)
 8001f88:	f00d f876 	bl	800f078 <siprintf>
					//memcpy(, humidity, 8);
					printf("[!SensorTransmitThread]Sending CAN Humidity\r\n");
 8001f8c:	4822      	ldr	r0, [pc, #136]	; (8002018 <startSensorTransmitThread+0x148>)
 8001f8e:	f00d f86b 	bl	800f068 <puts>
					break;
 8001f92:	e027      	b.n	8001fe4 <startSensorTransmitThread+0x114>
				case GET_PRESSURE:
					response_packet.id = RESPOND_PRESSURE;
 8001f94:	f240 2322 	movw	r3, #546	; 0x222
 8001f98:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", pressure);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <startSensorTransmitThread+0x14c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fad2 	bl	8000548 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f107 0110 	add.w	r1, r7, #16
 8001fac:	1d08      	adds	r0, r1, #4
 8001fae:	4919      	ldr	r1, [pc, #100]	; (8002014 <startSensorTransmitThread+0x144>)
 8001fb0:	f00d f862 	bl	800f078 <siprintf>
					//memcpy(&response_packet.data, pressure, 8);
					printf("[!SensorTransmitThread]Sending CAN Pressure\r\n");
 8001fb4:	481a      	ldr	r0, [pc, #104]	; (8002020 <startSensorTransmitThread+0x150>)
 8001fb6:	f00d f857 	bl	800f068 <puts>
					break;
 8001fba:	e013      	b.n	8001fe4 <startSensorTransmitThread+0x114>
				case GET_TEMP:
					response_packet.id = RESPOND_TEMP;
 8001fbc:	f240 2321 	movw	r3, #545	; 0x221
 8001fc0:	823b      	strh	r3, [r7, #16]
					sprintf(&response_packet.data, "%f", temperature);
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <startSensorTransmitThread+0x154>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fabe 	bl	8000548 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	f107 0110 	add.w	r1, r7, #16
 8001fd4:	1d08      	adds	r0, r1, #4
 8001fd6:	490f      	ldr	r1, [pc, #60]	; (8002014 <startSensorTransmitThread+0x144>)
 8001fd8:	f00d f84e 	bl	800f078 <siprintf>
					//memcpy(&response_packet.data, temperature, 8);
					printf("[!SensorTransmitThread]Sending CAN Temprature\r\n");
 8001fdc:	4812      	ldr	r0, [pc, #72]	; (8002028 <startSensorTransmitThread+0x158>)
 8001fde:	f00d f843 	bl	800f068 <puts>
					break;
 8001fe2:	bf00      	nop
				}
				response_packet.rtr_type = CAN_RTR_DATA;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74fb      	strb	r3, [r7, #19]
				CAN_Transmit_Intrim(response_packet);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ff0:	f7ff facc 	bl	800158c <CAN_Transmit_Intrim>
			//				printf(
			//						"[!Sensor Transmit Thread] Error getting Message from HIGH priority thread.\r\n");
			//			}
		}

		osDelay(500);
 8001ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff8:	f008 fe40 	bl	800ac7c <osDelay>
		if (osMessageQueueGet(CAN_HighPro_QHandle, &response_packet, 0,
 8001ffc:	e76c      	b.n	8001ed8 <startSensorTransmitThread+0x8>
 8001ffe:	bf00      	nop
 8002000:	20001d90 	.word	0x20001d90
 8002004:	2000032c 	.word	0x2000032c
 8002008:	3f4ccccd 	.word	0x3f4ccccd
 800200c:	08012afc 	.word	0x08012afc
 8002010:	200007a0 	.word	0x200007a0
 8002014:	08012b28 	.word	0x08012b28
 8002018:	08012b2c 	.word	0x08012b2c
 800201c:	200007a4 	.word	0x200007a4
 8002020:	08012b5c 	.word	0x08012b5c
 8002024:	2000079c 	.word	0x2000079c
 8002028:	08012b8c 	.word	0x08012b8c

0800202c <startLeakWatchdogThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLeakWatchdogThread */
void startLeakWatchdogThread(void *argument)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLeakWatchdogThread */
	IntrimPacket empack;
	empack.rtr_type = CAN_RTR_DATA;
 8002034:	2300      	movs	r3, #0
 8002036:	72fb      	strb	r3, [r7, #11]
	empack.id = RESPOND_EMERGENCY_H2_ALERT;
 8002038:	2301      	movs	r3, #1
 800203a:	813b      	strh	r3, [r7, #8]
	empack.dlc = 1;
 800203c:	2301      	movs	r3, #1
 800203e:	72bb      	strb	r3, [r7, #10]
	float h2_conc_mv = 0;
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

	// Beeper Prescaler = 80MHz/ 100^2 = 8000 (8000 - 1 cuz MX )
	// Max Freq = 80MHz/(100*8000) = 1000
	//lockout = 1;
	empack.data[0] = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	733b      	strb	r3, [r7, #12]
	system_state = H2_SYSTEM_STATE_INACTIVE;
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <startLeakWatchdogThread+0xac>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
	osDelay(500);
 8002050:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002054:	f008 fe12 	bl	800ac7c <osDelay>
	system_state = H2_SYSTEM_STATE_ALARM_ACTIVE;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <startLeakWatchdogThread+0xac>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
//	system_state = H2_SYSTEM_STATE_ALARM_TRIPPED;
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//	htim2.Instance->CCR2 = 0; // Duty Cycle we want this to be 0% so that when needed we can turn the beeeper on.
	/* Infinite loop */
	for (;;) {
		if ((system_state == H2_SYSTEM_STATE_ALARM_TRIPPED)
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <startLeakWatchdogThread+0xac>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d011      	beq.n	800208a <startLeakWatchdogThread+0x5e>
				|| ((adc_buf[ADC_BUF_LEN - 1] * 0.8f) >= 3000.00f)) {
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <startLeakWatchdogThread+0xb0>)
 8002068:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80020e0 <startLeakWatchdogThread+0xb4>
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80020e4 <startLeakWatchdogThread+0xb8>
 8002080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	db22      	blt.n	80020d0 <startLeakWatchdogThread+0xa4>
			system_state = H2_SYSTEM_STATE_ALARM_TRIPPED;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <startLeakWatchdogThread+0xac>)
 800208c:	2205      	movs	r2, #5
 800208e:	701a      	strb	r2, [r3, #0]
			static int temp = 0;
			h2_conc_mv = adc_buf[ADC_BUF_LEN - 1] * 0.8f;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <startLeakWatchdogThread+0xb0>)
 8002092:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80020e0 <startLeakWatchdogThread+0xb4>
 80020a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a6:	edc7 7a05 	vstr	s15, [r7, #20]
			//memcpy(&empack.data, &h2_conc_mv, sizeof(float));
//			htim2.Instance->CCR2 = 100 * (temp = !temp);

			printf("[!LeakWatchDogThread] Leak detected.\r\n");
 80020aa:	480f      	ldr	r0, [pc, #60]	; (80020e8 <startLeakWatchdogThread+0xbc>)
 80020ac:	f00c ffdc 	bl	800f068 <puts>
			osDelay(50);
 80020b0:	2032      	movs	r0, #50	; 0x32
 80020b2:	f008 fde3 	bl	800ac7c <osDelay>
			HAL_GPIO_TogglePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin);
 80020b6:	2120      	movs	r1, #32
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <startLeakWatchdogThread+0xc0>)
 80020ba:	f004 fef3 	bl	8006ea4 <HAL_GPIO_TogglePin>
			CAN_Transmit_Intrim(empack);
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020c6:	f7ff fa61 	bl	800158c <CAN_Transmit_Intrim>
			osDelay(50);
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f008 fdd6 	bl	800ac7c <osDelay>
		//				osDelay(100);
		//
		//			}
		//		}
		// Else transmit if message queue has request for data.
		osDelay(50);
 80020d0:	2032      	movs	r0, #50	; 0x32
 80020d2:	f008 fdd3 	bl	800ac7c <osDelay>
		if ((system_state == H2_SYSTEM_STATE_ALARM_TRIPPED)
 80020d6:	e7c2      	b.n	800205e <startLeakWatchdogThread+0x32>
 80020d8:	200007a8 	.word	0x200007a8
 80020dc:	2000032c 	.word	0x2000032c
 80020e0:	3f4ccccd 	.word	0x3f4ccccd
 80020e4:	453b8000 	.word	0x453b8000
 80020e8:	08012bbc 	.word	0x08012bbc
 80020ec:	48000400 	.word	0x48000400

080020f0 <startSensorCalibrateThread>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startSensorCalibrateThread */
void startSensorCalibrateThread(void *argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSensorCalibrateThread */
	IntrimPacket empack;
	empack.rtr_type = CAN_RTR_DATA;
 80020f8:	2300      	movs	r3, #0
 80020fa:	72fb      	strb	r3, [r7, #11]
	empack.id = RESPOND_EMERGENCY_H2_ALERT;
 80020fc:	2301      	movs	r3, #1
 80020fe:	813b      	strh	r3, [r7, #8]
	empack.dlc = 4;
 8002100:	2304      	movs	r3, #4
 8002102:	72bb      	strb	r3, [r7, #10]
	empack.id = RESPOND_EMERGENCY_H2_ALERT;
 8002104:	2301      	movs	r3, #1
 8002106:	813b      	strh	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(calibrateSensorHandle, osWaitForever);
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <startSensorCalibrateThread+0xc0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	4618      	mov	r0, r3
 8002112:	f008 ff65 	bl	800afe0 <osSemaphoreAcquire>
		printf("[!Calibrate Sensor Thread] Starting Calibration.\r\n");
 8002116:	4827      	ldr	r0, [pc, #156]	; (80021b4 <startSensorCalibrateThread+0xc4>)
 8002118:	f00c ffa6 	bl	800f068 <puts>
		//		Ro = MQ8_Calibration();

		int i;
		for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) { //take multiple samples
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e01a      	b.n	8002158 <startSensorCalibrateThread+0x68>
//			Ro += MQ8_ResistanceCalculation(adc_buf[ADC_BUF_LEN - 1] * 0.8f);

			Ro += MQ8_ResistanceCalculation(adc_buf[ADC_BUF_LEN - 1]);
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <startSensorCalibrateThread+0xc8>)
 8002124:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	f7fe ffc2 	bl	80010bc <MQ8_ResistanceCalculation>
 8002138:	eeb0 7a40 	vmov.f32	s14, s0
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <startSensorCalibrateThread+0xcc>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <startSensorCalibrateThread+0xcc>)
 8002148:	edc3 7a00 	vstr	s15, [r3]
			osDelay(CALIBRATION_SAMPLE_INTERVAL);
 800214c:	2064      	movs	r0, #100	; 0x64
 800214e:	f008 fd95 	bl	800ac7c <osDelay>
		for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) { //take multiple samples
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b31      	cmp	r3, #49	; 0x31
 800215c:	dde1      	ble.n	8002122 <startSensorCalibrateThread+0x32>
		}
		Ro = Ro / CALIBARAION_SAMPLE_TIMES;      //calculate the average value
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <startSensorCalibrateThread+0xcc>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021c0 <startSensorCalibrateThread+0xd0>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <startSensorCalibrateThread+0xcc>)
 800216e:	edc3 7a00 	vstr	s15, [r3]

		Ro = Ro / RO_CLEAN_AIR_FACTOR; //divided by RO_CLEAN_AIR_FACTOR yields the Ro
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <startSensorCalibrateThread+0xcc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9e6 	bl	8000548 <__aeabi_f2d>
 800217c:	a30a      	add	r3, pc, #40	; (adr r3, 80021a8 <startSensorCalibrateThread+0xb8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fb63 	bl	800084c <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd0b 	bl	8000ba8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <startSensorCalibrateThread+0xcc>)
 8002196:	6013      	str	r3, [r2, #0]
									   //according to the chart in the datasheet
		osDelay(500);
 8002198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800219c:	f008 fd6e 	bl	800ac7c <osDelay>
		system_state = H2_SYSTEM_STATE_INACTIVE;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <startSensorCalibrateThread+0xd4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
	for (;;) {
 80021a6:	e7af      	b.n	8002108 <startSensorCalibrateThread+0x18>
 80021a8:	1eb851ec 	.word	0x1eb851ec
 80021ac:	40226b85 	.word	0x40226b85
 80021b0:	20001ea8 	.word	0x20001ea8
 80021b4:	08012be4 	.word	0x08012be4
 80021b8:	2000032c 	.word	0x2000032c
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	42480000 	.word	0x42480000
 80021c4:	200007a8 	.word	0x200007a8

080021c8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <MX_GPIO_Init+0xf4>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <MX_GPIO_Init+0xf4>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <MX_GPIO_Init+0xf4>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <MX_GPIO_Init+0xf4>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <MX_GPIO_Init+0xf4>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <MX_GPIO_Init+0xf4>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f004 fe2c 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D2_PWM_Pin|LED_D3_PWM_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	2130      	movs	r1, #48	; 0x30
 8002220:	4827      	ldr	r0, [pc, #156]	; (80022c0 <MX_GPIO_Init+0xf8>)
 8002222:	f004 fe27 	bl	8006e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = H2_TARE_Pin;
 8002226:	2310      	movs	r3, #16
 8002228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800222a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800222e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002230:	2301      	movs	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(H2_TARE_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f004 fcaf 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002262:	f004 fc9d 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f004 fc8d 	bl	8006ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_D2_PWM_Pin|LED_D3_PWM_Pin;
 8002286:	2330      	movs	r3, #48	; 0x30
 8002288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4619      	mov	r1, r3
 800229c:	4808      	ldr	r0, [pc, #32]	; (80022c0 <MX_GPIO_Init+0xf8>)
 800229e:	f004 fc7f 	bl	8006ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2105      	movs	r1, #5
 80022a6:	200a      	movs	r0, #10
 80022a8:	f004 fa58 	bl	800675c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f004 fa71 	bl	8006794 <HAL_NVIC_EnableIRQ>

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	48000400 	.word	0x48000400

080022c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_I2C1_Init+0x74>)
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <MX_I2C1_Init+0x78>)
 80022cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_I2C1_Init+0x74>)
 80022d0:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <MX_I2C1_Init+0x7c>)
 80022d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_I2C1_Init+0x74>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_I2C1_Init+0x74>)
 80022dc:	2201      	movs	r2, #1
 80022de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_I2C1_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_I2C1_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_I2C1_Init+0x74>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_I2C1_Init+0x74>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_I2C1_Init+0x74>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <MX_I2C1_Init+0x74>)
 8002300:	f004 fe02 	bl	8006f08 <HAL_I2C_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800230a:	f000 f913 	bl	8002534 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800230e:	2100      	movs	r1, #0
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <MX_I2C1_Init+0x74>)
 8002312:	f005 fc53 	bl	8007bbc <HAL_I2CEx_ConfigAnalogFilter>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800231c:	f000 f90a 	bl	8002534 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002320:	2100      	movs	r1, #0
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_I2C1_Init+0x74>)
 8002324:	f005 fc95 	bl	8007c52 <HAL_I2CEx_ConfigDigitalFilter>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800232e:	f000 f901 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20001f18 	.word	0x20001f18
 800233c:	40005400 	.word	0x40005400
 8002340:	10909cec 	.word	0x10909cec

08002344 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b09e      	sub	sp, #120	; 0x78
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2254      	movs	r2, #84	; 0x54
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f00c ff99 	bl	800f29c <memset>
  if(i2cHandle->Instance==I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_I2C_MspInit+0xa8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d137      	bne.n	80023e4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002374:	2340      	movs	r3, #64	; 0x40
 8002376:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fbe1 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800238c:	f000 f8d2 	bl	8002534 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ae:	2312      	movs	r3, #18
 80023b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ba:	2304      	movs	r3, #4
 80023bc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c8:	f004 fbea 	bl	8006ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 80023d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_I2C_MspInit+0xac>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023e4:	bf00      	nop
 80023e6:	3778      	adds	r7, #120	; 0x78
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40005400 	.word	0x40005400
 80023f0:	40021000 	.word	0x40021000

080023f4 <_write>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	b29a      	uxth	r2, r3
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4804      	ldr	r0, [pc, #16]	; (800241c <_write+0x28>)
 800240c:	f007 fea6 	bl	800a15c <HAL_UART_Transmit>
	return len;
 8002410:	687b      	ldr	r3, [r7, #4]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20002410 	.word	0x20002410

08002420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002424:	f002 f9c1 	bl	80047aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002428:	f000 f81a 	bl	8002460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242c:	f7ff fecc 	bl	80021c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002430:	f7ff f88e 	bl	8001550 <MX_DMA_Init>
  MX_CAN1_Init();
 8002434:	f7fe ff88 	bl	8001348 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002438:	f7ff ff44 	bl	80022c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800243c:	f000 fe0e 	bl	800305c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002440:	f7fe fe8a 	bl	8001158 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002444:	f000 fd36 	bl	8002eb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	CAN_Initialize();
 8002448:	f7ff f800 	bl	800144c <CAN_Initialize>
//	HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID,
//			&DMATransferComplete);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800244c:	f008 fb3a 	bl	800aac4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002450:	f7ff fa26 	bl	80018a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002454:	f008 fb5a 	bl	800ab0c <osKernelStart>
//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//		raw = HAL_ADC_GetValue(&hadc1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, 1);
		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);

		HAL_Delay(100);
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f002 f9df 	bl	800481c <HAL_Delay>
 800245e:	e7fb      	b.n	8002458 <main+0x38>

08002460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b096      	sub	sp, #88	; 0x58
 8002464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	2244      	movs	r2, #68	; 0x44
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f00c ff14 	bl	800f29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002474:	463b      	mov	r3, r7
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002486:	f005 fc3f 	bl	8007d08 <HAL_PWREx_ControlVoltageScaling>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002490:	f000 f850 	bl	8002534 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002494:	2301      	movs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002498:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800249c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249e:	2302      	movs	r3, #2
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024a2:	2303      	movs	r3, #3
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80024aa:	2314      	movs	r3, #20
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024ae:	2307      	movs	r3, #7
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024b6:	2302      	movs	r3, #2
 80024b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4618      	mov	r0, r3
 80024c0:	f005 fc78 	bl	8007db4 <HAL_RCC_OscConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80024ca:	f000 f833 	bl	8002534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ce:	230f      	movs	r3, #15
 80024d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d2:	2303      	movs	r3, #3
 80024d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	2104      	movs	r1, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f006 f878 	bl	80085dc <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024f2:	f000 f81f 	bl	8002534 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_16);
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 80024fe:	2000      	movs	r0, #0
 8002500:	f006 f96c 	bl	80087dc <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002504:	f006 fa94 	bl	8008a30 <HAL_RCC_EnableCSS>
}
 8002508:	bf00      	nop
 800250a:	3758      	adds	r7, #88	; 0x58
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002522:	f002 f95b 	bl	80047dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2110      	movs	r1, #16
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <Error_Handler+0x14>)
 800253e:	f004 fc99 	bl	8006e74 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002542:	b672      	cpsid	i
}
 8002544:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002546:	e7fe      	b.n	8002546 <Error_Handler+0x12>
 8002548:	48000400 	.word	0x48000400

0800254c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af04      	add	r7, sp, #16
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	2301      	movs	r3, #1
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	2200      	movs	r2, #0
 8002578:	2178      	movs	r1, #120	; 0x78
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <ssd1306_WriteCommand+0x2c>)
 800257c:	f004 ff3e 	bl	80073fc <HAL_I2C_Mem_Write>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20001f18 	.word	0x20001f18

0800258c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af04      	add	r7, sp, #16
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	9202      	str	r2, [sp, #8]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2301      	movs	r3, #1
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	2178      	movs	r1, #120	; 0x78
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <ssd1306_WriteData+0x30>)
 80025ae:	f004 ff25 	bl	80073fc <HAL_I2C_Mem_Write>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20001f18 	.word	0x20001f18

080025c0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80025c4:	f7ff ffc2 	bl	800254c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80025c8:	2064      	movs	r0, #100	; 0x64
 80025ca:	f002 f927 	bl	800481c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 fa3a 	bl	8002a48 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80025d4:	2020      	movs	r0, #32
 80025d6:	f7ff ffc1 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025da:	2000      	movs	r0, #0
 80025dc:	f7ff ffbe 	bl	800255c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025e0:	20b0      	movs	r0, #176	; 0xb0
 80025e2:	f7ff ffbb 	bl	800255c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025e6:	20c8      	movs	r0, #200	; 0xc8
 80025e8:	f7ff ffb8 	bl	800255c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff ffb5 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80025f2:	2010      	movs	r0, #16
 80025f4:	f7ff ffb2 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025f8:	2040      	movs	r0, #64	; 0x40
 80025fa:	f7ff ffaf 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025fe:	20ff      	movs	r0, #255	; 0xff
 8002600:	f000 fa0e 	bl	8002a20 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002604:	20a1      	movs	r0, #161	; 0xa1
 8002606:	f7ff ffa9 	bl	800255c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800260a:	20a6      	movs	r0, #166	; 0xa6
 800260c:	f7ff ffa6 	bl	800255c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002610:	20a8      	movs	r0, #168	; 0xa8
 8002612:	f7ff ffa3 	bl	800255c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002616:	203f      	movs	r0, #63	; 0x3f
 8002618:	f7ff ffa0 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800261c:	20a4      	movs	r0, #164	; 0xa4
 800261e:	f7ff ff9d 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002622:	20d3      	movs	r0, #211	; 0xd3
 8002624:	f7ff ff9a 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002628:	2000      	movs	r0, #0
 800262a:	f7ff ff97 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800262e:	20d5      	movs	r0, #213	; 0xd5
 8002630:	f7ff ff94 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002634:	20f0      	movs	r0, #240	; 0xf0
 8002636:	f7ff ff91 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800263a:	20d9      	movs	r0, #217	; 0xd9
 800263c:	f7ff ff8e 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002640:	2022      	movs	r0, #34	; 0x22
 8002642:	f7ff ff8b 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002646:	20da      	movs	r0, #218	; 0xda
 8002648:	f7ff ff88 	bl	800255c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800264c:	2012      	movs	r0, #18
 800264e:	f7ff ff85 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002652:	20db      	movs	r0, #219	; 0xdb
 8002654:	f7ff ff82 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002658:	2020      	movs	r0, #32
 800265a:	f7ff ff7f 	bl	800255c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800265e:	208d      	movs	r0, #141	; 0x8d
 8002660:	f7ff ff7c 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002664:	2014      	movs	r0, #20
 8002666:	f7ff ff79 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800266a:	2001      	movs	r0, #1
 800266c:	f000 f9ec 	bl	8002a48 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002670:	2000      	movs	r0, #0
 8002672:	f000 f80f 	bl	8002694 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002676:	f000 f825 	bl	80026c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <ssd1306_Init+0xd0>)
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <ssd1306_Init+0xd0>)
 8002682:	2200      	movs	r2, #0
 8002684:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002686:	4b02      	ldr	r3, [pc, #8]	; (8002690 <ssd1306_Init+0xd0>)
 8002688:	2201      	movs	r2, #1
 800268a:	711a      	strb	r2, [r3, #4]
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000236c 	.word	0x2000236c

08002694 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <ssd1306_Fill+0x14>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <ssd1306_Fill+0x16>
 80026a8:	23ff      	movs	r3, #255	; 0xff
 80026aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ae:	4619      	mov	r1, r3
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <ssd1306_Fill+0x2c>)
 80026b2:	f00c fdf3 	bl	800f29c <memset>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20001f6c 	.word	0x20001f6c

080026c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026ca:	2300      	movs	r3, #0
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	e016      	b.n	80026fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	3b50      	subs	r3, #80	; 0x50
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff40 	bl	800255c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff ff3d 	bl	800255c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026e2:	2010      	movs	r0, #16
 80026e4:	f7ff ff3a 	bl	800255c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	4a08      	ldr	r2, [pc, #32]	; (8002710 <ssd1306_UpdateScreen+0x4c>)
 80026ee:	4413      	add	r3, r2
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff4a 	bl	800258c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	3301      	adds	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d9e5      	bls.n	80026d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20001f6c 	.word	0x20001f6c

08002714 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	460b      	mov	r3, r1
 8002720:	71bb      	strb	r3, [r7, #6]
 8002722:	4613      	mov	r3, r2
 8002724:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db3d      	blt.n	80027aa <ssd1306_DrawPixel+0x96>
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	2b3f      	cmp	r3, #63	; 0x3f
 8002732:	d83a      	bhi.n	80027aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002734:	797b      	ldrb	r3, [r7, #5]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11a      	bne.n	8002770 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	4603      	mov	r3, r0
 8002744:	01db      	lsls	r3, r3, #7
 8002746:	4413      	add	r3, r2
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <ssd1306_DrawPixel+0xa4>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	b25a      	sxtb	r2, r3
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	b25b      	sxtb	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b259      	sxtb	r1, r3
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	4603      	mov	r3, r0
 8002764:	01db      	lsls	r3, r3, #7
 8002766:	4413      	add	r3, r2
 8002768:	b2c9      	uxtb	r1, r1
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <ssd1306_DrawPixel+0xa4>)
 800276c:	54d1      	strb	r1, [r2, r3]
 800276e:	e01d      	b.n	80027ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002770:	79fa      	ldrb	r2, [r7, #7]
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	b2d8      	uxtb	r0, r3
 8002778:	4603      	mov	r3, r0
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	4413      	add	r3, r2
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <ssd1306_DrawPixel+0xa4>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	b25a      	sxtb	r2, r3
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	b25b      	sxtb	r3, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	b25b      	sxtb	r3, r3
 8002796:	4013      	ands	r3, r2
 8002798:	b259      	sxtb	r1, r3
 800279a:	79fa      	ldrb	r2, [r7, #7]
 800279c:	4603      	mov	r3, r0
 800279e:	01db      	lsls	r3, r3, #7
 80027a0:	4413      	add	r3, r2
 80027a2:	b2c9      	uxtb	r1, r1
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <ssd1306_DrawPixel+0xa4>)
 80027a6:	54d1      	strb	r1, [r2, r3]
 80027a8:	e000      	b.n	80027ac <ssd1306_DrawPixel+0x98>
        return;
 80027aa:	bf00      	nop
    }
}
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20001f6c 	.word	0x20001f6c

080027bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4604      	mov	r4, r0
 80027c4:	1d38      	adds	r0, r7, #4
 80027c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80027ca:	461a      	mov	r2, r3
 80027cc:	4623      	mov	r3, r4
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	4613      	mov	r3, r2
 80027d2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b1f      	cmp	r3, #31
 80027d8:	d902      	bls.n	80027e0 <ssd1306_WriteChar+0x24>
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b7e      	cmp	r3, #126	; 0x7e
 80027de:	d901      	bls.n	80027e4 <ssd1306_WriteChar+0x28>
        return 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e06d      	b.n	80028c0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027e4:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	793b      	ldrb	r3, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	dc06      	bgt.n	8002800 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 80027f4:	885b      	ldrh	r3, [r3, #2]
 80027f6:	461a      	mov	r2, r3
 80027f8:	797b      	ldrb	r3, [r7, #5]
 80027fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	dd01      	ble.n	8002804 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e05d      	b.n	80028c0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	e04c      	b.n	80028a4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	3b20      	subs	r3, #32
 8002810:	7979      	ldrb	r1, [r7, #5]
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4619      	mov	r1, r3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	440b      	add	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e034      	b.n	8002894 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b2d8      	uxtb	r0, r3
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 800284a:	885b      	ldrh	r3, [r3, #2]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4413      	add	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	7bba      	ldrb	r2, [r7, #14]
 8002858:	4619      	mov	r1, r3
 800285a:	f7ff ff5b 	bl	8002714 <ssd1306_DrawPixel>
 800285e:	e016      	b.n	800288e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4413      	add	r3, r2
 800286c:	b2d8      	uxtb	r0, r3
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 8002870:	885b      	ldrh	r3, [r3, #2]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4413      	add	r3, r2
 800287a:	b2d9      	uxtb	r1, r3
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	f7ff ff43 	bl	8002714 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3301      	adds	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	793b      	ldrb	r3, [r7, #4]
 8002896:	461a      	mov	r2, r3
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4293      	cmp	r3, r2
 800289c:	d3c5      	bcc.n	800282a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	797b      	ldrb	r3, [r7, #5]
 80028a6:	461a      	mov	r2, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d3ad      	bcc.n	800280a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	793b      	ldrb	r3, [r7, #4]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <ssd1306_WriteChar+0x10c>)
 80028bc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3724      	adds	r7, #36	; 0x24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}
 80028c8:	2000236c 	.word	0x2000236c

080028cc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	1d38      	adds	r0, r7, #4
 80028d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80028da:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80028dc:	e012      	b.n	8002904 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	7818      	ldrb	r0, [r3, #0]
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	1d3a      	adds	r2, r7, #4
 80028e6:	ca06      	ldmia	r2, {r1, r2}
 80028e8:	f7ff ff68 	bl	80027bc <ssd1306_WriteChar>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d002      	beq.n	80028fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	e008      	b.n	8002910 <ssd1306_WriteString+0x44>
        }
        str++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e8      	bne.n	80028de <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	781b      	ldrb	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	460a      	mov	r2, r1
 8002922:	71fb      	strb	r3, [r7, #7]
 8002924:	4613      	mov	r3, r2
 8002926:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <ssd1306_SetCursor+0x2c>)
 800292e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <ssd1306_SetCursor+0x2c>)
 8002936:	805a      	strh	r2, [r3, #2]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	2000236c 	.word	0x2000236c

08002948 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4623      	mov	r3, r4
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4603      	mov	r3, r0
 800295c:	71bb      	strb	r3, [r7, #6]
 800295e:	460b      	mov	r3, r1
 8002960:	717b      	strb	r3, [r7, #5]
 8002962:	4613      	mov	r3, r2
 8002964:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002966:	797a      	ldrb	r2, [r7, #5]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bfb8      	it	lt
 8002970:	425b      	neglt	r3, r3
 8002972:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002974:	793a      	ldrb	r2, [r7, #4]
 8002976:	79bb      	ldrb	r3, [r7, #6]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bfb8      	it	lt
 800297e:	425b      	neglt	r3, r3
 8002980:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	797b      	ldrb	r3, [r7, #5]
 8002986:	429a      	cmp	r2, r3
 8002988:	d201      	bcs.n	800298e <ssd1306_Line+0x46>
 800298a:	2301      	movs	r3, #1
 800298c:	e001      	b.n	8002992 <ssd1306_Line+0x4a>
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002994:	79ba      	ldrb	r2, [r7, #6]
 8002996:	793b      	ldrb	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d201      	bcs.n	80029a0 <ssd1306_Line+0x58>
 800299c:	2301      	movs	r3, #1
 800299e:	e001      	b.n	80029a4 <ssd1306_Line+0x5c>
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80029ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029b2:	7939      	ldrb	r1, [r7, #4]
 80029b4:	797b      	ldrb	r3, [r7, #5]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff feac 	bl	8002714 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80029bc:	e024      	b.n	8002a08 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80029be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029c2:	79b9      	ldrb	r1, [r7, #6]
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fea4 	bl	8002714 <ssd1306_DrawPixel>
        error2 = error * 2;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	425b      	negs	r3, r3
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dd08      	ble.n	80029ee <ssd1306_Line+0xa6>
            error -= deltaY;
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	4413      	add	r3, r2
 80029ec:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	da08      	bge.n	8002a08 <ssd1306_Line+0xc0>
            error += deltaX;
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4413      	add	r3, r2
 80029fc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	4413      	add	r3, r2
 8002a06:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002a08:	79fa      	ldrb	r2, [r7, #7]
 8002a0a:	797b      	ldrb	r3, [r7, #5]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1d6      	bne.n	80029be <ssd1306_Line+0x76>
 8002a10:	79ba      	ldrb	r2, [r7, #6]
 8002a12:	793b      	ldrb	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1d2      	bne.n	80029be <ssd1306_Line+0x76>
        }
    }
    return;
 8002a18:	bf00      	nop
}
 8002a1a:	3724      	adds	r7, #36	; 0x24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}

08002a20 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002a2a:	2381      	movs	r3, #129	; 0x81
 8002a2c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fd93 	bl	800255c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fd8f 	bl	800255c <ssd1306_WriteCommand>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a58:	23af      	movs	r3, #175	; 0xaf
 8002a5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <ssd1306_SetDisplayOn+0x38>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	715a      	strb	r2, [r3, #5]
 8002a62:	e004      	b.n	8002a6e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a64:	23ae      	movs	r3, #174	; 0xae
 8002a66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <ssd1306_SetDisplayOn+0x38>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fd73 	bl	800255c <ssd1306_WriteCommand>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000236c 	.word	0x2000236c

08002a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6613      	str	r3, [r2, #96]	; 0x60
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_MspInit+0x4c>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	210f      	movs	r1, #15
 8002abe:	f06f 0001 	mvn.w	r0, #1
 8002ac2:	f003 fe4b 	bl	800675c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_InitTick+0xc8>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	4a2d      	ldr	r2, [pc, #180]	; (8002b9c <HAL_InitTick+0xc8>)
 8002ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aec:	6613      	str	r3, [r2, #96]	; 0x60
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_InitTick+0xc8>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002afa:	f107 020c 	add.w	r2, r7, #12
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 ff61 	bl	80089cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b0a:	f005 ff49 	bl	80089a0 <HAL_RCC_GetPCLK2Freq>
 8002b0e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <HAL_InitTick+0xcc>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_InitTick+0xd4>)
 8002b22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b44:	4817      	ldr	r0, [pc, #92]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b46:	f006 fae7 	bl	8009118 <HAL_TIM_Base_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11b      	bne.n	8002b90 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b58:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <HAL_InitTick+0xd0>)
 8002b5a:	f006 fb3f 	bl	80091dc <HAL_TIM_Base_Start_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b6c:	2019      	movs	r0, #25
 8002b6e:	f003 fe11 	bl	8006794 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d808      	bhi.n	8002b8a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	2019      	movs	r0, #25
 8002b7e:	f003 fded 	bl	800675c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_InitTick+0xd8>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e002      	b.n	8002b90 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	20002374 	.word	0x20002374
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	2000001c 	.word	0x2000001c

08002bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002bb4:	f005 ff4c 	bl	8008a50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <NMI_Handler+0x8>
	...

08002bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : PBPin PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4839      	ldr	r0, [pc, #228]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002be2:	f003 ffdd 	bl	8006ba0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D2_PWM_Pin;
 8002be6:	2310      	movs	r3, #16
 8002be8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4834      	ldr	r0, [pc, #208]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002bf8:	f003 ffd2 	bl	8006ba0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D3_PWM_Pin;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	482e      	ldr	r0, [pc, #184]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002c0e:	f003 ffc7 	bl	8006ba0 <HAL_GPIO_Init>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c16:	e002      	b.n	8002c1e <HardFault_Handler+0x62>
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	4a2a      	ldr	r2, [pc, #168]	; (8002ccc <HardFault_Handler+0x110>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	ddf8      	ble.n	8002c18 <HardFault_Handler+0x5c>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_SET);
 8002c26:	2201      	movs	r2, #1
 8002c28:	2108      	movs	r1, #8
 8002c2a:	4827      	ldr	r0, [pc, #156]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002c2c:	f004 f922 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c34:	e002      	b.n	8002c3c <HardFault_Handler+0x80>
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	3301      	adds	r3, #1
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <HardFault_Handler+0x110>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	ddf8      	ble.n	8002c36 <HardFault_Handler+0x7a>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_SET);
 8002c44:	2201      	movs	r2, #1
 8002c46:	2110      	movs	r1, #16
 8002c48:	481f      	ldr	r0, [pc, #124]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002c4a:	f004 f913 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e002      	b.n	8002c5a <HardFault_Handler+0x9e>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	3301      	adds	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HardFault_Handler+0x110>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	ddf8      	ble.n	8002c54 <HardFault_Handler+0x98>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	2120      	movs	r1, #32
 8002c66:	4818      	ldr	r0, [pc, #96]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002c68:	f004 f904 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	e002      	b.n	8002c78 <HardFault_Handler+0xbc>
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	3301      	adds	r3, #1
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HardFault_Handler+0x110>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	ddf8      	ble.n	8002c72 <HardFault_Handler+0xb6>
			;
		HAL_GPIO_WritePin(LED_D1_PWM_GPIO_Port, LED_D1_PWM_Pin, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2108      	movs	r1, #8
 8002c84:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002c86:	f004 f8f5 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e002      	b.n	8002c96 <HardFault_Handler+0xda>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HardFault_Handler+0x110>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	ddf8      	ble.n	8002c90 <HardFault_Handler+0xd4>
			;
		HAL_GPIO_WritePin(LED_D2_PWM_GPIO_Port, LED_D2_PWM_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	4809      	ldr	r0, [pc, #36]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002ca4:	f004 f8e6 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e002      	b.n	8002cb4 <HardFault_Handler+0xf8>
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HardFault_Handler+0x110>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	ddf8      	ble.n	8002cae <HardFault_Handler+0xf2>
			;
		HAL_GPIO_WritePin(LED_D3_PWM_GPIO_Port, LED_D3_PWM_Pin, GPIO_PIN_RESET);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	4801      	ldr	r0, [pc, #4]	; (8002cc8 <HardFault_Handler+0x10c>)
 8002cc2:	f004 f8d7 	bl	8006e74 <HAL_GPIO_WritePin>
		for (int i = 0; i < HARD_FAULT_LED_DELAY; i++)
 8002cc6:	e7a4      	b.n	8002c12 <HardFault_Handler+0x56>
 8002cc8:	48000400 	.word	0x48000400
 8002ccc:	0007a11f 	.word	0x0007a11f

08002cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <MemManage_Handler+0x4>

08002cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H2_TARE_Pin);
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	f004 f8ef 	bl	8006ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA1_Channel1_IRQHandler+0x10>)
 8002d06:	f003 fe6b 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000280 	.word	0x20000280

08002d14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <CAN1_RX0_IRQHandler+0x10>)
 8002d1a:	f003 fa60 	bl	80061de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200002c8 	.word	0x200002c8

08002d28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d2e:	f006 fbdf 	bl	80094f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20002374 	.word	0x20002374

08002d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return 1;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_kill>:

int _kill(int pid, int sig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d56:	f00c faf3 	bl	800f340 <__errno>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2216      	movs	r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_exit>:

void _exit (int status)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ffe7 	bl	8002d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d7e:	e7fe      	b.n	8002d7e <_exit+0x12>

08002d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e00a      	b.n	8002da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d92:	f3af 8000 	nop.w
 8002d96:	4601      	mov	r1, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbf0      	blt.n	8002d92 <_read+0x12>
  }

  return len;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_close>:
  }
  return len;
}

int _close(int file)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de2:	605a      	str	r2, [r3, #4]
  return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_isatty>:

int _isatty(int file)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <_sbrk+0x5c>)
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <_sbrk+0x60>)
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <_sbrk+0x64>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <_sbrk+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e54:	f00c fa74 	bl	800f340 <__errno>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e009      	b.n	8002e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <_sbrk+0x64>)
 8002e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20010000 	.word	0x20010000
 8002e84:	00000400 	.word	0x00000400
 8002e88:	200023c0 	.word	0x200023c0
 8002e8c:	20003ef0 	.word	0x20003ef0

08002e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <SystemInit+0x20>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <SystemInit+0x20>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002eda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002ee2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002ee6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002ef0:	2263      	movs	r2, #99	; 0x63
 8002ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f00:	481d      	ldr	r0, [pc, #116]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002f02:	f006 f9bf 	bl	8009284 <HAL_TIM_PWM_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002f0c:	f7ff fb12 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f18:	f107 031c 	add.w	r3, r7, #28
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4816      	ldr	r0, [pc, #88]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002f20:	f007 f84a 	bl	8009fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002f2a:	f7ff fb03 	bl	8002534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2e:	2360      	movs	r3, #96	; 0x60
 8002f30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f3e:	463b      	mov	r3, r7
 8002f40:	2200      	movs	r2, #0
 8002f42:	4619      	mov	r1, r3
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002f46:	f006 fbf3 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002f50:	f7ff faf0 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	2204      	movs	r2, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002f5c:	f006 fbe8 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002f66:	f7ff fae5 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <MX_TIM2_Init+0xc4>)
 8002f6c:	f000 f824 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200023c4 	.word	0x200023c4

08002f7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x38>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d138      	bne.n	800304c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_TIM_MspPostInit+0x9c>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BEEPER_Pin;
 800300a:	2320      	movs	r3, #32
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003012:	2301      	movs	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003016:	2302      	movs	r3, #2
 8003018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800301a:	2301      	movs	r3, #1
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BEEPER_GPIO_Port, &GPIO_InitStruct);
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003028:	f003 fdba 	bl	8006ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_D1_PWM_Pin;
 800302c:	2308      	movs	r3, #8
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800303c:	2301      	movs	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_D1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <HAL_TIM_MspPostInit+0xa0>)
 8003048:	f003 fdaa 	bl	8006ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800304c:	bf00      	nop
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	48000400 	.word	0x48000400

0800305c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <MX_USART1_UART_Init+0x5c>)
 8003064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800306c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003082:	220c      	movs	r2, #12
 8003084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 8003094:	2200      	movs	r2, #0
 8003096:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 800309a:	2200      	movs	r2, #0
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <MX_USART1_UART_Init+0x58>)
 80030a0:	f007 f80e 	bl	800a0c0 <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80030aa:	f7ff fa43 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20002410 	.word	0x20002410
 80030b8:	40013800 	.word	0x40013800

080030bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b09e      	sub	sp, #120	; 0x78
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	2254      	movs	r2, #84	; 0x54
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f00c f8dd 	bl	800f29c <memset>
  if(uartHandle->Instance==USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_UART_MspInit+0xa4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d135      	bne.n	8003158 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030f0:	2300      	movs	r3, #0
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 fd25 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003104:	f7ff fa16 	bl	8002534 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_UART_MspInit+0xa8>)
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_UART_MspInit+0xa8>)
 800310e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003112:	6613      	str	r3, [r2, #96]	; 0x60
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_UART_MspInit+0xa8>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_UART_MspInit+0xa8>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_UART_MspInit+0xa8>)
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_UART_MspInit+0xa8>)
 800312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003138:	23c0      	movs	r3, #192	; 0xc0
 800313a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003144:	2303      	movs	r3, #3
 8003146:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003148:	2307      	movs	r3, #7
 800314a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003150:	4619      	mov	r1, r3
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <HAL_UART_MspInit+0xac>)
 8003154:	f003 fd24 	bl	8006ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003158:	bf00      	nop
 800315a:	3778      	adds	r7, #120	; 0x78
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013800 	.word	0x40013800
 8003164:	40021000 	.word	0x40021000
 8003168:	48000400 	.word	0x48000400

0800316c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003174:	2305      	movs	r3, #5
 8003176:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f001 facb 	bl	8004718 <null_ptr_check>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d133      	bne.n	80031f6 <bme280_init+0x8a>
		while (try_count) {
 800318e:	e028      	b.n	80031e2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003190:	f107 010d 	add.w	r1, r7, #13
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	20d0      	movs	r0, #208	; 0xd0
 800319a:	f000 f832 	bl	8003202 <bme280_get_regs>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d114      	bne.n	80031d4 <bme280_init+0x68>
 80031aa:	7b7b      	ldrb	r3, [r7, #13]
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d111      	bne.n	80031d4 <bme280_init+0x68>
				dev->chip_id = chip_id;
 80031b0:	7b7a      	ldrb	r2, [r7, #13]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f978 	bl	80034ac <bme280_soft_reset>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d110      	bne.n	80031ea <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f001 f919 	bl	8004400 <get_calib_data>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80031d2:	e00a      	b.n	80031ea <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2001      	movs	r0, #1
 80031da:	4798      	blx	r3
			--try_count;
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	3b01      	subs	r3, #1
 80031e0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1d3      	bne.n	8003190 <bme280_init+0x24>
 80031e8:	e000      	b.n	80031ec <bme280_init+0x80>
				break;
 80031ea:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80031f2:	23fe      	movs	r3, #254	; 0xfe
 80031f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003202:	b590      	push	{r4, r7, lr}
 8003204:	b087      	sub	sp, #28
 8003206:	af00      	add	r7, sp, #0
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	4613      	mov	r3, r2
 8003212:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f001 fa7f 	bl	8004718 <null_ptr_check>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800321e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d117      	bne.n	8003256 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	789b      	ldrb	r3, [r3, #2]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d003      	beq.n	8003236 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003234:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685c      	ldr	r4, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7858      	ldrb	r0, [r3, #1]
 800323e:	89bb      	ldrh	r3, [r7, #12]
 8003240:	7bf9      	ldrb	r1, [r7, #15]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	47a0      	blx	r4
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800324a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003252:	23fc      	movs	r3, #252	; 0xfc
 8003254:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}

08003262 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003262:	b590      	push	{r4, r7, lr}
 8003264:	b08d      	sub	sp, #52	; 0x34
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b0a      	cmp	r3, #10
 8003276:	d901      	bls.n	800327c <bme280_set_regs+0x1a>
		len = 10;
 8003278:	230a      	movs	r3, #10
 800327a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	f001 fa4b 	bl	8004718 <null_ptr_check>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800328c:	2b00      	cmp	r3, #0
 800328e:	d156      	bne.n	800333e <bme280_set_regs+0xdc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d053      	beq.n	800333e <bme280_set_regs+0xdc>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d050      	beq.n	800333e <bme280_set_regs+0xdc>
		if (len != 0) {
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d049      	beq.n	8003336 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	789b      	ldrb	r3, [r3, #2]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d01a      	beq.n	80032e6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e011      	b.n	80032dc <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80032b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	440b      	add	r3, r1
 80032ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80032d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032d6:	3301      	adds	r3, #1
 80032d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3e8      	bcc.n	80032b8 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d90d      	bls.n	8003308 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f107 0114 	add.w	r1, r7, #20
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f001 f8c8 	bl	800448a <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003306:	e001      	b.n	800330c <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689c      	ldr	r4, [r3, #8]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	7858      	ldrb	r0, [r3, #1]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	7819      	ldrb	r1, [r3, #0]
 8003318:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800331a:	f107 0214 	add.w	r2, r7, #20
 800331e:	47a0      	blx	r4
 8003320:	4603      	mov	r3, r0
 8003322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003326:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800332e:	23fc      	movs	r3, #252	; 0xfc
 8003330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003334:	e007      	b.n	8003346 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003336:	23fd      	movs	r3, #253	; 0xfd
 8003338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800333c:	e003      	b.n	8003346 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800333e:	23ff      	movs	r3, #255	; 0xff
 8003340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003344:	e000      	b.n	8003348 <bme280_set_regs+0xe6>
		if (len != 0) {
 8003346:	bf00      	nop
	}


	return rslt;
 8003348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800334c:	4618      	mov	r0, r3
 800334e:	3734      	adds	r7, #52	; 0x34
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}

08003354 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f001 f9d9 	bl	8004718 <null_ptr_check>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d13f      	bne.n	80033f2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003372:	f107 030e 	add.w	r3, r7, #14
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f874 	bl	8003466 <bme280_get_sensor_mode>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <bme280_set_sensor_settings+0x46>
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f000 fb36 	bl	8003a02 <put_device_to_sleep>
 8003396:	4603      	mov	r3, r0
 8003398:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d127      	bne.n	80033f2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	4619      	mov	r1, r3
 80033a6:	2007      	movs	r0, #7
 80033a8:	f001 f99a 	bl	80046e0 <are_settings_changed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f972 	bl	80036a6 <set_osr_settings>
 80033c2:	4603      	mov	r3, r0
 80033c4:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d111      	bne.n	80033f2 <bme280_set_sensor_settings+0x9e>
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4619      	mov	r1, r3
 80033d2:	2018      	movs	r0, #24
 80033d4:	f001 f984 	bl	80046e0 <are_settings_changed>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9f9 	bl	80037e0 <set_filter_standby_settings>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	6039      	str	r1, [r7, #0]
 8003408:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	f001 f984 	bl	8004718 <null_ptr_check>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d11e      	bne.n	800345a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800341c:	f107 030e 	add.w	r3, r7, #14
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f81f 	bl	8003466 <bme280_get_sensor_mode>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800342c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <bme280_set_sensor_mode+0x46>
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f000 fae1 	bl	8003a02 <put_device_to_sleep>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	6839      	ldr	r1, [r7, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 faa3 	bl	800399c <write_power_mode>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	f001 f951 	bl	8004718 <null_ptr_check>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10e      	bne.n	80034a0 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	20f4      	movs	r0, #244	; 0xf4
 800348a:	f7ff feba 	bl	8003202 <bme280_get_regs>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80034a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80034b4:	23e0      	movs	r3, #224	; 0xe0
 80034b6:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80034b8:	23b6      	movs	r3, #182	; 0xb6
 80034ba:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 f92b 	bl	8004718 <null_ptr_check>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80034ce:	f107 010d 	add.w	r1, r7, #13
 80034d2:	f107 000e 	add.w	r0, r7, #14
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f7ff fec2 	bl	8003262 <bme280_set_regs>
 80034de:	4603      	mov	r3, r0
 80034e0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2002      	movs	r0, #2
 80034e8:	4798      	blx	r3
	}

	return rslt;
 80034ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b08a      	sub	sp, #40	; 0x28
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 f8fd 	bl	8004718 <null_ptr_check>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003528:	2b00      	cmp	r3, #0
 800352a:	d124      	bne.n	8003576 <bme280_get_sensor_data+0x80>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003532:	f107 011c 	add.w	r1, r7, #28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	20f7      	movs	r0, #247	; 0xf7
 800353c:	f7ff fe61 	bl	8003202 <bme280_get_regs>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003546:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800354e:	f107 0210 	add.w	r2, r7, #16
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f815 	bl	8003588 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3310      	adds	r3, #16
 8003562:	f107 0110 	add.w	r1, r7, #16
 8003566:	7bf8      	ldrb	r0, [r7, #15]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	f000 f853 	bl	8003614 <bme280_compensate_data>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003574:	e002      	b.n	800357c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003576:	23ff      	movs	r3, #255	; 0xff
 8003578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800357c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	031b      	lsls	r3, r3, #12
 8003598:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3301      	adds	r3, #1
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3302      	adds	r3, #2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3303      	adds	r3, #3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3305      	adds	r3, #5
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3306      	adds	r3, #6
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3307      	adds	r3, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d033      	beq.n	8003696 <bme280_compensate_data+0x82>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d030      	beq.n	8003696 <bme280_compensate_data+0x82>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02d      	beq.n	8003696 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	68b8      	ldr	r0, [r7, #8]
 800365a:	f000 fa1f 	bl	8003a9c <compensate_temperature>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f000 fa75 	bl	8003b60 <compensate_pressure>
 8003676:	4602      	mov	r2, r0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	68b8      	ldr	r0, [r7, #8]
 800368a:	f000 fe0d 	bl	80042a8 <compensate_humidity>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8003694:	e001      	b.n	800369a <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003696:	23ff      	movs	r3, #255	; 0xff
 8003698:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800369a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	68b8      	ldr	r0, [r7, #8]
 80036c6:	f000 f815 	bl	80036f4 <set_osr_humidity_settings>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f842 	bl	8003768 <set_osr_press_temp_settings>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80036e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80036fe:	23f2      	movs	r3, #242	; 0xf2
 8003700:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	b2db      	uxtb	r3, r3
 800370c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800370e:	f107 010e 	add.w	r1, r7, #14
 8003712:	f107 000c 	add.w	r0, r7, #12
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	f7ff fda2 	bl	8003262 <bme280_set_regs>
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800372a:	23f4      	movs	r3, #244	; 0xf4
 800372c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800372e:	7b38      	ldrb	r0, [r7, #12]
 8003730:	f107 010d 	add.w	r1, r7, #13
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	f7ff fd63 	bl	8003202 <bme280_get_regs>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003748:	f107 010d 	add.w	r1, r7, #13
 800374c:	f107 000c 	add.w	r0, r7, #12
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	f7ff fd85 	bl	8003262 <bme280_set_regs>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800375c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003776:	23f4      	movs	r3, #244	; 0xf4
 8003778:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800377a:	7db8      	ldrb	r0, [r7, #22]
 800377c:	f107 0115 	add.w	r1, r7, #21
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f7ff fd3d 	bl	8003202 <bme280_get_regs>
 8003788:	4603      	mov	r3, r0
 800378a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800378c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11f      	bne.n	80037d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800379e:	f107 0315 	add.w	r3, r7, #21
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f88e 	bl	80038c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80037b4:	f107 0315 	add.w	r3, r7, #21
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f8a0 	bl	8003900 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80037c0:	f107 0115 	add.w	r1, r7, #21
 80037c4:	f107 0016 	add.w	r0, r7, #22
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f7ff fd49 	bl	8003262 <bme280_set_regs>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80037d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80037ee:	23f5      	movs	r3, #245	; 0xf5
 80037f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80037f2:	7db8      	ldrb	r0, [r7, #22]
 80037f4:	f107 0115 	add.w	r1, r7, #21
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f7ff fd01 	bl	8003202 <bme280_get_regs>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11f      	bne.n	800384c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003816:	f107 0315 	add.w	r3, r7, #21
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f81b 	bl	8003858 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800382c:	f107 0315 	add.w	r3, r7, #21
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f82d 	bl	8003892 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003838:	f107 0115 	add.w	r1, r7, #21
 800383c:	f107 0016 	add.w	r0, r7, #22
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f7ff fd0d 	bl	8003262 <bme280_set_regs>
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800384c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f023 031c 	bic.w	r3, r3, #28
 800386c:	b25a      	sxtb	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	78db      	ldrb	r3, [r3, #3]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	b25b      	sxtb	r3, r3
 8003876:	f003 031c 	and.w	r3, r3, #28
 800387a:	b25b      	sxtb	r3, r3
 800387c:	4313      	orrs	r3, r2
 800387e:	b25b      	sxtb	r3, r3
 8003880:	b2da      	uxtb	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	701a      	strb	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	701a      	strb	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	f023 031c 	bic.w	r3, r3, #28
 80038da:	b25a      	sxtb	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	f003 031c 	and.w	r3, r3, #28
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	701a      	strb	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b25b      	sxtb	r3, r3
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	b25a      	sxtb	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	015b      	lsls	r3, r3, #5
 800391c:	b25b      	sxtb	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	b25b      	sxtb	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	701a      	strb	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	b2da      	uxtb	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3302      	adds	r3, #2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	109b      	asrs	r3, r3, #2
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	b2da      	uxtb	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3302      	adds	r3, #2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	b2da      	uxtb	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3303      	adds	r3, #3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	109b      	asrs	r3, r3, #2
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	b2da      	uxtb	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3303      	adds	r3, #3
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2da      	uxtb	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	711a      	strb	r2, [r3, #4]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80039a8:	23f4      	movs	r3, #244	; 0xf4
 80039aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80039ac:	7bb8      	ldrb	r0, [r7, #14]
 80039ae:	f107 010d 	add.w	r1, r7, #13
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f7ff fc24 	bl	8003202 <bme280_get_regs>
 80039ba:	4603      	mov	r3, r0
 80039bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d117      	bne.n	80039f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	b25a      	sxtb	r2, r3
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	4313      	orrs	r3, r2
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80039e2:	f107 010d 	add.w	r1, r7, #13
 80039e6:	f107 000e 	add.w	r0, r7, #14
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f7ff fc38 	bl	8003262 <bme280_set_regs>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8003a0a:	f107 0110 	add.w	r1, r7, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	20f2      	movs	r0, #242	; 0xf2
 8003a14:	f7ff fbf5 	bl	8003202 <bme280_get_regs>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8003a1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8003a24:	f107 0208 	add.w	r2, r7, #8
 8003a28:	f107 0310 	add.w	r3, r7, #16
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff80 	bl	8003934 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fd39 	bl	80034ac <bme280_soft_reset>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8003a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f808 	bl	8003a62 <reload_device_settings>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	201f      	movs	r0, #31
 8003a72:	f7ff fe18 	bl	80036a6 <set_osr_settings>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	201f      	movs	r0, #31
 8003a88:	f7ff feaa 	bl	80037e0 <set_filter_standby_settings>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8003a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <compensate_temperature+0xc0>)
 8003aa8:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8003aaa:	f242 1334 	movw	r3, #8500	; 0x2134
 8003aae:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	0052      	lsls	r2, r2, #1
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da01      	bge.n	8003ad6 <compensate_temperature+0x3a>
 8003ad2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003ad6:	12db      	asrs	r3, r3, #11
 8003ad8:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	fb03 f303 	mul.w	r3, r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	da01      	bge.n	8003af6 <compensate_temperature+0x5a>
 8003af2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003af6:	131b      	asrs	r3, r3, #12
 8003af8:	461a      	mov	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	da02      	bge.n	8003b0e <compensate_temperature+0x72>
 8003b08:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8003b0c:	333f      	adds	r3, #63	; 0x3f
 8003b0e:	139b      	asrs	r3, r3, #14
 8003b10:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	441a      	add	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3380      	adds	r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da00      	bge.n	8003b2e <compensate_temperature+0x92>
 8003b2c:	33ff      	adds	r3, #255	; 0xff
 8003b2e:	121b      	asrs	r3, r3, #8
 8003b30:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	da02      	bge.n	8003b40 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e005      	b.n	8003b4c <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dd01      	ble.n	8003b4c <compensate_temperature+0xb0>
		temperature = temperature_max;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	61fb      	str	r3, [r7, #28]

	return temperature;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	fffff060 	.word	0xfffff060

08003b60 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b0ea      	sub	sp, #424	; 0x1a8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8003b6c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8003b70:	4bbf      	ldr	r3, [pc, #764]	; (8003e70 <compensate_pressure+0x310>)
 8003b72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 8003b76:	4bbf      	ldr	r3, [pc, #764]	; (8003e74 <compensate_pressure+0x314>)
 8003b78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8003b7c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	17da      	asrs	r2, r3, #31
 8003b84:	4698      	mov	r8, r3
 8003b86:	4691      	mov	r9, r2
 8003b88:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8003b8c:	f149 3bff 	adc.w	fp, r9, #4294967295
 8003b90:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8003b94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b9c:	fb03 f102 	mul.w	r1, r3, r2
 8003ba0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ba4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	18ca      	adds	r2, r1, r3
 8003bae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bb2:	fba3 4503 	umull	r4, r5, r3, r3
 8003bb6:	1953      	adds	r3, r2, r5
 8003bb8:	461d      	mov	r5, r3
 8003bba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003bbe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	17da      	asrs	r2, r3, #31
 8003bc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bca:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003bce:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	fb03 f205 	mul.w	r2, r3, r5
 8003bd8:	460b      	mov	r3, r1
 8003bda:	fb04 f303 	mul.w	r3, r4, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	4602      	mov	r2, r0
 8003be2:	fba4 1202 	umull	r1, r2, r4, r2
 8003be6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003bea:	460a      	mov	r2, r1
 8003bec:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8003bf0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003bfa:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8003bfe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8003c02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8003c06:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003c0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c0e:	b21b      	sxth	r3, r3
 8003c10:	17da      	asrs	r2, r3, #31
 8003c12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c1e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003c22:	462a      	mov	r2, r5
 8003c24:	fb02 f203 	mul.w	r2, r2, r3
 8003c28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	441a      	add	r2, r3
 8003c34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c38:	4621      	mov	r1, r4
 8003c3a:	fba3 1301 	umull	r1, r3, r3, r1
 8003c3e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003c42:	460b      	mov	r3, r1
 8003c44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003c48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003c4c:	18d3      	adds	r3, r2, r3
 8003c4e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8003c5e:	462b      	mov	r3, r5
 8003c60:	0459      	lsls	r1, r3, #17
 8003c62:	4623      	mov	r3, r4
 8003c64:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003c68:	4623      	mov	r3, r4
 8003c6a:	0458      	lsls	r0, r3, #17
 8003c6c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c70:	1814      	adds	r4, r2, r0
 8003c72:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003c76:	414b      	adcs	r3, r1
 8003c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c7c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003c80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8003c84:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003c88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	17da      	asrs	r2, r3, #31
 8003c90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003c94:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ca4:	00d9      	lsls	r1, r3, #3
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003cac:	1814      	adds	r4, r2, r0
 8003cae:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003cb2:	414b      	adcs	r3, r1
 8003cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cb8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003cbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8003cc0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003cc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003cc8:	fb03 f102 	mul.w	r1, r3, r2
 8003ccc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003cd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	18ca      	adds	r2, r1, r3
 8003cda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003cde:	fba3 1303 	umull	r1, r3, r3, r3
 8003ce2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003cec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003cf0:	18d3      	adds	r3, r2, r3
 8003cf2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003cf6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003cfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	17da      	asrs	r2, r3, #31
 8003d02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d06:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003d0a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003d0e:	462b      	mov	r3, r5
 8003d10:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8003d14:	4642      	mov	r2, r8
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	4622      	mov	r2, r4
 8003d26:	4641      	mov	r1, r8
 8003d28:	fba2 1201 	umull	r1, r2, r2, r1
 8003d2c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8003d30:	460a      	mov	r2, r1
 8003d32:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8003d36:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003d40:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da09      	bge.n	8003d5c <compensate_pressure+0x1fc>
 8003d48:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8003d4c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003d50:	f143 0300 	adc.w	r3, r3, #0
 8003d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d58:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003d5c:	f04f 0000 	mov.w	r0, #0
 8003d60:	f04f 0100 	mov.w	r1, #0
 8003d64:	0a10      	lsrs	r0, r2, #8
 8003d66:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003d6a:	1219      	asrs	r1, r3, #8
 8003d6c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003d70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	17da      	asrs	r2, r3, #31
 8003d78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003d7c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003d80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d84:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003d88:	464a      	mov	r2, r9
 8003d8a:	fb02 f203 	mul.w	r2, r2, r3
 8003d8e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d92:	4644      	mov	r4, r8
 8003d94:	fb04 f303 	mul.w	r3, r4, r3
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d9e:	4644      	mov	r4, r8
 8003da0:	fba3 4304 	umull	r4, r3, r3, r4
 8003da4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003da8:	4623      	mov	r3, r4
 8003daa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003dae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003db2:	18d3      	adds	r3, r2, r3
 8003db4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8003dc4:	464c      	mov	r4, r9
 8003dc6:	0323      	lsls	r3, r4, #12
 8003dc8:	4644      	mov	r4, r8
 8003dca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003dce:	4644      	mov	r4, r8
 8003dd0:	0322      	lsls	r2, r4, #12
 8003dd2:	1884      	adds	r4, r0, r2
 8003dd4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003dd8:	eb41 0303 	adc.w	r3, r1, r3
 8003ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003de0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003de4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df0:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8003df4:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003df8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003dfc:	1884      	adds	r4, r0, r2
 8003dfe:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8003e02:	eb41 0303 	adc.w	r3, r1, r3
 8003e06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e0a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003e0e:	88db      	ldrh	r3, [r3, #6]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e18:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003e1c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8003e20:	462b      	mov	r3, r5
 8003e22:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8003e26:	4642      	mov	r2, r8
 8003e28:	fb02 f203 	mul.w	r2, r2, r3
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	4621      	mov	r1, r4
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	4622      	mov	r2, r4
 8003e38:	4641      	mov	r1, r8
 8003e3a:	fba2 1201 	umull	r1, r2, r2, r1
 8003e3e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e42:	460a      	mov	r2, r1
 8003e44:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e48:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e52:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da0e      	bge.n	8003e78 <compensate_pressure+0x318>
 8003e5a:	1e51      	subs	r1, r2, #1
 8003e5c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003e60:	f143 0301 	adc.w	r3, r3, #1
 8003e64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e6c:	e004      	b.n	8003e78 <compensate_pressure+0x318>
 8003e6e:	bf00      	nop
 8003e70:	002dc6c0 	.word	0x002dc6c0
 8003e74:	00a7d8c0 	.word	0x00a7d8c0
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	1058      	asrs	r0, r3, #1
 8003e82:	17d9      	asrs	r1, r3, #31
 8003e84:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8003e88:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f000 81fc 	beq.w	800428a <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8003e92:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ea6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003eaa:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8003eae:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8003ec0:	07d0      	lsls	r0, r2, #31
 8003ec2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ec6:	1a84      	subs	r4, r0, r2
 8003ec8:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8003ecc:	eb61 0303 	sbc.w	r3, r1, r3
 8003ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ed4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ed8:	4622      	mov	r2, r4
 8003eda:	462b      	mov	r3, r5
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	67b9      	str	r1, [r7, #120]	; 0x78
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ee4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ee8:	4621      	mov	r1, r4
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6739      	str	r1, [r7, #112]	; 0x70
 8003eee:	4629      	mov	r1, r5
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f00:	4649      	mov	r1, r9
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	4641      	mov	r1, r8
 8003f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	018a      	lsls	r2, r1, #6
 8003f0e:	4641      	mov	r1, r8
 8003f10:	1889      	adds	r1, r1, r2
 8003f12:	66b9      	str	r1, [r7, #104]	; 0x68
 8003f14:	4649      	mov	r1, r9
 8003f16:	eb43 0101 	adc.w	r1, r3, r1
 8003f1a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003f28:	4649      	mov	r1, r9
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f32:	4641      	mov	r1, r8
 8003f34:	008a      	lsls	r2, r1, #2
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	663b      	str	r3, [r7, #96]	; 0x60
 8003f42:	460b      	mov	r3, r1
 8003f44:	462a      	mov	r2, r5
 8003f46:	eb42 0303 	adc.w	r3, r2, r3
 8003f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f58:	4649      	mov	r1, r9
 8003f5a:	008b      	lsls	r3, r1, #2
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f62:	4641      	mov	r1, r8
 8003f64:	008a      	lsls	r2, r1, #2
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f74:	462b      	mov	r3, r5
 8003f76:	460a      	mov	r2, r1
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f80:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f88:	f7fc fe5e 	bl	8000c48 <__aeabi_ldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8003f94:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003f98:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	17da      	asrs	r2, r3, #31
 8003fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fa4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fa8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da08      	bge.n	8003fc2 <compensate_pressure+0x462>
 8003fb0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8003fb4:	1851      	adds	r1, r2, r1
 8003fb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fb8:	f143 0300 	adc.w	r3, r3, #0
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0b50      	lsrs	r0, r2, #13
 8003fcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003fd0:	1359      	asrs	r1, r3, #13
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003fda:	4629      	mov	r1, r5
 8003fdc:	fb02 f001 	mul.w	r0, r2, r1
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	fb01 f103 	mul.w	r1, r1, r3
 8003fe6:	4401      	add	r1, r0
 8003fe8:	4620      	mov	r0, r4
 8003fea:	fba0 2302 	umull	r2, r3, r0, r2
 8003fee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003ff8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ffc:	18cb      	adds	r3, r1, r3
 8003ffe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004002:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8004006:	2b00      	cmp	r3, #0
 8004008:	da08      	bge.n	800401c <compensate_pressure+0x4bc>
 800400a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800400e:	1851      	adds	r1, r2, r1
 8004010:	6539      	str	r1, [r7, #80]	; 0x50
 8004012:	f143 0300 	adc.w	r3, r3, #0
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
 8004018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800401c:	f04f 0000 	mov.w	r0, #0
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	0b50      	lsrs	r0, r2, #13
 8004026:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800402a:	1359      	asrs	r1, r3, #13
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8004034:	4629      	mov	r1, r5
 8004036:	fb02 f001 	mul.w	r0, r2, r1
 800403a:	4621      	mov	r1, r4
 800403c:	fb01 f103 	mul.w	r1, r1, r3
 8004040:	4401      	add	r1, r0
 8004042:	4620      	mov	r0, r4
 8004044:	fba0 2302 	umull	r2, r3, r0, r2
 8004048:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800404c:	4613      	mov	r3, r2
 800404e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004052:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004056:	18cb      	adds	r3, r1, r3
 8004058:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800405c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004060:	2b00      	cmp	r3, #0
 8004062:	da08      	bge.n	8004076 <compensate_pressure+0x516>
 8004064:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004068:	1851      	adds	r1, r2, r1
 800406a:	64b9      	str	r1, [r7, #72]	; 0x48
 800406c:	f143 0300 	adc.w	r3, r3, #0
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004072:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	0e50      	lsrs	r0, r2, #25
 8004080:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004084:	1659      	asrs	r1, r3, #25
 8004086:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 800408a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800408e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004092:	b21b      	sxth	r3, r3
 8004094:	17da      	asrs	r2, r3, #31
 8004096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800409a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800409e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80040a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80040a6:	462a      	mov	r2, r5
 80040a8:	fb02 f203 	mul.w	r2, r2, r3
 80040ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80040b0:	4621      	mov	r1, r4
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80040bc:	4621      	mov	r1, r4
 80040be:	fba3 1301 	umull	r1, r3, r3, r1
 80040c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80040c6:	460b      	mov	r3, r1
 80040c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80040cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040d0:	18d3      	adds	r3, r2, r3
 80040d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80040d6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da07      	bge.n	80040ee <compensate_pressure+0x58e>
 80040de:	4971      	ldr	r1, [pc, #452]	; (80042a4 <compensate_pressure+0x744>)
 80040e0:	1851      	adds	r1, r2, r1
 80040e2:	6439      	str	r1, [r7, #64]	; 0x40
 80040e4:	f143 0300 	adc.w	r3, r3, #0
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ee:	f04f 0000 	mov.w	r0, #0
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	0cd0      	lsrs	r0, r2, #19
 80040f8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 80040fc:	14d9      	asrs	r1, r3, #19
 80040fe:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8004102:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8004106:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800410a:	1884      	adds	r4, r0, r2
 800410c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004110:	eb41 0303 	adc.w	r3, r1, r3
 8004114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004118:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800411c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004120:	4621      	mov	r1, r4
 8004122:	1889      	adds	r1, r1, r2
 8004124:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004128:	4629      	mov	r1, r5
 800412a:	eb43 0101 	adc.w	r1, r3, r1
 800412e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8004132:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004136:	2b00      	cmp	r3, #0
 8004138:	da07      	bge.n	800414a <compensate_pressure+0x5ea>
 800413a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800413e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004140:	f143 0300 	adc.w	r3, r3, #0
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004146:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0a10      	lsrs	r0, r2, #8
 8004154:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004158:	1219      	asrs	r1, r3, #8
 800415a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800415e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004162:	b21b      	sxth	r3, r3
 8004164:	17da      	asrs	r2, r3, #31
 8004166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800416a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800417a:	464c      	mov	r4, r9
 800417c:	0123      	lsls	r3, r4, #4
 800417e:	4644      	mov	r4, r8
 8004180:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004184:	4644      	mov	r4, r8
 8004186:	0122      	lsls	r2, r4, #4
 8004188:	1884      	adds	r4, r0, r2
 800418a:	633c      	str	r4, [r7, #48]	; 0x30
 800418c:	eb41 0303 	adc.w	r3, r1, r3
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
 8004192:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004196:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800419a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800419e:	0fd9      	lsrs	r1, r3, #31
 80041a0:	2000      	movs	r0, #0
 80041a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80041a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041a6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80041aa:	4621      	mov	r1, r4
 80041ac:	1889      	adds	r1, r1, r2
 80041ae:	6239      	str	r1, [r7, #32]
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb43 0101 	adc.w	r1, r3, r1
 80041b6:	6279      	str	r1, [r7, #36]	; 0x24
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041c4:	4621      	mov	r1, r4
 80041c6:	084a      	lsrs	r2, r1, #1
 80041c8:	4629      	mov	r1, r5
 80041ca:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80041ce:	4629      	mov	r1, r5
 80041d0:	104b      	asrs	r3, r1, #1
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	1894      	adds	r4, r2, r2
 80041dc:	61bc      	str	r4, [r7, #24]
 80041de:	415b      	adcs	r3, r3
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e6:	1814      	adds	r4, r2, r0
 80041e8:	613c      	str	r4, [r7, #16]
 80041ea:	414b      	adcs	r3, r1
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80041fa:	464c      	mov	r4, r9
 80041fc:	0163      	lsls	r3, r4, #5
 80041fe:	4644      	mov	r4, r8
 8004200:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004204:	4644      	mov	r4, r8
 8004206:	0162      	lsls	r2, r4, #5
 8004208:	4644      	mov	r4, r8
 800420a:	18a4      	adds	r4, r4, r2
 800420c:	60bc      	str	r4, [r7, #8]
 800420e:	464c      	mov	r4, r9
 8004210:	eb43 0404 	adc.w	r4, r3, r4
 8004214:	60fc      	str	r4, [r7, #12]
 8004216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800421a:	4623      	mov	r3, r4
 800421c:	181b      	adds	r3, r3, r0
 800421e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004222:	462b      	mov	r3, r5
 8004224:	eb41 0303 	adc.w	r3, r1, r3
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800422c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004230:	2b00      	cmp	r3, #0
 8004232:	da07      	bge.n	8004244 <compensate_pressure+0x6e4>
 8004234:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	f143 0300 	adc.w	r3, r3, #0
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	09d0      	lsrs	r0, r2, #7
 800424e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8004252:	11d9      	asrs	r1, r3, #7
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 800425e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004262:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004266:	429a      	cmp	r2, r3
 8004268:	d204      	bcs.n	8004274 <compensate_pressure+0x714>
			pressure = pressure_min;
 800426a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800426e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004272:	e00e      	b.n	8004292 <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8004274:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004278:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <compensate_pressure+0x732>
			pressure = pressure_max;
 8004280:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004284:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004288:	e003      	b.n	8004292 <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 800428a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800428e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 8004292:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 8004296:	4618      	mov	r0, r3
 8004298:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	0007ffff 	.word	0x0007ffff

080042a8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b08b      	sub	sp, #44	; 0x2c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80042b2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80042b6:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80042c0:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	039b      	lsls	r3, r3, #14
 80042c8:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80042d0:	051b      	lsls	r3, r3, #20
 80042d2:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80042da:	461a      	mov	r2, r3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da02      	bge.n	80042fc <compensate_humidity+0x54>
 80042f6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80042fa:	337f      	adds	r3, #127	; 0x7f
 80042fc:	13db      	asrs	r3, r3, #15
 80042fe:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004306:	461a      	mov	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	da01      	bge.n	8004316 <compensate_humidity+0x6e>
 8004312:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004316:	129b      	asrs	r3, r3, #10
 8004318:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	7f1b      	ldrb	r3, [r3, #28]
 800431e:	461a      	mov	r2, r3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	da01      	bge.n	800432e <compensate_humidity+0x86>
 800432a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800432e:	12db      	asrs	r3, r3, #11
 8004330:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	da01      	bge.n	8004346 <compensate_humidity+0x9e>
 8004342:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004346:	129b      	asrs	r3, r3, #10
 8004348:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800434c:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004354:	461a      	mov	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004360:	2b00      	cmp	r3, #0
 8004362:	da02      	bge.n	800436a <compensate_humidity+0xc2>
 8004364:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004368:	333f      	adds	r3, #63	; 0x3f
 800436a:	139b      	asrs	r3, r3, #14
 800436c:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da02      	bge.n	8004384 <compensate_humidity+0xdc>
 800437e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004382:	337f      	adds	r3, #127	; 0x7f
 8004384:	13db      	asrs	r3, r3, #15
 8004386:	461a      	mov	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da02      	bge.n	8004394 <compensate_humidity+0xec>
 800438e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004392:	337f      	adds	r3, #127	; 0x7f
 8004394:	13db      	asrs	r3, r3, #15
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	da00      	bge.n	80043a0 <compensate_humidity+0xf8>
 800439e:	337f      	adds	r3, #127	; 0x7f
 80043a0:	11db      	asrs	r3, r3, #7
 80043a2:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7e1b      	ldrb	r3, [r3, #24]
 80043a8:	461a      	mov	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da00      	bge.n	80043b6 <compensate_humidity+0x10e>
 80043b4:	330f      	adds	r3, #15
 80043b6:	111b      	asrs	r3, r3, #4
 80043b8:	425b      	negs	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043c8:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80043d0:	bfa8      	it	ge
 80043d2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80043d6:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da01      	bge.n	80043e2 <compensate_humidity+0x13a>
 80043de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80043e2:	131b      	asrs	r3, r3, #12
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <compensate_humidity+0x14a>
		humidity = humidity_max;
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	372c      	adds	r7, #44	; 0x2c
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004408:	2388      	movs	r3, #136	; 0x88
 800440a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	f107 0310 	add.w	r3, r7, #16
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	611a      	str	r2, [r3, #16]
 8004422:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004424:	f107 010c 	add.w	r1, r7, #12
 8004428:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	221a      	movs	r2, #26
 8004430:	f7fe fee7 	bl	8003202 <bme280_get_regs>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800443a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11d      	bne.n	800447e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004442:	f107 030c 	add.w	r3, r7, #12
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f84a 	bl	80044e2 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800444e:	23e1      	movs	r3, #225	; 0xe1
 8004450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004454:	f107 010c 	add.w	r1, r7, #12
 8004458:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2207      	movs	r2, #7
 8004460:	f7fe fecf 	bl	8003202 <bme280_get_regs>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800446a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f8e2 	bl	8004642 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800447e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004482:	4618      	mov	r0, r3
 8004484:	3728      	adds	r7, #40	; 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
 800449c:	e016      	b.n	80044cc <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	441a      	add	r2, r3
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	440b      	add	r3, r1
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	441a      	add	r2, r3
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4619      	mov	r1, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	440b      	add	r3, r1
 80044c2:	7812      	ldrb	r2, [r2, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	3301      	adds	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
 80044cc:	7dfa      	ldrb	r2, [r7, #23]
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3e4      	bcc.n	800449e <interleave_reg_addr+0x14>
	}
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	3310      	adds	r3, #16
 80044f0:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3301      	adds	r3, #1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	b21a      	sxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b21b      	sxth	r3, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	b21b      	sxth	r3, r3
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3303      	adds	r3, #3
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b21a      	sxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3302      	adds	r3, #2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b21b      	sxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b21a      	sxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3305      	adds	r3, #5
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	b21a      	sxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b21b      	sxth	r3, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	b21a      	sxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3307      	adds	r3, #7
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	b21a      	sxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3306      	adds	r3, #6
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b21b      	sxth	r3, r3
 8004552:	4313      	orrs	r3, r2
 8004554:	b21b      	sxth	r3, r3
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3309      	adds	r3, #9
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	b21a      	sxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3308      	adds	r3, #8
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b21b      	sxth	r3, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	b21a      	sxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	330b      	adds	r3, #11
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b21a      	sxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	330a      	adds	r3, #10
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b21b      	sxth	r3, r3
 8004588:	4313      	orrs	r3, r2
 800458a:	b21a      	sxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	330d      	adds	r3, #13
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	b21a      	sxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	330c      	adds	r3, #12
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	4313      	orrs	r3, r2
 80045a4:	b21a      	sxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	330f      	adds	r3, #15
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	b21a      	sxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	330e      	adds	r3, #14
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b21b      	sxth	r3, r3
 80045bc:	4313      	orrs	r3, r2
 80045be:	b21a      	sxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3311      	adds	r3, #17
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	b21a      	sxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3310      	adds	r3, #16
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b21b      	sxth	r3, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b21a      	sxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3313      	adds	r3, #19
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	b21a      	sxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3312      	adds	r3, #18
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b21b      	sxth	r3, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3315      	adds	r3, #21
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	b21a      	sxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3314      	adds	r3, #20
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b21b      	sxth	r3, r3
 800460a:	4313      	orrs	r3, r2
 800460c:	b21a      	sxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3317      	adds	r3, #23
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	b21a      	sxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3316      	adds	r3, #22
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b21b      	sxth	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	b21a      	sxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3319      	adds	r3, #25
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	761a      	strb	r2, [r3, #24]

}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3310      	adds	r3, #16
 8004650:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3301      	adds	r3, #1
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b21a      	sxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b21b      	sxth	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	b21a      	sxth	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3302      	adds	r3, #2
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3303      	adds	r3, #3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b25b      	sxtb	r3, r3
 800467c:	b29b      	uxth	r3, r3
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	b29b      	uxth	r3, r3
 8004682:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b21b      	sxth	r3, r3
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004692:	8a7a      	ldrh	r2, [r7, #18]
 8004694:	8a3b      	ldrh	r3, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	b21a      	sxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3305      	adds	r3, #5
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80046ba:	89fa      	ldrh	r2, [r7, #14]
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	b21a      	sxth	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3306      	adds	r3, #6
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	460a      	mov	r2, r1
 80046ea:	71fb      	strb	r3, [r7, #7]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80046f4:	79fa      	ldrb	r2, [r7, #7]
 80046f6:	79bb      	ldrb	r3, [r7, #6]
 80046f8:	4013      	ands	r3, r2
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e001      	b.n	800470a <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <null_ptr_check+0x26>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <null_ptr_check+0x26>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <null_ptr_check+0x26>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800473e:	23ff      	movs	r3, #255	; 0xff
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e001      	b.n	8004748 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800475c:	f7fe fb98 	bl	8002e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004760:	480c      	ldr	r0, [pc, #48]	; (8004794 <LoopForever+0x6>)
  ldr r1, =_edata
 8004762:	490d      	ldr	r1, [pc, #52]	; (8004798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <LoopForever+0xe>)
  movs r3, #0
 8004766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004768:	e002      	b.n	8004770 <LoopCopyDataInit>

0800476a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800476a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800476c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800476e:	3304      	adds	r3, #4

08004770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004774:	d3f9      	bcc.n	800476a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004778:	4c0a      	ldr	r4, [pc, #40]	; (80047a4 <LoopForever+0x16>)
  movs r3, #0
 800477a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800477c:	e001      	b.n	8004782 <LoopFillZerobss>

0800477e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800477e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004780:	3204      	adds	r2, #4

08004782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004784:	d3fb      	bcc.n	800477e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004786:	f00a fde1 	bl	800f34c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800478a:	f7fd fe49 	bl	8002420 <main>

0800478e <LoopForever>:

LoopForever:
    b LoopForever
 800478e:	e7fe      	b.n	800478e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004790:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004798:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800479c:	080138a8 	.word	0x080138a8
  ldr r2, =_sbss
 80047a0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80047a4:	20003eec 	.word	0x20003eec

080047a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047a8:	e7fe      	b.n	80047a8 <ADC1_IRQHandler>

080047aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b4:	2003      	movs	r0, #3
 80047b6:	f001 ffc6 	bl	8006746 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047ba:	200f      	movs	r0, #15
 80047bc:	f7fe f98a 	bl	8002ad4 <HAL_InitTick>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	71fb      	strb	r3, [r7, #7]
 80047ca:	e001      	b.n	80047d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047cc:	f7fe f95a 	bl	8002a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047d0:	79fb      	ldrb	r3, [r7, #7]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_IncTick+0x20>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_IncTick+0x24>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <HAL_IncTick+0x24>)
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000020 	.word	0x20000020
 8004800:	20002494 	.word	0x20002494

08004804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return uwTick;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_GetTick+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20002494 	.word	0x20002494

0800481c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004824:	f7ff ffee 	bl	8004804 <HAL_GetTick>
 8004828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d005      	beq.n	8004842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_Delay+0x44>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004842:	bf00      	nop
 8004844:	f7ff ffde 	bl	8004804 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d8f7      	bhi.n	8004844 <HAL_Delay+0x28>
  {
  }
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000020 	.word	0x20000020

08004864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3360      	adds	r3, #96	; 0x60
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <LL_ADC_SetOffset+0x44>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	03fff000 	.word	0x03fff000

08004914 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3360      	adds	r3, #96	; 0x60
 8004922:	461a      	mov	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3360      	adds	r3, #96	; 0x60
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	431a      	orrs	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	211f      	movs	r1, #31
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	401a      	ands	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0e9b      	lsrs	r3, r3, #26
 80049d4:	f003 011f 	and.w	r1, r3, #31
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	431a      	orrs	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3314      	adds	r3, #20
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0e5b      	lsrs	r3, r3, #25
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	0d1b      	lsrs	r3, r3, #20
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2107      	movs	r1, #7
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	401a      	ands	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0d1b      	lsrs	r3, r3, #20
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0318 	and.w	r3, r3, #24
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a70:	40d9      	lsrs	r1, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	400b      	ands	r3, r1
 8004a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	0007ffff 	.word	0x0007ffff

08004a94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6093      	str	r3, [r2, #8]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004acc:	d101      	bne.n	8004ad2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1c:	d101      	bne.n	8004b22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <LL_ADC_IsEnabled+0x18>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <LL_ADC_IsEnabled+0x1a>
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b92:	f043 0204 	orr.w	r2, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d101      	bne.n	8004bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d101      	bne.n	8004be4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e12c      	b.n	8004e68 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fc faff 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff3f 	bl	8004ab8 <LL_ADC_IsDeepPowerDownEnabled>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff25 	bl	8004a94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff5a 	bl	8004b08 <LL_ADC_IsInternalRegulatorEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ff3e 	bl	8004ae0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c64:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <HAL_ADC_Init+0x27c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	4a82      	ldr	r2, [pc, #520]	; (8004e74 <HAL_ADC_Init+0x280>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	3301      	adds	r3, #1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c78:	e002      	b.n	8004c80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f9      	bne.n	8004c7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff3c 	bl	8004b08 <LL_ADC_IsInternalRegulatorEnabled>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0210 	orr.w	r2, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ff75 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004cbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 80c5 	bne.w	8004e56 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 80c1 	bne.w	8004e56 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cdc:	f043 0202 	orr.w	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff35 	bl	8004b58 <LL_ADC_IsEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf4:	4860      	ldr	r0, [pc, #384]	; (8004e78 <HAL_ADC_Init+0x284>)
 8004cf6:	f7ff ff2f 	bl	8004b58 <LL_ADC_IsEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	485d      	ldr	r0, [pc, #372]	; (8004e7c <HAL_ADC_Init+0x288>)
 8004d08:	f7ff fdac 	bl	8004864 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7e5b      	ldrb	r3, [r3, #25]
 8004d10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004d1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004d22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d106      	bne.n	8004d48 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	045b      	lsls	r3, r3, #17
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	4b45      	ldr	r3, [pc, #276]	; (8004e80 <HAL_ADC_Init+0x28c>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff12 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004d82:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff ff1f 	bl	8004bcc <LL_ADC_INJ_IsConversionOngoing>
 8004d8e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d13d      	bne.n	8004e12 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d13a      	bne.n	8004e12 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004da0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004da8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db8:	f023 0302 	bic.w	r3, r3, #2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d118      	bne.n	8004e02 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dda:	f023 0304 	bic.w	r3, r3, #4
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004de6:	4311      	orrs	r1, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df2:	430a      	orrs	r2, r1
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	e007      	b.n	8004e12 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10c      	bne.n	8004e34 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	f023 010f 	bic.w	r1, r3, #15
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
 8004e32:	e007      	b.n	8004e44 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 020f 	bic.w	r2, r2, #15
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f023 0303 	bic.w	r3, r3, #3
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
 8004e54:	e007      	b.n	8004e66 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000018 	.word	0x20000018
 8004e74:	053e2d63 	.word	0x053e2d63
 8004e78:	50040000 	.word	0x50040000
 8004e7c:	50040300 	.word	0x50040300
 8004e80:	fff0c007 	.word	0xfff0c007

08004e84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fe86 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d167      	bne.n	8004f70 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_ADC_Start_DMA+0x2a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e063      	b.n	8004f76 <HAL_ADC_Start_DMA+0xf2>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fc66 	bl	8005788 <ADC_Enable>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d14f      	bne.n	8004f66 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d006      	beq.n	8004ef4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f023 0206 	bic.w	r2, r3, #6
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef2:	e002      	b.n	8004efa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <HAL_ADC_Start_DMA+0xfc>)
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_ADC_Start_DMA+0x100>)
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <HAL_ADC_Start_DMA+0x104>)
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	221c      	movs	r2, #28
 8004f18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0210 	orr.w	r2, r2, #16
 8004f30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3340      	adds	r3, #64	; 0x40
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f001 fce5 	bl	8006920 <HAL_DMA_Start_IT>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe0d 	bl	8004b7e <LL_ADC_REG_StartConversion>
 8004f64:	e006      	b.n	8004f74 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004f6e:	e001      	b.n	8004f74 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	08005895 	.word	0x08005895
 8004f84:	0800596d 	.word	0x0800596d
 8004f88:	08005989 	.word	0x08005989

08004f8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0b6      	sub	sp, #216	; 0xd8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x22>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e3b9      	b.n	800575e <HAL_ADC_ConfigChannel+0x796>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fdd5 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 839e 	bne.w	8005740 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b05      	cmp	r3, #5
 800500a:	d824      	bhi.n	8005056 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	3b02      	subs	r3, #2
 8005012:	2b03      	cmp	r3, #3
 8005014:	d81b      	bhi.n	800504e <HAL_ADC_ConfigChannel+0x86>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <HAL_ADC_ConfigChannel+0x54>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800502d 	.word	0x0800502d
 8005020:	08005035 	.word	0x08005035
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	220c      	movs	r2, #12
 8005030:	605a      	str	r2, [r3, #4]
          break;
 8005032:	e010      	b.n	8005056 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2212      	movs	r2, #18
 8005038:	605a      	str	r2, [r3, #4]
          break;
 800503a:	e00c      	b.n	8005056 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2218      	movs	r2, #24
 8005040:	605a      	str	r2, [r3, #4]
          break;
 8005042:	e008      	b.n	8005056 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800504a:	605a      	str	r2, [r3, #4]
          break;
 800504c:	e003      	b.n	8005056 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2206      	movs	r2, #6
 8005052:	605a      	str	r2, [r3, #4]
          break;
 8005054:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f7ff fc9a 	bl	800499c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fd9a 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8005072:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fda6 	bl	8004bcc <LL_ADC_INJ_IsConversionOngoing>
 8005080:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 81a6 	bne.w	80053da <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800508e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 81a1 	bne.w	80053da <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	461a      	mov	r2, r3
 80050a6:	f7ff fca5 	bl	80049f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d00a      	beq.n	80050e2 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6919      	ldr	r1, [r3, #16]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050dc:	f7ff fbf6 	bl	80048cc <LL_ADC_SetOffset>
 80050e0:	e17b      	b.n	80053da <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fc13 	bl	8004914 <LL_ADC_GetOffsetChannel>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <HAL_ADC_ConfigChannel+0x146>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fc08 	bl	8004914 <LL_ADC_GetOffsetChannel>
 8005104:	4603      	mov	r3, r0
 8005106:	0e9b      	lsrs	r3, r3, #26
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	e01e      	b.n	800514c <HAL_ADC_ConfigChannel+0x184>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fbfd 	bl	8004914 <LL_ADC_GetOffsetChannel>
 800511a:	4603      	mov	r3, r0
 800511c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800512c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 800513c:	2320      	movs	r3, #32
 800513e:	e004      	b.n	800514a <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8005140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x19c>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	0e9b      	lsrs	r3, r3, #26
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	e018      	b.n	8005196 <HAL_ADC_ConfigChannel+0x1ce>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8005188:	2320      	movs	r3, #32
 800518a:	e004      	b.n	8005196 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 800518c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005196:	429a      	cmp	r2, r3
 8005198:	d106      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fbcc 	bl	8004940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fbb0 	bl	8004914 <LL_ADC_GetOffsetChannel>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x20c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fba5 	bl	8004914 <LL_ADC_GetOffsetChannel>
 80051ca:	4603      	mov	r3, r0
 80051cc:	0e9b      	lsrs	r3, r3, #26
 80051ce:	f003 021f 	and.w	r2, r3, #31
 80051d2:	e01e      	b.n	8005212 <HAL_ADC_ConfigChannel+0x24a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2101      	movs	r1, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fb9a 	bl	8004914 <LL_ADC_GetOffsetChannel>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80051f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80051fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8005202:	2320      	movs	r3, #32
 8005204:	e004      	b.n	8005210 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8005206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521a:	2b00      	cmp	r3, #0
 800521c:	d105      	bne.n	800522a <HAL_ADC_ConfigChannel+0x262>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	0e9b      	lsrs	r3, r3, #26
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	e018      	b.n	800525c <HAL_ADC_ConfigChannel+0x294>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800523e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 800524e:	2320      	movs	r3, #32
 8005250:	e004      	b.n	800525c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8005252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800525c:	429a      	cmp	r2, r3
 800525e:	d106      	bne.n	800526e <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2200      	movs	r2, #0
 8005266:	2101      	movs	r1, #1
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fb69 	bl	8004940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2102      	movs	r1, #2
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fb4d 	bl	8004914 <LL_ADC_GetOffsetChannel>
 800527a:	4603      	mov	r3, r0
 800527c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <HAL_ADC_ConfigChannel+0x2d2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2102      	movs	r1, #2
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fb42 	bl	8004914 <LL_ADC_GetOffsetChannel>
 8005290:	4603      	mov	r3, r0
 8005292:	0e9b      	lsrs	r3, r3, #26
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	e01e      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x310>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2102      	movs	r1, #2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fb37 	bl	8004914 <LL_ADC_GetOffsetChannel>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b0:	fa93 f3a3 	rbit	r3, r3
 80052b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80052b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80052c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80052c8:	2320      	movs	r3, #32
 80052ca:	e004      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80052cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x328>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	0e9b      	lsrs	r3, r3, #26
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	e016      	b.n	800531e <HAL_ADC_ConfigChannel+0x356>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052fc:	fa93 f3a3 	rbit	r3, r3
 8005300:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8005310:	2320      	movs	r3, #32
 8005312:	e004      	b.n	800531e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8005314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800531e:	429a      	cmp	r2, r3
 8005320:	d106      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	2102      	movs	r1, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fb08 	bl	8004940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2103      	movs	r1, #3
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff faec 	bl	8004914 <LL_ADC_GetOffsetChannel>
 800533c:	4603      	mov	r3, r0
 800533e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_ADC_ConfigChannel+0x394>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2103      	movs	r1, #3
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fae1 	bl	8004914 <LL_ADC_GetOffsetChannel>
 8005352:	4603      	mov	r3, r0
 8005354:	0e9b      	lsrs	r3, r3, #26
 8005356:	f003 021f 	and.w	r2, r3, #31
 800535a:	e017      	b.n	800538c <HAL_ADC_ConfigChannel+0x3c4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2103      	movs	r1, #3
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fad6 	bl	8004914 <LL_ADC_GetOffsetChannel>
 8005368:	4603      	mov	r3, r0
 800536a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005376:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800537e:	2320      	movs	r3, #32
 8005380:	e003      	b.n	800538a <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8005382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x3dc>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	0e9b      	lsrs	r3, r3, #26
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	e011      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x400>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ac:	fa93 f3a3 	rbit	r3, r3
 80053b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80053b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80053b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	e003      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	fab3 f383 	clz	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d106      	bne.n	80053da <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2103      	movs	r1, #3
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fab3 	bl	8004940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fbba 	bl	8004b58 <LL_ADC_IsEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 8140 	bne.w	800566c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	461a      	mov	r2, r3
 80053fa:	f7ff fb27 	bl	8004a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4a8f      	ldr	r2, [pc, #572]	; (8005640 <HAL_ADC_ConfigChannel+0x678>)
 8005404:	4293      	cmp	r3, r2
 8005406:	f040 8131 	bne.w	800566c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x46a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0e9b      	lsrs	r3, r3, #26
 8005420:	3301      	adds	r3, #1
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2b09      	cmp	r3, #9
 8005428:	bf94      	ite	ls
 800542a:	2301      	movls	r3, #1
 800542c:	2300      	movhi	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	e019      	b.n	8005466 <HAL_ADC_ConfigChannel+0x49e>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543a:	fa93 f3a3 	rbit	r3, r3
 800543e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005442:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800544a:	2320      	movs	r3, #32
 800544c:	e003      	b.n	8005456 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 800544e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005450:	fab3 f383 	clz	r3, r3
 8005454:	b2db      	uxtb	r3, r3
 8005456:	3301      	adds	r3, #1
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	2b09      	cmp	r3, #9
 800545e:	bf94      	ite	ls
 8005460:	2301      	movls	r3, #1
 8005462:	2300      	movhi	r3, #0
 8005464:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005466:	2b00      	cmp	r3, #0
 8005468:	d079      	beq.n	800555e <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x4be>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0e9b      	lsrs	r3, r3, #26
 800547c:	3301      	adds	r3, #1
 800547e:	069b      	lsls	r3, r3, #26
 8005480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005484:	e015      	b.n	80054b2 <HAL_ADC_ConfigChannel+0x4ea>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800549e:	2320      	movs	r3, #32
 80054a0:	e003      	b.n	80054aa <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80054a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a4:	fab3 f383 	clz	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	3301      	adds	r3, #1
 80054ac:	069b      	lsls	r3, r3, #26
 80054ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x50a>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	0e9b      	lsrs	r3, r3, #26
 80054c4:	3301      	adds	r3, #1
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	e017      	b.n	8005502 <HAL_ADC_ConfigChannel+0x53a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 80054ea:	2320      	movs	r3, #32
 80054ec:	e003      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 80054ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	3301      	adds	r3, #1
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	ea42 0103 	orr.w	r1, r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x560>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	0e9b      	lsrs	r3, r3, #26
 8005518:	3301      	adds	r3, #1
 800551a:	f003 021f 	and.w	r2, r3, #31
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	051b      	lsls	r3, r3, #20
 8005526:	e018      	b.n	800555a <HAL_ADC_ConfigChannel+0x592>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e003      	b.n	800554c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3301      	adds	r3, #1
 800554e:	f003 021f 	and.w	r2, r3, #31
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800555a:	430b      	orrs	r3, r1
 800555c:	e081      	b.n	8005662 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <HAL_ADC_ConfigChannel+0x5b2>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	0e9b      	lsrs	r3, r3, #26
 8005570:	3301      	adds	r3, #1
 8005572:	069b      	lsls	r3, r3, #26
 8005574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005578:	e015      	b.n	80055a6 <HAL_ADC_ConfigChannel+0x5de>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8005592:	2320      	movs	r3, #32
 8005594:	e003      	b.n	800559e <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	069b      	lsls	r3, r3, #26
 80055a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x5fe>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0e9b      	lsrs	r3, r3, #26
 80055b8:	3301      	adds	r3, #1
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2101      	movs	r1, #1
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	e017      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x62e>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	fa93 f3a3 	rbit	r3, r3
 80055d2:	61fb      	str	r3, [r7, #28]
  return result;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80055de:	2320      	movs	r3, #32
 80055e0:	e003      	b.n	80055ea <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	fab3 f383 	clz	r3, r3
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	ea42 0103 	orr.w	r1, r2, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x65a>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	0e9b      	lsrs	r3, r3, #26
 800560c:	3301      	adds	r3, #1
 800560e:	f003 021f 	and.w	r2, r3, #31
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	3b1e      	subs	r3, #30
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005620:	e01e      	b.n	8005660 <HAL_ADC_ConfigChannel+0x698>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	fa93 f3a3 	rbit	r3, r3
 800562e:	613b      	str	r3, [r7, #16]
  return result;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800563a:	2320      	movs	r3, #32
 800563c:	e006      	b.n	800564c <HAL_ADC_ConfigChannel+0x684>
 800563e:	bf00      	nop
 8005640:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	3301      	adds	r3, #1
 800564e:	f003 021f 	and.w	r2, r3, #31
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	3b1e      	subs	r3, #30
 800565a:	051b      	lsls	r3, r3, #20
 800565c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005660:	430b      	orrs	r3, r1
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	6892      	ldr	r2, [r2, #8]
 8005666:	4619      	mov	r1, r3
 8005668:	f7ff f9c4 	bl	80049f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_ADC_ConfigChannel+0x7a0>)
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d06c      	beq.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005678:	483c      	ldr	r0, [pc, #240]	; (800576c <HAL_ADC_ConfigChannel+0x7a4>)
 800567a:	f7ff f919 	bl	80048b0 <LL_ADC_GetCommonPathInternalCh>
 800567e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3a      	ldr	r2, [pc, #232]	; (8005770 <HAL_ADC_ConfigChannel+0x7a8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d127      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800568c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d121      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a35      	ldr	r2, [pc, #212]	; (8005774 <HAL_ADC_ConfigChannel+0x7ac>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d157      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056aa:	4619      	mov	r1, r3
 80056ac:	482f      	ldr	r0, [pc, #188]	; (800576c <HAL_ADC_ConfigChannel+0x7a4>)
 80056ae:	f7ff f8ec 	bl	800488a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056b2:	4b31      	ldr	r3, [pc, #196]	; (8005778 <HAL_ADC_ConfigChannel+0x7b0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	4a30      	ldr	r2, [pc, #192]	; (800577c <HAL_ADC_ConfigChannel+0x7b4>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056cc:	e002      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f9      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056da:	e03a      	b.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_ADC_ConfigChannel+0x7b8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <HAL_ADC_ConfigChannel+0x746>
 80056e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <HAL_ADC_ConfigChannel+0x7ac>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d12a      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005704:	4619      	mov	r1, r3
 8005706:	4819      	ldr	r0, [pc, #100]	; (800576c <HAL_ADC_ConfigChannel+0x7a4>)
 8005708:	f7ff f8bf 	bl	800488a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800570c:	e021      	b.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_ADC_ConfigChannel+0x7bc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d11c      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800571c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a12      	ldr	r2, [pc, #72]	; (8005774 <HAL_ADC_ConfigChannel+0x7ac>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800572e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005732:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005736:	4619      	mov	r1, r3
 8005738:	480c      	ldr	r0, [pc, #48]	; (800576c <HAL_ADC_ConfigChannel+0x7a4>)
 800573a:	f7ff f8a6 	bl	800488a <LL_ADC_SetCommonPathInternalCh>
 800573e:	e008      	b.n	8005752 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800575a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800575e:	4618      	mov	r0, r3
 8005760:	37d8      	adds	r7, #216	; 0xd8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	80080000 	.word	0x80080000
 800576c:	50040300 	.word	0x50040300
 8005770:	c7520000 	.word	0xc7520000
 8005774:	50040000 	.word	0x50040000
 8005778:	20000018 	.word	0x20000018
 800577c:	053e2d63 	.word	0x053e2d63
 8005780:	cb840000 	.word	0xcb840000
 8005784:	80000001 	.word	0x80000001

08005788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff f9dd 	bl	8004b58 <LL_ADC_IsEnabled>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d169      	bne.n	8005878 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <ADC_Enable+0xfc>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f043 0210 	orr.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f043 0201 	orr.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e055      	b.n	800587a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff f9ac 	bl	8004b30 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80057d8:	482b      	ldr	r0, [pc, #172]	; (8005888 <ADC_Enable+0x100>)
 80057da:	f7ff f869 	bl	80048b0 <LL_ADC_GetCommonPathInternalCh>
 80057de:	4603      	mov	r3, r0
 80057e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d013      	beq.n	8005810 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <ADC_Enable+0x104>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	4a28      	ldr	r2, [pc, #160]	; (8005890 <ADC_Enable+0x108>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005802:	e002      	b.n	800580a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	3b01      	subs	r3, #1
 8005808:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f9      	bne.n	8005804 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005810:	f7fe fff8 	bl	8004804 <HAL_GetTick>
 8005814:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005816:	e028      	b.n	800586a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff f99b 	bl	8004b58 <LL_ADC_IsEnabled>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff f97f 	bl	8004b30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005832:	f7fe ffe7 	bl	8004804 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d914      	bls.n	800586a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d00d      	beq.n	800586a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f043 0210 	orr.w	r2, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e007      	b.n	800587a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d1cf      	bne.n	8005818 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	8000003f 	.word	0x8000003f
 8005888:	50040300 	.word	0x50040300
 800588c:	20000018 	.word	0x20000018
 8005890:	053e2d63 	.word	0x053e2d63

08005894 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d14b      	bne.n	8005946 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d021      	beq.n	800590c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff f852 	bl	8004976 <LL_ADC_REG_IsTriggerSourceSWStart>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d032      	beq.n	800593e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d12b      	bne.n	800593e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11f      	bne.n	800593e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	f043 0201 	orr.w	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
 800590a:	e018      	b.n	800593e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d111      	bne.n	800593e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	f043 0201 	orr.w	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff fb24 	bl	8004f8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005944:	e00e      	b.n	8005964 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fb2e 	bl	8004fb4 <HAL_ADC_ErrorCallback>
}
 8005958:	e004      	b.n	8005964 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fb10 	bl	8004fa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fb00 	bl	8004fb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0ed      	b.n	8005baa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fcea 	bl	80013b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f0:	f7fe ff08 	bl	8004804 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80059f6:	e012      	b.n	8005a1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059f8:	f7fe ff04 	bl	8004804 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b0a      	cmp	r3, #10
 8005a04:	d90b      	bls.n	8005a1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2205      	movs	r2, #5
 8005a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e0c5      	b.n	8005baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0e5      	beq.n	80059f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0202 	bic.w	r2, r2, #2
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a3c:	f7fe fee2 	bl	8004804 <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a42:	e012      	b.n	8005a6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a44:	f7fe fede 	bl	8004804 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d90b      	bls.n	8005a6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2205      	movs	r2, #5
 8005a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e09f      	b.n	8005baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e5      	bne.n	8005a44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	7e1b      	ldrb	r3, [r3, #24]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d108      	bne.n	8005a92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e007      	b.n	8005aa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7e5b      	ldrb	r3, [r3, #25]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d108      	bne.n	8005abc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e007      	b.n	8005acc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7e9b      	ldrb	r3, [r3, #26]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d108      	bne.n	8005ae6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0220 	orr.w	r2, r2, #32
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e007      	b.n	8005af6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0220 	bic.w	r2, r2, #32
 8005af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7edb      	ldrb	r3, [r3, #27]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d108      	bne.n	8005b10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0210 	bic.w	r2, r2, #16
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e007      	b.n	8005b20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0210 	orr.w	r2, r2, #16
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7f1b      	ldrb	r3, [r3, #28]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0208 	orr.w	r2, r2, #8
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e007      	b.n	8005b4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0208 	bic.w	r2, r2, #8
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	7f5b      	ldrb	r3, [r3, #29]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d108      	bne.n	8005b64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0204 	orr.w	r2, r2, #4
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0204 	bic.w	r2, r2, #4
 8005b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	ea42 0103 	orr.w	r1, r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d003      	beq.n	8005bd8 <HAL_CAN_ConfigFilter+0x26>
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	f040 80aa 	bne.w	8005d2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d123      	bne.n	8005c5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3248      	adds	r2, #72	; 0x48
 8005c3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c50:	6979      	ldr	r1, [r7, #20]
 8005c52:	3348      	adds	r3, #72	; 0x48
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	440b      	add	r3, r1
 8005c58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d122      	bne.n	8005ca8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3248      	adds	r2, #72	; 0x48
 8005c88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	3348      	adds	r3, #72	; 0x48
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005cc2:	e007      	b.n	8005cd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005cee:	e007      	b.n	8005d00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e006      	b.n	8005d3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d12e      	bne.n	8005db8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d72:	f7fe fd47 	bl	8004804 <HAL_GetTick>
 8005d76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d78:	e012      	b.n	8005da0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d7a:	f7fe fd43 	bl	8004804 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b0a      	cmp	r3, #10
 8005d86:	d90b      	bls.n	8005da0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2205      	movs	r2, #5
 8005d98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e012      	b.n	8005dc6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e006      	b.n	8005dc6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b089      	sub	sp, #36	; 0x24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005dec:	7ffb      	ldrb	r3, [r7, #31]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d003      	beq.n	8005dfa <HAL_CAN_AddTxMessage+0x2c>
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	f040 80ad 	bne.w	8005f54 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8095 	beq.w	8005f44 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	0e1b      	lsrs	r3, r3, #24
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005e24:	2201      	movs	r2, #1
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10d      	bne.n	8005e52 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e40:	68f9      	ldr	r1, [r7, #12]
 8005e42:	6809      	ldr	r1, [r1, #0]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3318      	adds	r3, #24
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	440b      	add	r3, r1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e00f      	b.n	8005e72 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005e66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	440b      	add	r3, r1
 8005e70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	440b      	add	r3, r1
 8005e82:	3304      	adds	r3, #4
 8005e84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	7d1b      	ldrb	r3, [r3, #20]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d111      	bne.n	8005eb2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	3318      	adds	r3, #24
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	6811      	ldr	r1, [r2, #0]
 8005ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	3318      	adds	r3, #24
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	440b      	add	r3, r1
 8005eae:	3304      	adds	r3, #4
 8005eb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	061a      	lsls	r2, r3, #24
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3306      	adds	r3, #6
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3305      	adds	r3, #5
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	3204      	adds	r2, #4
 8005ed2:	7812      	ldrb	r2, [r2, #0]
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6811      	ldr	r1, [r2, #0]
 8005eda:	ea43 0200 	orr.w	r2, r3, r0
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005ee8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3303      	adds	r3, #3
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	061a      	lsls	r2, r3, #24
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3301      	adds	r3, #1
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4313      	orrs	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6811      	ldr	r1, [r2, #0]
 8005f10:	ea43 0200 	orr.w	r2, r3, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	440b      	add	r3, r1
 8005f1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005f1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	3318      	adds	r3, #24
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	3318      	adds	r3, #24
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	440b      	add	r3, r1
 8005f3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e00e      	b.n	8005f62 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e006      	b.n	8005f62 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b087      	sub	sp, #28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d003      	beq.n	8005f92 <HAL_CAN_GetRxMessage+0x24>
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f040 80f3 	bne.w	8006178 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10e      	bne.n	8005fb6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e0e7      	b.n	8006186 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0d8      	b.n	8006186 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	331b      	adds	r3, #27
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	4413      	add	r3, r2
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0204 	and.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	331b      	adds	r3, #27
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	0d5b      	lsrs	r3, r3, #21
 8006002:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e00b      	b.n	8006024 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	331b      	adds	r3, #27
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	331b      	adds	r3, #27
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	4413      	add	r3, r2
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0202 	and.w	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	331b      	adds	r3, #27
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	4413      	add	r3, r2
 8006046:	3304      	adds	r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	331b      	adds	r3, #27
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	4413      	add	r3, r2
 800605e:	3304      	adds	r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b2da      	uxtb	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	331b      	adds	r3, #27
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	4413      	add	r3, r2
 8006076:	3304      	adds	r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	4413      	add	r3, r2
 800608c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	b2da      	uxtb	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	0a1a      	lsrs	r2, r3, #8
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	0c1a      	lsrs	r2, r3, #16
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	3302      	adds	r3, #2
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	0e1a      	lsrs	r2, r3, #24
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	3303      	adds	r3, #3
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	4413      	add	r3, r2
 8006108:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	0a1a      	lsrs	r2, r3, #8
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	3305      	adds	r3, #5
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0c1a      	lsrs	r2, r3, #16
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	3306      	adds	r3, #6
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0e1a      	lsrs	r2, r3, #24
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	3307      	adds	r3, #7
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d108      	bne.n	8006164 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0220 	orr.w	r2, r2, #32
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	e007      	b.n	8006174 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0220 	orr.w	r2, r2, #32
 8006172:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e006      	b.n	8006186 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <HAL_CAN_ActivateNotification+0x1e>
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d109      	bne.n	80061c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6959      	ldr	r1, [r3, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e006      	b.n	80061d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
  }
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08a      	sub	sp, #40	; 0x28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d07c      	beq.n	800631e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d023      	beq.n	8006276 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2201      	movs	r2, #1
 8006234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fb fac5 	bl	80017d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8006246:	e016      	b.n	8006276 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e00c      	b.n	8006276 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	e002      	b.n	8006276 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f96b 	bl	800654c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d024      	beq.n	80062ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fb faa9 	bl	80017ec <HAL_CAN_TxMailbox1CompleteCallback>
 800629a:	e016      	b.n	80062ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
 80062ae:	e00c      	b.n	80062ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e002      	b.n	80062ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f94b 	bl	8006560 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d024      	beq.n	800631e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb fa8d 	bl	8001808 <HAL_CAN_TxMailbox2CompleteCallback>
 80062ee:	e016      	b.n	800631e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	e00c      	b.n	800631e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
 8006316:	e002      	b.n	800631e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f92b 	bl	8006574 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00c      	beq.n	8006342 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2208      	movs	r2, #8
 800635c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f912 	bl	8006588 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fb f9e3 	bl	8001748 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800639c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2210      	movs	r2, #16
 80063a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2208      	movs	r2, #8
 80063c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8ea 	bl	800659c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fb f9eb 	bl	80017bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8d4 	bl	80065b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8cd 	bl	80065c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d07b      	beq.n	800652c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d072      	beq.n	8006524 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006498:	2b00      	cmp	r3, #0
 800649a:	d043      	beq.n	8006524 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03e      	beq.n	8006524 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ac:	2b60      	cmp	r3, #96	; 0x60
 80064ae:	d02b      	beq.n	8006508 <HAL_CAN_IRQHandler+0x32a>
 80064b0:	2b60      	cmp	r3, #96	; 0x60
 80064b2:	d82e      	bhi.n	8006512 <HAL_CAN_IRQHandler+0x334>
 80064b4:	2b50      	cmp	r3, #80	; 0x50
 80064b6:	d022      	beq.n	80064fe <HAL_CAN_IRQHandler+0x320>
 80064b8:	2b50      	cmp	r3, #80	; 0x50
 80064ba:	d82a      	bhi.n	8006512 <HAL_CAN_IRQHandler+0x334>
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d019      	beq.n	80064f4 <HAL_CAN_IRQHandler+0x316>
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d826      	bhi.n	8006512 <HAL_CAN_IRQHandler+0x334>
 80064c4:	2b30      	cmp	r3, #48	; 0x30
 80064c6:	d010      	beq.n	80064ea <HAL_CAN_IRQHandler+0x30c>
 80064c8:	2b30      	cmp	r3, #48	; 0x30
 80064ca:	d822      	bhi.n	8006512 <HAL_CAN_IRQHandler+0x334>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d002      	beq.n	80064d6 <HAL_CAN_IRQHandler+0x2f8>
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d005      	beq.n	80064e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80064d4:	e01d      	b.n	8006512 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064de:	e019      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	f043 0310 	orr.w	r3, r3, #16
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064e8:	e014      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	f043 0320 	orr.w	r3, r3, #32
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064f2:	e00f      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064fc:	e00a      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006506:	e005      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006510:	e000      	b.n	8006514 <HAL_CAN_IRQHandler+0x336>
            break;
 8006512:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006522:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2204      	movs	r2, #4
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f84a 	bl	80065d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006544:	bf00      	nop
 8006546:	3728      	adds	r7, #40	; 0x28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <__NVIC_SetPriorityGrouping+0x44>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006608:	4013      	ands	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800661e:	4a04      	ldr	r2, [pc, #16]	; (8006630 <__NVIC_SetPriorityGrouping+0x44>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	60d3      	str	r3, [r2, #12]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	e000ed00 	.word	0xe000ed00

08006634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <__NVIC_GetPriorityGrouping+0x18>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	f003 0307 	and.w	r3, r3, #7
}
 8006642:	4618      	mov	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	e000ed00 	.word	0xe000ed00

08006650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	db0b      	blt.n	800667a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	f003 021f 	and.w	r2, r3, #31
 8006668:	4907      	ldr	r1, [pc, #28]	; (8006688 <__NVIC_EnableIRQ+0x38>)
 800666a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	2001      	movs	r0, #1
 8006672:	fa00 f202 	lsl.w	r2, r0, r2
 8006676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	e000e100 	.word	0xe000e100

0800668c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669c:	2b00      	cmp	r3, #0
 800669e:	db0a      	blt.n	80066b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	490c      	ldr	r1, [pc, #48]	; (80066d8 <__NVIC_SetPriority+0x4c>)
 80066a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066aa:	0112      	lsls	r2, r2, #4
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	440b      	add	r3, r1
 80066b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066b4:	e00a      	b.n	80066cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4908      	ldr	r1, [pc, #32]	; (80066dc <__NVIC_SetPriority+0x50>)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	3b04      	subs	r3, #4
 80066c4:	0112      	lsls	r2, r2, #4
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	440b      	add	r3, r1
 80066ca:	761a      	strb	r2, [r3, #24]
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	e000e100 	.word	0xe000e100
 80066dc:	e000ed00 	.word	0xe000ed00

080066e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	; 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f1c3 0307 	rsb	r3, r3, #7
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	bf28      	it	cs
 80066fe:	2304      	movcs	r3, #4
 8006700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3304      	adds	r3, #4
 8006706:	2b06      	cmp	r3, #6
 8006708:	d902      	bls.n	8006710 <NVIC_EncodePriority+0x30>
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3b03      	subs	r3, #3
 800670e:	e000      	b.n	8006712 <NVIC_EncodePriority+0x32>
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006714:	f04f 32ff 	mov.w	r2, #4294967295
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	43da      	mvns	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	401a      	ands	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006728:	f04f 31ff 	mov.w	r1, #4294967295
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	43d9      	mvns	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006738:	4313      	orrs	r3, r2
         );
}
 800673a:	4618      	mov	r0, r3
 800673c:	3724      	adds	r7, #36	; 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff4c 	bl	80065ec <__NVIC_SetPriorityGrouping>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800676e:	f7ff ff61 	bl	8006634 <__NVIC_GetPriorityGrouping>
 8006772:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	6978      	ldr	r0, [r7, #20]
 800677a:	f7ff ffb1 	bl	80066e0 <NVIC_EncodePriority>
 800677e:	4602      	mov	r2, r0
 8006780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff80 	bl	800668c <__NVIC_SetPriority>
}
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800679e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff ff54 	bl	8006650 <__NVIC_EnableIRQ>
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e098      	b.n	80068f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	4b4d      	ldr	r3, [pc, #308]	; (8006900 <HAL_DMA_Init+0x150>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d80f      	bhi.n	80067ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b4b      	ldr	r3, [pc, #300]	; (8006904 <HAL_DMA_Init+0x154>)
 80067d6:	4413      	add	r3, r2
 80067d8:	4a4b      	ldr	r2, [pc, #300]	; (8006908 <HAL_DMA_Init+0x158>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	091b      	lsrs	r3, r3, #4
 80067e0:	009a      	lsls	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a48      	ldr	r2, [pc, #288]	; (800690c <HAL_DMA_Init+0x15c>)
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40
 80067ec:	e00e      	b.n	800680c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	4b46      	ldr	r3, [pc, #280]	; (8006910 <HAL_DMA_Init+0x160>)
 80067f6:	4413      	add	r3, r2
 80067f8:	4a43      	ldr	r2, [pc, #268]	; (8006908 <HAL_DMA_Init+0x158>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	009a      	lsls	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a42      	ldr	r2, [pc, #264]	; (8006914 <HAL_DMA_Init+0x164>)
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800683c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006866:	d039      	beq.n	80068dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <HAL_DMA_Init+0x15c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d11a      	bne.n	80068a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006872:	4b29      	ldr	r3, [pc, #164]	; (8006918 <HAL_DMA_Init+0x168>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f003 031c 	and.w	r3, r3, #28
 800687e:	210f      	movs	r1, #15
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	4924      	ldr	r1, [pc, #144]	; (8006918 <HAL_DMA_Init+0x168>)
 8006888:	4013      	ands	r3, r2
 800688a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <HAL_DMA_Init+0x168>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6859      	ldr	r1, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006898:	f003 031c 	and.w	r3, r3, #28
 800689c:	fa01 f303 	lsl.w	r3, r1, r3
 80068a0:	491d      	ldr	r1, [pc, #116]	; (8006918 <HAL_DMA_Init+0x168>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
 80068a6:	e019      	b.n	80068dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_DMA_Init+0x16c>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b0:	f003 031c 	and.w	r3, r3, #28
 80068b4:	210f      	movs	r1, #15
 80068b6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	4917      	ldr	r1, [pc, #92]	; (800691c <HAL_DMA_Init+0x16c>)
 80068be:	4013      	ands	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80068c2:	4b16      	ldr	r3, [pc, #88]	; (800691c <HAL_DMA_Init+0x16c>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	f003 031c 	and.w	r3, r3, #28
 80068d2:	fa01 f303 	lsl.w	r3, r1, r3
 80068d6:	4911      	ldr	r1, [pc, #68]	; (800691c <HAL_DMA_Init+0x16c>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40020407 	.word	0x40020407
 8006904:	bffdfff8 	.word	0xbffdfff8
 8006908:	cccccccd 	.word	0xcccccccd
 800690c:	40020000 	.word	0x40020000
 8006910:	bffdfbf8 	.word	0xbffdfbf8
 8006914:	40020400 	.word	0x40020400
 8006918:	400200a8 	.word	0x400200a8
 800691c:	400204a8 	.word	0x400204a8

08006920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_DMA_Start_IT+0x20>
 800693c:	2302      	movs	r3, #2
 800693e:	e04b      	b.n	80069d8 <HAL_DMA_Start_IT+0xb8>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d13a      	bne.n	80069ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f8e0 	bl	8006b3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 020e 	orr.w	r2, r2, #14
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e00f      	b.n	80069b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 020a 	orr.w	r2, r2, #10
 80069b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	e005      	b.n	80069d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	f003 031c 	and.w	r3, r3, #28
 8006a00:	2204      	movs	r2, #4
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d026      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d021      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d107      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f003 021c 	and.w	r2, r3, #28
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	2104      	movs	r1, #4
 8006a42:	fa01 f202 	lsl.w	r2, r1, r2
 8006a46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d071      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006a58:	e06c      	b.n	8006b34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f003 031c 	and.w	r3, r3, #28
 8006a62:	2202      	movs	r2, #2
 8006a64:	409a      	lsls	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d02e      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d029      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020a 	bic.w	r2, r2, #10
 8006a94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f003 021c 	and.w	r2, r3, #28
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2102      	movs	r1, #2
 8006aac:	fa01 f202 	lsl.w	r2, r1, r2
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d038      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006aca:	e033      	b.n	8006b34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f003 031c 	and.w	r3, r3, #28
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02a      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d025      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 020e 	bic.w	r2, r2, #14
 8006af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f003 021c 	and.w	r2, r3, #28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2101      	movs	r1, #1
 8006b08:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
}
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	f003 021c 	and.w	r2, r3, #28
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	2101      	movs	r1, #1
 8006b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d108      	bne.n	8006b82 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b80:	e007      	b.n	8006b92 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]
}
 8006b92:	bf00      	nop
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bae:	e148      	b.n	8006e42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 813a 	beq.w	8006e3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d005      	beq.n	8006be0 <HAL_GPIO_Init+0x40>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d130      	bne.n	8006c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	2203      	movs	r2, #3
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c16:	2201      	movs	r2, #1
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4013      	ands	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f003 0201 	and.w	r2, r3, #1
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d017      	beq.n	8006c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	2203      	movs	r2, #3
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4013      	ands	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d123      	bne.n	8006cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	08da      	lsrs	r2, r3, #3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3208      	adds	r2, #8
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	220f      	movs	r2, #15
 8006ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4013      	ands	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	08da      	lsrs	r2, r3, #3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3208      	adds	r2, #8
 8006ccc:	6939      	ldr	r1, [r7, #16]
 8006cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	2203      	movs	r2, #3
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f003 0203 	and.w	r2, r3, #3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8094 	beq.w	8006e3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d14:	4b52      	ldr	r3, [pc, #328]	; (8006e60 <HAL_GPIO_Init+0x2c0>)
 8006d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d18:	4a51      	ldr	r2, [pc, #324]	; (8006e60 <HAL_GPIO_Init+0x2c0>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8006d20:	4b4f      	ldr	r3, [pc, #316]	; (8006e60 <HAL_GPIO_Init+0x2c0>)
 8006d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006d2c:	4a4d      	ldr	r2, [pc, #308]	; (8006e64 <HAL_GPIO_Init+0x2c4>)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	089b      	lsrs	r3, r3, #2
 8006d32:	3302      	adds	r3, #2
 8006d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	220f      	movs	r2, #15
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d56:	d00d      	beq.n	8006d74 <HAL_GPIO_Init+0x1d4>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a43      	ldr	r2, [pc, #268]	; (8006e68 <HAL_GPIO_Init+0x2c8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <HAL_GPIO_Init+0x1d0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <HAL_GPIO_Init+0x2cc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d101      	bne.n	8006d6c <HAL_GPIO_Init+0x1cc>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e004      	b.n	8006d76 <HAL_GPIO_Init+0x1d6>
 8006d6c:	2307      	movs	r3, #7
 8006d6e:	e002      	b.n	8006d76 <HAL_GPIO_Init+0x1d6>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_GPIO_Init+0x1d6>
 8006d74:	2300      	movs	r3, #0
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	f002 0203 	and.w	r2, r2, #3
 8006d7c:	0092      	lsls	r2, r2, #2
 8006d7e:	4093      	lsls	r3, r2
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d86:	4937      	ldr	r1, [pc, #220]	; (8006e64 <HAL_GPIO_Init+0x2c4>)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d94:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4013      	ands	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006db8:	4a2d      	ldr	r2, [pc, #180]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006dbe:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006de2:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006de8:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e0c:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006e12:	4b17      	ldr	r3, [pc, #92]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e36:	4a0e      	ldr	r2, [pc, #56]	; (8006e70 <HAL_GPIO_Init+0x2d0>)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f47f aeaf 	bne.w	8006bb0 <HAL_GPIO_Init+0x10>
  }
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40010000 	.word	0x40010000
 8006e68:	48000400 	.word	0x48000400
 8006e6c:	48000800 	.word	0x48000800
 8006e70:	40010400 	.word	0x40010400

08006e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e84:	787b      	ldrb	r3, [r7, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e90:	e002      	b.n	8006e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e92:	887a      	ldrh	r2, [r7, #2]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eb6:	887a      	ldrh	r2, [r7, #2]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	041a      	lsls	r2, r3, #16
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	43d9      	mvns	r1, r3
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	619a      	str	r2, [r3, #24]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d006      	beq.n	8006efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eee:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fa fc94 	bl	8001824 <HAL_GPIO_EXTI_Callback>
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40010400 	.word	0x40010400

08006f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e081      	b.n	800701e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb fa08 	bl	8002344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2224      	movs	r2, #36	; 0x24
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0201 	bic.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	e006      	b.n	8006f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d104      	bne.n	8006fa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69d9      	ldr	r1, [r3, #28]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	461a      	mov	r2, r3
 8007034:	460b      	mov	r3, r1
 8007036:	817b      	strh	r3, [r7, #10]
 8007038:	4613      	mov	r3, r2
 800703a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b20      	cmp	r3, #32
 8007046:	f040 80da 	bne.w	80071fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_I2C_Master_Transmit+0x30>
 8007054:	2302      	movs	r3, #2
 8007056:	e0d3      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007060:	f7fd fbd0 	bl	8004804 <HAL_GetTick>
 8007064:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2319      	movs	r3, #25
 800706c:	2201      	movs	r2, #1
 800706e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fb4e 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e0be      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2221      	movs	r2, #33	; 0x21
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2210      	movs	r2, #16
 800708e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	893a      	ldrh	r2, [r7, #8]
 80070a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2bff      	cmp	r3, #255	; 0xff
 80070b2:	d90e      	bls.n	80070d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	22ff      	movs	r2, #255	; 0xff
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	8979      	ldrh	r1, [r7, #10]
 80070c2:	4b51      	ldr	r3, [pc, #324]	; (8007208 <HAL_I2C_Master_Transmit+0x1e0>)
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fd44 	bl	8007b58 <I2C_TransferConfig>
 80070d0:	e06c      	b.n	80071ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	8979      	ldrh	r1, [r7, #10]
 80070e4:	4b48      	ldr	r3, [pc, #288]	; (8007208 <HAL_I2C_Master_Transmit+0x1e0>)
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fd33 	bl	8007b58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070f2:	e05b      	b.n	80071ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	6a39      	ldr	r1, [r7, #32]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fb4b 	bl	8007794 <I2C_WaitOnTXISFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e07b      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d034      	beq.n	80071ac <HAL_I2C_Master_Transmit+0x184>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d130      	bne.n	80071ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2200      	movs	r2, #0
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fadd 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e04d      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d90e      	bls.n	800718c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	22ff      	movs	r2, #255	; 0xff
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	8979      	ldrh	r1, [r7, #10]
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fce7 	bl	8007b58 <I2C_TransferConfig>
 800718a:	e00f      	b.n	80071ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719a:	b2da      	uxtb	r2, r3
 800719c:	8979      	ldrh	r1, [r7, #10]
 800719e:	2300      	movs	r3, #0
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fcd6 	bl	8007b58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d19e      	bne.n	80070f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6a39      	ldr	r1, [r7, #32]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fb2a 	bl	8007814 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e01a      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2220      	movs	r2, #32
 80071d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6859      	ldr	r1, [r3, #4]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <HAL_I2C_Master_Transmit+0x1e4>)
 80071de:	400b      	ands	r3, r1
 80071e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e000      	b.n	8007200 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80071fe:	2302      	movs	r3, #2
  }
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	80002000 	.word	0x80002000
 800720c:	fe00e800 	.word	0xfe00e800

08007210 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af02      	add	r7, sp, #8
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	461a      	mov	r2, r3
 800721c:	460b      	mov	r3, r1
 800721e:	817b      	strh	r3, [r7, #10]
 8007220:	4613      	mov	r3, r2
 8007222:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b20      	cmp	r3, #32
 800722e:	f040 80db 	bne.w	80073e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_I2C_Master_Receive+0x30>
 800723c:	2302      	movs	r3, #2
 800723e:	e0d4      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007248:	f7fd fadc 	bl	8004804 <HAL_GetTick>
 800724c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	2319      	movs	r3, #25
 8007254:	2201      	movs	r2, #1
 8007256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fa5a 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e0bf      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2222      	movs	r2, #34	; 0x22
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2210      	movs	r2, #16
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	893a      	ldrh	r2, [r7, #8]
 800728a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	2bff      	cmp	r3, #255	; 0xff
 800729a:	d90e      	bls.n	80072ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	22ff      	movs	r2, #255	; 0xff
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	8979      	ldrh	r1, [r7, #10]
 80072aa:	4b52      	ldr	r3, [pc, #328]	; (80073f4 <HAL_I2C_Master_Receive+0x1e4>)
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fc50 	bl	8007b58 <I2C_TransferConfig>
 80072b8:	e06d      	b.n	8007396 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	8979      	ldrh	r1, [r7, #10]
 80072cc:	4b49      	ldr	r3, [pc, #292]	; (80073f4 <HAL_I2C_Master_Receive+0x1e4>)
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fc3f 	bl	8007b58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80072da:	e05c      	b.n	8007396 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	6a39      	ldr	r1, [r7, #32]
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fad3 	bl	800788c <I2C_WaitOnRXNEFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e07c      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d034      	beq.n	8007396 <HAL_I2C_Master_Receive+0x186>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d130      	bne.n	8007396 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2200      	movs	r2, #0
 800733c:	2180      	movs	r1, #128	; 0x80
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f9e8 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e04d      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	2bff      	cmp	r3, #255	; 0xff
 8007356:	d90e      	bls.n	8007376 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	22ff      	movs	r2, #255	; 0xff
 800735c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	b2da      	uxtb	r2, r3
 8007364:	8979      	ldrh	r1, [r7, #10]
 8007366:	2300      	movs	r3, #0
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fbf2 	bl	8007b58 <I2C_TransferConfig>
 8007374:	e00f      	b.n	8007396 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007384:	b2da      	uxtb	r2, r3
 8007386:	8979      	ldrh	r1, [r7, #10]
 8007388:	2300      	movs	r3, #0
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fbe1 	bl	8007b58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d19d      	bne.n	80072dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	6a39      	ldr	r1, [r7, #32]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa35 	bl	8007814 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e01a      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2220      	movs	r2, #32
 80073ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <HAL_I2C_Master_Receive+0x1e8>)
 80073c8:	400b      	ands	r3, r1
 80073ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e000      	b.n	80073ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	80002400 	.word	0x80002400
 80073f8:	fe00e800 	.word	0xfe00e800

080073fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	4603      	mov	r3, r0
 800740c:	817b      	strh	r3, [r7, #10]
 800740e:	460b      	mov	r3, r1
 8007410:	813b      	strh	r3, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b20      	cmp	r3, #32
 8007420:	f040 80f9 	bne.w	8007616 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <HAL_I2C_Mem_Write+0x34>
 800742a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007436:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0ed      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_I2C_Mem_Write+0x4e>
 8007446:	2302      	movs	r3, #2
 8007448:	e0e6      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007452:	f7fd f9d7 	bl	8004804 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	2319      	movs	r3, #25
 800745e:	2201      	movs	r2, #1
 8007460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f955 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0d1      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2221      	movs	r2, #33	; 0x21
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2240      	movs	r2, #64	; 0x40
 8007480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800749c:	88f8      	ldrh	r0, [r7, #6]
 800749e:	893a      	ldrh	r2, [r7, #8]
 80074a0:	8979      	ldrh	r1, [r7, #10]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4603      	mov	r3, r0
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f8b9 	bl	8007624 <I2C_RequestMemoryWrite>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0a9      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2bff      	cmp	r3, #255	; 0xff
 80074cc:	d90e      	bls.n	80074ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	8979      	ldrh	r1, [r7, #10]
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fb37 	bl	8007b58 <I2C_TransferConfig>
 80074ea:	e00f      	b.n	800750c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	8979      	ldrh	r1, [r7, #10]
 80074fe:	2300      	movs	r3, #0
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fb26 	bl	8007b58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f93f 	bl	8007794 <I2C_WaitOnTXISFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e07b      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d034      	beq.n	80075c4 <HAL_I2C_Mem_Write+0x1c8>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d130      	bne.n	80075c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	2200      	movs	r2, #0
 800756a:	2180      	movs	r1, #128	; 0x80
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 f8d1 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e04d      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007580:	b29b      	uxth	r3, r3
 8007582:	2bff      	cmp	r3, #255	; 0xff
 8007584:	d90e      	bls.n	80075a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	22ff      	movs	r2, #255	; 0xff
 800758a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	b2da      	uxtb	r2, r3
 8007592:	8979      	ldrh	r1, [r7, #10]
 8007594:	2300      	movs	r3, #0
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fadb 	bl	8007b58 <I2C_TransferConfig>
 80075a2:	e00f      	b.n	80075c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	8979      	ldrh	r1, [r7, #10]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 faca 	bl	8007b58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d19e      	bne.n	800750c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f91e 	bl	8007814 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e01a      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2220      	movs	r2, #32
 80075e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6859      	ldr	r1, [r3, #4]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <HAL_I2C_Mem_Write+0x224>)
 80075f6:	400b      	ands	r3, r1
 80075f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e000      	b.n	8007618 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007616:	2302      	movs	r3, #2
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	fe00e800 	.word	0xfe00e800

08007624 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	461a      	mov	r2, r3
 8007632:	4603      	mov	r3, r0
 8007634:	817b      	strh	r3, [r7, #10]
 8007636:	460b      	mov	r3, r1
 8007638:	813b      	strh	r3, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	8979      	ldrh	r1, [r7, #10]
 8007644:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <I2C_RequestMemoryWrite+0xa4>)
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa83 	bl	8007b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	69b9      	ldr	r1, [r7, #24]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f89c 	bl	8007794 <I2C_WaitOnTXISFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e02c      	b.n	80076c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d105      	bne.n	8007678 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800766c:	893b      	ldrh	r3, [r7, #8]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	629a      	str	r2, [r3, #40]	; 0x28
 8007676:	e015      	b.n	80076a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007678:	893b      	ldrh	r3, [r7, #8]
 800767a:	0a1b      	lsrs	r3, r3, #8
 800767c:	b29b      	uxth	r3, r3
 800767e:	b2da      	uxtb	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f882 	bl	8007794 <I2C_WaitOnTXISFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e012      	b.n	80076c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800769a:	893b      	ldrh	r3, [r7, #8]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f830 	bl	8007714 <I2C_WaitOnFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	80002000 	.word	0x80002000

080076cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d103      	bne.n	80076ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d007      	beq.n	8007708 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	619a      	str	r2, [r3, #24]
  }
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007724:	e022      	b.n	800776c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d01e      	beq.n	800776c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772e:	f7fd f869 	bl	8004804 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d302      	bcc.n	8007744 <I2C_WaitOnFlagUntilTimeout+0x30>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d113      	bne.n	800776c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e00f      	b.n	800778c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4013      	ands	r3, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	429a      	cmp	r2, r3
 800777a:	bf0c      	ite	eq
 800777c:	2301      	moveq	r3, #1
 800777e:	2300      	movne	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	429a      	cmp	r2, r3
 8007788:	d0cd      	beq.n	8007726 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077a0:	e02c      	b.n	80077fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f8ea 	bl	8007980 <I2C_IsErrorOccurred>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e02a      	b.n	800780c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d01e      	beq.n	80077fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077be:	f7fd f821 	bl	8004804 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d302      	bcc.n	80077d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d113      	bne.n	80077fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e007      	b.n	800780c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d1cb      	bne.n	80077a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007820:	e028      	b.n	8007874 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f8aa 	bl	8007980 <I2C_IsErrorOccurred>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e026      	b.n	8007884 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	f7fc ffe5 	bl	8004804 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d113      	bne.n	8007874 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	f043 0220 	orr.w	r2, r3, #32
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e007      	b.n	8007884 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b20      	cmp	r3, #32
 8007880:	d1cf      	bne.n	8007822 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007898:	e064      	b.n	8007964 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f86e 	bl	8007980 <I2C_IsErrorOccurred>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e062      	b.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d138      	bne.n	800792e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d105      	bne.n	80078d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e04e      	b.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d107      	bne.n	80078f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2210      	movs	r2, #16
 80078ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2204      	movs	r2, #4
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
 80078f2:	e002      	b.n	80078fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2220      	movs	r2, #32
 8007900:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6859      	ldr	r1, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800790e:	400b      	ands	r3, r1
 8007910:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e022      	b.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792e:	f7fc ff69 	bl	8004804 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10f      	bne.n	8007964 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e007      	b.n	8007974 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	2b04      	cmp	r3, #4
 8007970:	d193      	bne.n	800789a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	fe00e800 	.word	0xfe00e800

08007980 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d075      	beq.n	8007a98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2210      	movs	r2, #16
 80079b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079b4:	e056      	b.n	8007a64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d052      	beq.n	8007a64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079be:	f7fc ff21 	bl	8004804 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <I2C_IsErrorOccurred+0x54>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d147      	bne.n	8007a64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f6:	d12e      	bne.n	8007a56 <I2C_IsErrorOccurred+0xd6>
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079fe:	d02a      	beq.n	8007a56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007a00:	7cfb      	ldrb	r3, [r7, #19]
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d027      	beq.n	8007a56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a16:	f7fc fef5 	bl	8004804 <HAL_GetTick>
 8007a1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a1c:	e01b      	b.n	8007a56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a1e:	f7fc fef1 	bl	8004804 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b19      	cmp	r3, #25
 8007a2a:	d914      	bls.n	8007a56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d1dc      	bne.n	8007a1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d003      	beq.n	8007a7a <I2C_IsErrorOccurred+0xfa>
 8007a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d09d      	beq.n	80079b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2220      	movs	r2, #32
 8007a88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	f043 0304 	orr.w	r3, r3, #4
 8007a90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f043 0301 	orr.w	r3, r3, #1
 8007ab0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f043 0308 	orr.w	r3, r3, #8
 8007ad2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007adc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01c      	beq.n	8007b48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff fddc 	bl	80076cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6859      	ldr	r1, [r3, #4]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <I2C_IsErrorOccurred+0x1d4>)
 8007b20:	400b      	ands	r3, r1
 8007b22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3728      	adds	r7, #40	; 0x28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	fe00e800 	.word	0xfe00e800

08007b58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	817b      	strh	r3, [r7, #10]
 8007b66:	4613      	mov	r3, r2
 8007b68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b6a:	897b      	ldrh	r3, [r7, #10]
 8007b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b70:	7a7b      	ldrb	r3, [r7, #9]
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	0d5b      	lsrs	r3, r3, #21
 8007b92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <I2C_TransferConfig+0x60>)
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	ea02 0103 	and.w	r1, r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	03ff63ff 	.word	0x03ff63ff

08007bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d138      	bne.n	8007c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e032      	b.n	8007c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2224      	movs	r2, #36	; 0x24
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0201 	bic.w	r2, r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	e000      	b.n	8007c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
  }
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d139      	bne.n	8007cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e033      	b.n	8007cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2224      	movs	r2, #36	; 0x24
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e000      	b.n	8007cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007cf0:	4b04      	ldr	r3, [pc, #16]	; (8007d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40007000 	.word	0x40007000

08007d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d16:	d130      	bne.n	8007d7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d18:	4b23      	ldr	r3, [pc, #140]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d24:	d038      	beq.n	8007d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d26:	4b20      	ldr	r3, [pc, #128]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d2e:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d36:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2232      	movs	r2, #50	; 0x32
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	0c9b      	lsrs	r3, r3, #18
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d4c:	e002      	b.n	8007d54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d54:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d60:	d102      	bne.n	8007d68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f2      	bne.n	8007d4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d74:	d110      	bne.n	8007d98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e00f      	b.n	8007d9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d86:	d007      	beq.n	8007d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d90:	4a05      	ldr	r2, [pc, #20]	; (8007da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40007000 	.word	0x40007000
 8007dac:	20000018 	.word	0x20000018
 8007db0:	431bde83 	.word	0x431bde83

08007db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f000 bc02 	b.w	80085cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc8:	4b96      	ldr	r3, [pc, #600]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dd2:	4b94      	ldr	r3, [pc, #592]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80e4 	beq.w	8007fb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <HAL_RCC_OscConfig+0x4c>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b0c      	cmp	r3, #12
 8007df4:	f040 808b 	bne.w	8007f0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	f040 8087 	bne.w	8007f0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e00:	4b88      	ldr	r3, [pc, #544]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_OscConfig+0x64>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e3d9      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	4b81      	ldr	r3, [pc, #516]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_RCC_OscConfig+0x7e>
 8007e28:	4b7e      	ldr	r3, [pc, #504]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e30:	e005      	b.n	8007e3e <HAL_RCC_OscConfig+0x8a>
 8007e32:	4b7c      	ldr	r3, [pc, #496]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d223      	bcs.n	8007e8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fe1e 	bl	8008a88 <RCC_SetFlashLatencyFromMSIRange>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e3ba      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e56:	4b73      	ldr	r3, [pc, #460]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a72      	ldr	r2, [pc, #456]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e5c:	f043 0308 	orr.w	r3, r3, #8
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	4b70      	ldr	r3, [pc, #448]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	496d      	ldr	r1, [pc, #436]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e74:	4b6b      	ldr	r3, [pc, #428]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	4968      	ldr	r1, [pc, #416]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	604b      	str	r3, [r1, #4]
 8007e88:	e025      	b.n	8007ed6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e8a:	4b66      	ldr	r3, [pc, #408]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a65      	ldr	r2, [pc, #404]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e90:	f043 0308 	orr.w	r3, r3, #8
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4b63      	ldr	r3, [pc, #396]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	4960      	ldr	r1, [pc, #384]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ea8:	4b5e      	ldr	r3, [pc, #376]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	495b      	ldr	r1, [pc, #364]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fdde 	bl	8008a88 <RCC_SetFlashLatencyFromMSIRange>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e37a      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ed6:	f000 fcb5 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b51      	ldr	r3, [pc, #324]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	4950      	ldr	r1, [pc, #320]	; (8008028 <HAL_RCC_OscConfig+0x274>)
 8007ee8:	5ccb      	ldrb	r3, [r1, r3]
 8007eea:	f003 031f 	and.w	r3, r3, #31
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	4a4e      	ldr	r2, [pc, #312]	; (800802c <HAL_RCC_OscConfig+0x278>)
 8007ef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007ef6:	4b4e      	ldr	r3, [pc, #312]	; (8008030 <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa fdea 	bl	8002ad4 <HAL_InitTick>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d052      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	e35e      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d032      	beq.n	8007f7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f16:	4b43      	ldr	r3, [pc, #268]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a42      	ldr	r2, [pc, #264]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f22:	f7fc fc6f 	bl	8004804 <HAL_GetTick>
 8007f26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f2a:	f7fc fc6b 	bl	8004804 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e347      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f3c:	4b39      	ldr	r3, [pc, #228]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f0      	beq.n	8007f2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a35      	ldr	r2, [pc, #212]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f4e:	f043 0308 	orr.w	r3, r3, #8
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4b33      	ldr	r3, [pc, #204]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	4930      	ldr	r1, [pc, #192]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	492b      	ldr	r1, [pc, #172]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	604b      	str	r3, [r1, #4]
 8007f7a:	e01a      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007f7c:	4b29      	ldr	r3, [pc, #164]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a28      	ldr	r2, [pc, #160]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007f82:	f023 0301 	bic.w	r3, r3, #1
 8007f86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f88:	f7fc fc3c 	bl	8004804 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f90:	f7fc fc38 	bl	8004804 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e314      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <HAL_RCC_OscConfig+0x1dc>
 8007fae:	e000      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007fb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d073      	beq.n	80080a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d005      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x21c>
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d10b      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd0:	4b14      	ldr	r3, [pc, #80]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d063      	beq.n	80080a4 <HAL_RCC_OscConfig+0x2f0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d15f      	bne.n	80080a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e2f1      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d106      	bne.n	8008000 <HAL_RCC_OscConfig+0x24c>
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a0b      	ldr	r2, [pc, #44]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8007ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e025      	b.n	800804c <HAL_RCC_OscConfig+0x298>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008008:	d114      	bne.n	8008034 <HAL_RCC_OscConfig+0x280>
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a05      	ldr	r2, [pc, #20]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8008010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	4b03      	ldr	r3, [pc, #12]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a02      	ldr	r2, [pc, #8]	; (8008024 <HAL_RCC_OscConfig+0x270>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e013      	b.n	800804c <HAL_RCC_OscConfig+0x298>
 8008024:	40021000 	.word	0x40021000
 8008028:	080134ac 	.word	0x080134ac
 800802c:	20000018 	.word	0x20000018
 8008030:	2000001c 	.word	0x2000001c
 8008034:	4ba0      	ldr	r3, [pc, #640]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a9f      	ldr	r2, [pc, #636]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800803a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	4b9d      	ldr	r3, [pc, #628]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a9c      	ldr	r2, [pc, #624]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800804a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d013      	beq.n	800807c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008054:	f7fc fbd6 	bl	8004804 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800805c:	f7fc fbd2 	bl	8004804 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b64      	cmp	r3, #100	; 0x64
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e2ae      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800806e:	4b92      	ldr	r3, [pc, #584]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f0      	beq.n	800805c <HAL_RCC_OscConfig+0x2a8>
 800807a:	e014      	b.n	80080a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fc fbc2 	bl	8004804 <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008084:	f7fc fbbe 	bl	8004804 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b64      	cmp	r3, #100	; 0x64
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e29a      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008096:	4b88      	ldr	r3, [pc, #544]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f0      	bne.n	8008084 <HAL_RCC_OscConfig+0x2d0>
 80080a2:	e000      	b.n	80080a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d060      	beq.n	8008174 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d005      	beq.n	80080c4 <HAL_RCC_OscConfig+0x310>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b0c      	cmp	r3, #12
 80080bc:	d119      	bne.n	80080f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d116      	bne.n	80080f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c4:	4b7c      	ldr	r3, [pc, #496]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d005      	beq.n	80080dc <HAL_RCC_OscConfig+0x328>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e277      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080dc:	4b76      	ldr	r3, [pc, #472]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	061b      	lsls	r3, r3, #24
 80080ea:	4973      	ldr	r1, [pc, #460]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080f0:	e040      	b.n	8008174 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d023      	beq.n	8008142 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080fa:	4b6f      	ldr	r3, [pc, #444]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a6e      	ldr	r2, [pc, #440]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7fc fb7d 	bl	8004804 <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810e:	f7fc fb79 	bl	8004804 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e255      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008120:	4b65      	ldr	r3, [pc, #404]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812c:	4b62      	ldr	r3, [pc, #392]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	061b      	lsls	r3, r3, #24
 800813a:	495f      	ldr	r1, [pc, #380]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800813c:	4313      	orrs	r3, r2
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	e018      	b.n	8008174 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008142:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a5c      	ldr	r2, [pc, #368]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800814c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814e:	f7fc fb59 	bl	8004804 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008156:	f7fc fb55 	bl	8004804 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e231      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008168:	4b53      	ldr	r3, [pc, #332]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b00      	cmp	r3, #0
 800817e:	d03c      	beq.n	80081fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01c      	beq.n	80081c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008188:	4b4b      	ldr	r3, [pc, #300]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800818a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800818e:	4a4a      	ldr	r2, [pc, #296]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008198:	f7fc fb34 	bl	8004804 <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a0:	f7fc fb30 	bl	8004804 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e20c      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081b2:	4b41      	ldr	r3, [pc, #260]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80081b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0ef      	beq.n	80081a0 <HAL_RCC_OscConfig+0x3ec>
 80081c0:	e01b      	b.n	80081fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c2:	4b3d      	ldr	r3, [pc, #244]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80081c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c8:	4a3b      	ldr	r2, [pc, #236]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d2:	f7fc fb17 	bl	8004804 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081d8:	e008      	b.n	80081ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081da:	f7fc fb13 	bl	8004804 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e1ef      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081ec:	4b32      	ldr	r3, [pc, #200]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80081ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1ef      	bne.n	80081da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80a6 	beq.w	8008354 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008208:	2300      	movs	r3, #0
 800820a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800820c:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800820e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10d      	bne.n	8008234 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008218:	4b27      	ldr	r3, [pc, #156]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800821a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821c:	4a26      	ldr	r2, [pc, #152]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800821e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008222:	6593      	str	r3, [r2, #88]	; 0x58
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008230:	2301      	movs	r3, #1
 8008232:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008234:	4b21      	ldr	r3, [pc, #132]	; (80082bc <HAL_RCC_OscConfig+0x508>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d118      	bne.n	8008272 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008240:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <HAL_RCC_OscConfig+0x508>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_RCC_OscConfig+0x508>)
 8008246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800824c:	f7fc fada 	bl	8004804 <HAL_GetTick>
 8008250:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008252:	e008      	b.n	8008266 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008254:	f7fc fad6 	bl	8004804 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e1b2      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008266:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_RCC_OscConfig+0x508>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f0      	beq.n	8008254 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d108      	bne.n	800828c <HAL_RCC_OscConfig+0x4d8>
 800827a:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800827c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008280:	4a0d      	ldr	r2, [pc, #52]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800828a:	e029      	b.n	80082e0 <HAL_RCC_OscConfig+0x52c>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b05      	cmp	r3, #5
 8008292:	d115      	bne.n	80082c0 <HAL_RCC_OscConfig+0x50c>
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 800829c:	f043 0304 	orr.w	r3, r3, #4
 80082a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	4a03      	ldr	r2, [pc, #12]	; (80082b8 <HAL_RCC_OscConfig+0x504>)
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082b4:	e014      	b.n	80082e0 <HAL_RCC_OscConfig+0x52c>
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	40007000 	.word	0x40007000
 80082c0:	4b9a      	ldr	r3, [pc, #616]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c6:	4a99      	ldr	r2, [pc, #612]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082d0:	4b96      	ldr	r3, [pc, #600]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	4a95      	ldr	r2, [pc, #596]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80082d8:	f023 0304 	bic.w	r3, r3, #4
 80082dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e8:	f7fc fa8c 	bl	8004804 <HAL_GetTick>
 80082ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ee:	e00a      	b.n	8008306 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f0:	f7fc fa88 	bl	8004804 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e162      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008306:	4b89      	ldr	r3, [pc, #548]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0ed      	beq.n	80082f0 <HAL_RCC_OscConfig+0x53c>
 8008314:	e015      	b.n	8008342 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008316:	f7fc fa75 	bl	8004804 <HAL_GetTick>
 800831a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800831c:	e00a      	b.n	8008334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800831e:	f7fc fa71 	bl	8004804 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	f241 3288 	movw	r2, #5000	; 0x1388
 800832c:	4293      	cmp	r3, r2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e14b      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008334:	4b7d      	ldr	r3, [pc, #500]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1ed      	bne.n	800831e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008342:	7ffb      	ldrb	r3, [r7, #31]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d105      	bne.n	8008354 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008348:	4b78      	ldr	r3, [pc, #480]	; (800852c <HAL_RCC_OscConfig+0x778>)
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	4a77      	ldr	r2, [pc, #476]	; (800852c <HAL_RCC_OscConfig+0x778>)
 800834e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d03c      	beq.n	80083da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01c      	beq.n	80083a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008368:	4b70      	ldr	r3, [pc, #448]	; (800852c <HAL_RCC_OscConfig+0x778>)
 800836a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800836e:	4a6f      	ldr	r2, [pc, #444]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008378:	f7fc fa44 	bl	8004804 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008380:	f7fc fa40 	bl	8004804 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e11c      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008392:	4b66      	ldr	r3, [pc, #408]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0ef      	beq.n	8008380 <HAL_RCC_OscConfig+0x5cc>
 80083a0:	e01b      	b.n	80083da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083a2:	4b62      	ldr	r3, [pc, #392]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80083a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083a8:	4a60      	ldr	r2, [pc, #384]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b2:	f7fc fa27 	bl	8004804 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ba:	f7fc fa23 	bl	8004804 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e0ff      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083cc:	4b57      	ldr	r3, [pc, #348]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80083ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1ef      	bne.n	80083ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80f3 	beq.w	80085ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	f040 80c9 	bne.w	8008580 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80083ee:	4b4f      	ldr	r3, [pc, #316]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f003 0203 	and.w	r2, r3, #3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	429a      	cmp	r2, r3
 8008400:	d12c      	bne.n	800845c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	3b01      	subs	r3, #1
 800840e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008410:	429a      	cmp	r2, r3
 8008412:	d123      	bne.n	800845c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008420:	429a      	cmp	r2, r3
 8008422:	d11b      	bne.n	800845c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008430:	429a      	cmp	r2, r3
 8008432:	d113      	bne.n	800845c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	3b01      	subs	r3, #1
 8008442:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008444:	429a      	cmp	r2, r3
 8008446:	d109      	bne.n	800845c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	085b      	lsrs	r3, r3, #1
 8008454:	3b01      	subs	r3, #1
 8008456:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008458:	429a      	cmp	r2, r3
 800845a:	d06b      	beq.n	8008534 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	2b0c      	cmp	r3, #12
 8008460:	d062      	beq.n	8008528 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008462:	4b32      	ldr	r3, [pc, #200]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e0ac      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_RCC_OscConfig+0x778>)
 8008478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800847c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800847e:	f7fc f9c1 	bl	8004804 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008486:	f7fc f9bd 	bl	8004804 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e099      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008498:	4b24      	ldr	r3, [pc, #144]	; (800852c <HAL_RCC_OscConfig+0x778>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084a4:	4b21      	ldr	r3, [pc, #132]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	4b21      	ldr	r3, [pc, #132]	; (8008530 <HAL_RCC_OscConfig+0x77c>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084b4:	3a01      	subs	r2, #1
 80084b6:	0112      	lsls	r2, r2, #4
 80084b8:	4311      	orrs	r1, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084be:	0212      	lsls	r2, r2, #8
 80084c0:	4311      	orrs	r1, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084c6:	0852      	lsrs	r2, r2, #1
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0552      	lsls	r2, r2, #21
 80084cc:	4311      	orrs	r1, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80084d2:	0852      	lsrs	r2, r2, #1
 80084d4:	3a01      	subs	r2, #1
 80084d6:	0652      	lsls	r2, r2, #25
 80084d8:	4311      	orrs	r1, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084de:	06d2      	lsls	r2, r2, #27
 80084e0:	430a      	orrs	r2, r1
 80084e2:	4912      	ldr	r1, [pc, #72]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a0f      	ldr	r2, [pc, #60]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a0c      	ldr	r2, [pc, #48]	; (800852c <HAL_RCC_OscConfig+0x778>)
 80084fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008500:	f7fc f980 	bl	8004804 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008508:	f7fc f97c 	bl	8004804 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e058      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800851a:	4b04      	ldr	r3, [pc, #16]	; (800852c <HAL_RCC_OscConfig+0x778>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008526:	e050      	b.n	80085ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e04f      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
 800852c:	40021000 	.word	0x40021000
 8008530:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008534:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d144      	bne.n	80085ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a23      	ldr	r2, [pc, #140]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800854a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800854c:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4a20      	ldr	r2, [pc, #128]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008556:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008558:	f7fc f954 	bl	8004804 <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008560:	f7fc f950 	bl	8004804 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e02c      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008572:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x7ac>
 800857e:	e024      	b.n	80085ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	2b0c      	cmp	r3, #12
 8008584:	d01f      	beq.n	80085c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b13      	ldr	r3, [pc, #76]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a12      	ldr	r2, [pc, #72]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 800858c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008592:	f7fc f937 	bl	8004804 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800859a:	f7fc f933 	bl	8004804 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e00f      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f0      	bne.n	800859a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80085b8:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	4905      	ldr	r1, [pc, #20]	; (80085d4 <HAL_RCC_OscConfig+0x820>)
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <HAL_RCC_OscConfig+0x824>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60cb      	str	r3, [r1, #12]
 80085c4:	e001      	b.n	80085ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	feeefffc 	.word	0xfeeefffc

080085dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0e7      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085f0:	4b75      	ldr	r3, [pc, #468]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d910      	bls.n	8008620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fe:	4b72      	ldr	r3, [pc, #456]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f023 0207 	bic.w	r2, r3, #7
 8008606:	4970      	ldr	r1, [pc, #448]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	4313      	orrs	r3, r2
 800860c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800860e:	4b6e      	ldr	r3, [pc, #440]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d001      	beq.n	8008620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e0cf      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d010      	beq.n	800864e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	4b66      	ldr	r3, [pc, #408]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008638:	429a      	cmp	r2, r3
 800863a:	d908      	bls.n	800864e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800863c:	4b63      	ldr	r3, [pc, #396]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	4960      	ldr	r1, [pc, #384]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04c      	beq.n	80086f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2b03      	cmp	r3, #3
 8008660:	d107      	bne.n	8008672 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008662:	4b5a      	ldr	r3, [pc, #360]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d121      	bne.n	80086b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e0a6      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d107      	bne.n	800868a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800867a:	4b54      	ldr	r3, [pc, #336]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d115      	bne.n	80086b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e09a      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d107      	bne.n	80086a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008692:	4b4e      	ldr	r3, [pc, #312]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e08e      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086a2:	4b4a      	ldr	r3, [pc, #296]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e086      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086b2:	4b46      	ldr	r3, [pc, #280]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f023 0203 	bic.w	r2, r3, #3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	4943      	ldr	r1, [pc, #268]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c4:	f7fc f89e 	bl	8004804 <HAL_GetTick>
 80086c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ca:	e00a      	b.n	80086e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086cc:	f7fc f89a 	bl	8004804 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086da:	4293      	cmp	r3, r2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e06e      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e2:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 020c 	and.w	r2, r3, #12
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d1eb      	bne.n	80086cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	4b31      	ldr	r3, [pc, #196]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870c:	429a      	cmp	r2, r3
 800870e:	d208      	bcs.n	8008722 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008710:	4b2e      	ldr	r3, [pc, #184]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	492b      	ldr	r1, [pc, #172]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008722:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d210      	bcs.n	8008752 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008730:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f023 0207 	bic.w	r2, r3, #7
 8008738:	4923      	ldr	r1, [pc, #140]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	4313      	orrs	r3, r2
 800873e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008740:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <HAL_RCC_ClockConfig+0x1ec>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d001      	beq.n	8008752 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e036      	b.n	80087c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0304 	and.w	r3, r3, #4
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800875e:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4918      	ldr	r1, [pc, #96]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800876c:	4313      	orrs	r3, r2
 800876e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800877c:	4b13      	ldr	r3, [pc, #76]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4910      	ldr	r1, [pc, #64]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 800878c:	4313      	orrs	r3, r2
 800878e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008790:	f000 f858 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 8008794:	4602      	mov	r2, r0
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <HAL_RCC_ClockConfig+0x1f0>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	091b      	lsrs	r3, r3, #4
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	490b      	ldr	r1, [pc, #44]	; (80087d0 <HAL_RCC_ClockConfig+0x1f4>)
 80087a2:	5ccb      	ldrb	r3, [r1, r3]
 80087a4:	f003 031f 	and.w	r3, r3, #31
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <HAL_RCC_ClockConfig+0x1f8>)
 80087ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <HAL_RCC_ClockConfig+0x1fc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fa f98d 	bl	8002ad4 <HAL_InitTick>
 80087ba:	4603      	mov	r3, r0
 80087bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80087be:	7afb      	ldrb	r3, [r7, #11]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40022000 	.word	0x40022000
 80087cc:	40021000 	.word	0x40021000
 80087d0:	080134ac 	.word	0x080134ac
 80087d4:	20000018 	.word	0x20000018
 80087d8:	2000001c 	.word	0x2000001c

080087dc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <HAL_RCC_MCOConfig+0x64>)
 80087ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <HAL_RCC_MCOConfig+0x64>)
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <HAL_RCC_MCOConfig+0x64>)
 80087f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008806:	2302      	movs	r3, #2
 8008808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800880a:	2302      	movs	r3, #2
 800880c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880e:	2300      	movs	r3, #0
 8008810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008812:	2300      	movs	r3, #0
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008816:	f107 0314 	add.w	r3, r7, #20
 800881a:	4619      	mov	r1, r3
 800881c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008820:	f7fe f9be 	bl	8006ba0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <HAL_RCC_MCOConfig+0x64>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	430b      	orrs	r3, r1
 8008832:	4903      	ldr	r1, [pc, #12]	; (8008840 <HAL_RCC_MCOConfig+0x64>)
 8008834:	4313      	orrs	r3, r2
 8008836:	608b      	str	r3, [r1, #8]
}
 8008838:	bf00      	nop
 800883a:	3728      	adds	r7, #40	; 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000

08008844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008844:	b480      	push	{r7}
 8008846:	b089      	sub	sp, #36	; 0x24
 8008848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	2300      	movs	r3, #0
 8008850:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008852:	4b3e      	ldr	r3, [pc, #248]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
 800885a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800885c:	4b3b      	ldr	r3, [pc, #236]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_RCC_GetSysClockFreq+0x34>
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b0c      	cmp	r3, #12
 8008870:	d121      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d11e      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008878:	4b34      	ldr	r3, [pc, #208]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d107      	bne.n	8008894 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008884:	4b31      	ldr	r3, [pc, #196]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 8008886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	e005      	b.n	80088a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	091b      	lsrs	r3, r3, #4
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80088a0:	4a2b      	ldr	r2, [pc, #172]	; (8008950 <HAL_RCC_GetSysClockFreq+0x10c>)
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10d      	bne.n	80088cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088b4:	e00a      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d102      	bne.n	80088c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088bc:	4b25      	ldr	r3, [pc, #148]	; (8008954 <HAL_RCC_GetSysClockFreq+0x110>)
 80088be:	61bb      	str	r3, [r7, #24]
 80088c0:	e004      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d101      	bne.n	80088cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088c8:	4b23      	ldr	r3, [pc, #140]	; (8008958 <HAL_RCC_GetSysClockFreq+0x114>)
 80088ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b0c      	cmp	r3, #12
 80088d0:	d134      	bne.n	800893c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088d2:	4b1e      	ldr	r3, [pc, #120]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d003      	beq.n	80088ea <HAL_RCC_GetSysClockFreq+0xa6>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d003      	beq.n	80088f0 <HAL_RCC_GetSysClockFreq+0xac>
 80088e8:	e005      	b.n	80088f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80088ea:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <HAL_RCC_GetSysClockFreq+0x110>)
 80088ec:	617b      	str	r3, [r7, #20]
      break;
 80088ee:	e005      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80088f0:	4b19      	ldr	r3, [pc, #100]	; (8008958 <HAL_RCC_GetSysClockFreq+0x114>)
 80088f2:	617b      	str	r3, [r7, #20]
      break;
 80088f4:	e002      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	617b      	str	r3, [r7, #20]
      break;
 80088fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088fc:	4b13      	ldr	r3, [pc, #76]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	091b      	lsrs	r3, r3, #4
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	3301      	adds	r3, #1
 8008908:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800890a:	4b10      	ldr	r3, [pc, #64]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	fb03 f202 	mul.w	r2, r3, r2
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <HAL_RCC_GetSysClockFreq+0x108>)
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	0e5b      	lsrs	r3, r3, #25
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	3301      	adds	r3, #1
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800893c:	69bb      	ldr	r3, [r7, #24]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3724      	adds	r7, #36	; 0x24
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40021000 	.word	0x40021000
 8008950:	080134c4 	.word	0x080134c4
 8008954:	00f42400 	.word	0x00f42400
 8008958:	007a1200 	.word	0x007a1200

0800895c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008960:	4b03      	ldr	r3, [pc, #12]	; (8008970 <HAL_RCC_GetHCLKFreq+0x14>)
 8008962:	681b      	ldr	r3, [r3, #0]
}
 8008964:	4618      	mov	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20000018 	.word	0x20000018

08008974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008978:	f7ff fff0 	bl	800895c <HAL_RCC_GetHCLKFreq>
 800897c:	4602      	mov	r2, r0
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <HAL_RCC_GetPCLK1Freq+0x28>)
 800898a:	5ccb      	ldrb	r3, [r1, r3]
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40021000 	.word	0x40021000
 800899c:	080134bc 	.word	0x080134bc

080089a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80089a4:	f7ff ffda 	bl	800895c <HAL_RCC_GetHCLKFreq>
 80089a8:	4602      	mov	r2, r0
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	0adb      	lsrs	r3, r3, #11
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	4904      	ldr	r1, [pc, #16]	; (80089c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089b6:	5ccb      	ldrb	r3, [r1, r3]
 80089b8:	f003 031f 	and.w	r3, r3, #31
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	40021000 	.word	0x40021000
 80089c8:	080134bc 	.word	0x080134bc

080089cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	220f      	movs	r2, #15
 80089da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80089dc:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <HAL_RCC_GetClockConfig+0x5c>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f003 0203 	and.w	r2, r3, #3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80089e8:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <HAL_RCC_GetClockConfig+0x5c>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80089f4:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <HAL_RCC_GetClockConfig+0x5c>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008a00:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <HAL_RCC_GetClockConfig+0x5c>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	08db      	lsrs	r3, r3, #3
 8008a06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <HAL_RCC_GetClockConfig+0x60>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0207 	and.w	r2, r3, #7
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	601a      	str	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	40022000 	.word	0x40022000

08008a30 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <HAL_RCC_EnableCSS+0x1c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a04      	ldr	r2, [pc, #16]	; (8008a4c <HAL_RCC_EnableCSS+0x1c>)
 8008a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a3e:	6013      	str	r3, [r2, #0]
}
 8008a40:	bf00      	nop
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	40021000 	.word	0x40021000

08008a50 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a60:	d105      	bne.n	8008a6e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008a62:	f000 f809 	bl	8008a78 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a6c:	621a      	str	r2, [r3, #32]
  }
}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40021000 	.word	0x40021000

08008a78 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a90:	2300      	movs	r3, #0
 8008a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a94:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008aa0:	f7ff f924 	bl	8007cec <HAL_PWREx_GetVoltageRange>
 8008aa4:	6178      	str	r0, [r7, #20]
 8008aa6:	e014      	b.n	8008ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	4a24      	ldr	r2, [pc, #144]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab4:	4b22      	ldr	r3, [pc, #136]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008ac0:	f7ff f914 	bl	8007cec <HAL_PWREx_GetVoltageRange>
 8008ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aca:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d10b      	bne.n	8008af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b80      	cmp	r3, #128	; 0x80
 8008ade:	d919      	bls.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2ba0      	cmp	r3, #160	; 0xa0
 8008ae4:	d902      	bls.n	8008aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	e013      	b.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008aec:	2301      	movs	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	e010      	b.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d902      	bls.n	8008afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008af8:	2303      	movs	r3, #3
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	e00a      	b.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d102      	bne.n	8008b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008b04:	2302      	movs	r3, #2
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	e004      	b.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b70      	cmp	r3, #112	; 0x70
 8008b0e:	d101      	bne.n	8008b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008b10:	2301      	movs	r3, #1
 8008b12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f023 0207 	bic.w	r2, r3, #7
 8008b1c:	4909      	ldr	r1, [pc, #36]	; (8008b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d001      	beq.n	8008b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40021000 	.word	0x40021000
 8008b44:	40022000 	.word	0x40022000

08008b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b50:	2300      	movs	r3, #0
 8008b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b54:	2300      	movs	r3, #0
 8008b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d031      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b6c:	d01a      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008b6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b72:	d814      	bhi.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b7c:	d10f      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008b7e:	4b5d      	ldr	r3, [pc, #372]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	4a5c      	ldr	r2, [pc, #368]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b8a:	e00c      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f9ce 	bl	8008f34 <RCCEx_PLLSAI1_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b9c:	e003      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba6:	7cfb      	ldrb	r3, [r7, #19]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bac:	4b51      	ldr	r3, [pc, #324]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bba:	494e      	ldr	r1, [pc, #312]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008bc2:	e001      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	7cfb      	ldrb	r3, [r7, #19]
 8008bc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 809e 	beq.w	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008bda:	4b46      	ldr	r3, [pc, #280]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00d      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bf0:	4b40      	ldr	r3, [pc, #256]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf4:	4a3f      	ldr	r2, [pc, #252]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8008bfc:	4b3d      	ldr	r3, [pc, #244]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c0c:	4b3a      	ldr	r3, [pc, #232]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a39      	ldr	r2, [pc, #228]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c18:	f7fb fdf4 	bl	8004804 <HAL_GetTick>
 8008c1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c1e:	e009      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c20:	f7fb fdf0 	bl	8004804 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d902      	bls.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	74fb      	strb	r3, [r7, #19]
        break;
 8008c32:	e005      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c34:	4b30      	ldr	r3, [pc, #192]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0ef      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008c40:	7cfb      	ldrb	r3, [r7, #19]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d15a      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c46:	4b2b      	ldr	r3, [pc, #172]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01e      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d019      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c62:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c6e:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	4a1f      	ldr	r2, [pc, #124]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c84:	4a1b      	ldr	r2, [pc, #108]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c8e:	4a19      	ldr	r2, [pc, #100]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d016      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca0:	f7fb fdb0 	bl	8004804 <HAL_GetTick>
 8008ca4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ca6:	e00b      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ca8:	f7fb fdac 	bl	8004804 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d902      	bls.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	74fb      	strb	r3, [r7, #19]
            break;
 8008cbe:	e006      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0ec      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008cce:	7cfb      	ldrb	r3, [r7, #19]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce2:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008cea:	e009      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cec:	7cfb      	ldrb	r3, [r7, #19]
 8008cee:	74bb      	strb	r3, [r7, #18]
 8008cf0:	e006      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008cf2:	bf00      	nop
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	7cfb      	ldrb	r3, [r7, #19]
 8008cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d00:	7c7b      	ldrb	r3, [r7, #17]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d105      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d06:	4b8a      	ldr	r3, [pc, #552]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0a:	4a89      	ldr	r2, [pc, #548]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d1e:	4b84      	ldr	r3, [pc, #528]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d24:	f023 0203 	bic.w	r2, r3, #3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	4980      	ldr	r1, [pc, #512]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d40:	4b7b      	ldr	r3, [pc, #492]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d46:	f023 020c 	bic.w	r2, r3, #12
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	4978      	ldr	r1, [pc, #480]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d62:	4b73      	ldr	r3, [pc, #460]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	496f      	ldr	r1, [pc, #444]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d84:	4b6a      	ldr	r3, [pc, #424]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	4967      	ldr	r1, [pc, #412]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008da6:	4b62      	ldr	r3, [pc, #392]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	495e      	ldr	r1, [pc, #376]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008dc8:	4b59      	ldr	r3, [pc, #356]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4956      	ldr	r1, [pc, #344]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008dea:	4b51      	ldr	r3, [pc, #324]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	494d      	ldr	r1, [pc, #308]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d028      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e0c:	4b48      	ldr	r3, [pc, #288]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	4945      	ldr	r1, [pc, #276]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e2a:	d106      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e2c:	4b40      	ldr	r3, [pc, #256]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4a3f      	ldr	r2, [pc, #252]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e36:	60d3      	str	r3, [r2, #12]
 8008e38:	e011      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e42:	d10c      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3304      	adds	r3, #4
 8008e48:	2101      	movs	r1, #1
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f872 	bl	8008f34 <RCCEx_PLLSAI1_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008e54:	7cfb      	ldrb	r3, [r7, #19]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008e5a:	7cfb      	ldrb	r3, [r7, #19]
 8008e5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d028      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e6a:	4b31      	ldr	r3, [pc, #196]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e78:	492d      	ldr	r1, [pc, #180]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e88:	d106      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e8a:	4b29      	ldr	r3, [pc, #164]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	4a28      	ldr	r2, [pc, #160]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e94:	60d3      	str	r3, [r2, #12]
 8008e96:	e011      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ea0:	d10c      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f843 	bl	8008f34 <RCCEx_PLLSAI1_Config>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008eb2:	7cfb      	ldrb	r3, [r7, #19]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008eb8:	7cfb      	ldrb	r3, [r7, #19]
 8008eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01c      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ec8:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed6:	4916      	ldr	r1, [pc, #88]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee6:	d10c      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	2102      	movs	r1, #2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f820 	bl	8008f34 <RCCEx_PLLSAI1_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ef8:	7cfb      	ldrb	r3, [r7, #19]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1c:	4904      	ldr	r1, [pc, #16]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008f24:	7cbb      	ldrb	r3, [r7, #18]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	40021000 	.word	0x40021000

08008f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008f42:	4b74      	ldr	r3, [pc, #464]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d018      	beq.n	8008f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008f4e:	4b71      	ldr	r3, [pc, #452]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0203 	and.w	r2, r3, #3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d10d      	bne.n	8008f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
       ||
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008f66:	4b6b      	ldr	r3, [pc, #428]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	091b      	lsrs	r3, r3, #4
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
       ||
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d047      	beq.n	800900a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]
 8008f7e:	e044      	b.n	800900a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d018      	beq.n	8008fba <RCCEx_PLLSAI1_Config+0x86>
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d825      	bhi.n	8008fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d002      	beq.n	8008f96 <RCCEx_PLLSAI1_Config+0x62>
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d009      	beq.n	8008fa8 <RCCEx_PLLSAI1_Config+0x74>
 8008f94:	e020      	b.n	8008fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008f96:	4b5f      	ldr	r3, [pc, #380]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11d      	bne.n	8008fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fa6:	e01a      	b.n	8008fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008fa8:	4b5a      	ldr	r3, [pc, #360]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d116      	bne.n	8008fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fb8:	e013      	b.n	8008fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008fba:	4b56      	ldr	r3, [pc, #344]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10f      	bne.n	8008fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008fc6:	4b53      	ldr	r3, [pc, #332]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d109      	bne.n	8008fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fd6:	e006      	b.n	8008fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
      break;
 8008fdc:	e004      	b.n	8008fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008fde:	bf00      	nop
 8008fe0:	e002      	b.n	8008fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10d      	bne.n	800900a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008fee:	4b49      	ldr	r3, [pc, #292]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	011b      	lsls	r3, r3, #4
 8009002:	430b      	orrs	r3, r1
 8009004:	4943      	ldr	r1, [pc, #268]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009006:	4313      	orrs	r3, r2
 8009008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d17c      	bne.n	800910a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009010:	4b40      	ldr	r3, [pc, #256]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a3f      	ldr	r2, [pc, #252]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800901a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901c:	f7fb fbf2 	bl	8004804 <HAL_GetTick>
 8009020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009022:	e009      	b.n	8009038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009024:	f7fb fbee 	bl	8004804 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d902      	bls.n	8009038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	73fb      	strb	r3, [r7, #15]
        break;
 8009036:	e005      	b.n	8009044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009038:	4b36      	ldr	r3, [pc, #216]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1ef      	bne.n	8009024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d15f      	bne.n	800910a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d110      	bne.n	8009072 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009050:	4b30      	ldr	r3, [pc, #192]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6892      	ldr	r2, [r2, #8]
 8009060:	0211      	lsls	r1, r2, #8
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	68d2      	ldr	r2, [r2, #12]
 8009066:	06d2      	lsls	r2, r2, #27
 8009068:	430a      	orrs	r2, r1
 800906a:	492a      	ldr	r1, [pc, #168]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800906c:	4313      	orrs	r3, r2
 800906e:	610b      	str	r3, [r1, #16]
 8009070:	e027      	b.n	80090c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d112      	bne.n	800909e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009078:	4b26      	ldr	r3, [pc, #152]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6892      	ldr	r2, [r2, #8]
 8009088:	0211      	lsls	r1, r2, #8
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6912      	ldr	r2, [r2, #16]
 800908e:	0852      	lsrs	r2, r2, #1
 8009090:	3a01      	subs	r2, #1
 8009092:	0552      	lsls	r2, r2, #21
 8009094:	430a      	orrs	r2, r1
 8009096:	491f      	ldr	r1, [pc, #124]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009098:	4313      	orrs	r3, r2
 800909a:	610b      	str	r3, [r1, #16]
 800909c:	e011      	b.n	80090c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800909e:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80090a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6892      	ldr	r2, [r2, #8]
 80090ae:	0211      	lsls	r1, r2, #8
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6952      	ldr	r2, [r2, #20]
 80090b4:	0852      	lsrs	r2, r2, #1
 80090b6:	3a01      	subs	r2, #1
 80090b8:	0652      	lsls	r2, r2, #25
 80090ba:	430a      	orrs	r2, r1
 80090bc:	4915      	ldr	r1, [pc, #84]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80090c2:	4b14      	ldr	r3, [pc, #80]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a13      	ldr	r2, [pc, #76]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ce:	f7fb fb99 	bl	8004804 <HAL_GetTick>
 80090d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80090d4:	e009      	b.n	80090ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80090d6:	f7fb fb95 	bl	8004804 <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d902      	bls.n	80090ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	73fb      	strb	r3, [r7, #15]
          break;
 80090e8:	e005      	b.n	80090f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ef      	beq.n	80090d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	4903      	ldr	r1, [pc, #12]	; (8009114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009106:	4313      	orrs	r3, r2
 8009108:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800910a:	7bfb      	ldrb	r3, [r7, #15]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	40021000 	.word	0x40021000

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e049      	b.n	80091be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f841 	bl	80091c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fc26 	bl	80099a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d001      	beq.n	80091f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e03b      	b.n	800926c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <HAL_TIM_Base_Start_IT+0x9c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d009      	beq.n	800922a <HAL_TIM_Base_Start_IT+0x4e>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921e:	d004      	beq.n	800922a <HAL_TIM_Base_Start_IT+0x4e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a15      	ldr	r2, [pc, #84]	; (800927c <HAL_TIM_Base_Start_IT+0xa0>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d115      	bne.n	8009256 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	4b13      	ldr	r3, [pc, #76]	; (8009280 <HAL_TIM_Base_Start_IT+0xa4>)
 8009232:	4013      	ands	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b06      	cmp	r3, #6
 800923a:	d015      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x8c>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009242:	d011      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009254:	e008      	b.n	8009268 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0201 	orr.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	e000      	b.n	800926a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40014000 	.word	0x40014000
 8009280:	00010007 	.word	0x00010007

08009284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e049      	b.n	800932a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f9 fe66 	bl	8002f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f000 fb70 	bl	80099a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <HAL_TIM_PWM_Start+0x24>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b01      	cmp	r3, #1
 800934e:	bf14      	ite	ne
 8009350:	2301      	movne	r3, #1
 8009352:	2300      	moveq	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	e03c      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b04      	cmp	r3, #4
 800935c:	d109      	bne.n	8009372 <HAL_TIM_PWM_Start+0x3e>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b01      	cmp	r3, #1
 8009368:	bf14      	ite	ne
 800936a:	2301      	movne	r3, #1
 800936c:	2300      	moveq	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	e02f      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b08      	cmp	r3, #8
 8009376:	d109      	bne.n	800938c <HAL_TIM_PWM_Start+0x58>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	bf14      	ite	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2300      	moveq	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	e022      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b0c      	cmp	r3, #12
 8009390:	d109      	bne.n	80093a6 <HAL_TIM_PWM_Start+0x72>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b01      	cmp	r3, #1
 800939c:	bf14      	ite	ne
 800939e:	2301      	movne	r3, #1
 80093a0:	2300      	moveq	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	e015      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d109      	bne.n	80093c0 <HAL_TIM_PWM_Start+0x8c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	e008      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e07e      	b.n	80094d8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <HAL_TIM_PWM_Start+0xb6>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e8:	e023      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d104      	bne.n	80093fa <HAL_TIM_PWM_Start+0xc6>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f8:	e01b      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d104      	bne.n	800940a <HAL_TIM_PWM_Start+0xd6>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009408:	e013      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b0c      	cmp	r3, #12
 800940e:	d104      	bne.n	800941a <HAL_TIM_PWM_Start+0xe6>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009418:	e00b      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b10      	cmp	r3, #16
 800941e:	d104      	bne.n	800942a <HAL_TIM_PWM_Start+0xf6>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009428:	e003      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2201      	movs	r2, #1
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fd96 	bl	8009f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a26      	ldr	r2, [pc, #152]	; (80094e0 <HAL_TIM_PWM_Start+0x1ac>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_TIM_PWM_Start+0x12a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a25      	ldr	r2, [pc, #148]	; (80094e4 <HAL_TIM_PWM_Start+0x1b0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_TIM_PWM_Start+0x12a>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a23      	ldr	r2, [pc, #140]	; (80094e8 <HAL_TIM_PWM_Start+0x1b4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d101      	bne.n	8009462 <HAL_TIM_PWM_Start+0x12e>
 800945e:	2301      	movs	r3, #1
 8009460:	e000      	b.n	8009464 <HAL_TIM_PWM_Start+0x130>
 8009462:	2300      	movs	r3, #0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a18      	ldr	r2, [pc, #96]	; (80094e0 <HAL_TIM_PWM_Start+0x1ac>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d009      	beq.n	8009496 <HAL_TIM_PWM_Start+0x162>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948a:	d004      	beq.n	8009496 <HAL_TIM_PWM_Start+0x162>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a14      	ldr	r2, [pc, #80]	; (80094e4 <HAL_TIM_PWM_Start+0x1b0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d115      	bne.n	80094c2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	4b13      	ldr	r3, [pc, #76]	; (80094ec <HAL_TIM_PWM_Start+0x1b8>)
 800949e:	4013      	ands	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b06      	cmp	r3, #6
 80094a6:	d015      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a0>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ae:	d011      	beq.n	80094d4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0201 	orr.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094c0:	e008      	b.n	80094d4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0201 	orr.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e000      	b.n	80094d6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40014400 	.word	0x40014400
 80094ec:	00010007 	.word	0x00010007

080094f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b02      	cmp	r3, #2
 8009504:	d122      	bne.n	800954c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b02      	cmp	r3, #2
 8009512:	d11b      	bne.n	800954c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f06f 0202 	mvn.w	r2, #2
 800951c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa1a 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 8009538:	e005      	b.n	8009546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa0c 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa1d 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b04      	cmp	r3, #4
 8009558:	d122      	bne.n	80095a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b04      	cmp	r3, #4
 8009566:	d11b      	bne.n	80095a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f06f 0204 	mvn.w	r2, #4
 8009570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2202      	movs	r2, #2
 8009576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f9f0 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 800958c:	e005      	b.n	800959a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f9e2 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f9f3 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	f003 0308 	and.w	r3, r3, #8
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d122      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d11b      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f06f 0208 	mvn.w	r2, #8
 80095c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2204      	movs	r2, #4
 80095ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f9c6 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 80095e0:	e005      	b.n	80095ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9b8 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f9c9 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b10      	cmp	r3, #16
 8009600:	d122      	bne.n	8009648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b10      	cmp	r3, #16
 800960e:	d11b      	bne.n	8009648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f06f 0210 	mvn.w	r2, #16
 8009618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2208      	movs	r2, #8
 800961e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f99c 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 8009634:	e005      	b.n	8009642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f98e 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f99f 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b01      	cmp	r3, #1
 8009654:	d10e      	bne.n	8009674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d107      	bne.n	8009674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0201 	mvn.w	r2, #1
 800966c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7f8 ff4e 	bl	8002510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967e:	2b80      	cmp	r3, #128	; 0x80
 8009680:	d10e      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968c:	2b80      	cmp	r3, #128	; 0x80
 800968e:	d107      	bne.n	80096a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fcfc 	bl	800a098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ae:	d10e      	bne.n	80096ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ba:	2b80      	cmp	r3, #128	; 0x80
 80096bc:	d107      	bne.n	80096ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fcef 	bl	800a0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d10e      	bne.n	80096fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d107      	bne.n	80096fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f94d 	bl	8009994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b20      	cmp	r3, #32
 8009706:	d10e      	bne.n	8009726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d107      	bne.n	8009726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f06f 0220 	mvn.w	r2, #32
 800971e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fcaf 	bl	800a084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800974a:	2302      	movs	r3, #2
 800974c:	e0ff      	b.n	800994e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b14      	cmp	r3, #20
 800975a:	f200 80f0 	bhi.w	800993e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	080097b9 	.word	0x080097b9
 8009768:	0800993f 	.word	0x0800993f
 800976c:	0800993f 	.word	0x0800993f
 8009770:	0800993f 	.word	0x0800993f
 8009774:	080097f9 	.word	0x080097f9
 8009778:	0800993f 	.word	0x0800993f
 800977c:	0800993f 	.word	0x0800993f
 8009780:	0800993f 	.word	0x0800993f
 8009784:	0800983b 	.word	0x0800983b
 8009788:	0800993f 	.word	0x0800993f
 800978c:	0800993f 	.word	0x0800993f
 8009790:	0800993f 	.word	0x0800993f
 8009794:	0800987b 	.word	0x0800987b
 8009798:	0800993f 	.word	0x0800993f
 800979c:	0800993f 	.word	0x0800993f
 80097a0:	0800993f 	.word	0x0800993f
 80097a4:	080098bd 	.word	0x080098bd
 80097a8:	0800993f 	.word	0x0800993f
 80097ac:	0800993f 	.word	0x0800993f
 80097b0:	0800993f 	.word	0x0800993f
 80097b4:	080098fd 	.word	0x080098fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f956 	bl	8009a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0208 	orr.w	r2, r2, #8
 80097d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0204 	bic.w	r2, r2, #4
 80097e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6999      	ldr	r1, [r3, #24]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	691a      	ldr	r2, [r3, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	619a      	str	r2, [r3, #24]
      break;
 80097f6:	e0a5      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f9b2 	bl	8009b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6999      	ldr	r1, [r3, #24]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	021a      	lsls	r2, r3, #8
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	619a      	str	r2, [r3, #24]
      break;
 8009838:	e084      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fa0b 	bl	8009c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0204 	bic.w	r2, r2, #4
 8009864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69d9      	ldr	r1, [r3, #28]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691a      	ldr	r2, [r3, #16]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	61da      	str	r2, [r3, #28]
      break;
 8009878:	e064      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fa63 	bl	8009d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69d9      	ldr	r1, [r3, #28]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	021a      	lsls	r2, r3, #8
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	61da      	str	r2, [r3, #28]
      break;
 80098ba:	e043      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 faa0 	bl	8009e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0208 	orr.w	r2, r2, #8
 80098d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0204 	bic.w	r2, r2, #4
 80098e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098fa:	e023      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fad8 	bl	8009eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	021a      	lsls	r2, r3, #8
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800993c:	e002      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
      break;
 8009942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop

08009958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2a      	ldr	r2, [pc, #168]	; (8009a64 <TIM_Base_SetConfig+0xbc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_Base_SetConfig+0x20>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c6:	d108      	bne.n	80099da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a21      	ldr	r2, [pc, #132]	; (8009a64 <TIM_Base_SetConfig+0xbc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00b      	beq.n	80099fa <TIM_Base_SetConfig+0x52>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e8:	d007      	beq.n	80099fa <TIM_Base_SetConfig+0x52>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1e      	ldr	r2, [pc, #120]	; (8009a68 <TIM_Base_SetConfig+0xc0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d003      	beq.n	80099fa <TIM_Base_SetConfig+0x52>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1d      	ldr	r2, [pc, #116]	; (8009a6c <TIM_Base_SetConfig+0xc4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d108      	bne.n	8009a0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <TIM_Base_SetConfig+0xbc>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_Base_SetConfig+0xa0>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <TIM_Base_SetConfig+0xc0>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_Base_SetConfig+0xa0>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a0a      	ldr	r2, [pc, #40]	; (8009a6c <TIM_Base_SetConfig+0xc4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d103      	bne.n	8009a50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	615a      	str	r2, [r3, #20]
}
 8009a56:	bf00      	nop
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40012c00 	.word	0x40012c00
 8009a68:	40014000 	.word	0x40014000
 8009a6c:	40014400 	.word	0x40014400

08009a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f023 0201 	bic.w	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f023 0302 	bic.w	r3, r3, #2
 8009abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a24      	ldr	r2, [pc, #144]	; (8009b5c <TIM_OC1_SetConfig+0xec>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d007      	beq.n	8009ae0 <TIM_OC1_SetConfig+0x70>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a23      	ldr	r2, [pc, #140]	; (8009b60 <TIM_OC1_SetConfig+0xf0>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d003      	beq.n	8009ae0 <TIM_OC1_SetConfig+0x70>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a22      	ldr	r2, [pc, #136]	; (8009b64 <TIM_OC1_SetConfig+0xf4>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d10c      	bne.n	8009afa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f023 0308 	bic.w	r3, r3, #8
 8009ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f023 0304 	bic.w	r3, r3, #4
 8009af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <TIM_OC1_SetConfig+0xec>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d007      	beq.n	8009b12 <TIM_OC1_SetConfig+0xa2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <TIM_OC1_SetConfig+0xf0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <TIM_OC1_SetConfig+0xa2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a15      	ldr	r2, [pc, #84]	; (8009b64 <TIM_OC1_SetConfig+0xf4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d111      	bne.n	8009b36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	621a      	str	r2, [r3, #32]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	40012c00 	.word	0x40012c00
 8009b60:	40014000 	.word	0x40014000
 8009b64:	40014400 	.word	0x40014400

08009b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	f023 0210 	bic.w	r2, r3, #16
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f023 0320 	bic.w	r3, r3, #32
 8009bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a22      	ldr	r2, [pc, #136]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d10d      	bne.n	8009be8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a19      	ldr	r2, [pc, #100]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d007      	beq.n	8009c00 <TIM_OC2_SetConfig+0x98>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a18      	ldr	r2, [pc, #96]	; (8009c54 <TIM_OC2_SetConfig+0xec>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d003      	beq.n	8009c00 <TIM_OC2_SetConfig+0x98>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a17      	ldr	r2, [pc, #92]	; (8009c58 <TIM_OC2_SetConfig+0xf0>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d113      	bne.n	8009c28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	621a      	str	r2, [r3, #32]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	40012c00 	.word	0x40012c00
 8009c54:	40014000 	.word	0x40014000
 8009c58:	40014400 	.word	0x40014400

08009c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	021b      	lsls	r3, r3, #8
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <TIM_OC3_SetConfig+0xe4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d10d      	bne.n	8009cda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a18      	ldr	r2, [pc, #96]	; (8009d40 <TIM_OC3_SetConfig+0xe4>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d007      	beq.n	8009cf2 <TIM_OC3_SetConfig+0x96>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a17      	ldr	r2, [pc, #92]	; (8009d44 <TIM_OC3_SetConfig+0xe8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d003      	beq.n	8009cf2 <TIM_OC3_SetConfig+0x96>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a16      	ldr	r2, [pc, #88]	; (8009d48 <TIM_OC3_SetConfig+0xec>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d113      	bne.n	8009d1a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	621a      	str	r2, [r3, #32]
}
 8009d34:	bf00      	nop
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	40012c00 	.word	0x40012c00
 8009d44:	40014000 	.word	0x40014000
 8009d48:	40014400 	.word	0x40014400

08009d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	021b      	lsls	r3, r3, #8
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	031b      	lsls	r3, r3, #12
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a14      	ldr	r2, [pc, #80]	; (8009dfc <TIM_OC4_SetConfig+0xb0>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d007      	beq.n	8009dc0 <TIM_OC4_SetConfig+0x74>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a13      	ldr	r2, [pc, #76]	; (8009e00 <TIM_OC4_SetConfig+0xb4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d003      	beq.n	8009dc0 <TIM_OC4_SetConfig+0x74>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a12      	ldr	r2, [pc, #72]	; (8009e04 <TIM_OC4_SetConfig+0xb8>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d109      	bne.n	8009dd4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	019b      	lsls	r3, r3, #6
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	621a      	str	r2, [r3, #32]
}
 8009dee:	bf00      	nop
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	40012c00 	.word	0x40012c00
 8009e00:	40014000 	.word	0x40014000
 8009e04:	40014400 	.word	0x40014400

08009e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	041b      	lsls	r3, r3, #16
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a13      	ldr	r2, [pc, #76]	; (8009eac <TIM_OC5_SetConfig+0xa4>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <TIM_OC5_SetConfig+0x6a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a12      	ldr	r2, [pc, #72]	; (8009eb0 <TIM_OC5_SetConfig+0xa8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_OC5_SetConfig+0x6a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a11      	ldr	r2, [pc, #68]	; (8009eb4 <TIM_OC5_SetConfig+0xac>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d109      	bne.n	8009e86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	021b      	lsls	r3, r3, #8
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	621a      	str	r2, [r3, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40012c00 	.word	0x40012c00
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400

08009eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	051b      	lsls	r3, r3, #20
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a14      	ldr	r2, [pc, #80]	; (8009f60 <TIM_OC6_SetConfig+0xa8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d007      	beq.n	8009f24 <TIM_OC6_SetConfig+0x6c>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <TIM_OC6_SetConfig+0xac>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_OC6_SetConfig+0x6c>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <TIM_OC6_SetConfig+0xb0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d109      	bne.n	8009f38 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	029b      	lsls	r3, r3, #10
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	621a      	str	r2, [r3, #32]
}
 8009f52:	bf00      	nop
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	40012c00 	.word	0x40012c00
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400

08009f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f003 031f 	and.w	r3, r3, #31
 8009f7e:	2201      	movs	r2, #1
 8009f80:	fa02 f303 	lsl.w	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a1a      	ldr	r2, [r3, #32]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	401a      	ands	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a1a      	ldr	r2, [r3, #32]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f003 031f 	and.w	r3, r3, #31
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	621a      	str	r2, [r3, #32]
}
 8009faa:	bf00      	nop
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e04f      	b.n	800a070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a21      	ldr	r2, [pc, #132]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d108      	bne.n	800a00c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a000:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a14      	ldr	r2, [pc, #80]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a038:	d004      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a10      	ldr	r2, [pc, #64]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d10c      	bne.n	800a05e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a04a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	40012c00 	.word	0x40012c00
 800a080:	40014000 	.word	0x40014000

0800a084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e040      	b.n	800a154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f8 ffea 	bl	80030bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2224      	movs	r2, #36	; 0x24
 800a0ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0201 	bic.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8c0 	bl	800a284 <UART_SetConfig>
 800a104:	4603      	mov	r3, r0
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e022      	b.n	800a154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fae0 	bl	800a6dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a12a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a13a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0201 	orr.w	r2, r2, #1
 800a14a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fb67 	bl	800a820 <UART_CheckIdleState>
 800a152:	4603      	mov	r3, r0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a170:	2b20      	cmp	r3, #32
 800a172:	f040 8082 	bne.w	800a27a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <HAL_UART_Transmit+0x26>
 800a17c:	88fb      	ldrh	r3, [r7, #6]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e07a      	b.n	800a27c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d101      	bne.n	800a194 <HAL_UART_Transmit+0x38>
 800a190:	2302      	movs	r3, #2
 800a192:	e073      	b.n	800a27c <HAL_UART_Transmit+0x120>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2221      	movs	r2, #33	; 0x21
 800a1a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1aa:	f7fa fb2b 	bl	8004804 <HAL_GetTick>
 800a1ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c8:	d108      	bne.n	800a1dc <HAL_UART_Transmit+0x80>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d104      	bne.n	800a1dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	e003      	b.n	800a1e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a1ec:	e02d      	b.n	800a24a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2180      	movs	r1, #128	; 0x80
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fb5a 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e039      	b.n	800a27c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	881a      	ldrh	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a21a:	b292      	uxth	r2, r2
 800a21c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	3302      	adds	r3, #2
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	e008      	b.n	800a238 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	b292      	uxth	r2, r2
 800a230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	3301      	adds	r3, #1
 800a236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a23e:	b29b      	uxth	r3, r3
 800a240:	3b01      	subs	r3, #1
 800a242:	b29a      	uxth	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1cb      	bne.n	800a1ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	2140      	movs	r1, #64	; 0x40
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fb26 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e005      	b.n	800a27c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e000      	b.n	800a27c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a27a:	2302      	movs	r3, #2
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a288:	b08a      	sub	sp, #40	; 0x28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4bb4      	ldr	r3, [pc, #720]	; (800a584 <UART_SetConfig+0x300>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4aa9      	ldr	r2, [pc, #676]	; (800a588 <UART_SetConfig+0x304>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d004      	beq.n	800a2f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a300:	430a      	orrs	r2, r1
 800a302:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4aa0      	ldr	r2, [pc, #640]	; (800a58c <UART_SetConfig+0x308>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d126      	bne.n	800a35c <UART_SetConfig+0xd8>
 800a30e:	4ba0      	ldr	r3, [pc, #640]	; (800a590 <UART_SetConfig+0x30c>)
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a314:	f003 0303 	and.w	r3, r3, #3
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d81b      	bhi.n	800a354 <UART_SetConfig+0xd0>
 800a31c:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <UART_SetConfig+0xa0>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a335 	.word	0x0800a335
 800a328:	0800a345 	.word	0x0800a345
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a34d 	.word	0x0800a34d
 800a334:	2301      	movs	r3, #1
 800a336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a33a:	e080      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a33c:	2302      	movs	r3, #2
 800a33e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a342:	e07c      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a344:	2304      	movs	r3, #4
 800a346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a34a:	e078      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a34c:	2308      	movs	r3, #8
 800a34e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a352:	e074      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a354:	2310      	movs	r3, #16
 800a356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a35a:	e070      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a8c      	ldr	r2, [pc, #560]	; (800a594 <UART_SetConfig+0x310>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d138      	bne.n	800a3d8 <UART_SetConfig+0x154>
 800a366:	4b8a      	ldr	r3, [pc, #552]	; (800a590 <UART_SetConfig+0x30c>)
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36c:	f003 030c 	and.w	r3, r3, #12
 800a370:	2b0c      	cmp	r3, #12
 800a372:	d82d      	bhi.n	800a3d0 <UART_SetConfig+0x14c>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <UART_SetConfig+0xf8>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a3b1 	.word	0x0800a3b1
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a3d1 	.word	0x0800a3d1
 800a388:	0800a3d1 	.word	0x0800a3d1
 800a38c:	0800a3c1 	.word	0x0800a3c1
 800a390:	0800a3d1 	.word	0x0800a3d1
 800a394:	0800a3d1 	.word	0x0800a3d1
 800a398:	0800a3d1 	.word	0x0800a3d1
 800a39c:	0800a3b9 	.word	0x0800a3b9
 800a3a0:	0800a3d1 	.word	0x0800a3d1
 800a3a4:	0800a3d1 	.word	0x0800a3d1
 800a3a8:	0800a3d1 	.word	0x0800a3d1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3b6:	e042      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3be:	e03e      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3c6:	e03a      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ce:	e036      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3d6:	e032      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a6a      	ldr	r2, [pc, #424]	; (800a588 <UART_SetConfig+0x304>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d12a      	bne.n	800a438 <UART_SetConfig+0x1b4>
 800a3e2:	4b6b      	ldr	r3, [pc, #428]	; (800a590 <UART_SetConfig+0x30c>)
 800a3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3f0:	d01a      	beq.n	800a428 <UART_SetConfig+0x1a4>
 800a3f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3f6:	d81b      	bhi.n	800a430 <UART_SetConfig+0x1ac>
 800a3f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3fc:	d00c      	beq.n	800a418 <UART_SetConfig+0x194>
 800a3fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a402:	d815      	bhi.n	800a430 <UART_SetConfig+0x1ac>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <UART_SetConfig+0x18c>
 800a408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a40c:	d008      	beq.n	800a420 <UART_SetConfig+0x19c>
 800a40e:	e00f      	b.n	800a430 <UART_SetConfig+0x1ac>
 800a410:	2300      	movs	r3, #0
 800a412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a416:	e012      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a418:	2302      	movs	r3, #2
 800a41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a41e:	e00e      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a426:	e00a      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a42e:	e006      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a436:	e002      	b.n	800a43e <UART_SetConfig+0x1ba>
 800a438:	2310      	movs	r3, #16
 800a43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a51      	ldr	r2, [pc, #324]	; (800a588 <UART_SetConfig+0x304>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d17a      	bne.n	800a53e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d824      	bhi.n	800a49a <UART_SetConfig+0x216>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <UART_SetConfig+0x1d4>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a49b 	.word	0x0800a49b
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a49b 	.word	0x0800a49b
 800a468:	0800a48b 	.word	0x0800a48b
 800a46c:	0800a49b 	.word	0x0800a49b
 800a470:	0800a49b 	.word	0x0800a49b
 800a474:	0800a49b 	.word	0x0800a49b
 800a478:	0800a493 	.word	0x0800a493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a47c:	f7fe fa7a 	bl	8008974 <HAL_RCC_GetPCLK1Freq>
 800a480:	61f8      	str	r0, [r7, #28]
        break;
 800a482:	e010      	b.n	800a4a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a484:	4b44      	ldr	r3, [pc, #272]	; (800a598 <UART_SetConfig+0x314>)
 800a486:	61fb      	str	r3, [r7, #28]
        break;
 800a488:	e00d      	b.n	800a4a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a48a:	f7fe f9db 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 800a48e:	61f8      	str	r0, [r7, #28]
        break;
 800a490:	e009      	b.n	800a4a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a496:	61fb      	str	r3, [r7, #28]
        break;
 800a498:	e005      	b.n	800a4a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a4a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 8107 	beq.w	800a6bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d305      	bcc.n	800a4ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4c4:	69fa      	ldr	r2, [r7, #28]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d903      	bls.n	800a4d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a4d0:	e0f4      	b.n	800a6bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	461c      	mov	r4, r3
 800a4d8:	4615      	mov	r5, r2
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	022b      	lsls	r3, r5, #8
 800a4e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a4e8:	0222      	lsls	r2, r4, #8
 800a4ea:	68f9      	ldr	r1, [r7, #12]
 800a4ec:	6849      	ldr	r1, [r1, #4]
 800a4ee:	0849      	lsrs	r1, r1, #1
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	4688      	mov	r8, r1
 800a4f4:	4681      	mov	r9, r0
 800a4f6:	eb12 0a08 	adds.w	sl, r2, r8
 800a4fa:	eb43 0b09 	adc.w	fp, r3, r9
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50c:	4650      	mov	r0, sl
 800a50e:	4659      	mov	r1, fp
 800a510:	f7f6 fbea 	bl	8000ce8 <__aeabi_uldivmod>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4613      	mov	r3, r2
 800a51a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d308      	bcc.n	800a536 <UART_SetConfig+0x2b2>
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52a:	d204      	bcs.n	800a536 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	60da      	str	r2, [r3, #12]
 800a534:	e0c2      	b.n	800a6bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a53c:	e0be      	b.n	800a6bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a546:	d16a      	bne.n	800a61e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d834      	bhi.n	800a5ba <UART_SetConfig+0x336>
 800a550:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <UART_SetConfig+0x2d4>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a59d 	.word	0x0800a59d
 800a560:	0800a5a5 	.word	0x0800a5a5
 800a564:	0800a5bb 	.word	0x0800a5bb
 800a568:	0800a5ab 	.word	0x0800a5ab
 800a56c:	0800a5bb 	.word	0x0800a5bb
 800a570:	0800a5bb 	.word	0x0800a5bb
 800a574:	0800a5bb 	.word	0x0800a5bb
 800a578:	0800a5b3 	.word	0x0800a5b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a57c:	f7fe f9fa 	bl	8008974 <HAL_RCC_GetPCLK1Freq>
 800a580:	61f8      	str	r0, [r7, #28]
        break;
 800a582:	e020      	b.n	800a5c6 <UART_SetConfig+0x342>
 800a584:	efff69f3 	.word	0xefff69f3
 800a588:	40008000 	.word	0x40008000
 800a58c:	40013800 	.word	0x40013800
 800a590:	40021000 	.word	0x40021000
 800a594:	40004400 	.word	0x40004400
 800a598:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a59c:	f7fe fa00 	bl	80089a0 <HAL_RCC_GetPCLK2Freq>
 800a5a0:	61f8      	str	r0, [r7, #28]
        break;
 800a5a2:	e010      	b.n	800a5c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a4:	4b4c      	ldr	r3, [pc, #304]	; (800a6d8 <UART_SetConfig+0x454>)
 800a5a6:	61fb      	str	r3, [r7, #28]
        break;
 800a5a8:	e00d      	b.n	800a5c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5aa:	f7fe f94b 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 800a5ae:	61f8      	str	r0, [r7, #28]
        break;
 800a5b0:	e009      	b.n	800a5c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b6:	61fb      	str	r3, [r7, #28]
        break;
 800a5b8:	e005      	b.n	800a5c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a5c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d077      	beq.n	800a6bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	005a      	lsls	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	085b      	lsrs	r3, r3, #1
 800a5d6:	441a      	add	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b0f      	cmp	r3, #15
 800a5e6:	d916      	bls.n	800a616 <UART_SetConfig+0x392>
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ee:	d212      	bcs.n	800a616 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f023 030f 	bic.w	r3, r3, #15
 800a5f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	b29a      	uxth	r2, r3
 800a606:	8afb      	ldrh	r3, [r7, #22]
 800a608:	4313      	orrs	r3, r2
 800a60a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	8afa      	ldrh	r2, [r7, #22]
 800a612:	60da      	str	r2, [r3, #12]
 800a614:	e052      	b.n	800a6bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a61c:	e04e      	b.n	800a6bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a61e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a622:	2b08      	cmp	r3, #8
 800a624:	d827      	bhi.n	800a676 <UART_SetConfig+0x3f2>
 800a626:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <UART_SetConfig+0x3a8>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a651 	.word	0x0800a651
 800a630:	0800a659 	.word	0x0800a659
 800a634:	0800a661 	.word	0x0800a661
 800a638:	0800a677 	.word	0x0800a677
 800a63c:	0800a667 	.word	0x0800a667
 800a640:	0800a677 	.word	0x0800a677
 800a644:	0800a677 	.word	0x0800a677
 800a648:	0800a677 	.word	0x0800a677
 800a64c:	0800a66f 	.word	0x0800a66f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a650:	f7fe f990 	bl	8008974 <HAL_RCC_GetPCLK1Freq>
 800a654:	61f8      	str	r0, [r7, #28]
        break;
 800a656:	e014      	b.n	800a682 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a658:	f7fe f9a2 	bl	80089a0 <HAL_RCC_GetPCLK2Freq>
 800a65c:	61f8      	str	r0, [r7, #28]
        break;
 800a65e:	e010      	b.n	800a682 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a660:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <UART_SetConfig+0x454>)
 800a662:	61fb      	str	r3, [r7, #28]
        break;
 800a664:	e00d      	b.n	800a682 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a666:	f7fe f8ed 	bl	8008844 <HAL_RCC_GetSysClockFreq>
 800a66a:	61f8      	str	r0, [r7, #28]
        break;
 800a66c:	e009      	b.n	800a682 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a66e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a672:	61fb      	str	r3, [r7, #28]
        break;
 800a674:	e005      	b.n	800a682 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a680:	bf00      	nop
    }

    if (pclk != 0U)
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d019      	beq.n	800a6bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	085a      	lsrs	r2, r3, #1
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	441a      	add	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d909      	bls.n	800a6b6 <UART_SetConfig+0x432>
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a8:	d205      	bcs.n	800a6b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60da      	str	r2, [r3, #12]
 800a6b4:	e002      	b.n	800a6bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a6c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3728      	adds	r7, #40	; 0x28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6d6:	bf00      	nop
 800a6d8:	00f42400 	.word	0x00f42400

0800a6dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00a      	beq.n	800a728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00a      	beq.n	800a74a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	430a      	orrs	r2, r1
 800a76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01a      	beq.n	800a7f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7da:	d10a      	bne.n	800a7f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	605a      	str	r2, [r3, #4]
  }
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af02      	add	r7, sp, #8
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a830:	f7f9 ffe8 	bl	8004804 <HAL_GetTick>
 800a834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b08      	cmp	r3, #8
 800a842:	d10e      	bne.n	800a862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f82d 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e023      	b.n	800a8aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d10e      	bne.n	800a88e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f817 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e00d      	b.n	800a8aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b09c      	sub	sp, #112	; 0x70
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	603b      	str	r3, [r7, #0]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c2:	e0a5      	b.n	800aa10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	f000 80a1 	beq.w	800aa10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ce:	f7f9 ff99 	bl	8004804 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d13e      	bne.n	800a962 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a904:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	663b      	str	r3, [r7, #96]	; 0x60
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a936:	64ba      	str	r2, [r7, #72]	; 0x48
 800a938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a93c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2220      	movs	r2, #32
 800a94e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2220      	movs	r2, #32
 800a954:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e067      	b.n	800aa32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d04f      	beq.n	800aa10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a97a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a97e:	d147      	bne.n	800aa10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a988:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	e853 3f00 	ldrex	r3, [r3]
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a99e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e6      	bne.n	800a98a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	e853 3f00 	ldrex	r3, [r3]
 800a9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9dc:	623a      	str	r2, [r7, #32]
 800a9de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	69f9      	ldr	r1, [r7, #28]
 800a9e2:	6a3a      	ldr	r2, [r7, #32]
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e5      	bne.n	800a9bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e010      	b.n	800aa32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69da      	ldr	r2, [r3, #28]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	bf0c      	ite	eq
 800aa20:	2301      	moveq	r3, #1
 800aa22:	2300      	movne	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	461a      	mov	r2, r3
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	f43f af4a 	beq.w	800a8c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3770      	adds	r7, #112	; 0x70
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <__NVIC_SetPriority>:
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	db0a      	blt.n	800aa66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	490c      	ldr	r1, [pc, #48]	; (800aa88 <__NVIC_SetPriority+0x4c>)
 800aa56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa5a:	0112      	lsls	r2, r2, #4
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	440b      	add	r3, r1
 800aa60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa64:	e00a      	b.n	800aa7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4908      	ldr	r1, [pc, #32]	; (800aa8c <__NVIC_SetPriority+0x50>)
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	f003 030f 	and.w	r3, r3, #15
 800aa72:	3b04      	subs	r3, #4
 800aa74:	0112      	lsls	r2, r2, #4
 800aa76:	b2d2      	uxtb	r2, r2
 800aa78:	440b      	add	r3, r1
 800aa7a:	761a      	strb	r2, [r3, #24]
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	e000e100 	.word	0xe000e100
 800aa8c:	e000ed00 	.word	0xe000ed00

0800aa90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <SysTick_Handler+0x1c>)
 800aa96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aa98:	f002 fbf0 	bl	800d27c <xTaskGetSchedulerState>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d001      	beq.n	800aaa6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aaa2:	f003 fad9 	bl	800e058 <xPortSysTickHandler>
  }
}
 800aaa6:	bf00      	nop
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	e000e010 	.word	0xe000e010

0800aab0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aab4:	2100      	movs	r1, #0
 800aab6:	f06f 0004 	mvn.w	r0, #4
 800aaba:	f7ff ffbf 	bl	800aa3c <__NVIC_SetPriority>
#endif
}
 800aabe:	bf00      	nop
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaca:	f3ef 8305 	mrs	r3, IPSR
 800aace:	603b      	str	r3, [r7, #0]
  return(result);
 800aad0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aad6:	f06f 0305 	mvn.w	r3, #5
 800aada:	607b      	str	r3, [r7, #4]
 800aadc:	e00c      	b.n	800aaf8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aade:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <osKernelInitialize+0x44>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <osKernelInitialize+0x44>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	607b      	str	r3, [r7, #4]
 800aaf0:	e002      	b.n	800aaf8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aaf8:	687b      	ldr	r3, [r7, #4]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	20002498 	.word	0x20002498

0800ab0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab12:	f3ef 8305 	mrs	r3, IPSR
 800ab16:	603b      	str	r3, [r7, #0]
  return(result);
 800ab18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab1e:	f06f 0305 	mvn.w	r3, #5
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	e010      	b.n	800ab48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <osKernelStart+0x48>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d109      	bne.n	800ab42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab2e:	f7ff ffbf 	bl	800aab0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab32:	4b08      	ldr	r3, [pc, #32]	; (800ab54 <osKernelStart+0x48>)
 800ab34:	2202      	movs	r2, #2
 800ab36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab38:	f001 ff24 	bl	800c984 <vTaskStartScheduler>
      stat = osOK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	607b      	str	r3, [r7, #4]
 800ab40:	e002      	b.n	800ab48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab42:	f04f 33ff 	mov.w	r3, #4294967295
 800ab46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab48:	687b      	ldr	r3, [r7, #4]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	20002498 	.word	0x20002498

0800ab58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	; 0x38
 800ab5c:	af04      	add	r7, sp, #16
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab68:	f3ef 8305 	mrs	r3, IPSR
 800ab6c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d17e      	bne.n	800ac72 <osThreadNew+0x11a>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d07b      	beq.n	800ac72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab7a:	2380      	movs	r3, #128	; 0x80
 800ab7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab7e:	2318      	movs	r3, #24
 800ab80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ab86:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d045      	beq.n	800ac1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <osThreadNew+0x48>
        name = attr->name;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d008      	beq.n	800abc6 <osThreadNew+0x6e>
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	2b38      	cmp	r3, #56	; 0x38
 800abb8:	d805      	bhi.n	800abc6 <osThreadNew+0x6e>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <osThreadNew+0x72>
        return (NULL);
 800abc6:	2300      	movs	r3, #0
 800abc8:	e054      	b.n	800ac74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	089b      	lsrs	r3, r3, #2
 800abd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00e      	beq.n	800ac00 <osThreadNew+0xa8>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	2b5b      	cmp	r3, #91	; 0x5b
 800abe8:	d90a      	bls.n	800ac00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d006      	beq.n	800ac00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <osThreadNew+0xa8>
        mem = 1;
 800abfa:	2301      	movs	r3, #1
 800abfc:	61bb      	str	r3, [r7, #24]
 800abfe:	e010      	b.n	800ac22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10c      	bne.n	800ac22 <osThreadNew+0xca>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d108      	bne.n	800ac22 <osThreadNew+0xca>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <osThreadNew+0xca>
          mem = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	e001      	b.n	800ac22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d110      	bne.n	800ac4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac30:	9202      	str	r2, [sp, #8]
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	6a3a      	ldr	r2, [r7, #32]
 800ac3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f001 fcca 	bl	800c5d8 <xTaskCreateStatic>
 800ac44:	4603      	mov	r3, r0
 800ac46:	613b      	str	r3, [r7, #16]
 800ac48:	e013      	b.n	800ac72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d110      	bne.n	800ac72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	f107 0310 	add.w	r3, r7, #16
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f001 fd15 	bl	800c692 <xTaskCreate>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d001      	beq.n	800ac72 <osThreadNew+0x11a>
            hTask = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac72:	693b      	ldr	r3, [r7, #16]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3728      	adds	r7, #40	; 0x28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac84:	f3ef 8305 	mrs	r3, IPSR
 800ac88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <osDelay+0x1c>
    stat = osErrorISR;
 800ac90:	f06f 0305 	mvn.w	r3, #5
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	e007      	b.n	800aca8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fe3a 	bl	800c91c <vTaskDelay>
    }
  }

  return (stat);
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b088      	sub	sp, #32
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acbe:	f3ef 8305 	mrs	r3, IPSR
 800acc2:	60bb      	str	r3, [r7, #8]
  return(result);
 800acc4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d174      	bne.n	800adb4 <osMutexNew+0x102>
    if (attr != NULL) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	e001      	b.n	800acdc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <osMutexNew+0x3a>
      rmtx = 1U;
 800ace6:	2301      	movs	r3, #1
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	e001      	b.n	800acf0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d15c      	bne.n	800adb4 <osMutexNew+0x102>
      mem = -1;
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295
 800acfe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d015      	beq.n	800ad32 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d006      	beq.n	800ad1c <osMutexNew+0x6a>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	2b4f      	cmp	r3, #79	; 0x4f
 800ad14:	d902      	bls.n	800ad1c <osMutexNew+0x6a>
          mem = 1;
 800ad16:	2301      	movs	r3, #1
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	e00c      	b.n	800ad36 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d108      	bne.n	800ad36 <osMutexNew+0x84>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d104      	bne.n	800ad36 <osMutexNew+0x84>
            mem = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	613b      	str	r3, [r7, #16]
 800ad30:	e001      	b.n	800ad36 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d112      	bne.n	800ad62 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	4619      	mov	r1, r3
 800ad48:	2004      	movs	r0, #4
 800ad4a:	f000 fd5a 	bl	800b802 <xQueueCreateMutexStatic>
 800ad4e:	61f8      	str	r0, [r7, #28]
 800ad50:	e016      	b.n	800ad80 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	4619      	mov	r1, r3
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f000 fd52 	bl	800b802 <xQueueCreateMutexStatic>
 800ad5e:	61f8      	str	r0, [r7, #28]
 800ad60:	e00e      	b.n	800ad80 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10b      	bne.n	800ad80 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d004      	beq.n	800ad78 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ad6e:	2004      	movs	r0, #4
 800ad70:	f000 fd2f 	bl	800b7d2 <xQueueCreateMutex>
 800ad74:	61f8      	str	r0, [r7, #28]
 800ad76:	e003      	b.n	800ad80 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f000 fd2a 	bl	800b7d2 <xQueueCreateMutex>
 800ad7e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00c      	beq.n	800ada0 <osMutexNew+0xee>
        if (attr != NULL) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <osMutexNew+0xe2>
          name = attr->name;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e001      	b.n	800ad98 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ad98:	68f9      	ldr	r1, [r7, #12]
 800ad9a:	69f8      	ldr	r0, [r7, #28]
 800ad9c:	f001 fb94 	bl	800c4c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <osMutexNew+0x102>
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	f043 0301 	orr.w	r3, r3, #1
 800adb2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800adb4:	69fb      	ldr	r3, [r7, #28]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f023 0301 	bic.w	r3, r3, #1
 800adce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800addc:	f3ef 8305 	mrs	r3, IPSR
 800ade0:	60bb      	str	r3, [r7, #8]
  return(result);
 800ade2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ade8:	f06f 0305 	mvn.w	r3, #5
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	e02c      	b.n	800ae4a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d103      	bne.n	800adfe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800adf6:	f06f 0303 	mvn.w	r3, #3
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e025      	b.n	800ae4a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d011      	beq.n	800ae28 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6938      	ldr	r0, [r7, #16]
 800ae08:	f000 fd4a 	bl	800b8a0 <xQueueTakeMutexRecursive>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d01b      	beq.n	800ae4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ae18:	f06f 0301 	mvn.w	r3, #1
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	e014      	b.n	800ae4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ae20:	f06f 0302 	mvn.w	r3, #2
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	e010      	b.n	800ae4a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f001 f852 	bl	800bed4 <xQueueSemaphoreTake>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d009      	beq.n	800ae4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d003      	beq.n	800ae44 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ae3c:	f06f 0301 	mvn.w	r3, #1
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e002      	b.n	800ae4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ae44:	f06f 0302 	mvn.w	r3, #2
 800ae48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ae4a:	697b      	ldr	r3, [r7, #20]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae70:	f3ef 8305 	mrs	r3, IPSR
 800ae74:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae76:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ae7c:	f06f 0305 	mvn.w	r3, #5
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	e01f      	b.n	800aec4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d103      	bne.n	800ae92 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ae8a:	f06f 0303 	mvn.w	r3, #3
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	e018      	b.n	800aec4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d009      	beq.n	800aeac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ae98:	6938      	ldr	r0, [r7, #16]
 800ae9a:	f000 fccd 	bl	800b838 <xQueueGiveMutexRecursive>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d00f      	beq.n	800aec4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aea4:	f06f 0302 	mvn.w	r3, #2
 800aea8:	617b      	str	r3, [r7, #20]
 800aeaa:	e00b      	b.n	800aec4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aeac:	2300      	movs	r3, #0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	6938      	ldr	r0, [r7, #16]
 800aeb4:	f000 fd94 	bl	800b9e0 <xQueueGenericSend>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d002      	beq.n	800aec4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aebe:	f06f 0302 	mvn.w	r3, #2
 800aec2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aec4:	697b      	ldr	r3, [r7, #20]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aece:	b580      	push	{r7, lr}
 800aed0:	b08a      	sub	sp, #40	; 0x28
 800aed2:	af02      	add	r7, sp, #8
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aede:	f3ef 8305 	mrs	r3, IPSR
 800aee2:	613b      	str	r3, [r7, #16]
  return(result);
 800aee4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d175      	bne.n	800afd6 <osSemaphoreNew+0x108>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d072      	beq.n	800afd6 <osSemaphoreNew+0x108>
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d86e      	bhi.n	800afd6 <osSemaphoreNew+0x108>
    mem = -1;
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d015      	beq.n	800af30 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <osSemaphoreNew+0x4c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	2b4f      	cmp	r3, #79	; 0x4f
 800af12:	d902      	bls.n	800af1a <osSemaphoreNew+0x4c>
        mem = 1;
 800af14:	2301      	movs	r3, #1
 800af16:	61bb      	str	r3, [r7, #24]
 800af18:	e00c      	b.n	800af34 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <osSemaphoreNew+0x66>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d104      	bne.n	800af34 <osSemaphoreNew+0x66>
          mem = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	e001      	b.n	800af34 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d04c      	beq.n	800afd6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d128      	bne.n	800af94 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d10a      	bne.n	800af5e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	2203      	movs	r2, #3
 800af4e:	9200      	str	r2, [sp, #0]
 800af50:	2200      	movs	r2, #0
 800af52:	2100      	movs	r1, #0
 800af54:	2001      	movs	r0, #1
 800af56:	f000 fb4d 	bl	800b5f4 <xQueueGenericCreateStatic>
 800af5a:	61f8      	str	r0, [r7, #28]
 800af5c:	e005      	b.n	800af6a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800af5e:	2203      	movs	r2, #3
 800af60:	2100      	movs	r1, #0
 800af62:	2001      	movs	r0, #1
 800af64:	f000 fbbe 	bl	800b6e4 <xQueueGenericCreate>
 800af68:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d022      	beq.n	800afb6 <osSemaphoreNew+0xe8>
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01f      	beq.n	800afb6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af76:	2300      	movs	r3, #0
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	69f8      	ldr	r0, [r7, #28]
 800af7e:	f000 fd2f 	bl	800b9e0 <xQueueGenericSend>
 800af82:	4603      	mov	r3, r0
 800af84:	2b01      	cmp	r3, #1
 800af86:	d016      	beq.n	800afb6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800af88:	69f8      	ldr	r0, [r7, #28]
 800af8a:	f001 f952 	bl	800c232 <vQueueDelete>
            hSemaphore = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
 800af92:	e010      	b.n	800afb6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d108      	bne.n	800afac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	461a      	mov	r2, r3
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 fcb2 	bl	800b90c <xQueueCreateCountingSemaphoreStatic>
 800afa8:	61f8      	str	r0, [r7, #28]
 800afaa:	e004      	b.n	800afb6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 fce3 	bl	800b97a <xQueueCreateCountingSemaphore>
 800afb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00c      	beq.n	800afd6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <osSemaphoreNew+0xfc>
          name = attr->name;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	617b      	str	r3, [r7, #20]
 800afc8:	e001      	b.n	800afce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800afce:	6979      	ldr	r1, [r7, #20]
 800afd0:	69f8      	ldr	r0, [r7, #28]
 800afd2:	f001 fa79 	bl	800c4c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800afd6:	69fb      	ldr	r3, [r7, #28]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3720      	adds	r7, #32
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d103      	bne.n	800b000 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aff8:	f06f 0303 	mvn.w	r3, #3
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	e039      	b.n	800b074 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b000:	f3ef 8305 	mrs	r3, IPSR
 800b004:	60fb      	str	r3, [r7, #12]
  return(result);
 800b006:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d022      	beq.n	800b052 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b012:	f06f 0303 	mvn.w	r3, #3
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	e02c      	b.n	800b074 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	461a      	mov	r2, r3
 800b024:	2100      	movs	r1, #0
 800b026:	6938      	ldr	r0, [r7, #16]
 800b028:	f001 f860 	bl	800c0ec <xQueueReceiveFromISR>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d003      	beq.n	800b03a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b032:	f06f 0302 	mvn.w	r3, #2
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e01c      	b.n	800b074 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d019      	beq.n	800b074 <osSemaphoreAcquire+0x94>
 800b040:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <osSemaphoreAcquire+0xa0>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	e010      	b.n	800b074 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6938      	ldr	r0, [r7, #16]
 800b056:	f000 ff3d 	bl	800bed4 <xQueueSemaphoreTake>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d009      	beq.n	800b074 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b066:	f06f 0301 	mvn.w	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e002      	b.n	800b074 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b06e:	f06f 0302 	mvn.w	r3, #2
 800b072:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b074:	697b      	ldr	r3, [r7, #20]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	e000ed04 	.word	0xe000ed04

0800b084 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b090:	2300      	movs	r3, #0
 800b092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b094:	f3ef 8305 	mrs	r3, IPSR
 800b098:	613b      	str	r3, [r7, #16]
  return(result);
 800b09a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d15f      	bne.n	800b160 <osMessageQueueNew+0xdc>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d05c      	beq.n	800b160 <osMessageQueueNew+0xdc>
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d059      	beq.n	800b160 <osMessageQueueNew+0xdc>
    mem = -1;
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d029      	beq.n	800b10c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d012      	beq.n	800b0e6 <osMessageQueueNew+0x62>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	2b4f      	cmp	r3, #79	; 0x4f
 800b0c6:	d90e      	bls.n	800b0e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00a      	beq.n	800b0e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	68b9      	ldr	r1, [r7, #8]
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d302      	bcc.n	800b0e6 <osMessageQueueNew+0x62>
        mem = 1;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	61bb      	str	r3, [r7, #24]
 800b0e4:	e014      	b.n	800b110 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d110      	bne.n	800b110 <osMessageQueueNew+0x8c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10c      	bne.n	800b110 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d108      	bne.n	800b110 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d104      	bne.n	800b110 <osMessageQueueNew+0x8c>
          mem = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	61bb      	str	r3, [r7, #24]
 800b10a:	e001      	b.n	800b110 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d10b      	bne.n	800b12e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	691a      	ldr	r2, [r3, #16]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	2100      	movs	r1, #0
 800b120:	9100      	str	r1, [sp, #0]
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 fa65 	bl	800b5f4 <xQueueGenericCreateStatic>
 800b12a:	61f8      	str	r0, [r7, #28]
 800b12c:	e008      	b.n	800b140 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b134:	2200      	movs	r2, #0
 800b136:	68b9      	ldr	r1, [r7, #8]
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fad3 	bl	800b6e4 <xQueueGenericCreate>
 800b13e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00c      	beq.n	800b160 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e001      	b.n	800b158 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b158:	6979      	ldr	r1, [r7, #20]
 800b15a:	69f8      	ldr	r0, [r7, #28]
 800b15c:	f001 f9b4 	bl	800c4c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b160:	69fb      	ldr	r3, [r7, #28]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b184:	f3ef 8305 	mrs	r3, IPSR
 800b188:	617b      	str	r3, [r7, #20]
  return(result);
 800b18a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d028      	beq.n	800b1e2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <osMessageQueuePut+0x36>
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <osMessageQueuePut+0x36>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b1a2:	f06f 0303 	mvn.w	r3, #3
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	e038      	b.n	800b21c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b1ae:	f107 0210 	add.w	r2, r7, #16
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	69b8      	ldr	r0, [r7, #24]
 800b1b8:	f000 fd10 	bl	800bbdc <xQueueGenericSendFromISR>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d003      	beq.n	800b1ca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b1c2:	f06f 0302 	mvn.w	r3, #2
 800b1c6:	61fb      	str	r3, [r7, #28]
 800b1c8:	e028      	b.n	800b21c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d025      	beq.n	800b21c <osMessageQueuePut+0xb0>
 800b1d0:	4b15      	ldr	r3, [pc, #84]	; (800b228 <osMessageQueuePut+0xbc>)
 800b1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	e01c      	b.n	800b21c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <osMessageQueuePut+0x82>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d103      	bne.n	800b1f6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b1ee:	f06f 0303 	mvn.w	r3, #3
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e012      	b.n	800b21c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	68b9      	ldr	r1, [r7, #8]
 800b1fc:	69b8      	ldr	r0, [r7, #24]
 800b1fe:	f000 fbef 	bl	800b9e0 <xQueueGenericSend>
 800b202:	4603      	mov	r3, r0
 800b204:	2b01      	cmp	r3, #1
 800b206:	d009      	beq.n	800b21c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b20e:	f06f 0301 	mvn.w	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
 800b214:	e002      	b.n	800b21c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b216:	f06f 0302 	mvn.w	r3, #2
 800b21a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b21c:	69fb      	ldr	r3, [r7, #28]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3720      	adds	r7, #32
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b23e:	2300      	movs	r3, #0
 800b240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b242:	f3ef 8305 	mrs	r3, IPSR
 800b246:	617b      	str	r3, [r7, #20]
  return(result);
 800b248:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d028      	beq.n	800b2a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <osMessageQueueGet+0x34>
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <osMessageQueueGet+0x34>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b260:	f06f 0303 	mvn.w	r3, #3
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	e037      	b.n	800b2d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b26c:	f107 0310 	add.w	r3, r7, #16
 800b270:	461a      	mov	r2, r3
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	69b8      	ldr	r0, [r7, #24]
 800b276:	f000 ff39 	bl	800c0ec <xQueueReceiveFromISR>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d003      	beq.n	800b288 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b280:	f06f 0302 	mvn.w	r3, #2
 800b284:	61fb      	str	r3, [r7, #28]
 800b286:	e027      	b.n	800b2d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d024      	beq.n	800b2d8 <osMessageQueueGet+0xac>
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <osMessageQueueGet+0xb8>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	e01b      	b.n	800b2d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <osMessageQueueGet+0x80>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b2ac:	f06f 0303 	mvn.w	r3, #3
 800b2b0:	61fb      	str	r3, [r7, #28]
 800b2b2:	e011      	b.n	800b2d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	69b8      	ldr	r0, [r7, #24]
 800b2ba:	f000 fd2b 	bl	800bd14 <xQueueReceive>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d009      	beq.n	800b2d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b2ca:	f06f 0301 	mvn.w	r3, #1
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e002      	b.n	800b2d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b2d2:	f06f 0302 	mvn.w	r3, #2
 800b2d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b2d8:	69fb      	ldr	r3, [r7, #28]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3720      	adds	r7, #32
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed04 	.word	0xe000ed04

0800b2e8 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d102      	bne.n	800b300 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fe:	e023      	b.n	800b348 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b300:	f3ef 8305 	mrs	r3, IPSR
 800b304:	61bb      	str	r3, [r7, #24]
  return(result);
 800b306:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d019      	beq.n	800b340 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b30c:	f3ef 8211 	mrs	r2, BASEPRI
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613a      	str	r2, [r7, #16]
 800b322:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b324:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800b326:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b33e:	e003      	b.n	800b348 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800b340:	6a38      	ldr	r0, [r7, #32]
 800b342:	f000 ff53 	bl	800c1ec <uxQueueSpacesAvailable>
 800b346:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3728      	adds	r7, #40	; 0x28
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4a07      	ldr	r2, [pc, #28]	; (800b380 <vApplicationGetIdleTaskMemory+0x2c>)
 800b364:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	4a06      	ldr	r2, [pc, #24]	; (800b384 <vApplicationGetIdleTaskMemory+0x30>)
 800b36a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2280      	movs	r2, #128	; 0x80
 800b370:	601a      	str	r2, [r3, #0]
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	2000249c 	.word	0x2000249c
 800b384:	200024f8 	.word	0x200024f8

0800b388 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4a07      	ldr	r2, [pc, #28]	; (800b3b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b398:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4a06      	ldr	r2, [pc, #24]	; (800b3b8 <vApplicationGetTimerTaskMemory+0x30>)
 800b39e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3a6:	601a      	str	r2, [r3, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	200026f8 	.word	0x200026f8
 800b3b8:	20002754 	.word	0x20002754

0800b3bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f103 0208 	add.w	r2, r3, #8
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f103 0208 	add.w	r2, r3, #8
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f103 0208 	add.w	r2, r3, #8
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b474:	d103      	bne.n	800b47e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	e00c      	b.n	800b498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	3308      	adds	r3, #8
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	e002      	b.n	800b48c <vListInsert+0x2e>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	429a      	cmp	r2, r3
 800b496:	d2f6      	bcs.n	800b486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	601a      	str	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6892      	ldr	r2, [r2, #8]
 800b4e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	6852      	ldr	r2, [r2, #4]
 800b4f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d103      	bne.n	800b504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	1e5a      	subs	r2, r3, #1
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <xQueueGenericReset+0x2a>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	60bb      	str	r3, [r7, #8]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b54e:	f002 fcf1 	bl	800df34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b55e:	fb01 f303 	mul.w	r3, r1, r3
 800b562:	441a      	add	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	3b01      	subs	r3, #1
 800b580:	68f9      	ldr	r1, [r7, #12]
 800b582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	441a      	add	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	22ff      	movs	r2, #255	; 0xff
 800b592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d114      	bne.n	800b5ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01a      	beq.n	800b5e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 fc95 	bl	800cee0 <xTaskRemoveFromEventList>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d012      	beq.n	800b5e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5bc:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <xQueueGenericReset+0xcc>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	e009      	b.n	800b5e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3310      	adds	r3, #16
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fef2 	bl	800b3bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3324      	adds	r3, #36	; 0x24
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff feed 	bl	800b3bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b5e2:	f002 fcd7 	bl	800df94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b5e6:	2301      	movs	r3, #1
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08e      	sub	sp, #56	; 0x38
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10a      	bne.n	800b63a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <xQueueGenericCreateStatic+0x52>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <xQueueGenericCreateStatic+0x56>
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <xQueueGenericCreateStatic+0x58>
 800b64a:	2300      	movs	r3, #0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	623b      	str	r3, [r7, #32]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <xQueueGenericCreateStatic+0x7e>
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <xQueueGenericCreateStatic+0x82>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueGenericCreateStatic+0x84>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	61fb      	str	r3, [r7, #28]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b692:	2350      	movs	r3, #80	; 0x50
 800b694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b50      	cmp	r3, #80	; 0x50
 800b69a:	d00a      	beq.n	800b6b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	61bb      	str	r3, [r7, #24]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b6b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f83f 	bl	800b758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3730      	adds	r7, #48	; 0x30
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08a      	sub	sp, #40	; 0x28
 800b6e8:	af02      	add	r7, sp, #8
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	613b      	str	r3, [r7, #16]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	fb02 f303 	mul.w	r3, r2, r3
 800b716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	3350      	adds	r3, #80	; 0x50
 800b71c:	4618      	mov	r0, r3
 800b71e:	f002 fd2b 	bl	800e178 <pvPortMalloc>
 800b722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d011      	beq.n	800b74e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	3350      	adds	r3, #80	; 0x50
 800b732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b73c:	79fa      	ldrb	r2, [r7, #7]
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	4613      	mov	r3, r2
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	68b9      	ldr	r1, [r7, #8]
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 f805 	bl	800b758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b74e:	69bb      	ldr	r3, [r7, #24]
	}
 800b750:	4618      	mov	r0, r3
 800b752:	3720      	adds	r7, #32
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d103      	bne.n	800b774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e002      	b.n	800b77a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b786:	2101      	movs	r1, #1
 800b788:	69b8      	ldr	r0, [r7, #24]
 800b78a:	f7ff fecb 	bl	800b524 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	78fa      	ldrb	r2, [r7, #3]
 800b792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b796:	bf00      	nop
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00e      	beq.n	800b7ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f90b 	bl	800b9e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b7ca:	bf00      	nop
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	4603      	mov	r3, r0
 800b7da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6939      	ldr	r1, [r7, #16]
 800b7ea:	6978      	ldr	r0, [r7, #20]
 800b7ec:	f7ff ff7a 	bl	800b6e4 <xQueueGenericCreate>
 800b7f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7ff ffd3 	bl	800b79e <prvInitialiseMutex>

		return xNewQueue;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
	}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b802:	b580      	push	{r7, lr}
 800b804:	b088      	sub	sp, #32
 800b806:	af02      	add	r7, sp, #8
 800b808:	4603      	mov	r3, r0
 800b80a:	6039      	str	r1, [r7, #0]
 800b80c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b80e:	2301      	movs	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	2300      	movs	r3, #0
 800b814:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2200      	movs	r2, #0
 800b81e:	6939      	ldr	r1, [r7, #16]
 800b820:	6978      	ldr	r0, [r7, #20]
 800b822:	f7ff fee7 	bl	800b5f4 <xQueueGenericCreateStatic>
 800b826:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff ffb8 	bl	800b79e <prvInitialiseMutex>

		return xNewQueue;
 800b82e:	68fb      	ldr	r3, [r7, #12]
	}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	60fb      	str	r3, [r7, #12]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	689c      	ldr	r4, [r3, #8]
 800b864:	f001 fcfa 	bl	800d25c <xTaskGetCurrentTaskHandle>
 800b868:	4603      	mov	r3, r0
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d111      	bne.n	800b892 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	1e5a      	subs	r2, r3, #1
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b880:	2300      	movs	r3, #0
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	6938      	ldr	r0, [r7, #16]
 800b888:	f000 f8aa 	bl	800b9e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b88c:	2301      	movs	r3, #1
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	e001      	b.n	800b896 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b896:	697b      	ldr	r3, [r7, #20]
	}
 800b898:	4618      	mov	r0, r3
 800b89a:	371c      	adds	r7, #28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd90      	pop	{r4, r7, pc}

0800b8a0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b8a0:	b590      	push	{r4, r7, lr}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	689c      	ldr	r4, [r3, #8]
 800b8ce:	f001 fcc5 	bl	800d25c <xTaskGetCurrentTaskHandle>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	429c      	cmp	r4, r3
 800b8d6:	d107      	bne.n	800b8e8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	e00c      	b.n	800b902 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6938      	ldr	r0, [r7, #16]
 800b8ec:	f000 faf2 	bl	800bed4 <xQueueSemaphoreTake>
 800b8f0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b902:	697b      	ldr	r3, [r7, #20]
	}
 800b904:	4618      	mov	r0, r3
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd90      	pop	{r4, r7, pc}

0800b90c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08a      	sub	sp, #40	; 0x28
 800b910:	af02      	add	r7, sp, #8
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10a      	bne.n	800b934 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	61bb      	str	r3, [r7, #24]
}
 800b930:	bf00      	nop
 800b932:	e7fe      	b.n	800b932 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d90a      	bls.n	800b952 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	617b      	str	r3, [r7, #20]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b952:	2302      	movs	r3, #2
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	2100      	movs	r1, #0
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff fe49 	bl	800b5f4 <xQueueGenericCreateStatic>
 800b962:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b970:	69fb      	ldr	r3, [r7, #28]
	}
 800b972:	4618      	mov	r0, r3
 800b974:	3720      	adds	r7, #32
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b086      	sub	sp, #24
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	613b      	str	r3, [r7, #16]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d90a      	bls.n	800b9be <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	60fb      	str	r3, [r7, #12]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b9be:	2202      	movs	r2, #2
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff fe8e 	bl	800b6e4 <xQueueGenericCreate>
 800b9c8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b9d6:	697b      	ldr	r3, [r7, #20]
	}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08e      	sub	sp, #56	; 0x38
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xQueueGenericSend+0x32>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <xQueueGenericSend+0x40>
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <xQueueGenericSend+0x44>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <xQueueGenericSend+0x46>
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10a      	bne.n	800ba40 <xQueueGenericSend+0x60>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d103      	bne.n	800ba4e <xQueueGenericSend+0x6e>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d101      	bne.n	800ba52 <xQueueGenericSend+0x72>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e000      	b.n	800ba54 <xQueueGenericSend+0x74>
 800ba52:	2300      	movs	r3, #0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xQueueGenericSend+0x8e>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	623b      	str	r3, [r7, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba6e:	f001 fc05 	bl	800d27c <xTaskGetSchedulerState>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d102      	bne.n	800ba7e <xQueueGenericSend+0x9e>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <xQueueGenericSend+0xa2>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e000      	b.n	800ba84 <xQueueGenericSend+0xa4>
 800ba82:	2300      	movs	r3, #0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <xQueueGenericSend+0xbe>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	61fb      	str	r3, [r7, #28]
}
 800ba9a:	bf00      	nop
 800ba9c:	e7fe      	b.n	800ba9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba9e:	f002 fa49 	bl	800df34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d302      	bcc.n	800bab4 <xQueueGenericSend+0xd4>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d129      	bne.n	800bb08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baba:	f000 fbf5 	bl	800c2a8 <prvCopyDataToQueue>
 800babe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d010      	beq.n	800baea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	3324      	adds	r3, #36	; 0x24
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fa07 	bl	800cee0 <xTaskRemoveFromEventList>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d013      	beq.n	800bb00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bad8:	4b3f      	ldr	r3, [pc, #252]	; (800bbd8 <xQueueGenericSend+0x1f8>)
 800bada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	e00a      	b.n	800bb00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800baf0:	4b39      	ldr	r3, [pc, #228]	; (800bbd8 <xQueueGenericSend+0x1f8>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb00:	f002 fa48 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e063      	b.n	800bbd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb0e:	f002 fa41 	bl	800df94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e05c      	b.n	800bbd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb1c:	f107 0314 	add.w	r3, r7, #20
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 fa41 	bl	800cfa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb2a:	f002 fa33 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb2e:	f000 ff8f 	bl	800ca50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb32:	f002 f9ff 	bl	800df34 <vPortEnterCritical>
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb3c:	b25b      	sxtb	r3, r3
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d103      	bne.n	800bb4c <xQueueGenericSend+0x16c>
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb52:	b25b      	sxtb	r3, r3
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb58:	d103      	bne.n	800bb62 <xQueueGenericSend+0x182>
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb62:	f002 fa17 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb66:	1d3a      	adds	r2, r7, #4
 800bb68:	f107 0314 	add.w	r3, r7, #20
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f001 fa30 	bl	800cfd4 <xTaskCheckForTimeOut>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d124      	bne.n	800bbc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb7c:	f000 fc8c 	bl	800c498 <prvIsQueueFull>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d018      	beq.n	800bbb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	3310      	adds	r3, #16
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f956 	bl	800ce40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb96:	f000 fc17 	bl	800c3c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb9a:	f000 ff67 	bl	800ca6c <xTaskResumeAll>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f47f af7c 	bne.w	800ba9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bba6:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <xQueueGenericSend+0x1f8>)
 800bba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	e772      	b.n	800ba9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbba:	f000 fc05 	bl	800c3c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbbe:	f000 ff55 	bl	800ca6c <xTaskResumeAll>
 800bbc2:	e76c      	b.n	800ba9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbc6:	f000 fbff 	bl	800c3c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbca:	f000 ff4f 	bl	800ca6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3738      	adds	r7, #56	; 0x38
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b090      	sub	sp, #64	; 0x40
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d103      	bne.n	800bc18 <xQueueGenericSendFromISR+0x3c>
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <xQueueGenericSendFromISR+0x40>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e000      	b.n	800bc1e <xQueueGenericSendFromISR+0x42>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10a      	bne.n	800bc38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc34:	bf00      	nop
 800bc36:	e7fe      	b.n	800bc36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d103      	bne.n	800bc46 <xQueueGenericSendFromISR+0x6a>
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <xQueueGenericSendFromISR+0x6e>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e000      	b.n	800bc4c <xQueueGenericSendFromISR+0x70>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	623b      	str	r3, [r7, #32]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc66:	f002 fa47 	bl	800e0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800bc6a:	f3ef 8211 	mrs	r2, BASEPRI
 800bc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	61fa      	str	r2, [r7, #28]
 800bc80:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800bc82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d302      	bcc.n	800bc98 <xQueueGenericSendFromISR+0xbc>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d12f      	bne.n	800bcf8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	68b9      	ldr	r1, [r7, #8]
 800bcac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcae:	f000 fafb 	bl	800c2a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d112      	bne.n	800bce2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d016      	beq.n	800bcf2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	3324      	adds	r3, #36	; 0x24
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f001 f909 	bl	800cee0 <xTaskRemoveFromEventList>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00e      	beq.n	800bcf2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	e007      	b.n	800bcf2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bce2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bce6:	3301      	adds	r3, #1
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	b25a      	sxtb	r2, r3
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bcf6:	e001      	b.n	800bcfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfe:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f383 8811 	msr	BASEPRI, r3
}
 800bd06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3740      	adds	r7, #64	; 0x40
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08c      	sub	sp, #48	; 0x30
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10a      	bne.n	800bd44 <xQueueReceive+0x30>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	623b      	str	r3, [r7, #32]
}
 800bd40:	bf00      	nop
 800bd42:	e7fe      	b.n	800bd42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d103      	bne.n	800bd52 <xQueueReceive+0x3e>
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <xQueueReceive+0x42>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <xQueueReceive+0x44>
 800bd56:	2300      	movs	r3, #0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <xQueueReceive+0x5e>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	61fb      	str	r3, [r7, #28]
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd72:	f001 fa83 	bl	800d27c <xTaskGetSchedulerState>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d102      	bne.n	800bd82 <xQueueReceive+0x6e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <xQueueReceive+0x72>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <xQueueReceive+0x74>
 800bd86:	2300      	movs	r3, #0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xQueueReceive+0x8e>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	61bb      	str	r3, [r7, #24]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bda2:	f002 f8c7 	bl	800df34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01f      	beq.n	800bdf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb6:	f000 fae1 	bl	800c37c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	1e5a      	subs	r2, r3, #1
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00f      	beq.n	800bdea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	3310      	adds	r3, #16
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f001 f886 	bl	800cee0 <xTaskRemoveFromEventList>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdda:	4b3d      	ldr	r3, [pc, #244]	; (800bed0 <xQueueReceive+0x1bc>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdea:	f002 f8d3 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e069      	b.n	800bec6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d103      	bne.n	800be00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdf8:	f002 f8cc 	bl	800df94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e062      	b.n	800bec6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be06:	f107 0310 	add.w	r3, r7, #16
 800be0a:	4618      	mov	r0, r3
 800be0c:	f001 f8cc 	bl	800cfa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be10:	2301      	movs	r3, #1
 800be12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be14:	f002 f8be 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be18:	f000 fe1a 	bl	800ca50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be1c:	f002 f88a 	bl	800df34 <vPortEnterCritical>
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be26:	b25b      	sxtb	r3, r3
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2c:	d103      	bne.n	800be36 <xQueueReceive+0x122>
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be3c:	b25b      	sxtb	r3, r3
 800be3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be42:	d103      	bne.n	800be4c <xQueueReceive+0x138>
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be4c:	f002 f8a2 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be50:	1d3a      	adds	r2, r7, #4
 800be52:	f107 0310 	add.w	r3, r7, #16
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 f8bb 	bl	800cfd4 <xTaskCheckForTimeOut>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d123      	bne.n	800beac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be66:	f000 fb01 	bl	800c46c <prvIsQueueEmpty>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d017      	beq.n	800bea0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	3324      	adds	r3, #36	; 0x24
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	4611      	mov	r1, r2
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 ffe1 	bl	800ce40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be80:	f000 faa2 	bl	800c3c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be84:	f000 fdf2 	bl	800ca6c <xTaskResumeAll>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d189      	bne.n	800bda2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be8e:	4b10      	ldr	r3, [pc, #64]	; (800bed0 <xQueueReceive+0x1bc>)
 800be90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	e780      	b.n	800bda2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea2:	f000 fa91 	bl	800c3c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bea6:	f000 fde1 	bl	800ca6c <xTaskResumeAll>
 800beaa:	e77a      	b.n	800bda2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800beac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beae:	f000 fa8b 	bl	800c3c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beb2:	f000 fddb 	bl	800ca6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb8:	f000 fad8 	bl	800c46c <prvIsQueueEmpty>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f43f af6f 	beq.w	800bda2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bec4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3730      	adds	r7, #48	; 0x30
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	e000ed04 	.word	0xe000ed04

0800bed4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08e      	sub	sp, #56	; 0x38
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bede:	2300      	movs	r3, #0
 800bee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bee6:	2300      	movs	r3, #0
 800bee8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	623b      	str	r3, [r7, #32]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	61fb      	str	r3, [r7, #28]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf24:	f001 f9aa 	bl	800d27c <xTaskGetSchedulerState>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d102      	bne.n	800bf34 <xQueueSemaphoreTake+0x60>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <xQueueSemaphoreTake+0x64>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <xQueueSemaphoreTake+0x66>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10a      	bne.n	800bf54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	61bb      	str	r3, [r7, #24]
}
 800bf50:	bf00      	nop
 800bf52:	e7fe      	b.n	800bf52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf54:	f001 ffee 	bl	800df34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d024      	beq.n	800bfae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf66:	1e5a      	subs	r2, r3, #1
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d104      	bne.n	800bf7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf74:	f001 faf8 	bl	800d568 <pvTaskIncrementMutexHeldCount>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00f      	beq.n	800bfa6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	3310      	adds	r3, #16
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 ffa8 	bl	800cee0 <xTaskRemoveFromEventList>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d007      	beq.n	800bfa6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf96:	4b54      	ldr	r3, [pc, #336]	; (800c0e8 <xQueueSemaphoreTake+0x214>)
 800bf98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfa6:	f001 fff5 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e097      	b.n	800c0de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d111      	bne.n	800bfd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	617b      	str	r3, [r7, #20]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfd0:	f001 ffe0 	bl	800df94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e082      	b.n	800c0de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d106      	bne.n	800bfec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfde:	f107 030c 	add.w	r3, r7, #12
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 ffe0 	bl	800cfa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfec:	f001 ffd2 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bff0:	f000 fd2e 	bl	800ca50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bff4:	f001 ff9e 	bl	800df34 <vPortEnterCritical>
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bffe:	b25b      	sxtb	r3, r3
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c004:	d103      	bne.n	800c00e <xQueueSemaphoreTake+0x13a>
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c014:	b25b      	sxtb	r3, r3
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01a:	d103      	bne.n	800c024 <xQueueSemaphoreTake+0x150>
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c024:	f001 ffb6 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c028:	463a      	mov	r2, r7
 800c02a:	f107 030c 	add.w	r3, r7, #12
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f000 ffcf 	bl	800cfd4 <xTaskCheckForTimeOut>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d132      	bne.n	800c0a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c03c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c03e:	f000 fa15 	bl	800c46c <prvIsQueueEmpty>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d026      	beq.n	800c096 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d109      	bne.n	800c064 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c050:	f001 ff70 	bl	800df34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	4618      	mov	r0, r3
 800c05a:	f001 f92d 	bl	800d2b8 <xTaskPriorityInherit>
 800c05e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c060:	f001 ff98 	bl	800df94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	3324      	adds	r3, #36	; 0x24
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fee7 	bl	800ce40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c074:	f000 f9a8 	bl	800c3c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c078:	f000 fcf8 	bl	800ca6c <xTaskResumeAll>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f47f af68 	bne.w	800bf54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <xQueueSemaphoreTake+0x214>)
 800c086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	e75e      	b.n	800bf54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c098:	f000 f996 	bl	800c3c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c09c:	f000 fce6 	bl	800ca6c <xTaskResumeAll>
 800c0a0:	e758      	b.n	800bf54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0a4:	f000 f990 	bl	800c3c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0a8:	f000 fce0 	bl	800ca6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ae:	f000 f9dd 	bl	800c46c <prvIsQueueEmpty>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f43f af4d 	beq.w	800bf54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00d      	beq.n	800c0dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c0c0:	f001 ff38 	bl	800df34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0c6:	f000 f8d7 	bl	800c278 <prvGetDisinheritPriorityAfterTimeout>
 800c0ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f001 f9c6 	bl	800d464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0d8:	f001 ff5c 	bl	800df94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3738      	adds	r7, #56	; 0x38
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08e      	sub	sp, #56	; 0x38
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10a      	bne.n	800c118 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	623b      	str	r3, [r7, #32]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <xQueueReceiveFromISR+0x3a>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <xQueueReceiveFromISR+0x3e>
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <xQueueReceiveFromISR+0x40>
 800c12a:	2300      	movs	r3, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	61fb      	str	r3, [r7, #28]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c146:	f001 ffd7 	bl	800e0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800c14a:	f3ef 8211 	mrs	r2, BASEPRI
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	61ba      	str	r2, [r7, #24]
 800c160:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c162:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c164:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d02f      	beq.n	800c1d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c180:	f000 f8fc 	bl	800c37c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	1e5a      	subs	r2, r3, #1
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c18c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d112      	bne.n	800c1bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d016      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fe9c 	bl	800cee0 <xTaskRemoveFromEventList>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00e      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e007      	b.n	800c1cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	b25a      	sxtb	r2, r3
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d0:	e001      	b.n	800c1d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f383 8811 	msr	BASEPRI, r3
}
 800c1e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3738      	adds	r7, #56	; 0x38
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	60fb      	str	r3, [r7, #12]
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800c214:	f001 fe8e 	bl	800df34 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c224:	f001 feb6 	bl	800df94 <vPortExitCritical>

	return uxReturn;
 800c228:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <vQueueDelete+0x28>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	60bb      	str	r3, [r7, #8]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 f95e 	bl	800c51c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c266:	2b00      	cmp	r3, #0
 800c268:	d102      	bne.n	800c270 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f002 f850 	bl	800e310 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c270:	bf00      	nop
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e001      	b.n	800c29a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c296:	2300      	movs	r3, #0
 800c298:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c29a:	68fb      	ldr	r3, [r7, #12]
	}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10d      	bne.n	800c2e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d14d      	bne.n	800c36a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 f858 	bl	800d388 <xTaskPriorityDisinherit>
 800c2d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	609a      	str	r2, [r3, #8]
 800c2e0:	e043      	b.n	800c36a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d119      	bne.n	800c31c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6858      	ldr	r0, [r3, #4]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	f003 f851 	bl	800f39a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d32b      	bcc.n	800c36a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	605a      	str	r2, [r3, #4]
 800c31a:	e026      	b.n	800c36a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	68d8      	ldr	r0, [r3, #12]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	461a      	mov	r2, r3
 800c326:	68b9      	ldr	r1, [r7, #8]
 800c328:	f003 f837 	bl	800f39a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c334:	425b      	negs	r3, r3
 800c336:	441a      	add	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d207      	bcs.n	800c358 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	425b      	negs	r3, r3
 800c352:	441a      	add	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d105      	bne.n	800c36a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	3b01      	subs	r3, #1
 800c368:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c372:	697b      	ldr	r3, [r7, #20]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d018      	beq.n	800c3c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68da      	ldr	r2, [r3, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c396:	441a      	add	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d303      	bcc.n	800c3b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68d9      	ldr	r1, [r3, #12]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6838      	ldr	r0, [r7, #0]
 800c3bc:	f002 ffed 	bl	800f39a <memcpy>
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3d0:	f001 fdb0 	bl	800df34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3dc:	e011      	b.n	800c402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d012      	beq.n	800c40c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3324      	adds	r3, #36	; 0x24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fd78 	bl	800cee0 <xTaskRemoveFromEventList>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c3f6:	f000 fe4f 	bl	800d098 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c406:	2b00      	cmp	r3, #0
 800c408:	dce9      	bgt.n	800c3de <prvUnlockQueue+0x16>
 800c40a:	e000      	b.n	800c40e <prvUnlockQueue+0x46>
					break;
 800c40c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	22ff      	movs	r2, #255	; 0xff
 800c412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c416:	f001 fdbd 	bl	800df94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c41a:	f001 fd8b 	bl	800df34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c426:	e011      	b.n	800c44c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d012      	beq.n	800c456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3310      	adds	r3, #16
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fd53 	bl	800cee0 <xTaskRemoveFromEventList>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c440:	f000 fe2a 	bl	800d098 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	3b01      	subs	r3, #1
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c44c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c450:	2b00      	cmp	r3, #0
 800c452:	dce9      	bgt.n	800c428 <prvUnlockQueue+0x60>
 800c454:	e000      	b.n	800c458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	22ff      	movs	r2, #255	; 0xff
 800c45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c460:	f001 fd98 	bl	800df94 <vPortExitCritical>
}
 800c464:	bf00      	nop
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c474:	f001 fd5e 	bl	800df34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c480:	2301      	movs	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e001      	b.n	800c48a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c486:	2300      	movs	r3, #0
 800c488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c48a:	f001 fd83 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800c48e:	68fb      	ldr	r3, [r7, #12]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4a0:	f001 fd48 	bl	800df34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d102      	bne.n	800c4b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	e001      	b.n	800c4ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4ba:	f001 fd6b 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800c4be:	68fb      	ldr	r3, [r7, #12]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	e014      	b.n	800c502 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4d8:	4a0f      	ldr	r2, [pc, #60]	; (800c518 <vQueueAddToRegistry+0x50>)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4e4:	490c      	ldr	r1, [pc, #48]	; (800c518 <vQueueAddToRegistry+0x50>)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4ee:	4a0a      	ldr	r2, [pc, #40]	; (800c518 <vQueueAddToRegistry+0x50>)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4fa:	e006      	b.n	800c50a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b07      	cmp	r3, #7
 800c506:	d9e7      	bls.n	800c4d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	20002b54 	.word	0x20002b54

0800c51c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c524:	2300      	movs	r3, #0
 800c526:	60fb      	str	r3, [r7, #12]
 800c528:	e016      	b.n	800c558 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c52a:	4a10      	ldr	r2, [pc, #64]	; (800c56c <vQueueUnregisterQueue+0x50>)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	4413      	add	r3, r2
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d10b      	bne.n	800c552 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c53a:	4a0c      	ldr	r2, [pc, #48]	; (800c56c <vQueueUnregisterQueue+0x50>)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2100      	movs	r1, #0
 800c540:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c544:	4a09      	ldr	r2, [pc, #36]	; (800c56c <vQueueUnregisterQueue+0x50>)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	4413      	add	r3, r2
 800c54c:	2200      	movs	r2, #0
 800c54e:	605a      	str	r2, [r3, #4]
				break;
 800c550:	e006      	b.n	800c560 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3301      	adds	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b07      	cmp	r3, #7
 800c55c:	d9e5      	bls.n	800c52a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c55e:	bf00      	nop
 800c560:	bf00      	nop
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	20002b54 	.word	0x20002b54

0800c570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c580:	f001 fcd8 	bl	800df34 <vPortEnterCritical>
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c58a:	b25b      	sxtb	r3, r3
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d103      	bne.n	800c59a <vQueueWaitForMessageRestricted+0x2a>
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a0:	b25b      	sxtb	r3, r3
 800c5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a6:	d103      	bne.n	800c5b0 <vQueueWaitForMessageRestricted+0x40>
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b0:	f001 fcf0 	bl	800df94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	3324      	adds	r3, #36	; 0x24
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fc5f 	bl	800ce88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f7ff fefc 	bl	800c3c8 <prvUnlockQueue>
	}
 800c5d0:	bf00      	nop
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08e      	sub	sp, #56	; 0x38
 800c5dc:	af04      	add	r7, sp, #16
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	623b      	str	r3, [r7, #32]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <xTaskCreateStatic+0x46>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	61fb      	str	r3, [r7, #28]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c61e:	235c      	movs	r3, #92	; 0x5c
 800c620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b5c      	cmp	r3, #92	; 0x5c
 800c626:	d00a      	beq.n	800c63e <xTaskCreateStatic+0x66>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	61bb      	str	r3, [r7, #24]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c63e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	2b00      	cmp	r3, #0
 800c644:	d01e      	beq.n	800c684 <xTaskCreateStatic+0xac>
 800c646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01b      	beq.n	800c684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	2202      	movs	r2, #2
 800c65a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c65e:	2300      	movs	r3, #0
 800c660:	9303      	str	r3, [sp, #12]
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	f107 0314 	add.w	r3, r7, #20
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	68b9      	ldr	r1, [r7, #8]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f850 	bl	800c71c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c67c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c67e:	f000 f8dd 	bl	800c83c <prvAddNewTaskToReadyList>
 800c682:	e001      	b.n	800c688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c688:	697b      	ldr	r3, [r7, #20]
	}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3728      	adds	r7, #40	; 0x28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c692:	b580      	push	{r7, lr}
 800c694:	b08c      	sub	sp, #48	; 0x30
 800c696:	af04      	add	r7, sp, #16
 800c698:	60f8      	str	r0, [r7, #12]
 800c69a:	60b9      	str	r1, [r7, #8]
 800c69c:	603b      	str	r3, [r7, #0]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 fd66 	bl	800e178 <pvPortMalloc>
 800c6ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00e      	beq.n	800c6d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6b4:	205c      	movs	r0, #92	; 0x5c
 800c6b6:	f001 fd5f 	bl	800e178 <pvPortMalloc>
 800c6ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	631a      	str	r2, [r3, #48]	; 0x30
 800c6c8:	e005      	b.n	800c6d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	f001 fe20 	bl	800e310 <vPortFree>
 800c6d0:	e001      	b.n	800c6d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d017      	beq.n	800c70c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6e4:	88fa      	ldrh	r2, [r7, #6]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9303      	str	r3, [sp, #12]
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 f80e 	bl	800c71c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c700:	69f8      	ldr	r0, [r7, #28]
 800c702:	f000 f89b 	bl	800c83c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c706:	2301      	movs	r3, #1
 800c708:	61bb      	str	r3, [r7, #24]
 800c70a:	e002      	b.n	800c712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295
 800c710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c712:	69bb      	ldr	r3, [r7, #24]
	}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	461a      	mov	r2, r3
 800c734:	21a5      	movs	r1, #165	; 0xa5
 800c736:	f002 fdb1 	bl	800f29c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c744:	3b01      	subs	r3, #1
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	f023 0307 	bic.w	r3, r3, #7
 800c752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00a      	beq.n	800c774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	617b      	str	r3, [r7, #20]
}
 800c770:	bf00      	nop
 800c772:	e7fe      	b.n	800c772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01f      	beq.n	800c7ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c77a:	2300      	movs	r3, #0
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	e012      	b.n	800c7a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	4413      	add	r3, r2
 800c786:	7819      	ldrb	r1, [r3, #0]
 800c788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	3334      	adds	r3, #52	; 0x34
 800c790:	460a      	mov	r2, r1
 800c792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	4413      	add	r3, r2
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d006      	beq.n	800c7ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	2b0f      	cmp	r3, #15
 800c7aa:	d9e9      	bls.n	800c780 <prvInitialiseNewTask+0x64>
 800c7ac:	e000      	b.n	800c7b0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c7ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7b8:	e003      	b.n	800c7c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	2b37      	cmp	r3, #55	; 0x37
 800c7c6:	d901      	bls.n	800c7cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7c8:	2337      	movs	r3, #55	; 0x37
 800c7ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	2200      	movs	r2, #0
 800c7dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fe0a 	bl	800b3fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	3318      	adds	r3, #24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fe05 	bl	800b3fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	2200      	movs	r2, #0
 800c80c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	2200      	movs	r2, #0
 800c812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	68f9      	ldr	r1, [r7, #12]
 800c81a:	69b8      	ldr	r0, [r7, #24]
 800c81c:	f001 fa5a 	bl	800dcd4 <pxPortInitialiseStack>
 800c820:	4602      	mov	r2, r0
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c832:	bf00      	nop
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c844:	f001 fb76 	bl	800df34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c848:	4b2d      	ldr	r3, [pc, #180]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3301      	adds	r3, #1
 800c84e:	4a2c      	ldr	r2, [pc, #176]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c852:	4b2c      	ldr	r3, [pc, #176]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d109      	bne.n	800c86e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c85a:	4a2a      	ldr	r2, [pc, #168]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c860:	4b27      	ldr	r3, [pc, #156]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d110      	bne.n	800c88a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c868:	f000 fc3a 	bl	800d0e0 <prvInitialiseTaskLists>
 800c86c:	e00d      	b.n	800c88a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c86e:	4b26      	ldr	r3, [pc, #152]	; (800c908 <prvAddNewTaskToReadyList+0xcc>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d109      	bne.n	800c88a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c876:	4b23      	ldr	r3, [pc, #140]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	429a      	cmp	r2, r3
 800c882:	d802      	bhi.n	800c88a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c884:	4a1f      	ldr	r2, [pc, #124]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c88a:	4b20      	ldr	r3, [pc, #128]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	3301      	adds	r3, #1
 800c890:	4a1e      	ldr	r2, [pc, #120]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c894:	4b1d      	ldr	r3, [pc, #116]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	4b1b      	ldr	r3, [pc, #108]	; (800c910 <prvAddNewTaskToReadyList+0xd4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d903      	bls.n	800c8b0 <prvAddNewTaskToReadyList+0x74>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	4a18      	ldr	r2, [pc, #96]	; (800c910 <prvAddNewTaskToReadyList+0xd4>)
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4a15      	ldr	r2, [pc, #84]	; (800c914 <prvAddNewTaskToReadyList+0xd8>)
 800c8be:	441a      	add	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fe fda5 	bl	800b416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8cc:	f001 fb62 	bl	800df94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8d0:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <prvAddNewTaskToReadyList+0xcc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00e      	beq.n	800c8f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d207      	bcs.n	800c8f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <prvAddNewTaskToReadyList+0xdc>)
 800c8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20003068 	.word	0x20003068
 800c904:	20002b94 	.word	0x20002b94
 800c908:	20003074 	.word	0x20003074
 800c90c:	20003084 	.word	0x20003084
 800c910:	20003070 	.word	0x20003070
 800c914:	20002b98 	.word	0x20002b98
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <vTaskDelay+0x60>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <vTaskDelay+0x30>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60bb      	str	r3, [r7, #8]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c94c:	f000 f880 	bl	800ca50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c950:	2100      	movs	r1, #0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fe1c 	bl	800d590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c958:	f000 f888 	bl	800ca6c <xTaskResumeAll>
 800c95c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d107      	bne.n	800c974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c964:	4b06      	ldr	r3, [pc, #24]	; (800c980 <vTaskDelay+0x64>)
 800c966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20003090 	.word	0x20003090
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	; 0x28
 800c988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c992:	463a      	mov	r2, r7
 800c994:	1d39      	adds	r1, r7, #4
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe fcda 	bl	800b354 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	9202      	str	r2, [sp, #8]
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	4921      	ldr	r1, [pc, #132]	; (800ca38 <vTaskStartScheduler+0xb4>)
 800c9b4:	4821      	ldr	r0, [pc, #132]	; (800ca3c <vTaskStartScheduler+0xb8>)
 800c9b6:	f7ff fe0f 	bl	800c5d8 <xTaskCreateStatic>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4a20      	ldr	r2, [pc, #128]	; (800ca40 <vTaskStartScheduler+0xbc>)
 800c9be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9c0:	4b1f      	ldr	r3, [pc, #124]	; (800ca40 <vTaskStartScheduler+0xbc>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e001      	b.n	800c9d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d102      	bne.n	800c9de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9d8:	f000 fe2e 	bl	800d638 <xTimerCreateTimerTask>
 800c9dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d116      	bne.n	800ca12 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	613b      	str	r3, [r7, #16]
}
 800c9f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9f8:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <vTaskStartScheduler+0xc0>)
 800c9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca00:	4b11      	ldr	r3, [pc, #68]	; (800ca48 <vTaskStartScheduler+0xc4>)
 800ca02:	2201      	movs	r2, #1
 800ca04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca06:	4b11      	ldr	r3, [pc, #68]	; (800ca4c <vTaskStartScheduler+0xc8>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca0c:	f001 f9f0 	bl	800ddf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca10:	e00e      	b.n	800ca30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca18:	d10a      	bne.n	800ca30 <vTaskStartScheduler+0xac>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	60fb      	str	r3, [r7, #12]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <vTaskStartScheduler+0xaa>
}
 800ca30:	bf00      	nop
 800ca32:	3718      	adds	r7, #24
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	08012c18 	.word	0x08012c18
 800ca3c:	0800d0b1 	.word	0x0800d0b1
 800ca40:	2000308c 	.word	0x2000308c
 800ca44:	20003088 	.word	0x20003088
 800ca48:	20003074 	.word	0x20003074
 800ca4c:	2000306c 	.word	0x2000306c

0800ca50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca50:	b480      	push	{r7}
 800ca52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca54:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <vTaskSuspendAll+0x18>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	4a03      	ldr	r2, [pc, #12]	; (800ca68 <vTaskSuspendAll+0x18>)
 800ca5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca5e:	bf00      	nop
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20003090 	.word	0x20003090

0800ca6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca76:	2300      	movs	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca7a:	4b42      	ldr	r3, [pc, #264]	; (800cb84 <xTaskResumeAll+0x118>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10a      	bne.n	800ca98 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	603b      	str	r3, [r7, #0]
}
 800ca94:	bf00      	nop
 800ca96:	e7fe      	b.n	800ca96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca98:	f001 fa4c 	bl	800df34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca9c:	4b39      	ldr	r3, [pc, #228]	; (800cb84 <xTaskResumeAll+0x118>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	4a38      	ldr	r2, [pc, #224]	; (800cb84 <xTaskResumeAll+0x118>)
 800caa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caa6:	4b37      	ldr	r3, [pc, #220]	; (800cb84 <xTaskResumeAll+0x118>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d162      	bne.n	800cb74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800caae:	4b36      	ldr	r3, [pc, #216]	; (800cb88 <xTaskResumeAll+0x11c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d05e      	beq.n	800cb74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cab6:	e02f      	b.n	800cb18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab8:	4b34      	ldr	r3, [pc, #208]	; (800cb8c <xTaskResumeAll+0x120>)
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3318      	adds	r3, #24
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fd03 	bl	800b4d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3304      	adds	r3, #4
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe fcfe 	bl	800b4d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad8:	4b2d      	ldr	r3, [pc, #180]	; (800cb90 <xTaskResumeAll+0x124>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d903      	bls.n	800cae8 <xTaskResumeAll+0x7c>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae4:	4a2a      	ldr	r2, [pc, #168]	; (800cb90 <xTaskResumeAll+0x124>)
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caec:	4613      	mov	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4413      	add	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4a27      	ldr	r2, [pc, #156]	; (800cb94 <xTaskResumeAll+0x128>)
 800caf6:	441a      	add	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4619      	mov	r1, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	f7fe fc89 	bl	800b416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb08:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <xTaskResumeAll+0x12c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d302      	bcc.n	800cb18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb12:	4b22      	ldr	r3, [pc, #136]	; (800cb9c <xTaskResumeAll+0x130>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb18:	4b1c      	ldr	r3, [pc, #112]	; (800cb8c <xTaskResumeAll+0x120>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1cb      	bne.n	800cab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb26:	f000 fb79 	bl	800d21c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <xTaskResumeAll+0x134>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d010      	beq.n	800cb58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb36:	f000 f847 	bl	800cbc8 <xTaskIncrementTick>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb40:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <xTaskResumeAll+0x130>)
 800cb42:	2201      	movs	r2, #1
 800cb44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1f1      	bne.n	800cb36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb52:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <xTaskResumeAll+0x134>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb58:	4b10      	ldr	r3, [pc, #64]	; (800cb9c <xTaskResumeAll+0x130>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d009      	beq.n	800cb74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb60:	2301      	movs	r3, #1
 800cb62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb64:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <xTaskResumeAll+0x138>)
 800cb66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb74:	f001 fa0e 	bl	800df94 <vPortExitCritical>

	return xAlreadyYielded;
 800cb78:	68bb      	ldr	r3, [r7, #8]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20003090 	.word	0x20003090
 800cb88:	20003068 	.word	0x20003068
 800cb8c:	20003028 	.word	0x20003028
 800cb90:	20003070 	.word	0x20003070
 800cb94:	20002b98 	.word	0x20002b98
 800cb98:	20002b94 	.word	0x20002b94
 800cb9c:	2000307c 	.word	0x2000307c
 800cba0:	20003078 	.word	0x20003078
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbae:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <xTaskGetTickCount+0x1c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbb4:	687b      	ldr	r3, [r7, #4]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	2000306c 	.word	0x2000306c

0800cbc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbd2:	4b4f      	ldr	r3, [pc, #316]	; (800cd10 <xTaskIncrementTick+0x148>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f040 808f 	bne.w	800ccfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbdc:	4b4d      	ldr	r3, [pc, #308]	; (800cd14 <xTaskIncrementTick+0x14c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbe4:	4a4b      	ldr	r2, [pc, #300]	; (800cd14 <xTaskIncrementTick+0x14c>)
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d120      	bne.n	800cc32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbf0:	4b49      	ldr	r3, [pc, #292]	; (800cd18 <xTaskIncrementTick+0x150>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00a      	beq.n	800cc10 <xTaskIncrementTick+0x48>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	603b      	str	r3, [r7, #0]
}
 800cc0c:	bf00      	nop
 800cc0e:	e7fe      	b.n	800cc0e <xTaskIncrementTick+0x46>
 800cc10:	4b41      	ldr	r3, [pc, #260]	; (800cd18 <xTaskIncrementTick+0x150>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	4b41      	ldr	r3, [pc, #260]	; (800cd1c <xTaskIncrementTick+0x154>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a3f      	ldr	r2, [pc, #252]	; (800cd18 <xTaskIncrementTick+0x150>)
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	4a3f      	ldr	r2, [pc, #252]	; (800cd1c <xTaskIncrementTick+0x154>)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xTaskIncrementTick+0x158>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	4a3d      	ldr	r2, [pc, #244]	; (800cd20 <xTaskIncrementTick+0x158>)
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	f000 faf5 	bl	800d21c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc32:	4b3c      	ldr	r3, [pc, #240]	; (800cd24 <xTaskIncrementTick+0x15c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d349      	bcc.n	800ccd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc3c:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <xTaskIncrementTick+0x150>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d104      	bne.n	800cc50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc46:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <xTaskIncrementTick+0x15c>)
 800cc48:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4c:	601a      	str	r2, [r3, #0]
					break;
 800cc4e:	e03f      	b.n	800ccd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc50:	4b31      	ldr	r3, [pc, #196]	; (800cd18 <xTaskIncrementTick+0x150>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d203      	bcs.n	800cc70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc68:	4a2e      	ldr	r2, [pc, #184]	; (800cd24 <xTaskIncrementTick+0x15c>)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc6e:	e02f      	b.n	800ccd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fc2b 	bl	800b4d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	3318      	adds	r3, #24
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fe fc22 	bl	800b4d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc90:	4b25      	ldr	r3, [pc, #148]	; (800cd28 <xTaskIncrementTick+0x160>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d903      	bls.n	800cca0 <xTaskIncrementTick+0xd8>
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	4a22      	ldr	r2, [pc, #136]	; (800cd28 <xTaskIncrementTick+0x160>)
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4a1f      	ldr	r2, [pc, #124]	; (800cd2c <xTaskIncrementTick+0x164>)
 800ccae:	441a      	add	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	4610      	mov	r0, r2
 800ccb8:	f7fe fbad 	bl	800b416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc0:	4b1b      	ldr	r3, [pc, #108]	; (800cd30 <xTaskIncrementTick+0x168>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d3b8      	bcc.n	800cc3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ccca:	2301      	movs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccce:	e7b5      	b.n	800cc3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccd0:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <xTaskIncrementTick+0x168>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4915      	ldr	r1, [pc, #84]	; (800cd2c <xTaskIncrementTick+0x164>)
 800ccd8:	4613      	mov	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	440b      	add	r3, r1
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d901      	bls.n	800ccec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cce8:	2301      	movs	r3, #1
 800ccea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ccec:	4b11      	ldr	r3, [pc, #68]	; (800cd34 <xTaskIncrementTick+0x16c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d007      	beq.n	800cd04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e004      	b.n	800cd04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <xTaskIncrementTick+0x170>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	4a0d      	ldr	r2, [pc, #52]	; (800cd38 <xTaskIncrementTick+0x170>)
 800cd02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd04:	697b      	ldr	r3, [r7, #20]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20003090 	.word	0x20003090
 800cd14:	2000306c 	.word	0x2000306c
 800cd18:	20003020 	.word	0x20003020
 800cd1c:	20003024 	.word	0x20003024
 800cd20:	20003080 	.word	0x20003080
 800cd24:	20003088 	.word	0x20003088
 800cd28:	20003070 	.word	0x20003070
 800cd2c:	20002b98 	.word	0x20002b98
 800cd30:	20002b94 	.word	0x20002b94
 800cd34:	2000307c 	.word	0x2000307c
 800cd38:	20003078 	.word	0x20003078

0800cd3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd42:	4b3a      	ldr	r3, [pc, #232]	; (800ce2c <vTaskSwitchContext+0xf0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd4a:	4b39      	ldr	r3, [pc, #228]	; (800ce30 <vTaskSwitchContext+0xf4>)
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd50:	e068      	b.n	800ce24 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800cd52:	4b37      	ldr	r3, [pc, #220]	; (800ce30 <vTaskSwitchContext+0xf4>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cd58:	4b36      	ldr	r3, [pc, #216]	; (800ce34 <vTaskSwitchContext+0xf8>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d111      	bne.n	800cd94 <vTaskSwitchContext+0x58>
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	3304      	adds	r3, #4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d10b      	bne.n	800cd94 <vTaskSwitchContext+0x58>
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	3308      	adds	r3, #8
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d105      	bne.n	800cd94 <vTaskSwitchContext+0x58>
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	330c      	adds	r3, #12
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d008      	beq.n	800cda6 <vTaskSwitchContext+0x6a>
 800cd94:	4b27      	ldr	r3, [pc, #156]	; (800ce34 <vTaskSwitchContext+0xf8>)
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	4b26      	ldr	r3, [pc, #152]	; (800ce34 <vTaskSwitchContext+0xf8>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3334      	adds	r3, #52	; 0x34
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4610      	mov	r0, r2
 800cda2:	f7f4 fd71 	bl	8001888 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cda6:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <vTaskSwitchContext+0xfc>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	e010      	b.n	800cdd0 <vTaskSwitchContext+0x94>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <vTaskSwitchContext+0x8e>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	607b      	str	r3, [r7, #4]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <vTaskSwitchContext+0x8c>
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	491a      	ldr	r1, [pc, #104]	; (800ce3c <vTaskSwitchContext+0x100>)
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	440b      	add	r3, r1
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d0e4      	beq.n	800cdae <vTaskSwitchContext+0x72>
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	4613      	mov	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <vTaskSwitchContext+0x100>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	60bb      	str	r3, [r7, #8]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	685a      	ldr	r2, [r3, #4]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	605a      	str	r2, [r3, #4]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	3308      	adds	r3, #8
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d104      	bne.n	800ce14 <vTaskSwitchContext+0xd8>
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	605a      	str	r2, [r3, #4]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	4a06      	ldr	r2, [pc, #24]	; (800ce34 <vTaskSwitchContext+0xf8>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	4a06      	ldr	r2, [pc, #24]	; (800ce38 <vTaskSwitchContext+0xfc>)
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	6013      	str	r3, [r2, #0]
}
 800ce24:	bf00      	nop
 800ce26:	3718      	adds	r7, #24
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20003090 	.word	0x20003090
 800ce30:	2000307c 	.word	0x2000307c
 800ce34:	20002b94 	.word	0x20002b94
 800ce38:	20003070 	.word	0x20003070
 800ce3c:	20002b98 	.word	0x20002b98

0800ce40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10a      	bne.n	800ce66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	60fb      	str	r3, [r7, #12]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce66:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <vTaskPlaceOnEventList+0x44>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3318      	adds	r3, #24
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7fe faf5 	bl	800b45e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce74:	2101      	movs	r1, #1
 800ce76:	6838      	ldr	r0, [r7, #0]
 800ce78:	f000 fb8a 	bl	800d590 <prvAddCurrentTaskToDelayedList>
}
 800ce7c:	bf00      	nop
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20002b94 	.word	0x20002b94

0800ce88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10a      	bne.n	800ceb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	617b      	str	r3, [r7, #20]
}
 800ceac:	bf00      	nop
 800ceae:	e7fe      	b.n	800ceae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceb0:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <vTaskPlaceOnEventListRestricted+0x54>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	3318      	adds	r3, #24
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7fe faac 	bl	800b416 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cec4:	f04f 33ff 	mov.w	r3, #4294967295
 800cec8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	68b8      	ldr	r0, [r7, #8]
 800cece:	f000 fb5f 	bl	800d590 <prvAddCurrentTaskToDelayedList>
	}
 800ced2:	bf00      	nop
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20002b94 	.word	0x20002b94

0800cee0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10a      	bne.n	800cf0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	60fb      	str	r3, [r7, #12]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3318      	adds	r3, #24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fadd 	bl	800b4d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf16:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <xTaskRemoveFromEventList+0xb0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d11d      	bne.n	800cf5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	3304      	adds	r3, #4
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fad4 	bl	800b4d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	4b19      	ldr	r3, [pc, #100]	; (800cf94 <xTaskRemoveFromEventList+0xb4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d903      	bls.n	800cf3c <xTaskRemoveFromEventList+0x5c>
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	4a16      	ldr	r2, [pc, #88]	; (800cf94 <xTaskRemoveFromEventList+0xb4>)
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4a13      	ldr	r2, [pc, #76]	; (800cf98 <xTaskRemoveFromEventList+0xb8>)
 800cf4a:	441a      	add	r2, r3
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4619      	mov	r1, r3
 800cf52:	4610      	mov	r0, r2
 800cf54:	f7fe fa5f 	bl	800b416 <vListInsertEnd>
 800cf58:	e005      	b.n	800cf66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3318      	adds	r3, #24
 800cf5e:	4619      	mov	r1, r3
 800cf60:	480e      	ldr	r0, [pc, #56]	; (800cf9c <xTaskRemoveFromEventList+0xbc>)
 800cf62:	f7fe fa58 	bl	800b416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6a:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <xTaskRemoveFromEventList+0xc0>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d905      	bls.n	800cf80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf74:	2301      	movs	r3, #1
 800cf76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf78:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <xTaskRemoveFromEventList+0xc4>)
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	e001      	b.n	800cf84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf84:	697b      	ldr	r3, [r7, #20]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20003090 	.word	0x20003090
 800cf94:	20003070 	.word	0x20003070
 800cf98:	20002b98 	.word	0x20002b98
 800cf9c:	20003028 	.word	0x20003028
 800cfa0:	20002b94 	.word	0x20002b94
 800cfa4:	2000307c 	.word	0x2000307c

0800cfa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfb0:	4b06      	ldr	r3, [pc, #24]	; (800cfcc <vTaskInternalSetTimeOutState+0x24>)
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfb8:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <vTaskInternalSetTimeOutState+0x28>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	605a      	str	r2, [r3, #4]
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	20003080 	.word	0x20003080
 800cfd0:	2000306c 	.word	0x2000306c

0800cfd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	613b      	str	r3, [r7, #16]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	60fb      	str	r3, [r7, #12]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d016:	f000 ff8d 	bl	800df34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d01a:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <xTaskCheckForTimeOut+0xbc>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d032:	d102      	bne.n	800d03a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d034:	2300      	movs	r3, #0
 800d036:	61fb      	str	r3, [r7, #28]
 800d038:	e023      	b.n	800d082 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	4b15      	ldr	r3, [pc, #84]	; (800d094 <xTaskCheckForTimeOut+0xc0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	429a      	cmp	r2, r3
 800d044:	d007      	beq.n	800d056 <xTaskCheckForTimeOut+0x82>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d302      	bcc.n	800d056 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d050:	2301      	movs	r3, #1
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	e015      	b.n	800d082 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d20b      	bcs.n	800d078 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff ff9b 	bl	800cfa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d072:	2300      	movs	r3, #0
 800d074:	61fb      	str	r3, [r7, #28]
 800d076:	e004      	b.n	800d082 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2200      	movs	r2, #0
 800d07c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d07e:	2301      	movs	r3, #1
 800d080:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d082:	f000 ff87 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800d086:	69fb      	ldr	r3, [r7, #28]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2000306c 	.word	0x2000306c
 800d094:	20003080 	.word	0x20003080

0800d098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d09c:	4b03      	ldr	r3, [pc, #12]	; (800d0ac <vTaskMissedYield+0x14>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	2000307c 	.word	0x2000307c

0800d0b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0b8:	f000 f852 	bl	800d160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0bc:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <prvIdleTask+0x28>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d9f9      	bls.n	800d0b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0c4:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <prvIdleTask+0x2c>)
 800d0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ca:	601a      	str	r2, [r3, #0]
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0d4:	e7f0      	b.n	800d0b8 <prvIdleTask+0x8>
 800d0d6:	bf00      	nop
 800d0d8:	20002b98 	.word	0x20002b98
 800d0dc:	e000ed04 	.word	0xe000ed04

0800d0e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	e00c      	b.n	800d106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4a12      	ldr	r2, [pc, #72]	; (800d140 <prvInitialiseTaskLists+0x60>)
 800d0f8:	4413      	add	r3, r2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe f95e 	bl	800b3bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3301      	adds	r3, #1
 800d104:	607b      	str	r3, [r7, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2b37      	cmp	r3, #55	; 0x37
 800d10a:	d9ef      	bls.n	800d0ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d10c:	480d      	ldr	r0, [pc, #52]	; (800d144 <prvInitialiseTaskLists+0x64>)
 800d10e:	f7fe f955 	bl	800b3bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d112:	480d      	ldr	r0, [pc, #52]	; (800d148 <prvInitialiseTaskLists+0x68>)
 800d114:	f7fe f952 	bl	800b3bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d118:	480c      	ldr	r0, [pc, #48]	; (800d14c <prvInitialiseTaskLists+0x6c>)
 800d11a:	f7fe f94f 	bl	800b3bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d11e:	480c      	ldr	r0, [pc, #48]	; (800d150 <prvInitialiseTaskLists+0x70>)
 800d120:	f7fe f94c 	bl	800b3bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d124:	480b      	ldr	r0, [pc, #44]	; (800d154 <prvInitialiseTaskLists+0x74>)
 800d126:	f7fe f949 	bl	800b3bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d12a:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <prvInitialiseTaskLists+0x78>)
 800d12c:	4a05      	ldr	r2, [pc, #20]	; (800d144 <prvInitialiseTaskLists+0x64>)
 800d12e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d130:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <prvInitialiseTaskLists+0x7c>)
 800d132:	4a05      	ldr	r2, [pc, #20]	; (800d148 <prvInitialiseTaskLists+0x68>)
 800d134:	601a      	str	r2, [r3, #0]
}
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20002b98 	.word	0x20002b98
 800d144:	20002ff8 	.word	0x20002ff8
 800d148:	2000300c 	.word	0x2000300c
 800d14c:	20003028 	.word	0x20003028
 800d150:	2000303c 	.word	0x2000303c
 800d154:	20003054 	.word	0x20003054
 800d158:	20003020 	.word	0x20003020
 800d15c:	20003024 	.word	0x20003024

0800d160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d166:	e019      	b.n	800d19c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d168:	f000 fee4 	bl	800df34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d16c:	4b10      	ldr	r3, [pc, #64]	; (800d1b0 <prvCheckTasksWaitingTermination+0x50>)
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3304      	adds	r3, #4
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fe f9a9 	bl	800b4d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d17e:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <prvCheckTasksWaitingTermination+0x54>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	3b01      	subs	r3, #1
 800d184:	4a0b      	ldr	r2, [pc, #44]	; (800d1b4 <prvCheckTasksWaitingTermination+0x54>)
 800d186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d188:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <prvCheckTasksWaitingTermination+0x58>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	4a0a      	ldr	r2, [pc, #40]	; (800d1b8 <prvCheckTasksWaitingTermination+0x58>)
 800d190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d192:	f000 feff 	bl	800df94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 f810 	bl	800d1bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d19c:	4b06      	ldr	r3, [pc, #24]	; (800d1b8 <prvCheckTasksWaitingTermination+0x58>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e1      	bne.n	800d168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000303c 	.word	0x2000303c
 800d1b4:	20003068 	.word	0x20003068
 800d1b8:	20003050 	.word	0x20003050

0800d1bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d108      	bne.n	800d1e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 f89c 	bl	800e310 <vPortFree>
				vPortFree( pxTCB );
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 f899 	bl	800e310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1de:	e018      	b.n	800d212 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d103      	bne.n	800d1f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 f890 	bl	800e310 <vPortFree>
	}
 800d1f0:	e00f      	b.n	800d212 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d00a      	beq.n	800d212 <prvDeleteTCB+0x56>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60fb      	str	r3, [r7, #12]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <prvDeleteTCB+0x54>
	}
 800d212:	bf00      	nop
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d222:	4b0c      	ldr	r3, [pc, #48]	; (800d254 <prvResetNextTaskUnblockTime+0x38>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d104      	bne.n	800d236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d22c:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <prvResetNextTaskUnblockTime+0x3c>)
 800d22e:	f04f 32ff 	mov.w	r2, #4294967295
 800d232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d234:	e008      	b.n	800d248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d236:	4b07      	ldr	r3, [pc, #28]	; (800d254 <prvResetNextTaskUnblockTime+0x38>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	4a04      	ldr	r2, [pc, #16]	; (800d258 <prvResetNextTaskUnblockTime+0x3c>)
 800d246:	6013      	str	r3, [r2, #0]
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20003020 	.word	0x20003020
 800d258:	20003088 	.word	0x20003088

0800d25c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d262:	4b05      	ldr	r3, [pc, #20]	; (800d278 <xTaskGetCurrentTaskHandle+0x1c>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d268:	687b      	ldr	r3, [r7, #4]
	}
 800d26a:	4618      	mov	r0, r3
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	20002b94 	.word	0x20002b94

0800d27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <xTaskGetSchedulerState+0x34>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d28a:	2301      	movs	r3, #1
 800d28c:	607b      	str	r3, [r7, #4]
 800d28e:	e008      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d290:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <xTaskGetSchedulerState+0x38>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d298:	2302      	movs	r3, #2
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	e001      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2a2:	687b      	ldr	r3, [r7, #4]
	}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	20003074 	.word	0x20003074
 800d2b4:	20003090 	.word	0x20003090

0800d2b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d051      	beq.n	800d372 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	4b2a      	ldr	r3, [pc, #168]	; (800d37c <xTaskPriorityInherit+0xc4>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d241      	bcs.n	800d360 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	db06      	blt.n	800d2f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2e4:	4b25      	ldr	r3, [pc, #148]	; (800d37c <xTaskPriorityInherit+0xc4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6959      	ldr	r1, [r3, #20]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4a1f      	ldr	r2, [pc, #124]	; (800d380 <xTaskPriorityInherit+0xc8>)
 800d304:	4413      	add	r3, r2
 800d306:	4299      	cmp	r1, r3
 800d308:	d122      	bne.n	800d350 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe f8de 	bl	800b4d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d314:	4b19      	ldr	r3, [pc, #100]	; (800d37c <xTaskPriorityInherit+0xc4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d322:	4b18      	ldr	r3, [pc, #96]	; (800d384 <xTaskPriorityInherit+0xcc>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d903      	bls.n	800d332 <xTaskPriorityInherit+0x7a>
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	4a15      	ldr	r2, [pc, #84]	; (800d384 <xTaskPriorityInherit+0xcc>)
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4a10      	ldr	r2, [pc, #64]	; (800d380 <xTaskPriorityInherit+0xc8>)
 800d340:	441a      	add	r2, r3
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	3304      	adds	r3, #4
 800d346:	4619      	mov	r1, r3
 800d348:	4610      	mov	r0, r2
 800d34a:	f7fe f864 	bl	800b416 <vListInsertEnd>
 800d34e:	e004      	b.n	800d35a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d350:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <xTaskPriorityInherit+0xc4>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d35a:	2301      	movs	r3, #1
 800d35c:	60fb      	str	r3, [r7, #12]
 800d35e:	e008      	b.n	800d372 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <xTaskPriorityInherit+0xc4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d201      	bcs.n	800d372 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d36e:	2301      	movs	r3, #1
 800d370:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d372:	68fb      	ldr	r3, [r7, #12]
	}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20002b94 	.word	0x20002b94
 800d380:	20002b98 	.word	0x20002b98
 800d384:	20003070 	.word	0x20003070

0800d388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d056      	beq.n	800d44c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d39e:	4b2e      	ldr	r3, [pc, #184]	; (800d458 <xTaskPriorityDisinherit+0xd0>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d00a      	beq.n	800d3be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	60fb      	str	r3, [r7, #12]
}
 800d3ba:	bf00      	nop
 800d3bc:	e7fe      	b.n	800d3bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	60bb      	str	r3, [r7, #8]
}
 800d3d8:	bf00      	nop
 800d3da:	e7fe      	b.n	800d3da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3e0:	1e5a      	subs	r2, r3, #1
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d02c      	beq.n	800d44c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d128      	bne.n	800d44c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe f866 	bl	800b4d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41c:	4b0f      	ldr	r3, [pc, #60]	; (800d45c <xTaskPriorityDisinherit+0xd4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	429a      	cmp	r2, r3
 800d422:	d903      	bls.n	800d42c <xTaskPriorityDisinherit+0xa4>
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	4a0c      	ldr	r2, [pc, #48]	; (800d45c <xTaskPriorityDisinherit+0xd4>)
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4a09      	ldr	r2, [pc, #36]	; (800d460 <xTaskPriorityDisinherit+0xd8>)
 800d43a:	441a      	add	r2, r3
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	3304      	adds	r3, #4
 800d440:	4619      	mov	r1, r3
 800d442:	4610      	mov	r0, r2
 800d444:	f7fd ffe7 	bl	800b416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d448:	2301      	movs	r3, #1
 800d44a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d44c:	697b      	ldr	r3, [r7, #20]
	}
 800d44e:	4618      	mov	r0, r3
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20002b94 	.word	0x20002b94
 800d45c:	20003070 	.word	0x20003070
 800d460:	20002b98 	.word	0x20002b98

0800d464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d472:	2301      	movs	r3, #1
 800d474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d06a      	beq.n	800d552 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	60fb      	str	r3, [r7, #12]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d902      	bls.n	800d4aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	61fb      	str	r3, [r7, #28]
 800d4a8:	e002      	b.n	800d4b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d04b      	beq.n	800d552 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d146      	bne.n	800d552 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4c4:	4b25      	ldr	r3, [pc, #148]	; (800d55c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d10a      	bne.n	800d4e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	60bb      	str	r3, [r7, #8]
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	69fa      	ldr	r2, [r7, #28]
 800d4ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	db04      	blt.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	6959      	ldr	r1, [r3, #20]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	4613      	mov	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4a13      	ldr	r2, [pc, #76]	; (800d560 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d512:	4413      	add	r3, r2
 800d514:	4299      	cmp	r1, r3
 800d516:	d11c      	bne.n	800d552 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	3304      	adds	r3, #4
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fd ffd7 	bl	800b4d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d526:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d903      	bls.n	800d536 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	4a0c      	ldr	r2, [pc, #48]	; (800d564 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53a:	4613      	mov	r3, r2
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4a07      	ldr	r2, [pc, #28]	; (800d560 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d544:	441a      	add	r2, r3
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	3304      	adds	r3, #4
 800d54a:	4619      	mov	r1, r3
 800d54c:	4610      	mov	r0, r2
 800d54e:	f7fd ff62 	bl	800b416 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d552:	bf00      	nop
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	20002b94 	.word	0x20002b94
 800d560:	20002b98 	.word	0x20002b98
 800d564:	20003070 	.word	0x20003070

0800d568 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d568:	b480      	push	{r7}
 800d56a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d56c:	4b07      	ldr	r3, [pc, #28]	; (800d58c <pvTaskIncrementMutexHeldCount+0x24>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d004      	beq.n	800d57e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d574:	4b05      	ldr	r3, [pc, #20]	; (800d58c <pvTaskIncrementMutexHeldCount+0x24>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d57a:	3201      	adds	r2, #1
 800d57c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d57e:	4b03      	ldr	r3, [pc, #12]	; (800d58c <pvTaskIncrementMutexHeldCount+0x24>)
 800d580:	681b      	ldr	r3, [r3, #0]
	}
 800d582:	4618      	mov	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr
 800d58c:	20002b94 	.word	0x20002b94

0800d590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d59a:	4b21      	ldr	r3, [pc, #132]	; (800d620 <prvAddCurrentTaskToDelayedList+0x90>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5a0:	4b20      	ldr	r3, [pc, #128]	; (800d624 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fd ff92 	bl	800b4d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d10a      	bne.n	800d5ca <prvAddCurrentTaskToDelayedList+0x3a>
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ba:	4b1a      	ldr	r3, [pc, #104]	; (800d624 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	4819      	ldr	r0, [pc, #100]	; (800d628 <prvAddCurrentTaskToDelayedList+0x98>)
 800d5c4:	f7fd ff27 	bl	800b416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5c8:	e026      	b.n	800d618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5d2:	4b14      	ldr	r3, [pc, #80]	; (800d624 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d209      	bcs.n	800d5f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	f7fd ff35 	bl	800b45e <vListInsert>
}
 800d5f4:	e010      	b.n	800d618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5f6:	4b0e      	ldr	r3, [pc, #56]	; (800d630 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	4b0a      	ldr	r3, [pc, #40]	; (800d624 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3304      	adds	r3, #4
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f7fd ff2b 	bl	800b45e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d608:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d202      	bcs.n	800d618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d612:	4a08      	ldr	r2, [pc, #32]	; (800d634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	6013      	str	r3, [r2, #0]
}
 800d618:	bf00      	nop
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	2000306c 	.word	0x2000306c
 800d624:	20002b94 	.word	0x20002b94
 800d628:	20003054 	.word	0x20003054
 800d62c:	20003024 	.word	0x20003024
 800d630:	20003020 	.word	0x20003020
 800d634:	20003088 	.word	0x20003088

0800d638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08a      	sub	sp, #40	; 0x28
 800d63c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d63e:	2300      	movs	r3, #0
 800d640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d642:	f000 fb07 	bl	800dc54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d646:	4b1c      	ldr	r3, [pc, #112]	; (800d6b8 <xTimerCreateTimerTask+0x80>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d021      	beq.n	800d692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d652:	2300      	movs	r3, #0
 800d654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d656:	1d3a      	adds	r2, r7, #4
 800d658:	f107 0108 	add.w	r1, r7, #8
 800d65c:	f107 030c 	add.w	r3, r7, #12
 800d660:	4618      	mov	r0, r3
 800d662:	f7fd fe91 	bl	800b388 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	9202      	str	r2, [sp, #8]
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	2302      	movs	r3, #2
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	2300      	movs	r3, #0
 800d676:	460a      	mov	r2, r1
 800d678:	4910      	ldr	r1, [pc, #64]	; (800d6bc <xTimerCreateTimerTask+0x84>)
 800d67a:	4811      	ldr	r0, [pc, #68]	; (800d6c0 <xTimerCreateTimerTask+0x88>)
 800d67c:	f7fe ffac 	bl	800c5d8 <xTaskCreateStatic>
 800d680:	4603      	mov	r3, r0
 800d682:	4a10      	ldr	r2, [pc, #64]	; (800d6c4 <xTimerCreateTimerTask+0x8c>)
 800d684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d686:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <xTimerCreateTimerTask+0x8c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d68e:	2301      	movs	r3, #1
 800d690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	613b      	str	r3, [r7, #16]
}
 800d6aa:	bf00      	nop
 800d6ac:	e7fe      	b.n	800d6ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6ae:	697b      	ldr	r3, [r7, #20]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	200030c4 	.word	0x200030c4
 800d6bc:	08012c20 	.word	0x08012c20
 800d6c0:	0800d7fd 	.word	0x0800d7fd
 800d6c4:	200030c8 	.word	0x200030c8

0800d6c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	; 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10a      	bne.n	800d6f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	623b      	str	r3, [r7, #32]
}
 800d6f2:	bf00      	nop
 800d6f4:	e7fe      	b.n	800d6f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6f6:	4b1a      	ldr	r3, [pc, #104]	; (800d760 <xTimerGenericCommand+0x98>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d02a      	beq.n	800d754 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b05      	cmp	r3, #5
 800d70e:	dc18      	bgt.n	800d742 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d710:	f7ff fdb4 	bl	800d27c <xTaskGetSchedulerState>
 800d714:	4603      	mov	r3, r0
 800d716:	2b02      	cmp	r3, #2
 800d718:	d109      	bne.n	800d72e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d71a:	4b11      	ldr	r3, [pc, #68]	; (800d760 <xTimerGenericCommand+0x98>)
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	f107 0110 	add.w	r1, r7, #16
 800d722:	2300      	movs	r3, #0
 800d724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d726:	f7fe f95b 	bl	800b9e0 <xQueueGenericSend>
 800d72a:	6278      	str	r0, [r7, #36]	; 0x24
 800d72c:	e012      	b.n	800d754 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d72e:	4b0c      	ldr	r3, [pc, #48]	; (800d760 <xTimerGenericCommand+0x98>)
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	f107 0110 	add.w	r1, r7, #16
 800d736:	2300      	movs	r3, #0
 800d738:	2200      	movs	r2, #0
 800d73a:	f7fe f951 	bl	800b9e0 <xQueueGenericSend>
 800d73e:	6278      	str	r0, [r7, #36]	; 0x24
 800d740:	e008      	b.n	800d754 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d742:	4b07      	ldr	r3, [pc, #28]	; (800d760 <xTimerGenericCommand+0x98>)
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	f107 0110 	add.w	r1, r7, #16
 800d74a:	2300      	movs	r3, #0
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	f7fe fa45 	bl	800bbdc <xQueueGenericSendFromISR>
 800d752:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d756:	4618      	mov	r0, r3
 800d758:	3728      	adds	r7, #40	; 0x28
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	200030c4 	.word	0x200030c4

0800d764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af02      	add	r7, sp, #8
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76e:	4b22      	ldr	r3, [pc, #136]	; (800d7f8 <prvProcessExpiredTimer+0x94>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	3304      	adds	r3, #4
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fd fea7 	bl	800b4d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d022      	beq.n	800d7d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	699a      	ldr	r2, [r3, #24]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	18d1      	adds	r1, r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	6978      	ldr	r0, [r7, #20]
 800d79e:	f000 f8d1 	bl	800d944 <prvInsertTimerInActiveList>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01f      	beq.n	800d7e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	6978      	ldr	r0, [r7, #20]
 800d7b4:	f7ff ff88 	bl	800d6c8 <xTimerGenericCommand>
 800d7b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d113      	bne.n	800d7e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	60fb      	str	r3, [r7, #12]
}
 800d7d2:	bf00      	nop
 800d7d4:	e7fe      	b.n	800d7d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	6978      	ldr	r0, [r7, #20]
 800d7ee:	4798      	blx	r3
}
 800d7f0:	bf00      	nop
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	200030bc 	.word	0x200030bc

0800d7fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d804:	f107 0308 	add.w	r3, r7, #8
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 f857 	bl	800d8bc <prvGetNextExpireTime>
 800d80e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	4619      	mov	r1, r3
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f803 	bl	800d820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d81a:	f000 f8d5 	bl	800d9c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d81e:	e7f1      	b.n	800d804 <prvTimerTask+0x8>

0800d820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d82a:	f7ff f911 	bl	800ca50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d82e:	f107 0308 	add.w	r3, r7, #8
 800d832:	4618      	mov	r0, r3
 800d834:	f000 f866 	bl	800d904 <prvSampleTimeNow>
 800d838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d130      	bne.n	800d8a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10a      	bne.n	800d85c <prvProcessTimerOrBlockTask+0x3c>
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d806      	bhi.n	800d85c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d84e:	f7ff f90d 	bl	800ca6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ff85 	bl	800d764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d85a:	e024      	b.n	800d8a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d008      	beq.n	800d874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d862:	4b13      	ldr	r3, [pc, #76]	; (800d8b0 <prvProcessTimerOrBlockTask+0x90>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <prvProcessTimerOrBlockTask+0x50>
 800d86c:	2301      	movs	r3, #1
 800d86e:	e000      	b.n	800d872 <prvProcessTimerOrBlockTask+0x52>
 800d870:	2300      	movs	r3, #0
 800d872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d874:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <prvProcessTimerOrBlockTask+0x94>)
 800d876:	6818      	ldr	r0, [r3, #0]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	4619      	mov	r1, r3
 800d882:	f7fe fe75 	bl	800c570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d886:	f7ff f8f1 	bl	800ca6c <xTaskResumeAll>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d890:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <prvProcessTimerOrBlockTask+0x98>)
 800d892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	f3bf 8f6f 	isb	sy
}
 800d8a0:	e001      	b.n	800d8a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8a2:	f7ff f8e3 	bl	800ca6c <xTaskResumeAll>
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200030c0 	.word	0x200030c0
 800d8b4:	200030c4 	.word	0x200030c4
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8c4:	4b0e      	ldr	r3, [pc, #56]	; (800d900 <prvGetNextExpireTime+0x44>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <prvGetNextExpireTime+0x16>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	e000      	b.n	800d8d4 <prvGetNextExpireTime+0x18>
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d105      	bne.n	800d8ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <prvGetNextExpireTime+0x44>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e001      	b.n	800d8f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	200030bc 	.word	0x200030bc

0800d904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d90c:	f7ff f94c 	bl	800cba8 <xTaskGetTickCount>
 800d910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d912:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <prvSampleTimeNow+0x3c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d205      	bcs.n	800d928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d91c:	f000 f936 	bl	800db8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	e002      	b.n	800d92e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d92e:	4a04      	ldr	r2, [pc, #16]	; (800d940 <prvSampleTimeNow+0x3c>)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d934:	68fb      	ldr	r3, [r7, #12]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	200030cc 	.word	0x200030cc

0800d944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d952:	2300      	movs	r3, #0
 800d954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	429a      	cmp	r2, r3
 800d968:	d812      	bhi.n	800d990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	1ad2      	subs	r2, r2, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	429a      	cmp	r2, r3
 800d976:	d302      	bcc.n	800d97e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d978:	2301      	movs	r3, #1
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	e01b      	b.n	800d9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d97e:	4b10      	ldr	r3, [pc, #64]	; (800d9c0 <prvInsertTimerInActiveList+0x7c>)
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3304      	adds	r3, #4
 800d986:	4619      	mov	r1, r3
 800d988:	4610      	mov	r0, r2
 800d98a:	f7fd fd68 	bl	800b45e <vListInsert>
 800d98e:	e012      	b.n	800d9b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	429a      	cmp	r2, r3
 800d996:	d206      	bcs.n	800d9a6 <prvInsertTimerInActiveList+0x62>
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d302      	bcc.n	800d9a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	e007      	b.n	800d9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9a6:	4b07      	ldr	r3, [pc, #28]	; (800d9c4 <prvInsertTimerInActiveList+0x80>)
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	4610      	mov	r0, r2
 800d9b2:	f7fd fd54 	bl	800b45e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9b6:	697b      	ldr	r3, [r7, #20]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3718      	adds	r7, #24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	200030c0 	.word	0x200030c0
 800d9c4:	200030bc 	.word	0x200030bc

0800d9c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b08e      	sub	sp, #56	; 0x38
 800d9cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9ce:	e0ca      	b.n	800db66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da18      	bge.n	800da08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9d6:	1d3b      	adds	r3, r7, #4
 800d9d8:	3304      	adds	r3, #4
 800d9da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10a      	bne.n	800d9f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	61fb      	str	r3, [r7, #28]
}
 800d9f4:	bf00      	nop
 800d9f6:	e7fe      	b.n	800d9f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9fe:	6850      	ldr	r0, [r2, #4]
 800da00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da02:	6892      	ldr	r2, [r2, #8]
 800da04:	4611      	mov	r1, r2
 800da06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f2c0 80ab 	blt.w	800db66 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	695b      	ldr	r3, [r3, #20]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d004      	beq.n	800da26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	3304      	adds	r3, #4
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd fd55 	bl	800b4d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da26:	463b      	mov	r3, r7
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff ff6b 	bl	800d904 <prvSampleTimeNow>
 800da2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b09      	cmp	r3, #9
 800da34:	f200 8096 	bhi.w	800db64 <prvProcessReceivedCommands+0x19c>
 800da38:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <prvProcessReceivedCommands+0x78>)
 800da3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3e:	bf00      	nop
 800da40:	0800da69 	.word	0x0800da69
 800da44:	0800da69 	.word	0x0800da69
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800dadd 	.word	0x0800dadd
 800da50:	0800daf1 	.word	0x0800daf1
 800da54:	0800db3b 	.word	0x0800db3b
 800da58:	0800da69 	.word	0x0800da69
 800da5c:	0800da69 	.word	0x0800da69
 800da60:	0800dadd 	.word	0x0800dadd
 800da64:	0800daf1 	.word	0x0800daf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da6e:	f043 0301 	orr.w	r3, r3, #1
 800da72:	b2da      	uxtb	r2, r3
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	18d1      	adds	r1, r2, r3
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da88:	f7ff ff5c 	bl	800d944 <prvInsertTimerInActiveList>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d069      	beq.n	800db66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d05e      	beq.n	800db66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	441a      	add	r2, r3
 800dab0:	2300      	movs	r3, #0
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	2300      	movs	r3, #0
 800dab6:	2100      	movs	r1, #0
 800dab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daba:	f7ff fe05 	bl	800d6c8 <xTimerGenericCommand>
 800dabe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dac0:	6a3b      	ldr	r3, [r7, #32]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d14f      	bne.n	800db66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	61bb      	str	r3, [r7, #24]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae2:	f023 0301 	bic.w	r3, r3, #1
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800daee:	e03a      	b.n	800db66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daf6:	f043 0301 	orr.w	r3, r3, #1
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	617b      	str	r3, [r7, #20]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	699a      	ldr	r2, [r3, #24]
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	18d1      	adds	r1, r2, r3
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db34:	f7ff ff06 	bl	800d944 <prvInsertTimerInActiveList>
					break;
 800db38:	e015      	b.n	800db66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db40:	f003 0302 	and.w	r3, r3, #2
 800db44:	2b00      	cmp	r3, #0
 800db46:	d103      	bne.n	800db50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db4a:	f000 fbe1 	bl	800e310 <vPortFree>
 800db4e:	e00a      	b.n	800db66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db56:	f023 0301 	bic.w	r3, r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db62:	e000      	b.n	800db66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800db64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db66:	4b08      	ldr	r3, [pc, #32]	; (800db88 <prvProcessReceivedCommands+0x1c0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	1d39      	adds	r1, r7, #4
 800db6c:	2200      	movs	r2, #0
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe f8d0 	bl	800bd14 <xQueueReceive>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	f47f af2a 	bne.w	800d9d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db7c:	bf00      	nop
 800db7e:	bf00      	nop
 800db80:	3730      	adds	r7, #48	; 0x30
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	200030c4 	.word	0x200030c4

0800db8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db92:	e048      	b.n	800dc26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db94:	4b2d      	ldr	r3, [pc, #180]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9e:	4b2b      	ldr	r3, [pc, #172]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd fc8f 	bl	800b4d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6a1b      	ldr	r3, [r3, #32]
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d02e      	beq.n	800dc26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	4413      	add	r3, r2
 800dbd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d90e      	bls.n	800dbf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68fa      	ldr	r2, [r7, #12]
 800dbe4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbe6:	4b19      	ldr	r3, [pc, #100]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	f7fd fc34 	bl	800b45e <vListInsert>
 800dbf6:	e016      	b.n	800dc26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	2100      	movs	r1, #0
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7ff fd60 	bl	800d6c8 <xTimerGenericCommand>
 800dc08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10a      	bne.n	800dc26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	603b      	str	r3, [r7, #0]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc26:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d1b1      	bne.n	800db94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc30:	4b06      	ldr	r3, [pc, #24]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <prvSwitchTimerLists+0xc4>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a04      	ldr	r2, [pc, #16]	; (800dc4c <prvSwitchTimerLists+0xc0>)
 800dc3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc3e:	4a04      	ldr	r2, [pc, #16]	; (800dc50 <prvSwitchTimerLists+0xc4>)
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	6013      	str	r3, [r2, #0]
}
 800dc44:	bf00      	nop
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	200030bc 	.word	0x200030bc
 800dc50:	200030c0 	.word	0x200030c0

0800dc54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc5a:	f000 f96b 	bl	800df34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc5e:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <prvCheckForValidListAndQueue+0x60>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d120      	bne.n	800dca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc66:	4814      	ldr	r0, [pc, #80]	; (800dcb8 <prvCheckForValidListAndQueue+0x64>)
 800dc68:	f7fd fba8 	bl	800b3bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc6c:	4813      	ldr	r0, [pc, #76]	; (800dcbc <prvCheckForValidListAndQueue+0x68>)
 800dc6e:	f7fd fba5 	bl	800b3bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc72:	4b13      	ldr	r3, [pc, #76]	; (800dcc0 <prvCheckForValidListAndQueue+0x6c>)
 800dc74:	4a10      	ldr	r2, [pc, #64]	; (800dcb8 <prvCheckForValidListAndQueue+0x64>)
 800dc76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc78:	4b12      	ldr	r3, [pc, #72]	; (800dcc4 <prvCheckForValidListAndQueue+0x70>)
 800dc7a:	4a10      	ldr	r2, [pc, #64]	; (800dcbc <prvCheckForValidListAndQueue+0x68>)
 800dc7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc7e:	2300      	movs	r3, #0
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	4b11      	ldr	r3, [pc, #68]	; (800dcc8 <prvCheckForValidListAndQueue+0x74>)
 800dc84:	4a11      	ldr	r2, [pc, #68]	; (800dccc <prvCheckForValidListAndQueue+0x78>)
 800dc86:	2110      	movs	r1, #16
 800dc88:	200a      	movs	r0, #10
 800dc8a:	f7fd fcb3 	bl	800b5f4 <xQueueGenericCreateStatic>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4a08      	ldr	r2, [pc, #32]	; (800dcb4 <prvCheckForValidListAndQueue+0x60>)
 800dc92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <prvCheckForValidListAndQueue+0x60>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d005      	beq.n	800dca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <prvCheckForValidListAndQueue+0x60>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	490b      	ldr	r1, [pc, #44]	; (800dcd0 <prvCheckForValidListAndQueue+0x7c>)
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fe fc10 	bl	800c4c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dca8:	f000 f974 	bl	800df94 <vPortExitCritical>
}
 800dcac:	bf00      	nop
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	200030c4 	.word	0x200030c4
 800dcb8:	20003094 	.word	0x20003094
 800dcbc:	200030a8 	.word	0x200030a8
 800dcc0:	200030bc 	.word	0x200030bc
 800dcc4:	200030c0 	.word	0x200030c0
 800dcc8:	20003170 	.word	0x20003170
 800dccc:	200030d0 	.word	0x200030d0
 800dcd0:	08012c28 	.word	0x08012c28

0800dcd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3b04      	subs	r3, #4
 800dce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dcec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3b04      	subs	r3, #4
 800dcf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	f023 0201 	bic.w	r2, r3, #1
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3b04      	subs	r3, #4
 800dd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd04:	4a0c      	ldr	r2, [pc, #48]	; (800dd38 <pxPortInitialiseStack+0x64>)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3b14      	subs	r3, #20
 800dd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	3b04      	subs	r3, #4
 800dd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f06f 0202 	mvn.w	r2, #2
 800dd22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3b20      	subs	r3, #32
 800dd28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	0800dd3d 	.word	0x0800dd3d

0800dd3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd46:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <prvTaskExitError+0x54>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4e:	d00a      	beq.n	800dd66 <prvTaskExitError+0x2a>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	60fb      	str	r3, [r7, #12]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <prvTaskExitError+0x28>
	__asm volatile
 800dd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	60bb      	str	r3, [r7, #8]
}
 800dd78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd7a:	bf00      	nop
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d0fc      	beq.n	800dd7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	20000024 	.word	0x20000024
	...

0800dda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dda0:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <pxCurrentTCBConst2>)
 800dda2:	6819      	ldr	r1, [r3, #0]
 800dda4:	6808      	ldr	r0, [r1, #0]
 800dda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	f380 8809 	msr	PSP, r0
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	f380 8811 	msr	BASEPRI, r0
 800ddba:	4770      	bx	lr
 800ddbc:	f3af 8000 	nop.w

0800ddc0 <pxCurrentTCBConst2>:
 800ddc0:	20002b94 	.word	0x20002b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop

0800ddc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddc8:	4808      	ldr	r0, [pc, #32]	; (800ddec <prvPortStartFirstTask+0x24>)
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	6800      	ldr	r0, [r0, #0]
 800ddce:	f380 8808 	msr	MSP, r0
 800ddd2:	f04f 0000 	mov.w	r0, #0
 800ddd6:	f380 8814 	msr	CONTROL, r0
 800ddda:	b662      	cpsie	i
 800dddc:	b661      	cpsie	f
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	df00      	svc	0
 800dde8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddea:	bf00      	nop
 800ddec:	e000ed08 	.word	0xe000ed08

0800ddf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddf6:	4b46      	ldr	r3, [pc, #280]	; (800df10 <xPortStartScheduler+0x120>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a46      	ldr	r2, [pc, #280]	; (800df14 <xPortStartScheduler+0x124>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d10a      	bne.n	800de16 <xPortStartScheduler+0x26>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	613b      	str	r3, [r7, #16]
}
 800de12:	bf00      	nop
 800de14:	e7fe      	b.n	800de14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de16:	4b3e      	ldr	r3, [pc, #248]	; (800df10 <xPortStartScheduler+0x120>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a3f      	ldr	r2, [pc, #252]	; (800df18 <xPortStartScheduler+0x128>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d10a      	bne.n	800de36 <xPortStartScheduler+0x46>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60fb      	str	r3, [r7, #12]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de36:	4b39      	ldr	r3, [pc, #228]	; (800df1c <xPortStartScheduler+0x12c>)
 800de38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	22ff      	movs	r2, #255	; 0xff
 800de46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	4b31      	ldr	r3, [pc, #196]	; (800df20 <xPortStartScheduler+0x130>)
 800de5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de5e:	4b31      	ldr	r3, [pc, #196]	; (800df24 <xPortStartScheduler+0x134>)
 800de60:	2207      	movs	r2, #7
 800de62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de64:	e009      	b.n	800de7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de66:	4b2f      	ldr	r3, [pc, #188]	; (800df24 <xPortStartScheduler+0x134>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	4a2d      	ldr	r2, [pc, #180]	; (800df24 <xPortStartScheduler+0x134>)
 800de6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	b2db      	uxtb	r3, r3
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de7a:	78fb      	ldrb	r3, [r7, #3]
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de82:	2b80      	cmp	r3, #128	; 0x80
 800de84:	d0ef      	beq.n	800de66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de86:	4b27      	ldr	r3, [pc, #156]	; (800df24 <xPortStartScheduler+0x134>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f1c3 0307 	rsb	r3, r3, #7
 800de8e:	2b04      	cmp	r3, #4
 800de90:	d00a      	beq.n	800dea8 <xPortStartScheduler+0xb8>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	60bb      	str	r3, [r7, #8]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dea8:	4b1e      	ldr	r3, [pc, #120]	; (800df24 <xPortStartScheduler+0x134>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	4a1d      	ldr	r2, [pc, #116]	; (800df24 <xPortStartScheduler+0x134>)
 800deb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800deb2:	4b1c      	ldr	r3, [pc, #112]	; (800df24 <xPortStartScheduler+0x134>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800deba:	4a1a      	ldr	r2, [pc, #104]	; (800df24 <xPortStartScheduler+0x134>)
 800debc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dec6:	4b18      	ldr	r3, [pc, #96]	; (800df28 <xPortStartScheduler+0x138>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a17      	ldr	r2, [pc, #92]	; (800df28 <xPortStartScheduler+0x138>)
 800decc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ded0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <xPortStartScheduler+0x138>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a14      	ldr	r2, [pc, #80]	; (800df28 <xPortStartScheduler+0x138>)
 800ded8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dedc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dede:	f000 f8dd 	bl	800e09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dee2:	4b12      	ldr	r3, [pc, #72]	; (800df2c <xPortStartScheduler+0x13c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dee8:	f000 f8fc 	bl	800e0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deec:	4b10      	ldr	r3, [pc, #64]	; (800df30 <xPortStartScheduler+0x140>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a0f      	ldr	r2, [pc, #60]	; (800df30 <xPortStartScheduler+0x140>)
 800def2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800def6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800def8:	f7ff ff66 	bl	800ddc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800defc:	f7fe ff1e 	bl	800cd3c <vTaskSwitchContext>
	prvTaskExitError();
 800df00:	f7ff ff1c 	bl	800dd3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	e000ed00 	.word	0xe000ed00
 800df14:	410fc271 	.word	0x410fc271
 800df18:	410fc270 	.word	0x410fc270
 800df1c:	e000e400 	.word	0xe000e400
 800df20:	200031c0 	.word	0x200031c0
 800df24:	200031c4 	.word	0x200031c4
 800df28:	e000ed20 	.word	0xe000ed20
 800df2c:	20000024 	.word	0x20000024
 800df30:	e000ef34 	.word	0xe000ef34

0800df34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	f383 8811 	msr	BASEPRI, r3
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	607b      	str	r3, [r7, #4]
}
 800df4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df4e:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <vPortEnterCritical+0x58>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <vPortEnterCritical+0x58>)
 800df56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df58:	4b0c      	ldr	r3, [pc, #48]	; (800df8c <vPortEnterCritical+0x58>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d10f      	bne.n	800df80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df60:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <vPortEnterCritical+0x5c>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <vPortEnterCritical+0x4c>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	603b      	str	r3, [r7, #0]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <vPortEnterCritical+0x4a>
	}
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	20000024 	.word	0x20000024
 800df90:	e000ed04 	.word	0xe000ed04

0800df94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df9a:	4b12      	ldr	r3, [pc, #72]	; (800dfe4 <vPortExitCritical+0x50>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10a      	bne.n	800dfb8 <vPortExitCritical+0x24>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	607b      	str	r3, [r7, #4]
}
 800dfb4:	bf00      	nop
 800dfb6:	e7fe      	b.n	800dfb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfb8:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	4a09      	ldr	r2, [pc, #36]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfc2:	4b08      	ldr	r3, [pc, #32]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d105      	bne.n	800dfd6 <vPortExitCritical+0x42>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	f383 8811 	msr	BASEPRI, r3
}
 800dfd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	20000024 	.word	0x20000024
	...

0800dff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dff0:	f3ef 8009 	mrs	r0, PSP
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4b15      	ldr	r3, [pc, #84]	; (800e050 <pxCurrentTCBConst>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f01e 0f10 	tst.w	lr, #16
 800e000:	bf08      	it	eq
 800e002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00a:	6010      	str	r0, [r2, #0]
 800e00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e014:	f380 8811 	msr	BASEPRI, r0
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f7fe fe8c 	bl	800cd3c <vTaskSwitchContext>
 800e024:	f04f 0000 	mov.w	r0, #0
 800e028:	f380 8811 	msr	BASEPRI, r0
 800e02c:	bc09      	pop	{r0, r3}
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	6808      	ldr	r0, [r1, #0]
 800e032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e036:	f01e 0f10 	tst.w	lr, #16
 800e03a:	bf08      	it	eq
 800e03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e040:	f380 8809 	msr	PSP, r0
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst>:
 800e050:	20002b94 	.word	0x20002b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	607b      	str	r3, [r7, #4]
}
 800e070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e072:	f7fe fda9 	bl	800cbc8 <xTaskIncrementTick>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e07c:	4b06      	ldr	r3, [pc, #24]	; (800e098 <xPortSysTickHandler+0x40>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	; (800e0d4 <vPortSetupTimerInterrupt+0x38>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <vPortSetupTimerInterrupt+0x3c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <vPortSetupTimerInterrupt+0x40>)
 800e0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b6:	099b      	lsrs	r3, r3, #6
 800e0b8:	4a09      	ldr	r2, [pc, #36]	; (800e0e0 <vPortSetupTimerInterrupt+0x44>)
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0be:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0c0:	2207      	movs	r2, #7
 800e0c2:	601a      	str	r2, [r3, #0]
}
 800e0c4:	bf00      	nop
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	e000e010 	.word	0xe000e010
 800e0d4:	e000e018 	.word	0xe000e018
 800e0d8:	20000018 	.word	0x20000018
 800e0dc:	10624dd3 	.word	0x10624dd3
 800e0e0:	e000e014 	.word	0xe000e014

0800e0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0f4 <vPortEnableVFP+0x10>
 800e0e8:	6801      	ldr	r1, [r0, #0]
 800e0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0ee:	6001      	str	r1, [r0, #0]
 800e0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0f2:	bf00      	nop
 800e0f4:	e000ed88 	.word	0xe000ed88

0800e0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0fe:	f3ef 8305 	mrs	r3, IPSR
 800e102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b0f      	cmp	r3, #15
 800e108:	d914      	bls.n	800e134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e10a:	4a17      	ldr	r2, [pc, #92]	; (800e168 <vPortValidateInterruptPriority+0x70>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e114:	4b15      	ldr	r3, [pc, #84]	; (800e16c <vPortValidateInterruptPriority+0x74>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	7afa      	ldrb	r2, [r7, #11]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d20a      	bcs.n	800e134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	607b      	str	r3, [r7, #4]
}
 800e130:	bf00      	nop
 800e132:	e7fe      	b.n	800e132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e134:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <vPortValidateInterruptPriority+0x78>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e13c:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <vPortValidateInterruptPriority+0x7c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	429a      	cmp	r2, r3
 800e142:	d90a      	bls.n	800e15a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	603b      	str	r3, [r7, #0]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <vPortValidateInterruptPriority+0x60>
	}
 800e15a:	bf00      	nop
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	e000e3f0 	.word	0xe000e3f0
 800e16c:	200031c0 	.word	0x200031c0
 800e170:	e000ed0c 	.word	0xe000ed0c
 800e174:	200031c4 	.word	0x200031c4

0800e178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08a      	sub	sp, #40	; 0x28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e184:	f7fe fc64 	bl	800ca50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e188:	4b5b      	ldr	r3, [pc, #364]	; (800e2f8 <pvPortMalloc+0x180>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e190:	f000 f920 	bl	800e3d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e194:	4b59      	ldr	r3, [pc, #356]	; (800e2fc <pvPortMalloc+0x184>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4013      	ands	r3, r2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f040 8093 	bne.w	800e2c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01d      	beq.n	800e1e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d014      	beq.n	800e1e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f023 0307 	bic.w	r3, r3, #7
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <pvPortMalloc+0x6c>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	617b      	str	r3, [r7, #20]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d06e      	beq.n	800e2c8 <pvPortMalloc+0x150>
 800e1ea:	4b45      	ldr	r3, [pc, #276]	; (800e300 <pvPortMalloc+0x188>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d869      	bhi.n	800e2c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1f4:	4b43      	ldr	r3, [pc, #268]	; (800e304 <pvPortMalloc+0x18c>)
 800e1f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1f8:	4b42      	ldr	r3, [pc, #264]	; (800e304 <pvPortMalloc+0x18c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1fe:	e004      	b.n	800e20a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	429a      	cmp	r2, r3
 800e212:	d903      	bls.n	800e21c <pvPortMalloc+0xa4>
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1f1      	bne.n	800e200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e21c:	4b36      	ldr	r3, [pc, #216]	; (800e2f8 <pvPortMalloc+0x180>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e222:	429a      	cmp	r2, r3
 800e224:	d050      	beq.n	800e2c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2208      	movs	r2, #8
 800e22c:	4413      	add	r3, r2
 800e22e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	1ad2      	subs	r2, r2, r3
 800e240:	2308      	movs	r3, #8
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	429a      	cmp	r2, r3
 800e246:	d91f      	bls.n	800e288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4413      	add	r3, r2
 800e24e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	f003 0307 	and.w	r3, r3, #7
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <pvPortMalloc+0xf8>
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	613b      	str	r3, [r7, #16]
}
 800e26c:	bf00      	nop
 800e26e:	e7fe      	b.n	800e26e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	1ad2      	subs	r2, r2, r3
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e282:	69b8      	ldr	r0, [r7, #24]
 800e284:	f000 f908 	bl	800e498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e288:	4b1d      	ldr	r3, [pc, #116]	; (800e300 <pvPortMalloc+0x188>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	4a1b      	ldr	r2, [pc, #108]	; (800e300 <pvPortMalloc+0x188>)
 800e294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e296:	4b1a      	ldr	r3, [pc, #104]	; (800e300 <pvPortMalloc+0x188>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	4b1b      	ldr	r3, [pc, #108]	; (800e308 <pvPortMalloc+0x190>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d203      	bcs.n	800e2aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2a2:	4b17      	ldr	r3, [pc, #92]	; (800e300 <pvPortMalloc+0x188>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a18      	ldr	r2, [pc, #96]	; (800e308 <pvPortMalloc+0x190>)
 800e2a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <pvPortMalloc+0x184>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2be:	4b13      	ldr	r3, [pc, #76]	; (800e30c <pvPortMalloc+0x194>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	4a11      	ldr	r2, [pc, #68]	; (800e30c <pvPortMalloc+0x194>)
 800e2c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2c8:	f7fe fbd0 	bl	800ca6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <pvPortMalloc+0x174>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60fb      	str	r3, [r7, #12]
}
 800e2e8:	bf00      	nop
 800e2ea:	e7fe      	b.n	800e2ea <pvPortMalloc+0x172>
	return pvReturn;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3728      	adds	r7, #40	; 0x28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	20003d88 	.word	0x20003d88
 800e2fc:	20003d9c 	.word	0x20003d9c
 800e300:	20003d8c 	.word	0x20003d8c
 800e304:	20003d80 	.word	0x20003d80
 800e308:	20003d90 	.word	0x20003d90
 800e30c:	20003d94 	.word	0x20003d94

0800e310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d04d      	beq.n	800e3be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e322:	2308      	movs	r3, #8
 800e324:	425b      	negs	r3, r3
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4413      	add	r3, r2
 800e32a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	4b24      	ldr	r3, [pc, #144]	; (800e3c8 <vPortFree+0xb8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4013      	ands	r3, r2
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10a      	bne.n	800e354 <vPortFree+0x44>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	60fb      	str	r3, [r7, #12]
}
 800e350:	bf00      	nop
 800e352:	e7fe      	b.n	800e352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <vPortFree+0x62>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	60bb      	str	r3, [r7, #8]
}
 800e36e:	bf00      	nop
 800e370:	e7fe      	b.n	800e370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <vPortFree+0xb8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4013      	ands	r3, r2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01e      	beq.n	800e3be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11a      	bne.n	800e3be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	685a      	ldr	r2, [r3, #4]
 800e38c:	4b0e      	ldr	r3, [pc, #56]	; (800e3c8 <vPortFree+0xb8>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	43db      	mvns	r3, r3
 800e392:	401a      	ands	r2, r3
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e398:	f7fe fb5a 	bl	800ca50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <vPortFree+0xbc>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	4a09      	ldr	r2, [pc, #36]	; (800e3cc <vPortFree+0xbc>)
 800e3a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3aa:	6938      	ldr	r0, [r7, #16]
 800e3ac:	f000 f874 	bl	800e498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3b0:	4b07      	ldr	r3, [pc, #28]	; (800e3d0 <vPortFree+0xc0>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	4a06      	ldr	r2, [pc, #24]	; (800e3d0 <vPortFree+0xc0>)
 800e3b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3ba:	f7fe fb57 	bl	800ca6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3be:	bf00      	nop
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20003d9c 	.word	0x20003d9c
 800e3cc:	20003d8c 	.word	0x20003d8c
 800e3d0:	20003d98 	.word	0x20003d98

0800e3d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e3de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3e0:	4b27      	ldr	r3, [pc, #156]	; (800e480 <prvHeapInit+0xac>)
 800e3e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f003 0307 	and.w	r3, r3, #7
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00c      	beq.n	800e408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3307      	adds	r3, #7
 800e3f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f023 0307 	bic.w	r3, r3, #7
 800e3fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	4a1f      	ldr	r2, [pc, #124]	; (800e480 <prvHeapInit+0xac>)
 800e404:	4413      	add	r3, r2
 800e406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <prvHeapInit+0xb0>)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e412:	4b1c      	ldr	r3, [pc, #112]	; (800e484 <prvHeapInit+0xb0>)
 800e414:	2200      	movs	r2, #0
 800e416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	4413      	add	r3, r2
 800e41e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e420:	2208      	movs	r2, #8
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f023 0307 	bic.w	r3, r3, #7
 800e42e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	4a15      	ldr	r2, [pc, #84]	; (800e488 <prvHeapInit+0xb4>)
 800e434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e436:	4b14      	ldr	r3, [pc, #80]	; (800e488 <prvHeapInit+0xb4>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e43e:	4b12      	ldr	r3, [pc, #72]	; (800e488 <prvHeapInit+0xb4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2200      	movs	r2, #0
 800e444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	1ad2      	subs	r2, r2, r3
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e454:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <prvHeapInit+0xb4>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <prvHeapInit+0xb8>)
 800e462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	4a09      	ldr	r2, [pc, #36]	; (800e490 <prvHeapInit+0xbc>)
 800e46a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e46c:	4b09      	ldr	r3, [pc, #36]	; (800e494 <prvHeapInit+0xc0>)
 800e46e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e472:	601a      	str	r2, [r3, #0]
}
 800e474:	bf00      	nop
 800e476:	3714      	adds	r7, #20
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	200031c8 	.word	0x200031c8
 800e484:	20003d80 	.word	0x20003d80
 800e488:	20003d88 	.word	0x20003d88
 800e48c:	20003d90 	.word	0x20003d90
 800e490:	20003d8c 	.word	0x20003d8c
 800e494:	20003d9c 	.word	0x20003d9c

0800e498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4a0:	4b28      	ldr	r3, [pc, #160]	; (800e544 <prvInsertBlockIntoFreeList+0xac>)
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	e002      	b.n	800e4ac <prvInsertBlockIntoFreeList+0x14>
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d8f7      	bhi.n	800e4a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d108      	bne.n	800e4da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	441a      	add	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	441a      	add	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d118      	bne.n	800e520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <prvInsertBlockIntoFreeList+0xb0>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d00d      	beq.n	800e516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	441a      	add	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	e008      	b.n	800e528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e516:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <prvInsertBlockIntoFreeList+0xb0>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	e003      	b.n	800e528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d002      	beq.n	800e536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e536:	bf00      	nop
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	20003d80 	.word	0x20003d80
 800e548:	20003d88 	.word	0x20003d88

0800e54c <__cvt>:
 800e54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e550:	ec55 4b10 	vmov	r4, r5, d0
 800e554:	2d00      	cmp	r5, #0
 800e556:	460e      	mov	r6, r1
 800e558:	4619      	mov	r1, r3
 800e55a:	462b      	mov	r3, r5
 800e55c:	bfbb      	ittet	lt
 800e55e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e562:	461d      	movlt	r5, r3
 800e564:	2300      	movge	r3, #0
 800e566:	232d      	movlt	r3, #45	; 0x2d
 800e568:	700b      	strb	r3, [r1, #0]
 800e56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e56c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e570:	4691      	mov	r9, r2
 800e572:	f023 0820 	bic.w	r8, r3, #32
 800e576:	bfbc      	itt	lt
 800e578:	4622      	movlt	r2, r4
 800e57a:	4614      	movlt	r4, r2
 800e57c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e580:	d005      	beq.n	800e58e <__cvt+0x42>
 800e582:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e586:	d100      	bne.n	800e58a <__cvt+0x3e>
 800e588:	3601      	adds	r6, #1
 800e58a:	2102      	movs	r1, #2
 800e58c:	e000      	b.n	800e590 <__cvt+0x44>
 800e58e:	2103      	movs	r1, #3
 800e590:	ab03      	add	r3, sp, #12
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	ab02      	add	r3, sp, #8
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	ec45 4b10 	vmov	d0, r4, r5
 800e59c:	4653      	mov	r3, sl
 800e59e:	4632      	mov	r2, r6
 800e5a0:	f000 ff92 	bl	800f4c8 <_dtoa_r>
 800e5a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e5a8:	4607      	mov	r7, r0
 800e5aa:	d102      	bne.n	800e5b2 <__cvt+0x66>
 800e5ac:	f019 0f01 	tst.w	r9, #1
 800e5b0:	d022      	beq.n	800e5f8 <__cvt+0xac>
 800e5b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5b6:	eb07 0906 	add.w	r9, r7, r6
 800e5ba:	d110      	bne.n	800e5de <__cvt+0x92>
 800e5bc:	783b      	ldrb	r3, [r7, #0]
 800e5be:	2b30      	cmp	r3, #48	; 0x30
 800e5c0:	d10a      	bne.n	800e5d8 <__cvt+0x8c>
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	f7f2 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5ce:	b918      	cbnz	r0, 800e5d8 <__cvt+0x8c>
 800e5d0:	f1c6 0601 	rsb	r6, r6, #1
 800e5d4:	f8ca 6000 	str.w	r6, [sl]
 800e5d8:	f8da 3000 	ldr.w	r3, [sl]
 800e5dc:	4499      	add	r9, r3
 800e5de:	2200      	movs	r2, #0
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7f2 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5ea:	b108      	cbz	r0, 800e5f0 <__cvt+0xa4>
 800e5ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5f0:	2230      	movs	r2, #48	; 0x30
 800e5f2:	9b03      	ldr	r3, [sp, #12]
 800e5f4:	454b      	cmp	r3, r9
 800e5f6:	d307      	bcc.n	800e608 <__cvt+0xbc>
 800e5f8:	9b03      	ldr	r3, [sp, #12]
 800e5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5fc:	1bdb      	subs	r3, r3, r7
 800e5fe:	4638      	mov	r0, r7
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	b004      	add	sp, #16
 800e604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e608:	1c59      	adds	r1, r3, #1
 800e60a:	9103      	str	r1, [sp, #12]
 800e60c:	701a      	strb	r2, [r3, #0]
 800e60e:	e7f0      	b.n	800e5f2 <__cvt+0xa6>

0800e610 <__exponent>:
 800e610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e612:	4603      	mov	r3, r0
 800e614:	2900      	cmp	r1, #0
 800e616:	bfb8      	it	lt
 800e618:	4249      	neglt	r1, r1
 800e61a:	f803 2b02 	strb.w	r2, [r3], #2
 800e61e:	bfb4      	ite	lt
 800e620:	222d      	movlt	r2, #45	; 0x2d
 800e622:	222b      	movge	r2, #43	; 0x2b
 800e624:	2909      	cmp	r1, #9
 800e626:	7042      	strb	r2, [r0, #1]
 800e628:	dd2a      	ble.n	800e680 <__exponent+0x70>
 800e62a:	f10d 0207 	add.w	r2, sp, #7
 800e62e:	4617      	mov	r7, r2
 800e630:	260a      	movs	r6, #10
 800e632:	4694      	mov	ip, r2
 800e634:	fb91 f5f6 	sdiv	r5, r1, r6
 800e638:	fb06 1415 	mls	r4, r6, r5, r1
 800e63c:	3430      	adds	r4, #48	; 0x30
 800e63e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e642:	460c      	mov	r4, r1
 800e644:	2c63      	cmp	r4, #99	; 0x63
 800e646:	f102 32ff 	add.w	r2, r2, #4294967295
 800e64a:	4629      	mov	r1, r5
 800e64c:	dcf1      	bgt.n	800e632 <__exponent+0x22>
 800e64e:	3130      	adds	r1, #48	; 0x30
 800e650:	f1ac 0402 	sub.w	r4, ip, #2
 800e654:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e658:	1c41      	adds	r1, r0, #1
 800e65a:	4622      	mov	r2, r4
 800e65c:	42ba      	cmp	r2, r7
 800e65e:	d30a      	bcc.n	800e676 <__exponent+0x66>
 800e660:	f10d 0209 	add.w	r2, sp, #9
 800e664:	eba2 020c 	sub.w	r2, r2, ip
 800e668:	42bc      	cmp	r4, r7
 800e66a:	bf88      	it	hi
 800e66c:	2200      	movhi	r2, #0
 800e66e:	4413      	add	r3, r2
 800e670:	1a18      	subs	r0, r3, r0
 800e672:	b003      	add	sp, #12
 800e674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e676:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e67a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e67e:	e7ed      	b.n	800e65c <__exponent+0x4c>
 800e680:	2330      	movs	r3, #48	; 0x30
 800e682:	3130      	adds	r1, #48	; 0x30
 800e684:	7083      	strb	r3, [r0, #2]
 800e686:	70c1      	strb	r1, [r0, #3]
 800e688:	1d03      	adds	r3, r0, #4
 800e68a:	e7f1      	b.n	800e670 <__exponent+0x60>

0800e68c <_printf_float>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	ed2d 8b02 	vpush	{d8}
 800e694:	b08d      	sub	sp, #52	; 0x34
 800e696:	460c      	mov	r4, r1
 800e698:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e69c:	4616      	mov	r6, r2
 800e69e:	461f      	mov	r7, r3
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	f000 fe03 	bl	800f2ac <_localeconv_r>
 800e6a6:	f8d0 a000 	ldr.w	sl, [r0]
 800e6aa:	4650      	mov	r0, sl
 800e6ac:	f7f1 fde0 	bl	8000270 <strlen>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e6b4:	6823      	ldr	r3, [r4, #0]
 800e6b6:	9305      	str	r3, [sp, #20]
 800e6b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e6c0:	3307      	adds	r3, #7
 800e6c2:	f023 0307 	bic.w	r3, r3, #7
 800e6c6:	f103 0208 	add.w	r2, r3, #8
 800e6ca:	f8c8 2000 	str.w	r2, [r8]
 800e6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6d6:	9307      	str	r3, [sp, #28]
 800e6d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6dc:	ee08 0a10 	vmov	s16, r0
 800e6e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6e8:	4b9e      	ldr	r3, [pc, #632]	; (800e964 <_printf_float+0x2d8>)
 800e6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ee:	f7f2 fa1d 	bl	8000b2c <__aeabi_dcmpun>
 800e6f2:	bb88      	cbnz	r0, 800e758 <_printf_float+0xcc>
 800e6f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6f8:	4b9a      	ldr	r3, [pc, #616]	; (800e964 <_printf_float+0x2d8>)
 800e6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e6fe:	f7f2 f9f7 	bl	8000af0 <__aeabi_dcmple>
 800e702:	bb48      	cbnz	r0, 800e758 <_printf_float+0xcc>
 800e704:	2200      	movs	r2, #0
 800e706:	2300      	movs	r3, #0
 800e708:	4640      	mov	r0, r8
 800e70a:	4649      	mov	r1, r9
 800e70c:	f7f2 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800e710:	b110      	cbz	r0, 800e718 <_printf_float+0x8c>
 800e712:	232d      	movs	r3, #45	; 0x2d
 800e714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e718:	4a93      	ldr	r2, [pc, #588]	; (800e968 <_printf_float+0x2dc>)
 800e71a:	4b94      	ldr	r3, [pc, #592]	; (800e96c <_printf_float+0x2e0>)
 800e71c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e720:	bf94      	ite	ls
 800e722:	4690      	movls	r8, r2
 800e724:	4698      	movhi	r8, r3
 800e726:	2303      	movs	r3, #3
 800e728:	6123      	str	r3, [r4, #16]
 800e72a:	9b05      	ldr	r3, [sp, #20]
 800e72c:	f023 0304 	bic.w	r3, r3, #4
 800e730:	6023      	str	r3, [r4, #0]
 800e732:	f04f 0900 	mov.w	r9, #0
 800e736:	9700      	str	r7, [sp, #0]
 800e738:	4633      	mov	r3, r6
 800e73a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e73c:	4621      	mov	r1, r4
 800e73e:	4628      	mov	r0, r5
 800e740:	f000 f9da 	bl	800eaf8 <_printf_common>
 800e744:	3001      	adds	r0, #1
 800e746:	f040 8090 	bne.w	800e86a <_printf_float+0x1de>
 800e74a:	f04f 30ff 	mov.w	r0, #4294967295
 800e74e:	b00d      	add	sp, #52	; 0x34
 800e750:	ecbd 8b02 	vpop	{d8}
 800e754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e758:	4642      	mov	r2, r8
 800e75a:	464b      	mov	r3, r9
 800e75c:	4640      	mov	r0, r8
 800e75e:	4649      	mov	r1, r9
 800e760:	f7f2 f9e4 	bl	8000b2c <__aeabi_dcmpun>
 800e764:	b140      	cbz	r0, 800e778 <_printf_float+0xec>
 800e766:	464b      	mov	r3, r9
 800e768:	2b00      	cmp	r3, #0
 800e76a:	bfbc      	itt	lt
 800e76c:	232d      	movlt	r3, #45	; 0x2d
 800e76e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e772:	4a7f      	ldr	r2, [pc, #508]	; (800e970 <_printf_float+0x2e4>)
 800e774:	4b7f      	ldr	r3, [pc, #508]	; (800e974 <_printf_float+0x2e8>)
 800e776:	e7d1      	b.n	800e71c <_printf_float+0x90>
 800e778:	6863      	ldr	r3, [r4, #4]
 800e77a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e77e:	9206      	str	r2, [sp, #24]
 800e780:	1c5a      	adds	r2, r3, #1
 800e782:	d13f      	bne.n	800e804 <_printf_float+0x178>
 800e784:	2306      	movs	r3, #6
 800e786:	6063      	str	r3, [r4, #4]
 800e788:	9b05      	ldr	r3, [sp, #20]
 800e78a:	6861      	ldr	r1, [r4, #4]
 800e78c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e790:	2300      	movs	r3, #0
 800e792:	9303      	str	r3, [sp, #12]
 800e794:	ab0a      	add	r3, sp, #40	; 0x28
 800e796:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e79a:	ab09      	add	r3, sp, #36	; 0x24
 800e79c:	ec49 8b10 	vmov	d0, r8, r9
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	6022      	str	r2, [r4, #0]
 800e7a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f7ff fecf 	bl	800e54c <__cvt>
 800e7ae:	9b06      	ldr	r3, [sp, #24]
 800e7b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7b2:	2b47      	cmp	r3, #71	; 0x47
 800e7b4:	4680      	mov	r8, r0
 800e7b6:	d108      	bne.n	800e7ca <_printf_float+0x13e>
 800e7b8:	1cc8      	adds	r0, r1, #3
 800e7ba:	db02      	blt.n	800e7c2 <_printf_float+0x136>
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	4299      	cmp	r1, r3
 800e7c0:	dd41      	ble.n	800e846 <_printf_float+0x1ba>
 800e7c2:	f1ab 0302 	sub.w	r3, fp, #2
 800e7c6:	fa5f fb83 	uxtb.w	fp, r3
 800e7ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7ce:	d820      	bhi.n	800e812 <_printf_float+0x186>
 800e7d0:	3901      	subs	r1, #1
 800e7d2:	465a      	mov	r2, fp
 800e7d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7d8:	9109      	str	r1, [sp, #36]	; 0x24
 800e7da:	f7ff ff19 	bl	800e610 <__exponent>
 800e7de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7e0:	1813      	adds	r3, r2, r0
 800e7e2:	2a01      	cmp	r2, #1
 800e7e4:	4681      	mov	r9, r0
 800e7e6:	6123      	str	r3, [r4, #16]
 800e7e8:	dc02      	bgt.n	800e7f0 <_printf_float+0x164>
 800e7ea:	6822      	ldr	r2, [r4, #0]
 800e7ec:	07d2      	lsls	r2, r2, #31
 800e7ee:	d501      	bpl.n	800e7f4 <_printf_float+0x168>
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	6123      	str	r3, [r4, #16]
 800e7f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d09c      	beq.n	800e736 <_printf_float+0xaa>
 800e7fc:	232d      	movs	r3, #45	; 0x2d
 800e7fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e802:	e798      	b.n	800e736 <_printf_float+0xaa>
 800e804:	9a06      	ldr	r2, [sp, #24]
 800e806:	2a47      	cmp	r2, #71	; 0x47
 800e808:	d1be      	bne.n	800e788 <_printf_float+0xfc>
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1bc      	bne.n	800e788 <_printf_float+0xfc>
 800e80e:	2301      	movs	r3, #1
 800e810:	e7b9      	b.n	800e786 <_printf_float+0xfa>
 800e812:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e816:	d118      	bne.n	800e84a <_printf_float+0x1be>
 800e818:	2900      	cmp	r1, #0
 800e81a:	6863      	ldr	r3, [r4, #4]
 800e81c:	dd0b      	ble.n	800e836 <_printf_float+0x1aa>
 800e81e:	6121      	str	r1, [r4, #16]
 800e820:	b913      	cbnz	r3, 800e828 <_printf_float+0x19c>
 800e822:	6822      	ldr	r2, [r4, #0]
 800e824:	07d0      	lsls	r0, r2, #31
 800e826:	d502      	bpl.n	800e82e <_printf_float+0x1a2>
 800e828:	3301      	adds	r3, #1
 800e82a:	440b      	add	r3, r1
 800e82c:	6123      	str	r3, [r4, #16]
 800e82e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e830:	f04f 0900 	mov.w	r9, #0
 800e834:	e7de      	b.n	800e7f4 <_printf_float+0x168>
 800e836:	b913      	cbnz	r3, 800e83e <_printf_float+0x1b2>
 800e838:	6822      	ldr	r2, [r4, #0]
 800e83a:	07d2      	lsls	r2, r2, #31
 800e83c:	d501      	bpl.n	800e842 <_printf_float+0x1b6>
 800e83e:	3302      	adds	r3, #2
 800e840:	e7f4      	b.n	800e82c <_printf_float+0x1a0>
 800e842:	2301      	movs	r3, #1
 800e844:	e7f2      	b.n	800e82c <_printf_float+0x1a0>
 800e846:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e84c:	4299      	cmp	r1, r3
 800e84e:	db05      	blt.n	800e85c <_printf_float+0x1d0>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	6121      	str	r1, [r4, #16]
 800e854:	07d8      	lsls	r0, r3, #31
 800e856:	d5ea      	bpl.n	800e82e <_printf_float+0x1a2>
 800e858:	1c4b      	adds	r3, r1, #1
 800e85a:	e7e7      	b.n	800e82c <_printf_float+0x1a0>
 800e85c:	2900      	cmp	r1, #0
 800e85e:	bfd4      	ite	le
 800e860:	f1c1 0202 	rsble	r2, r1, #2
 800e864:	2201      	movgt	r2, #1
 800e866:	4413      	add	r3, r2
 800e868:	e7e0      	b.n	800e82c <_printf_float+0x1a0>
 800e86a:	6823      	ldr	r3, [r4, #0]
 800e86c:	055a      	lsls	r2, r3, #21
 800e86e:	d407      	bmi.n	800e880 <_printf_float+0x1f4>
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	4642      	mov	r2, r8
 800e874:	4631      	mov	r1, r6
 800e876:	4628      	mov	r0, r5
 800e878:	47b8      	blx	r7
 800e87a:	3001      	adds	r0, #1
 800e87c:	d12c      	bne.n	800e8d8 <_printf_float+0x24c>
 800e87e:	e764      	b.n	800e74a <_printf_float+0xbe>
 800e880:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e884:	f240 80e0 	bls.w	800ea48 <_printf_float+0x3bc>
 800e888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e88c:	2200      	movs	r2, #0
 800e88e:	2300      	movs	r3, #0
 800e890:	f7f2 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e894:	2800      	cmp	r0, #0
 800e896:	d034      	beq.n	800e902 <_printf_float+0x276>
 800e898:	4a37      	ldr	r2, [pc, #220]	; (800e978 <_printf_float+0x2ec>)
 800e89a:	2301      	movs	r3, #1
 800e89c:	4631      	mov	r1, r6
 800e89e:	4628      	mov	r0, r5
 800e8a0:	47b8      	blx	r7
 800e8a2:	3001      	adds	r0, #1
 800e8a4:	f43f af51 	beq.w	800e74a <_printf_float+0xbe>
 800e8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	db02      	blt.n	800e8b6 <_printf_float+0x22a>
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	07d8      	lsls	r0, r3, #31
 800e8b4:	d510      	bpl.n	800e8d8 <_printf_float+0x24c>
 800e8b6:	ee18 3a10 	vmov	r3, s16
 800e8ba:	4652      	mov	r2, sl
 800e8bc:	4631      	mov	r1, r6
 800e8be:	4628      	mov	r0, r5
 800e8c0:	47b8      	blx	r7
 800e8c2:	3001      	adds	r0, #1
 800e8c4:	f43f af41 	beq.w	800e74a <_printf_float+0xbe>
 800e8c8:	f04f 0800 	mov.w	r8, #0
 800e8cc:	f104 091a 	add.w	r9, r4, #26
 800e8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	4543      	cmp	r3, r8
 800e8d6:	dc09      	bgt.n	800e8ec <_printf_float+0x260>
 800e8d8:	6823      	ldr	r3, [r4, #0]
 800e8da:	079b      	lsls	r3, r3, #30
 800e8dc:	f100 8107 	bmi.w	800eaee <_printf_float+0x462>
 800e8e0:	68e0      	ldr	r0, [r4, #12]
 800e8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e4:	4298      	cmp	r0, r3
 800e8e6:	bfb8      	it	lt
 800e8e8:	4618      	movlt	r0, r3
 800e8ea:	e730      	b.n	800e74e <_printf_float+0xc2>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	464a      	mov	r2, r9
 800e8f0:	4631      	mov	r1, r6
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	47b8      	blx	r7
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	f43f af27 	beq.w	800e74a <_printf_float+0xbe>
 800e8fc:	f108 0801 	add.w	r8, r8, #1
 800e900:	e7e6      	b.n	800e8d0 <_printf_float+0x244>
 800e902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e904:	2b00      	cmp	r3, #0
 800e906:	dc39      	bgt.n	800e97c <_printf_float+0x2f0>
 800e908:	4a1b      	ldr	r2, [pc, #108]	; (800e978 <_printf_float+0x2ec>)
 800e90a:	2301      	movs	r3, #1
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	f43f af19 	beq.w	800e74a <_printf_float+0xbe>
 800e918:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e91c:	4313      	orrs	r3, r2
 800e91e:	d102      	bne.n	800e926 <_printf_float+0x29a>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	07d9      	lsls	r1, r3, #31
 800e924:	d5d8      	bpl.n	800e8d8 <_printf_float+0x24c>
 800e926:	ee18 3a10 	vmov	r3, s16
 800e92a:	4652      	mov	r2, sl
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	f43f af09 	beq.w	800e74a <_printf_float+0xbe>
 800e938:	f04f 0900 	mov.w	r9, #0
 800e93c:	f104 0a1a 	add.w	sl, r4, #26
 800e940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e942:	425b      	negs	r3, r3
 800e944:	454b      	cmp	r3, r9
 800e946:	dc01      	bgt.n	800e94c <_printf_float+0x2c0>
 800e948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e94a:	e792      	b.n	800e872 <_printf_float+0x1e6>
 800e94c:	2301      	movs	r3, #1
 800e94e:	4652      	mov	r2, sl
 800e950:	4631      	mov	r1, r6
 800e952:	4628      	mov	r0, r5
 800e954:	47b8      	blx	r7
 800e956:	3001      	adds	r0, #1
 800e958:	f43f aef7 	beq.w	800e74a <_printf_float+0xbe>
 800e95c:	f109 0901 	add.w	r9, r9, #1
 800e960:	e7ee      	b.n	800e940 <_printf_float+0x2b4>
 800e962:	bf00      	nop
 800e964:	7fefffff 	.word	0x7fefffff
 800e968:	080134f4 	.word	0x080134f4
 800e96c:	080134f8 	.word	0x080134f8
 800e970:	080134fc 	.word	0x080134fc
 800e974:	08013500 	.word	0x08013500
 800e978:	08013504 	.word	0x08013504
 800e97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e97e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e980:	429a      	cmp	r2, r3
 800e982:	bfa8      	it	ge
 800e984:	461a      	movge	r2, r3
 800e986:	2a00      	cmp	r2, #0
 800e988:	4691      	mov	r9, r2
 800e98a:	dc37      	bgt.n	800e9fc <_printf_float+0x370>
 800e98c:	f04f 0b00 	mov.w	fp, #0
 800e990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e994:	f104 021a 	add.w	r2, r4, #26
 800e998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e99a:	9305      	str	r3, [sp, #20]
 800e99c:	eba3 0309 	sub.w	r3, r3, r9
 800e9a0:	455b      	cmp	r3, fp
 800e9a2:	dc33      	bgt.n	800ea0c <_printf_float+0x380>
 800e9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	db3b      	blt.n	800ea24 <_printf_float+0x398>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	07da      	lsls	r2, r3, #31
 800e9b0:	d438      	bmi.n	800ea24 <_printf_float+0x398>
 800e9b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e9b6:	eba2 0903 	sub.w	r9, r2, r3
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	1ad2      	subs	r2, r2, r3
 800e9be:	4591      	cmp	r9, r2
 800e9c0:	bfa8      	it	ge
 800e9c2:	4691      	movge	r9, r2
 800e9c4:	f1b9 0f00 	cmp.w	r9, #0
 800e9c8:	dc35      	bgt.n	800ea36 <_printf_float+0x3aa>
 800e9ca:	f04f 0800 	mov.w	r8, #0
 800e9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9d2:	f104 0a1a 	add.w	sl, r4, #26
 800e9d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9da:	1a9b      	subs	r3, r3, r2
 800e9dc:	eba3 0309 	sub.w	r3, r3, r9
 800e9e0:	4543      	cmp	r3, r8
 800e9e2:	f77f af79 	ble.w	800e8d8 <_printf_float+0x24c>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	4652      	mov	r2, sl
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	47b8      	blx	r7
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	f43f aeaa 	beq.w	800e74a <_printf_float+0xbe>
 800e9f6:	f108 0801 	add.w	r8, r8, #1
 800e9fa:	e7ec      	b.n	800e9d6 <_printf_float+0x34a>
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	4631      	mov	r1, r6
 800ea00:	4642      	mov	r2, r8
 800ea02:	4628      	mov	r0, r5
 800ea04:	47b8      	blx	r7
 800ea06:	3001      	adds	r0, #1
 800ea08:	d1c0      	bne.n	800e98c <_printf_float+0x300>
 800ea0a:	e69e      	b.n	800e74a <_printf_float+0xbe>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4628      	mov	r0, r5
 800ea12:	9205      	str	r2, [sp, #20]
 800ea14:	47b8      	blx	r7
 800ea16:	3001      	adds	r0, #1
 800ea18:	f43f ae97 	beq.w	800e74a <_printf_float+0xbe>
 800ea1c:	9a05      	ldr	r2, [sp, #20]
 800ea1e:	f10b 0b01 	add.w	fp, fp, #1
 800ea22:	e7b9      	b.n	800e998 <_printf_float+0x30c>
 800ea24:	ee18 3a10 	vmov	r3, s16
 800ea28:	4652      	mov	r2, sl
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	47b8      	blx	r7
 800ea30:	3001      	adds	r0, #1
 800ea32:	d1be      	bne.n	800e9b2 <_printf_float+0x326>
 800ea34:	e689      	b.n	800e74a <_printf_float+0xbe>
 800ea36:	9a05      	ldr	r2, [sp, #20]
 800ea38:	464b      	mov	r3, r9
 800ea3a:	4442      	add	r2, r8
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4628      	mov	r0, r5
 800ea40:	47b8      	blx	r7
 800ea42:	3001      	adds	r0, #1
 800ea44:	d1c1      	bne.n	800e9ca <_printf_float+0x33e>
 800ea46:	e680      	b.n	800e74a <_printf_float+0xbe>
 800ea48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea4a:	2a01      	cmp	r2, #1
 800ea4c:	dc01      	bgt.n	800ea52 <_printf_float+0x3c6>
 800ea4e:	07db      	lsls	r3, r3, #31
 800ea50:	d53a      	bpl.n	800eac8 <_printf_float+0x43c>
 800ea52:	2301      	movs	r3, #1
 800ea54:	4642      	mov	r2, r8
 800ea56:	4631      	mov	r1, r6
 800ea58:	4628      	mov	r0, r5
 800ea5a:	47b8      	blx	r7
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	f43f ae74 	beq.w	800e74a <_printf_float+0xbe>
 800ea62:	ee18 3a10 	vmov	r3, s16
 800ea66:	4652      	mov	r2, sl
 800ea68:	4631      	mov	r1, r6
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b8      	blx	r7
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f43f ae6b 	beq.w	800e74a <_printf_float+0xbe>
 800ea74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea78:	2200      	movs	r2, #0
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ea80:	f7f2 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea84:	b9d8      	cbnz	r0, 800eabe <_printf_float+0x432>
 800ea86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea8a:	f108 0201 	add.w	r2, r8, #1
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b8      	blx	r7
 800ea94:	3001      	adds	r0, #1
 800ea96:	d10e      	bne.n	800eab6 <_printf_float+0x42a>
 800ea98:	e657      	b.n	800e74a <_printf_float+0xbe>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	47b8      	blx	r7
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f43f ae50 	beq.w	800e74a <_printf_float+0xbe>
 800eaaa:	f108 0801 	add.w	r8, r8, #1
 800eaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab0:	3b01      	subs	r3, #1
 800eab2:	4543      	cmp	r3, r8
 800eab4:	dcf1      	bgt.n	800ea9a <_printf_float+0x40e>
 800eab6:	464b      	mov	r3, r9
 800eab8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eabc:	e6da      	b.n	800e874 <_printf_float+0x1e8>
 800eabe:	f04f 0800 	mov.w	r8, #0
 800eac2:	f104 0a1a 	add.w	sl, r4, #26
 800eac6:	e7f2      	b.n	800eaae <_printf_float+0x422>
 800eac8:	2301      	movs	r3, #1
 800eaca:	4642      	mov	r2, r8
 800eacc:	e7df      	b.n	800ea8e <_printf_float+0x402>
 800eace:	2301      	movs	r3, #1
 800ead0:	464a      	mov	r2, r9
 800ead2:	4631      	mov	r1, r6
 800ead4:	4628      	mov	r0, r5
 800ead6:	47b8      	blx	r7
 800ead8:	3001      	adds	r0, #1
 800eada:	f43f ae36 	beq.w	800e74a <_printf_float+0xbe>
 800eade:	f108 0801 	add.w	r8, r8, #1
 800eae2:	68e3      	ldr	r3, [r4, #12]
 800eae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eae6:	1a5b      	subs	r3, r3, r1
 800eae8:	4543      	cmp	r3, r8
 800eaea:	dcf0      	bgt.n	800eace <_printf_float+0x442>
 800eaec:	e6f8      	b.n	800e8e0 <_printf_float+0x254>
 800eaee:	f04f 0800 	mov.w	r8, #0
 800eaf2:	f104 0919 	add.w	r9, r4, #25
 800eaf6:	e7f4      	b.n	800eae2 <_printf_float+0x456>

0800eaf8 <_printf_common>:
 800eaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eafc:	4616      	mov	r6, r2
 800eafe:	4699      	mov	r9, r3
 800eb00:	688a      	ldr	r2, [r1, #8]
 800eb02:	690b      	ldr	r3, [r1, #16]
 800eb04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	bfb8      	it	lt
 800eb0c:	4613      	movlt	r3, r2
 800eb0e:	6033      	str	r3, [r6, #0]
 800eb10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb14:	4607      	mov	r7, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	b10a      	cbz	r2, 800eb1e <_printf_common+0x26>
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	6033      	str	r3, [r6, #0]
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	0699      	lsls	r1, r3, #26
 800eb22:	bf42      	ittt	mi
 800eb24:	6833      	ldrmi	r3, [r6, #0]
 800eb26:	3302      	addmi	r3, #2
 800eb28:	6033      	strmi	r3, [r6, #0]
 800eb2a:	6825      	ldr	r5, [r4, #0]
 800eb2c:	f015 0506 	ands.w	r5, r5, #6
 800eb30:	d106      	bne.n	800eb40 <_printf_common+0x48>
 800eb32:	f104 0a19 	add.w	sl, r4, #25
 800eb36:	68e3      	ldr	r3, [r4, #12]
 800eb38:	6832      	ldr	r2, [r6, #0]
 800eb3a:	1a9b      	subs	r3, r3, r2
 800eb3c:	42ab      	cmp	r3, r5
 800eb3e:	dc26      	bgt.n	800eb8e <_printf_common+0x96>
 800eb40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb44:	1e13      	subs	r3, r2, #0
 800eb46:	6822      	ldr	r2, [r4, #0]
 800eb48:	bf18      	it	ne
 800eb4a:	2301      	movne	r3, #1
 800eb4c:	0692      	lsls	r2, r2, #26
 800eb4e:	d42b      	bmi.n	800eba8 <_printf_common+0xb0>
 800eb50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb54:	4649      	mov	r1, r9
 800eb56:	4638      	mov	r0, r7
 800eb58:	47c0      	blx	r8
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d01e      	beq.n	800eb9c <_printf_common+0xa4>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	6922      	ldr	r2, [r4, #16]
 800eb62:	f003 0306 	and.w	r3, r3, #6
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	bf02      	ittt	eq
 800eb6a:	68e5      	ldreq	r5, [r4, #12]
 800eb6c:	6833      	ldreq	r3, [r6, #0]
 800eb6e:	1aed      	subeq	r5, r5, r3
 800eb70:	68a3      	ldr	r3, [r4, #8]
 800eb72:	bf0c      	ite	eq
 800eb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb78:	2500      	movne	r5, #0
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	bfc4      	itt	gt
 800eb7e:	1a9b      	subgt	r3, r3, r2
 800eb80:	18ed      	addgt	r5, r5, r3
 800eb82:	2600      	movs	r6, #0
 800eb84:	341a      	adds	r4, #26
 800eb86:	42b5      	cmp	r5, r6
 800eb88:	d11a      	bne.n	800ebc0 <_printf_common+0xc8>
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	e008      	b.n	800eba0 <_printf_common+0xa8>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4652      	mov	r2, sl
 800eb92:	4649      	mov	r1, r9
 800eb94:	4638      	mov	r0, r7
 800eb96:	47c0      	blx	r8
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d103      	bne.n	800eba4 <_printf_common+0xac>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba4:	3501      	adds	r5, #1
 800eba6:	e7c6      	b.n	800eb36 <_printf_common+0x3e>
 800eba8:	18e1      	adds	r1, r4, r3
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	2030      	movs	r0, #48	; 0x30
 800ebae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebb2:	4422      	add	r2, r4
 800ebb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	e7c7      	b.n	800eb50 <_printf_common+0x58>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	47c0      	blx	r8
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d0e6      	beq.n	800eb9c <_printf_common+0xa4>
 800ebce:	3601      	adds	r6, #1
 800ebd0:	e7d9      	b.n	800eb86 <_printf_common+0x8e>
	...

0800ebd4 <_printf_i>:
 800ebd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	7e0f      	ldrb	r7, [r1, #24]
 800ebda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ebdc:	2f78      	cmp	r7, #120	; 0x78
 800ebde:	4691      	mov	r9, r2
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	469a      	mov	sl, r3
 800ebe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ebea:	d807      	bhi.n	800ebfc <_printf_i+0x28>
 800ebec:	2f62      	cmp	r7, #98	; 0x62
 800ebee:	d80a      	bhi.n	800ec06 <_printf_i+0x32>
 800ebf0:	2f00      	cmp	r7, #0
 800ebf2:	f000 80d4 	beq.w	800ed9e <_printf_i+0x1ca>
 800ebf6:	2f58      	cmp	r7, #88	; 0x58
 800ebf8:	f000 80c0 	beq.w	800ed7c <_printf_i+0x1a8>
 800ebfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec04:	e03a      	b.n	800ec7c <_printf_i+0xa8>
 800ec06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec0a:	2b15      	cmp	r3, #21
 800ec0c:	d8f6      	bhi.n	800ebfc <_printf_i+0x28>
 800ec0e:	a101      	add	r1, pc, #4	; (adr r1, 800ec14 <_printf_i+0x40>)
 800ec10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec14:	0800ec6d 	.word	0x0800ec6d
 800ec18:	0800ec81 	.word	0x0800ec81
 800ec1c:	0800ebfd 	.word	0x0800ebfd
 800ec20:	0800ebfd 	.word	0x0800ebfd
 800ec24:	0800ebfd 	.word	0x0800ebfd
 800ec28:	0800ebfd 	.word	0x0800ebfd
 800ec2c:	0800ec81 	.word	0x0800ec81
 800ec30:	0800ebfd 	.word	0x0800ebfd
 800ec34:	0800ebfd 	.word	0x0800ebfd
 800ec38:	0800ebfd 	.word	0x0800ebfd
 800ec3c:	0800ebfd 	.word	0x0800ebfd
 800ec40:	0800ed85 	.word	0x0800ed85
 800ec44:	0800ecad 	.word	0x0800ecad
 800ec48:	0800ed3f 	.word	0x0800ed3f
 800ec4c:	0800ebfd 	.word	0x0800ebfd
 800ec50:	0800ebfd 	.word	0x0800ebfd
 800ec54:	0800eda7 	.word	0x0800eda7
 800ec58:	0800ebfd 	.word	0x0800ebfd
 800ec5c:	0800ecad 	.word	0x0800ecad
 800ec60:	0800ebfd 	.word	0x0800ebfd
 800ec64:	0800ebfd 	.word	0x0800ebfd
 800ec68:	0800ed47 	.word	0x0800ed47
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	1d1a      	adds	r2, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	602a      	str	r2, [r5, #0]
 800ec74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e09f      	b.n	800edc0 <_printf_i+0x1ec>
 800ec80:	6820      	ldr	r0, [r4, #0]
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	0607      	lsls	r7, r0, #24
 800ec86:	f103 0104 	add.w	r1, r3, #4
 800ec8a:	6029      	str	r1, [r5, #0]
 800ec8c:	d501      	bpl.n	800ec92 <_printf_i+0xbe>
 800ec8e:	681e      	ldr	r6, [r3, #0]
 800ec90:	e003      	b.n	800ec9a <_printf_i+0xc6>
 800ec92:	0646      	lsls	r6, r0, #25
 800ec94:	d5fb      	bpl.n	800ec8e <_printf_i+0xba>
 800ec96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ec9a:	2e00      	cmp	r6, #0
 800ec9c:	da03      	bge.n	800eca6 <_printf_i+0xd2>
 800ec9e:	232d      	movs	r3, #45	; 0x2d
 800eca0:	4276      	negs	r6, r6
 800eca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eca6:	485a      	ldr	r0, [pc, #360]	; (800ee10 <_printf_i+0x23c>)
 800eca8:	230a      	movs	r3, #10
 800ecaa:	e012      	b.n	800ecd2 <_printf_i+0xfe>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	6820      	ldr	r0, [r4, #0]
 800ecb0:	1d19      	adds	r1, r3, #4
 800ecb2:	6029      	str	r1, [r5, #0]
 800ecb4:	0605      	lsls	r5, r0, #24
 800ecb6:	d501      	bpl.n	800ecbc <_printf_i+0xe8>
 800ecb8:	681e      	ldr	r6, [r3, #0]
 800ecba:	e002      	b.n	800ecc2 <_printf_i+0xee>
 800ecbc:	0641      	lsls	r1, r0, #25
 800ecbe:	d5fb      	bpl.n	800ecb8 <_printf_i+0xe4>
 800ecc0:	881e      	ldrh	r6, [r3, #0]
 800ecc2:	4853      	ldr	r0, [pc, #332]	; (800ee10 <_printf_i+0x23c>)
 800ecc4:	2f6f      	cmp	r7, #111	; 0x6f
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2308      	moveq	r3, #8
 800ecca:	230a      	movne	r3, #10
 800eccc:	2100      	movs	r1, #0
 800ecce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecd2:	6865      	ldr	r5, [r4, #4]
 800ecd4:	60a5      	str	r5, [r4, #8]
 800ecd6:	2d00      	cmp	r5, #0
 800ecd8:	bfa2      	ittt	ge
 800ecda:	6821      	ldrge	r1, [r4, #0]
 800ecdc:	f021 0104 	bicge.w	r1, r1, #4
 800ece0:	6021      	strge	r1, [r4, #0]
 800ece2:	b90e      	cbnz	r6, 800ece8 <_printf_i+0x114>
 800ece4:	2d00      	cmp	r5, #0
 800ece6:	d04b      	beq.n	800ed80 <_printf_i+0x1ac>
 800ece8:	4615      	mov	r5, r2
 800ecea:	fbb6 f1f3 	udiv	r1, r6, r3
 800ecee:	fb03 6711 	mls	r7, r3, r1, r6
 800ecf2:	5dc7      	ldrb	r7, [r0, r7]
 800ecf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ecf8:	4637      	mov	r7, r6
 800ecfa:	42bb      	cmp	r3, r7
 800ecfc:	460e      	mov	r6, r1
 800ecfe:	d9f4      	bls.n	800ecea <_printf_i+0x116>
 800ed00:	2b08      	cmp	r3, #8
 800ed02:	d10b      	bne.n	800ed1c <_printf_i+0x148>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	07de      	lsls	r6, r3, #31
 800ed08:	d508      	bpl.n	800ed1c <_printf_i+0x148>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	6861      	ldr	r1, [r4, #4]
 800ed0e:	4299      	cmp	r1, r3
 800ed10:	bfde      	ittt	le
 800ed12:	2330      	movle	r3, #48	; 0x30
 800ed14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed1c:	1b52      	subs	r2, r2, r5
 800ed1e:	6122      	str	r2, [r4, #16]
 800ed20:	f8cd a000 	str.w	sl, [sp]
 800ed24:	464b      	mov	r3, r9
 800ed26:	aa03      	add	r2, sp, #12
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f7ff fee4 	bl	800eaf8 <_printf_common>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d14a      	bne.n	800edca <_printf_i+0x1f6>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	b004      	add	sp, #16
 800ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	f043 0320 	orr.w	r3, r3, #32
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	4833      	ldr	r0, [pc, #204]	; (800ee14 <_printf_i+0x240>)
 800ed48:	2778      	movs	r7, #120	; 0x78
 800ed4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	6829      	ldr	r1, [r5, #0]
 800ed52:	061f      	lsls	r7, r3, #24
 800ed54:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed58:	d402      	bmi.n	800ed60 <_printf_i+0x18c>
 800ed5a:	065f      	lsls	r7, r3, #25
 800ed5c:	bf48      	it	mi
 800ed5e:	b2b6      	uxthmi	r6, r6
 800ed60:	07df      	lsls	r7, r3, #31
 800ed62:	bf48      	it	mi
 800ed64:	f043 0320 	orrmi.w	r3, r3, #32
 800ed68:	6029      	str	r1, [r5, #0]
 800ed6a:	bf48      	it	mi
 800ed6c:	6023      	strmi	r3, [r4, #0]
 800ed6e:	b91e      	cbnz	r6, 800ed78 <_printf_i+0x1a4>
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	f023 0320 	bic.w	r3, r3, #32
 800ed76:	6023      	str	r3, [r4, #0]
 800ed78:	2310      	movs	r3, #16
 800ed7a:	e7a7      	b.n	800eccc <_printf_i+0xf8>
 800ed7c:	4824      	ldr	r0, [pc, #144]	; (800ee10 <_printf_i+0x23c>)
 800ed7e:	e7e4      	b.n	800ed4a <_printf_i+0x176>
 800ed80:	4615      	mov	r5, r2
 800ed82:	e7bd      	b.n	800ed00 <_printf_i+0x12c>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	6826      	ldr	r6, [r4, #0]
 800ed88:	6961      	ldr	r1, [r4, #20]
 800ed8a:	1d18      	adds	r0, r3, #4
 800ed8c:	6028      	str	r0, [r5, #0]
 800ed8e:	0635      	lsls	r5, r6, #24
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	d501      	bpl.n	800ed98 <_printf_i+0x1c4>
 800ed94:	6019      	str	r1, [r3, #0]
 800ed96:	e002      	b.n	800ed9e <_printf_i+0x1ca>
 800ed98:	0670      	lsls	r0, r6, #25
 800ed9a:	d5fb      	bpl.n	800ed94 <_printf_i+0x1c0>
 800ed9c:	8019      	strh	r1, [r3, #0]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	4615      	mov	r5, r2
 800eda4:	e7bc      	b.n	800ed20 <_printf_i+0x14c>
 800eda6:	682b      	ldr	r3, [r5, #0]
 800eda8:	1d1a      	adds	r2, r3, #4
 800edaa:	602a      	str	r2, [r5, #0]
 800edac:	681d      	ldr	r5, [r3, #0]
 800edae:	6862      	ldr	r2, [r4, #4]
 800edb0:	2100      	movs	r1, #0
 800edb2:	4628      	mov	r0, r5
 800edb4:	f7f1 fa0c 	bl	80001d0 <memchr>
 800edb8:	b108      	cbz	r0, 800edbe <_printf_i+0x1ea>
 800edba:	1b40      	subs	r0, r0, r5
 800edbc:	6060      	str	r0, [r4, #4]
 800edbe:	6863      	ldr	r3, [r4, #4]
 800edc0:	6123      	str	r3, [r4, #16]
 800edc2:	2300      	movs	r3, #0
 800edc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edc8:	e7aa      	b.n	800ed20 <_printf_i+0x14c>
 800edca:	6923      	ldr	r3, [r4, #16]
 800edcc:	462a      	mov	r2, r5
 800edce:	4649      	mov	r1, r9
 800edd0:	4640      	mov	r0, r8
 800edd2:	47d0      	blx	sl
 800edd4:	3001      	adds	r0, #1
 800edd6:	d0ad      	beq.n	800ed34 <_printf_i+0x160>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	079b      	lsls	r3, r3, #30
 800eddc:	d413      	bmi.n	800ee06 <_printf_i+0x232>
 800edde:	68e0      	ldr	r0, [r4, #12]
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	4298      	cmp	r0, r3
 800ede4:	bfb8      	it	lt
 800ede6:	4618      	movlt	r0, r3
 800ede8:	e7a6      	b.n	800ed38 <_printf_i+0x164>
 800edea:	2301      	movs	r3, #1
 800edec:	4632      	mov	r2, r6
 800edee:	4649      	mov	r1, r9
 800edf0:	4640      	mov	r0, r8
 800edf2:	47d0      	blx	sl
 800edf4:	3001      	adds	r0, #1
 800edf6:	d09d      	beq.n	800ed34 <_printf_i+0x160>
 800edf8:	3501      	adds	r5, #1
 800edfa:	68e3      	ldr	r3, [r4, #12]
 800edfc:	9903      	ldr	r1, [sp, #12]
 800edfe:	1a5b      	subs	r3, r3, r1
 800ee00:	42ab      	cmp	r3, r5
 800ee02:	dcf2      	bgt.n	800edea <_printf_i+0x216>
 800ee04:	e7eb      	b.n	800edde <_printf_i+0x20a>
 800ee06:	2500      	movs	r5, #0
 800ee08:	f104 0619 	add.w	r6, r4, #25
 800ee0c:	e7f5      	b.n	800edfa <_printf_i+0x226>
 800ee0e:	bf00      	nop
 800ee10:	08013506 	.word	0x08013506
 800ee14:	08013517 	.word	0x08013517

0800ee18 <std>:
 800ee18:	2300      	movs	r3, #0
 800ee1a:	b510      	push	{r4, lr}
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee26:	6083      	str	r3, [r0, #8]
 800ee28:	8181      	strh	r1, [r0, #12]
 800ee2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee2c:	81c2      	strh	r2, [r0, #14]
 800ee2e:	6183      	str	r3, [r0, #24]
 800ee30:	4619      	mov	r1, r3
 800ee32:	2208      	movs	r2, #8
 800ee34:	305c      	adds	r0, #92	; 0x5c
 800ee36:	f000 fa31 	bl	800f29c <memset>
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <std+0x58>)
 800ee3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <std+0x5c>)
 800ee40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee42:	4b0d      	ldr	r3, [pc, #52]	; (800ee78 <std+0x60>)
 800ee44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <std+0x64>)
 800ee48:	6323      	str	r3, [r4, #48]	; 0x30
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	; (800ee80 <std+0x68>)
 800ee4c:	6224      	str	r4, [r4, #32]
 800ee4e:	429c      	cmp	r4, r3
 800ee50:	d006      	beq.n	800ee60 <std+0x48>
 800ee52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ee56:	4294      	cmp	r4, r2
 800ee58:	d002      	beq.n	800ee60 <std+0x48>
 800ee5a:	33d0      	adds	r3, #208	; 0xd0
 800ee5c:	429c      	cmp	r4, r3
 800ee5e:	d105      	bne.n	800ee6c <std+0x54>
 800ee60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee68:	f000 ba94 	b.w	800f394 <__retarget_lock_init_recursive>
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	bf00      	nop
 800ee70:	0800f0b9 	.word	0x0800f0b9
 800ee74:	0800f0db 	.word	0x0800f0db
 800ee78:	0800f113 	.word	0x0800f113
 800ee7c:	0800f137 	.word	0x0800f137
 800ee80:	20003da0 	.word	0x20003da0

0800ee84 <stdio_exit_handler>:
 800ee84:	4a02      	ldr	r2, [pc, #8]	; (800ee90 <stdio_exit_handler+0xc>)
 800ee86:	4903      	ldr	r1, [pc, #12]	; (800ee94 <stdio_exit_handler+0x10>)
 800ee88:	4803      	ldr	r0, [pc, #12]	; (800ee98 <stdio_exit_handler+0x14>)
 800ee8a:	f000 b869 	b.w	800ef60 <_fwalk_sglue>
 800ee8e:	bf00      	nop
 800ee90:	20000028 	.word	0x20000028
 800ee94:	08010fe9 	.word	0x08010fe9
 800ee98:	20000034 	.word	0x20000034

0800ee9c <cleanup_stdio>:
 800ee9c:	6841      	ldr	r1, [r0, #4]
 800ee9e:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <cleanup_stdio+0x34>)
 800eea0:	4299      	cmp	r1, r3
 800eea2:	b510      	push	{r4, lr}
 800eea4:	4604      	mov	r4, r0
 800eea6:	d001      	beq.n	800eeac <cleanup_stdio+0x10>
 800eea8:	f002 f89e 	bl	8010fe8 <_fflush_r>
 800eeac:	68a1      	ldr	r1, [r4, #8]
 800eeae:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <cleanup_stdio+0x38>)
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <cleanup_stdio+0x1e>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f002 f897 	bl	8010fe8 <_fflush_r>
 800eeba:	68e1      	ldr	r1, [r4, #12]
 800eebc:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <cleanup_stdio+0x3c>)
 800eebe:	4299      	cmp	r1, r3
 800eec0:	d004      	beq.n	800eecc <cleanup_stdio+0x30>
 800eec2:	4620      	mov	r0, r4
 800eec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eec8:	f002 b88e 	b.w	8010fe8 <_fflush_r>
 800eecc:	bd10      	pop	{r4, pc}
 800eece:	bf00      	nop
 800eed0:	20003da0 	.word	0x20003da0
 800eed4:	20003e08 	.word	0x20003e08
 800eed8:	20003e70 	.word	0x20003e70

0800eedc <global_stdio_init.part.0>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4b0b      	ldr	r3, [pc, #44]	; (800ef0c <global_stdio_init.part.0+0x30>)
 800eee0:	4c0b      	ldr	r4, [pc, #44]	; (800ef10 <global_stdio_init.part.0+0x34>)
 800eee2:	4a0c      	ldr	r2, [pc, #48]	; (800ef14 <global_stdio_init.part.0+0x38>)
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	4620      	mov	r0, r4
 800eee8:	2200      	movs	r2, #0
 800eeea:	2104      	movs	r1, #4
 800eeec:	f7ff ff94 	bl	800ee18 <std>
 800eef0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eef4:	2201      	movs	r2, #1
 800eef6:	2109      	movs	r1, #9
 800eef8:	f7ff ff8e 	bl	800ee18 <std>
 800eefc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ef00:	2202      	movs	r2, #2
 800ef02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef06:	2112      	movs	r1, #18
 800ef08:	f7ff bf86 	b.w	800ee18 <std>
 800ef0c:	20003ed8 	.word	0x20003ed8
 800ef10:	20003da0 	.word	0x20003da0
 800ef14:	0800ee85 	.word	0x0800ee85

0800ef18 <__sfp_lock_acquire>:
 800ef18:	4801      	ldr	r0, [pc, #4]	; (800ef20 <__sfp_lock_acquire+0x8>)
 800ef1a:	f000 ba3c 	b.w	800f396 <__retarget_lock_acquire_recursive>
 800ef1e:	bf00      	nop
 800ef20:	20003ee1 	.word	0x20003ee1

0800ef24 <__sfp_lock_release>:
 800ef24:	4801      	ldr	r0, [pc, #4]	; (800ef2c <__sfp_lock_release+0x8>)
 800ef26:	f000 ba37 	b.w	800f398 <__retarget_lock_release_recursive>
 800ef2a:	bf00      	nop
 800ef2c:	20003ee1 	.word	0x20003ee1

0800ef30 <__sinit>:
 800ef30:	b510      	push	{r4, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	f7ff fff0 	bl	800ef18 <__sfp_lock_acquire>
 800ef38:	6a23      	ldr	r3, [r4, #32]
 800ef3a:	b11b      	cbz	r3, 800ef44 <__sinit+0x14>
 800ef3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef40:	f7ff bff0 	b.w	800ef24 <__sfp_lock_release>
 800ef44:	4b04      	ldr	r3, [pc, #16]	; (800ef58 <__sinit+0x28>)
 800ef46:	6223      	str	r3, [r4, #32]
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <__sinit+0x2c>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1f5      	bne.n	800ef3c <__sinit+0xc>
 800ef50:	f7ff ffc4 	bl	800eedc <global_stdio_init.part.0>
 800ef54:	e7f2      	b.n	800ef3c <__sinit+0xc>
 800ef56:	bf00      	nop
 800ef58:	0800ee9d 	.word	0x0800ee9d
 800ef5c:	20003ed8 	.word	0x20003ed8

0800ef60 <_fwalk_sglue>:
 800ef60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef64:	4607      	mov	r7, r0
 800ef66:	4688      	mov	r8, r1
 800ef68:	4614      	mov	r4, r2
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef70:	f1b9 0901 	subs.w	r9, r9, #1
 800ef74:	d505      	bpl.n	800ef82 <_fwalk_sglue+0x22>
 800ef76:	6824      	ldr	r4, [r4, #0]
 800ef78:	2c00      	cmp	r4, #0
 800ef7a:	d1f7      	bne.n	800ef6c <_fwalk_sglue+0xc>
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef82:	89ab      	ldrh	r3, [r5, #12]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d907      	bls.n	800ef98 <_fwalk_sglue+0x38>
 800ef88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	d003      	beq.n	800ef98 <_fwalk_sglue+0x38>
 800ef90:	4629      	mov	r1, r5
 800ef92:	4638      	mov	r0, r7
 800ef94:	47c0      	blx	r8
 800ef96:	4306      	orrs	r6, r0
 800ef98:	3568      	adds	r5, #104	; 0x68
 800ef9a:	e7e9      	b.n	800ef70 <_fwalk_sglue+0x10>

0800ef9c <iprintf>:
 800ef9c:	b40f      	push	{r0, r1, r2, r3}
 800ef9e:	b507      	push	{r0, r1, r2, lr}
 800efa0:	4906      	ldr	r1, [pc, #24]	; (800efbc <iprintf+0x20>)
 800efa2:	ab04      	add	r3, sp, #16
 800efa4:	6808      	ldr	r0, [r1, #0]
 800efa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800efaa:	6881      	ldr	r1, [r0, #8]
 800efac:	9301      	str	r3, [sp, #4]
 800efae:	f001 fe7b 	bl	8010ca8 <_vfiprintf_r>
 800efb2:	b003      	add	sp, #12
 800efb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb8:	b004      	add	sp, #16
 800efba:	4770      	bx	lr
 800efbc:	20000080 	.word	0x20000080

0800efc0 <_puts_r>:
 800efc0:	6a03      	ldr	r3, [r0, #32]
 800efc2:	b570      	push	{r4, r5, r6, lr}
 800efc4:	6884      	ldr	r4, [r0, #8]
 800efc6:	4605      	mov	r5, r0
 800efc8:	460e      	mov	r6, r1
 800efca:	b90b      	cbnz	r3, 800efd0 <_puts_r+0x10>
 800efcc:	f7ff ffb0 	bl	800ef30 <__sinit>
 800efd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efd2:	07db      	lsls	r3, r3, #31
 800efd4:	d405      	bmi.n	800efe2 <_puts_r+0x22>
 800efd6:	89a3      	ldrh	r3, [r4, #12]
 800efd8:	0598      	lsls	r0, r3, #22
 800efda:	d402      	bmi.n	800efe2 <_puts_r+0x22>
 800efdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efde:	f000 f9da 	bl	800f396 <__retarget_lock_acquire_recursive>
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	0719      	lsls	r1, r3, #28
 800efe6:	d513      	bpl.n	800f010 <_puts_r+0x50>
 800efe8:	6923      	ldr	r3, [r4, #16]
 800efea:	b18b      	cbz	r3, 800f010 <_puts_r+0x50>
 800efec:	3e01      	subs	r6, #1
 800efee:	68a3      	ldr	r3, [r4, #8]
 800eff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eff4:	3b01      	subs	r3, #1
 800eff6:	60a3      	str	r3, [r4, #8]
 800eff8:	b9e9      	cbnz	r1, 800f036 <_puts_r+0x76>
 800effa:	2b00      	cmp	r3, #0
 800effc:	da2e      	bge.n	800f05c <_puts_r+0x9c>
 800effe:	4622      	mov	r2, r4
 800f000:	210a      	movs	r1, #10
 800f002:	4628      	mov	r0, r5
 800f004:	f000 f89b 	bl	800f13e <__swbuf_r>
 800f008:	3001      	adds	r0, #1
 800f00a:	d007      	beq.n	800f01c <_puts_r+0x5c>
 800f00c:	250a      	movs	r5, #10
 800f00e:	e007      	b.n	800f020 <_puts_r+0x60>
 800f010:	4621      	mov	r1, r4
 800f012:	4628      	mov	r0, r5
 800f014:	f000 f8d0 	bl	800f1b8 <__swsetup_r>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d0e7      	beq.n	800efec <_puts_r+0x2c>
 800f01c:	f04f 35ff 	mov.w	r5, #4294967295
 800f020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f022:	07da      	lsls	r2, r3, #31
 800f024:	d405      	bmi.n	800f032 <_puts_r+0x72>
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	059b      	lsls	r3, r3, #22
 800f02a:	d402      	bmi.n	800f032 <_puts_r+0x72>
 800f02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f02e:	f000 f9b3 	bl	800f398 <__retarget_lock_release_recursive>
 800f032:	4628      	mov	r0, r5
 800f034:	bd70      	pop	{r4, r5, r6, pc}
 800f036:	2b00      	cmp	r3, #0
 800f038:	da04      	bge.n	800f044 <_puts_r+0x84>
 800f03a:	69a2      	ldr	r2, [r4, #24]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	dc06      	bgt.n	800f04e <_puts_r+0x8e>
 800f040:	290a      	cmp	r1, #10
 800f042:	d004      	beq.n	800f04e <_puts_r+0x8e>
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	6022      	str	r2, [r4, #0]
 800f04a:	7019      	strb	r1, [r3, #0]
 800f04c:	e7cf      	b.n	800efee <_puts_r+0x2e>
 800f04e:	4622      	mov	r2, r4
 800f050:	4628      	mov	r0, r5
 800f052:	f000 f874 	bl	800f13e <__swbuf_r>
 800f056:	3001      	adds	r0, #1
 800f058:	d1c9      	bne.n	800efee <_puts_r+0x2e>
 800f05a:	e7df      	b.n	800f01c <_puts_r+0x5c>
 800f05c:	6823      	ldr	r3, [r4, #0]
 800f05e:	250a      	movs	r5, #10
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	6022      	str	r2, [r4, #0]
 800f064:	701d      	strb	r5, [r3, #0]
 800f066:	e7db      	b.n	800f020 <_puts_r+0x60>

0800f068 <puts>:
 800f068:	4b02      	ldr	r3, [pc, #8]	; (800f074 <puts+0xc>)
 800f06a:	4601      	mov	r1, r0
 800f06c:	6818      	ldr	r0, [r3, #0]
 800f06e:	f7ff bfa7 	b.w	800efc0 <_puts_r>
 800f072:	bf00      	nop
 800f074:	20000080 	.word	0x20000080

0800f078 <siprintf>:
 800f078:	b40e      	push	{r1, r2, r3}
 800f07a:	b500      	push	{lr}
 800f07c:	b09c      	sub	sp, #112	; 0x70
 800f07e:	ab1d      	add	r3, sp, #116	; 0x74
 800f080:	9002      	str	r0, [sp, #8]
 800f082:	9006      	str	r0, [sp, #24]
 800f084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f088:	4809      	ldr	r0, [pc, #36]	; (800f0b0 <siprintf+0x38>)
 800f08a:	9107      	str	r1, [sp, #28]
 800f08c:	9104      	str	r1, [sp, #16]
 800f08e:	4909      	ldr	r1, [pc, #36]	; (800f0b4 <siprintf+0x3c>)
 800f090:	f853 2b04 	ldr.w	r2, [r3], #4
 800f094:	9105      	str	r1, [sp, #20]
 800f096:	6800      	ldr	r0, [r0, #0]
 800f098:	9301      	str	r3, [sp, #4]
 800f09a:	a902      	add	r1, sp, #8
 800f09c:	f001 fcdc 	bl	8010a58 <_svfiprintf_r>
 800f0a0:	9b02      	ldr	r3, [sp, #8]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	b01c      	add	sp, #112	; 0x70
 800f0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ac:	b003      	add	sp, #12
 800f0ae:	4770      	bx	lr
 800f0b0:	20000080 	.word	0x20000080
 800f0b4:	ffff0208 	.word	0xffff0208

0800f0b8 <__sread>:
 800f0b8:	b510      	push	{r4, lr}
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c0:	f000 f91a 	bl	800f2f8 <_read_r>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	bfab      	itete	ge
 800f0c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f0cc:	181b      	addge	r3, r3, r0
 800f0ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0d2:	bfac      	ite	ge
 800f0d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0d6:	81a3      	strhlt	r3, [r4, #12]
 800f0d8:	bd10      	pop	{r4, pc}

0800f0da <__swrite>:
 800f0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0de:	461f      	mov	r7, r3
 800f0e0:	898b      	ldrh	r3, [r1, #12]
 800f0e2:	05db      	lsls	r3, r3, #23
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	4616      	mov	r6, r2
 800f0ea:	d505      	bpl.n	800f0f8 <__swrite+0x1e>
 800f0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f0:	2302      	movs	r3, #2
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f000 f8ee 	bl	800f2d4 <_lseek_r>
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f102:	81a3      	strh	r3, [r4, #12]
 800f104:	4632      	mov	r2, r6
 800f106:	463b      	mov	r3, r7
 800f108:	4628      	mov	r0, r5
 800f10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f10e:	f000 b905 	b.w	800f31c <_write_r>

0800f112 <__sseek>:
 800f112:	b510      	push	{r4, lr}
 800f114:	460c      	mov	r4, r1
 800f116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11a:	f000 f8db 	bl	800f2d4 <_lseek_r>
 800f11e:	1c43      	adds	r3, r0, #1
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	bf15      	itete	ne
 800f124:	6560      	strne	r0, [r4, #84]	; 0x54
 800f126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f12a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f12e:	81a3      	strheq	r3, [r4, #12]
 800f130:	bf18      	it	ne
 800f132:	81a3      	strhne	r3, [r4, #12]
 800f134:	bd10      	pop	{r4, pc}

0800f136 <__sclose>:
 800f136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f13a:	f000 b8bb 	b.w	800f2b4 <_close_r>

0800f13e <__swbuf_r>:
 800f13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f140:	460e      	mov	r6, r1
 800f142:	4614      	mov	r4, r2
 800f144:	4605      	mov	r5, r0
 800f146:	b118      	cbz	r0, 800f150 <__swbuf_r+0x12>
 800f148:	6a03      	ldr	r3, [r0, #32]
 800f14a:	b90b      	cbnz	r3, 800f150 <__swbuf_r+0x12>
 800f14c:	f7ff fef0 	bl	800ef30 <__sinit>
 800f150:	69a3      	ldr	r3, [r4, #24]
 800f152:	60a3      	str	r3, [r4, #8]
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	071a      	lsls	r2, r3, #28
 800f158:	d525      	bpl.n	800f1a6 <__swbuf_r+0x68>
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	b31b      	cbz	r3, 800f1a6 <__swbuf_r+0x68>
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	6922      	ldr	r2, [r4, #16]
 800f162:	1a98      	subs	r0, r3, r2
 800f164:	6963      	ldr	r3, [r4, #20]
 800f166:	b2f6      	uxtb	r6, r6
 800f168:	4283      	cmp	r3, r0
 800f16a:	4637      	mov	r7, r6
 800f16c:	dc04      	bgt.n	800f178 <__swbuf_r+0x3a>
 800f16e:	4621      	mov	r1, r4
 800f170:	4628      	mov	r0, r5
 800f172:	f001 ff39 	bl	8010fe8 <_fflush_r>
 800f176:	b9e0      	cbnz	r0, 800f1b2 <__swbuf_r+0x74>
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	3b01      	subs	r3, #1
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	6823      	ldr	r3, [r4, #0]
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	6022      	str	r2, [r4, #0]
 800f184:	701e      	strb	r6, [r3, #0]
 800f186:	6962      	ldr	r2, [r4, #20]
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d004      	beq.n	800f198 <__swbuf_r+0x5a>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	07db      	lsls	r3, r3, #31
 800f192:	d506      	bpl.n	800f1a2 <__swbuf_r+0x64>
 800f194:	2e0a      	cmp	r6, #10
 800f196:	d104      	bne.n	800f1a2 <__swbuf_r+0x64>
 800f198:	4621      	mov	r1, r4
 800f19a:	4628      	mov	r0, r5
 800f19c:	f001 ff24 	bl	8010fe8 <_fflush_r>
 800f1a0:	b938      	cbnz	r0, 800f1b2 <__swbuf_r+0x74>
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f000 f805 	bl	800f1b8 <__swsetup_r>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d0d5      	beq.n	800f15e <__swbuf_r+0x20>
 800f1b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f1b6:	e7f4      	b.n	800f1a2 <__swbuf_r+0x64>

0800f1b8 <__swsetup_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4b2a      	ldr	r3, [pc, #168]	; (800f264 <__swsetup_r+0xac>)
 800f1bc:	4605      	mov	r5, r0
 800f1be:	6818      	ldr	r0, [r3, #0]
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	b118      	cbz	r0, 800f1cc <__swsetup_r+0x14>
 800f1c4:	6a03      	ldr	r3, [r0, #32]
 800f1c6:	b90b      	cbnz	r3, 800f1cc <__swsetup_r+0x14>
 800f1c8:	f7ff feb2 	bl	800ef30 <__sinit>
 800f1cc:	89a3      	ldrh	r3, [r4, #12]
 800f1ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1d2:	0718      	lsls	r0, r3, #28
 800f1d4:	d422      	bmi.n	800f21c <__swsetup_r+0x64>
 800f1d6:	06d9      	lsls	r1, r3, #27
 800f1d8:	d407      	bmi.n	800f1ea <__swsetup_r+0x32>
 800f1da:	2309      	movs	r3, #9
 800f1dc:	602b      	str	r3, [r5, #0]
 800f1de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1e2:	81a3      	strh	r3, [r4, #12]
 800f1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e8:	e034      	b.n	800f254 <__swsetup_r+0x9c>
 800f1ea:	0758      	lsls	r0, r3, #29
 800f1ec:	d512      	bpl.n	800f214 <__swsetup_r+0x5c>
 800f1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1f0:	b141      	cbz	r1, 800f204 <__swsetup_r+0x4c>
 800f1f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f6:	4299      	cmp	r1, r3
 800f1f8:	d002      	beq.n	800f200 <__swsetup_r+0x48>
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f000 ff56 	bl	80100ac <_free_r>
 800f200:	2300      	movs	r3, #0
 800f202:	6363      	str	r3, [r4, #52]	; 0x34
 800f204:	89a3      	ldrh	r3, [r4, #12]
 800f206:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f20a:	81a3      	strh	r3, [r4, #12]
 800f20c:	2300      	movs	r3, #0
 800f20e:	6063      	str	r3, [r4, #4]
 800f210:	6923      	ldr	r3, [r4, #16]
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	f043 0308 	orr.w	r3, r3, #8
 800f21a:	81a3      	strh	r3, [r4, #12]
 800f21c:	6923      	ldr	r3, [r4, #16]
 800f21e:	b94b      	cbnz	r3, 800f234 <__swsetup_r+0x7c>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f22a:	d003      	beq.n	800f234 <__swsetup_r+0x7c>
 800f22c:	4621      	mov	r1, r4
 800f22e:	4628      	mov	r0, r5
 800f230:	f001 ff28 	bl	8011084 <__smakebuf_r>
 800f234:	89a0      	ldrh	r0, [r4, #12]
 800f236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f23a:	f010 0301 	ands.w	r3, r0, #1
 800f23e:	d00a      	beq.n	800f256 <__swsetup_r+0x9e>
 800f240:	2300      	movs	r3, #0
 800f242:	60a3      	str	r3, [r4, #8]
 800f244:	6963      	ldr	r3, [r4, #20]
 800f246:	425b      	negs	r3, r3
 800f248:	61a3      	str	r3, [r4, #24]
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	b943      	cbnz	r3, 800f260 <__swsetup_r+0xa8>
 800f24e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f252:	d1c4      	bne.n	800f1de <__swsetup_r+0x26>
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	0781      	lsls	r1, r0, #30
 800f258:	bf58      	it	pl
 800f25a:	6963      	ldrpl	r3, [r4, #20]
 800f25c:	60a3      	str	r3, [r4, #8]
 800f25e:	e7f4      	b.n	800f24a <__swsetup_r+0x92>
 800f260:	2000      	movs	r0, #0
 800f262:	e7f7      	b.n	800f254 <__swsetup_r+0x9c>
 800f264:	20000080 	.word	0x20000080

0800f268 <memmove>:
 800f268:	4288      	cmp	r0, r1
 800f26a:	b510      	push	{r4, lr}
 800f26c:	eb01 0402 	add.w	r4, r1, r2
 800f270:	d902      	bls.n	800f278 <memmove+0x10>
 800f272:	4284      	cmp	r4, r0
 800f274:	4623      	mov	r3, r4
 800f276:	d807      	bhi.n	800f288 <memmove+0x20>
 800f278:	1e43      	subs	r3, r0, #1
 800f27a:	42a1      	cmp	r1, r4
 800f27c:	d008      	beq.n	800f290 <memmove+0x28>
 800f27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f286:	e7f8      	b.n	800f27a <memmove+0x12>
 800f288:	4402      	add	r2, r0
 800f28a:	4601      	mov	r1, r0
 800f28c:	428a      	cmp	r2, r1
 800f28e:	d100      	bne.n	800f292 <memmove+0x2a>
 800f290:	bd10      	pop	{r4, pc}
 800f292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f29a:	e7f7      	b.n	800f28c <memmove+0x24>

0800f29c <memset>:
 800f29c:	4402      	add	r2, r0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d100      	bne.n	800f2a6 <memset+0xa>
 800f2a4:	4770      	bx	lr
 800f2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800f2aa:	e7f9      	b.n	800f2a0 <memset+0x4>

0800f2ac <_localeconv_r>:
 800f2ac:	4800      	ldr	r0, [pc, #0]	; (800f2b0 <_localeconv_r+0x4>)
 800f2ae:	4770      	bx	lr
 800f2b0:	20000174 	.word	0x20000174

0800f2b4 <_close_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d06      	ldr	r5, [pc, #24]	; (800f2d0 <_close_r+0x1c>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	602b      	str	r3, [r5, #0]
 800f2c0:	f7f3 fd7b 	bl	8002dba <_close>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_close_r+0x1a>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_close_r+0x1a>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	20003edc 	.word	0x20003edc

0800f2d4 <_lseek_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4d07      	ldr	r5, [pc, #28]	; (800f2f4 <_lseek_r+0x20>)
 800f2d8:	4604      	mov	r4, r0
 800f2da:	4608      	mov	r0, r1
 800f2dc:	4611      	mov	r1, r2
 800f2de:	2200      	movs	r2, #0
 800f2e0:	602a      	str	r2, [r5, #0]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f7f3 fd90 	bl	8002e08 <_lseek>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_lseek_r+0x1e>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_lseek_r+0x1e>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	20003edc 	.word	0x20003edc

0800f2f8 <_read_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d07      	ldr	r5, [pc, #28]	; (800f318 <_read_r+0x20>)
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	4608      	mov	r0, r1
 800f300:	4611      	mov	r1, r2
 800f302:	2200      	movs	r2, #0
 800f304:	602a      	str	r2, [r5, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	f7f3 fd3a 	bl	8002d80 <_read>
 800f30c:	1c43      	adds	r3, r0, #1
 800f30e:	d102      	bne.n	800f316 <_read_r+0x1e>
 800f310:	682b      	ldr	r3, [r5, #0]
 800f312:	b103      	cbz	r3, 800f316 <_read_r+0x1e>
 800f314:	6023      	str	r3, [r4, #0]
 800f316:	bd38      	pop	{r3, r4, r5, pc}
 800f318:	20003edc 	.word	0x20003edc

0800f31c <_write_r>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	4d07      	ldr	r5, [pc, #28]	; (800f33c <_write_r+0x20>)
 800f320:	4604      	mov	r4, r0
 800f322:	4608      	mov	r0, r1
 800f324:	4611      	mov	r1, r2
 800f326:	2200      	movs	r2, #0
 800f328:	602a      	str	r2, [r5, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	f7f3 f862 	bl	80023f4 <_write>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d102      	bne.n	800f33a <_write_r+0x1e>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	b103      	cbz	r3, 800f33a <_write_r+0x1e>
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	bd38      	pop	{r3, r4, r5, pc}
 800f33c:	20003edc 	.word	0x20003edc

0800f340 <__errno>:
 800f340:	4b01      	ldr	r3, [pc, #4]	; (800f348 <__errno+0x8>)
 800f342:	6818      	ldr	r0, [r3, #0]
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	20000080 	.word	0x20000080

0800f34c <__libc_init_array>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	4d0d      	ldr	r5, [pc, #52]	; (800f384 <__libc_init_array+0x38>)
 800f350:	4c0d      	ldr	r4, [pc, #52]	; (800f388 <__libc_init_array+0x3c>)
 800f352:	1b64      	subs	r4, r4, r5
 800f354:	10a4      	asrs	r4, r4, #2
 800f356:	2600      	movs	r6, #0
 800f358:	42a6      	cmp	r6, r4
 800f35a:	d109      	bne.n	800f370 <__libc_init_array+0x24>
 800f35c:	4d0b      	ldr	r5, [pc, #44]	; (800f38c <__libc_init_array+0x40>)
 800f35e:	4c0c      	ldr	r4, [pc, #48]	; (800f390 <__libc_init_array+0x44>)
 800f360:	f003 f922 	bl	80125a8 <_init>
 800f364:	1b64      	subs	r4, r4, r5
 800f366:	10a4      	asrs	r4, r4, #2
 800f368:	2600      	movs	r6, #0
 800f36a:	42a6      	cmp	r6, r4
 800f36c:	d105      	bne.n	800f37a <__libc_init_array+0x2e>
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	f855 3b04 	ldr.w	r3, [r5], #4
 800f374:	4798      	blx	r3
 800f376:	3601      	adds	r6, #1
 800f378:	e7ee      	b.n	800f358 <__libc_init_array+0xc>
 800f37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f37e:	4798      	blx	r3
 800f380:	3601      	adds	r6, #1
 800f382:	e7f2      	b.n	800f36a <__libc_init_array+0x1e>
 800f384:	080138a0 	.word	0x080138a0
 800f388:	080138a0 	.word	0x080138a0
 800f38c:	080138a0 	.word	0x080138a0
 800f390:	080138a4 	.word	0x080138a4

0800f394 <__retarget_lock_init_recursive>:
 800f394:	4770      	bx	lr

0800f396 <__retarget_lock_acquire_recursive>:
 800f396:	4770      	bx	lr

0800f398 <__retarget_lock_release_recursive>:
 800f398:	4770      	bx	lr

0800f39a <memcpy>:
 800f39a:	440a      	add	r2, r1
 800f39c:	4291      	cmp	r1, r2
 800f39e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3a2:	d100      	bne.n	800f3a6 <memcpy+0xc>
 800f3a4:	4770      	bx	lr
 800f3a6:	b510      	push	{r4, lr}
 800f3a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3b0:	4291      	cmp	r1, r2
 800f3b2:	d1f9      	bne.n	800f3a8 <memcpy+0xe>
 800f3b4:	bd10      	pop	{r4, pc}

0800f3b6 <quorem>:
 800f3b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	6903      	ldr	r3, [r0, #16]
 800f3bc:	690c      	ldr	r4, [r1, #16]
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	4607      	mov	r7, r0
 800f3c2:	db7e      	blt.n	800f4c2 <quorem+0x10c>
 800f3c4:	3c01      	subs	r4, #1
 800f3c6:	f101 0814 	add.w	r8, r1, #20
 800f3ca:	f100 0514 	add.w	r5, r0, #20
 800f3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f3e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f3e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f3ec:	d331      	bcc.n	800f452 <quorem+0x9c>
 800f3ee:	f04f 0e00 	mov.w	lr, #0
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	46ac      	mov	ip, r5
 800f3f6:	46f2      	mov	sl, lr
 800f3f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f3fc:	b293      	uxth	r3, r2
 800f3fe:	fb06 e303 	mla	r3, r6, r3, lr
 800f402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f406:	0c1a      	lsrs	r2, r3, #16
 800f408:	b29b      	uxth	r3, r3
 800f40a:	ebaa 0303 	sub.w	r3, sl, r3
 800f40e:	f8dc a000 	ldr.w	sl, [ip]
 800f412:	fa13 f38a 	uxtah	r3, r3, sl
 800f416:	fb06 220e 	mla	r2, r6, lr, r2
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	9b00      	ldr	r3, [sp, #0]
 800f41e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f422:	b292      	uxth	r2, r2
 800f424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f42c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f430:	4581      	cmp	r9, r0
 800f432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f436:	f84c 3b04 	str.w	r3, [ip], #4
 800f43a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f43e:	d2db      	bcs.n	800f3f8 <quorem+0x42>
 800f440:	f855 300b 	ldr.w	r3, [r5, fp]
 800f444:	b92b      	cbnz	r3, 800f452 <quorem+0x9c>
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	3b04      	subs	r3, #4
 800f44a:	429d      	cmp	r5, r3
 800f44c:	461a      	mov	r2, r3
 800f44e:	d32c      	bcc.n	800f4aa <quorem+0xf4>
 800f450:	613c      	str	r4, [r7, #16]
 800f452:	4638      	mov	r0, r7
 800f454:	f001 f9a6 	bl	80107a4 <__mcmp>
 800f458:	2800      	cmp	r0, #0
 800f45a:	db22      	blt.n	800f4a2 <quorem+0xec>
 800f45c:	3601      	adds	r6, #1
 800f45e:	4629      	mov	r1, r5
 800f460:	2000      	movs	r0, #0
 800f462:	f858 2b04 	ldr.w	r2, [r8], #4
 800f466:	f8d1 c000 	ldr.w	ip, [r1]
 800f46a:	b293      	uxth	r3, r2
 800f46c:	1ac3      	subs	r3, r0, r3
 800f46e:	0c12      	lsrs	r2, r2, #16
 800f470:	fa13 f38c 	uxtah	r3, r3, ip
 800f474:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f482:	45c1      	cmp	r9, r8
 800f484:	f841 3b04 	str.w	r3, [r1], #4
 800f488:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f48c:	d2e9      	bcs.n	800f462 <quorem+0xac>
 800f48e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f496:	b922      	cbnz	r2, 800f4a2 <quorem+0xec>
 800f498:	3b04      	subs	r3, #4
 800f49a:	429d      	cmp	r5, r3
 800f49c:	461a      	mov	r2, r3
 800f49e:	d30a      	bcc.n	800f4b6 <quorem+0x100>
 800f4a0:	613c      	str	r4, [r7, #16]
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	b003      	add	sp, #12
 800f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4aa:	6812      	ldr	r2, [r2, #0]
 800f4ac:	3b04      	subs	r3, #4
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	d1ce      	bne.n	800f450 <quorem+0x9a>
 800f4b2:	3c01      	subs	r4, #1
 800f4b4:	e7c9      	b.n	800f44a <quorem+0x94>
 800f4b6:	6812      	ldr	r2, [r2, #0]
 800f4b8:	3b04      	subs	r3, #4
 800f4ba:	2a00      	cmp	r2, #0
 800f4bc:	d1f0      	bne.n	800f4a0 <quorem+0xea>
 800f4be:	3c01      	subs	r4, #1
 800f4c0:	e7eb      	b.n	800f49a <quorem+0xe4>
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	e7ee      	b.n	800f4a4 <quorem+0xee>
	...

0800f4c8 <_dtoa_r>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	ed2d 8b04 	vpush	{d8-d9}
 800f4d0:	69c5      	ldr	r5, [r0, #28]
 800f4d2:	b093      	sub	sp, #76	; 0x4c
 800f4d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f4d8:	ec57 6b10 	vmov	r6, r7, d0
 800f4dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f4e0:	9107      	str	r1, [sp, #28]
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	920a      	str	r2, [sp, #40]	; 0x28
 800f4e6:	930d      	str	r3, [sp, #52]	; 0x34
 800f4e8:	b975      	cbnz	r5, 800f508 <_dtoa_r+0x40>
 800f4ea:	2010      	movs	r0, #16
 800f4ec:	f000 fe2a 	bl	8010144 <malloc>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	61e0      	str	r0, [r4, #28]
 800f4f4:	b920      	cbnz	r0, 800f500 <_dtoa_r+0x38>
 800f4f6:	4bae      	ldr	r3, [pc, #696]	; (800f7b0 <_dtoa_r+0x2e8>)
 800f4f8:	21ef      	movs	r1, #239	; 0xef
 800f4fa:	48ae      	ldr	r0, [pc, #696]	; (800f7b4 <_dtoa_r+0x2ec>)
 800f4fc:	f001 fe30 	bl	8011160 <__assert_func>
 800f500:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f504:	6005      	str	r5, [r0, #0]
 800f506:	60c5      	str	r5, [r0, #12]
 800f508:	69e3      	ldr	r3, [r4, #28]
 800f50a:	6819      	ldr	r1, [r3, #0]
 800f50c:	b151      	cbz	r1, 800f524 <_dtoa_r+0x5c>
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	604a      	str	r2, [r1, #4]
 800f512:	2301      	movs	r3, #1
 800f514:	4093      	lsls	r3, r2
 800f516:	608b      	str	r3, [r1, #8]
 800f518:	4620      	mov	r0, r4
 800f51a:	f000 ff07 	bl	801032c <_Bfree>
 800f51e:	69e3      	ldr	r3, [r4, #28]
 800f520:	2200      	movs	r2, #0
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	1e3b      	subs	r3, r7, #0
 800f526:	bfbb      	ittet	lt
 800f528:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f52c:	9303      	strlt	r3, [sp, #12]
 800f52e:	2300      	movge	r3, #0
 800f530:	2201      	movlt	r2, #1
 800f532:	bfac      	ite	ge
 800f534:	f8c8 3000 	strge.w	r3, [r8]
 800f538:	f8c8 2000 	strlt.w	r2, [r8]
 800f53c:	4b9e      	ldr	r3, [pc, #632]	; (800f7b8 <_dtoa_r+0x2f0>)
 800f53e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f542:	ea33 0308 	bics.w	r3, r3, r8
 800f546:	d11b      	bne.n	800f580 <_dtoa_r+0xb8>
 800f548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f54a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f554:	4333      	orrs	r3, r6
 800f556:	f000 8593 	beq.w	8010080 <_dtoa_r+0xbb8>
 800f55a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f55c:	b963      	cbnz	r3, 800f578 <_dtoa_r+0xb0>
 800f55e:	4b97      	ldr	r3, [pc, #604]	; (800f7bc <_dtoa_r+0x2f4>)
 800f560:	e027      	b.n	800f5b2 <_dtoa_r+0xea>
 800f562:	4b97      	ldr	r3, [pc, #604]	; (800f7c0 <_dtoa_r+0x2f8>)
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	3308      	adds	r3, #8
 800f568:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	9800      	ldr	r0, [sp, #0]
 800f56e:	b013      	add	sp, #76	; 0x4c
 800f570:	ecbd 8b04 	vpop	{d8-d9}
 800f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	4b90      	ldr	r3, [pc, #576]	; (800f7bc <_dtoa_r+0x2f4>)
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	3303      	adds	r3, #3
 800f57e:	e7f3      	b.n	800f568 <_dtoa_r+0xa0>
 800f580:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f584:	2200      	movs	r2, #0
 800f586:	ec51 0b17 	vmov	r0, r1, d7
 800f58a:	eeb0 8a47 	vmov.f32	s16, s14
 800f58e:	eef0 8a67 	vmov.f32	s17, s15
 800f592:	2300      	movs	r3, #0
 800f594:	f7f1 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800f598:	4681      	mov	r9, r0
 800f59a:	b160      	cbz	r0, 800f5b6 <_dtoa_r+0xee>
 800f59c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f59e:	2301      	movs	r3, #1
 800f5a0:	6013      	str	r3, [r2, #0]
 800f5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f000 8568 	beq.w	801007a <_dtoa_r+0xbb2>
 800f5aa:	4b86      	ldr	r3, [pc, #536]	; (800f7c4 <_dtoa_r+0x2fc>)
 800f5ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5ae:	6013      	str	r3, [r2, #0]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	e7da      	b.n	800f56c <_dtoa_r+0xa4>
 800f5b6:	aa10      	add	r2, sp, #64	; 0x40
 800f5b8:	a911      	add	r1, sp, #68	; 0x44
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	eeb0 0a48 	vmov.f32	s0, s16
 800f5c0:	eef0 0a68 	vmov.f32	s1, s17
 800f5c4:	f001 f994 	bl	80108f0 <__d2b>
 800f5c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f5cc:	4682      	mov	sl, r0
 800f5ce:	2d00      	cmp	r5, #0
 800f5d0:	d07f      	beq.n	800f6d2 <_dtoa_r+0x20a>
 800f5d2:	ee18 3a90 	vmov	r3, s17
 800f5d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f5de:	ec51 0b18 	vmov	r0, r1, d8
 800f5e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f5ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	4b75      	ldr	r3, [pc, #468]	; (800f7c8 <_dtoa_r+0x300>)
 800f5f4:	f7f0 fe48 	bl	8000288 <__aeabi_dsub>
 800f5f8:	a367      	add	r3, pc, #412	; (adr r3, 800f798 <_dtoa_r+0x2d0>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f7f0 fffb 	bl	80005f8 <__aeabi_dmul>
 800f602:	a367      	add	r3, pc, #412	; (adr r3, 800f7a0 <_dtoa_r+0x2d8>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f0 fe40 	bl	800028c <__adddf3>
 800f60c:	4606      	mov	r6, r0
 800f60e:	4628      	mov	r0, r5
 800f610:	460f      	mov	r7, r1
 800f612:	f7f0 ff87 	bl	8000524 <__aeabi_i2d>
 800f616:	a364      	add	r3, pc, #400	; (adr r3, 800f7a8 <_dtoa_r+0x2e0>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 ffec 	bl	80005f8 <__aeabi_dmul>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	4630      	mov	r0, r6
 800f626:	4639      	mov	r1, r7
 800f628:	f7f0 fe30 	bl	800028c <__adddf3>
 800f62c:	4606      	mov	r6, r0
 800f62e:	460f      	mov	r7, r1
 800f630:	f7f1 fa92 	bl	8000b58 <__aeabi_d2iz>
 800f634:	2200      	movs	r2, #0
 800f636:	4683      	mov	fp, r0
 800f638:	2300      	movs	r3, #0
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	f7f1 fa4d 	bl	8000adc <__aeabi_dcmplt>
 800f642:	b148      	cbz	r0, 800f658 <_dtoa_r+0x190>
 800f644:	4658      	mov	r0, fp
 800f646:	f7f0 ff6d 	bl	8000524 <__aeabi_i2d>
 800f64a:	4632      	mov	r2, r6
 800f64c:	463b      	mov	r3, r7
 800f64e:	f7f1 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f652:	b908      	cbnz	r0, 800f658 <_dtoa_r+0x190>
 800f654:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f658:	f1bb 0f16 	cmp.w	fp, #22
 800f65c:	d857      	bhi.n	800f70e <_dtoa_r+0x246>
 800f65e:	4b5b      	ldr	r3, [pc, #364]	; (800f7cc <_dtoa_r+0x304>)
 800f660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f668:	ec51 0b18 	vmov	r0, r1, d8
 800f66c:	f7f1 fa36 	bl	8000adc <__aeabi_dcmplt>
 800f670:	2800      	cmp	r0, #0
 800f672:	d04e      	beq.n	800f712 <_dtoa_r+0x24a>
 800f674:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f678:	2300      	movs	r3, #0
 800f67a:	930c      	str	r3, [sp, #48]	; 0x30
 800f67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f67e:	1b5b      	subs	r3, r3, r5
 800f680:	1e5a      	subs	r2, r3, #1
 800f682:	bf45      	ittet	mi
 800f684:	f1c3 0301 	rsbmi	r3, r3, #1
 800f688:	9305      	strmi	r3, [sp, #20]
 800f68a:	2300      	movpl	r3, #0
 800f68c:	2300      	movmi	r3, #0
 800f68e:	9206      	str	r2, [sp, #24]
 800f690:	bf54      	ite	pl
 800f692:	9305      	strpl	r3, [sp, #20]
 800f694:	9306      	strmi	r3, [sp, #24]
 800f696:	f1bb 0f00 	cmp.w	fp, #0
 800f69a:	db3c      	blt.n	800f716 <_dtoa_r+0x24e>
 800f69c:	9b06      	ldr	r3, [sp, #24]
 800f69e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f6a2:	445b      	add	r3, fp
 800f6a4:	9306      	str	r3, [sp, #24]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9308      	str	r3, [sp, #32]
 800f6aa:	9b07      	ldr	r3, [sp, #28]
 800f6ac:	2b09      	cmp	r3, #9
 800f6ae:	d868      	bhi.n	800f782 <_dtoa_r+0x2ba>
 800f6b0:	2b05      	cmp	r3, #5
 800f6b2:	bfc4      	itt	gt
 800f6b4:	3b04      	subgt	r3, #4
 800f6b6:	9307      	strgt	r3, [sp, #28]
 800f6b8:	9b07      	ldr	r3, [sp, #28]
 800f6ba:	f1a3 0302 	sub.w	r3, r3, #2
 800f6be:	bfcc      	ite	gt
 800f6c0:	2500      	movgt	r5, #0
 800f6c2:	2501      	movle	r5, #1
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	f200 8085 	bhi.w	800f7d4 <_dtoa_r+0x30c>
 800f6ca:	e8df f003 	tbb	[pc, r3]
 800f6ce:	3b2e      	.short	0x3b2e
 800f6d0:	5839      	.short	0x5839
 800f6d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f6d6:	441d      	add	r5, r3
 800f6d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f6dc:	2b20      	cmp	r3, #32
 800f6de:	bfc1      	itttt	gt
 800f6e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f6e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800f6e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f6ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f6f0:	bfd6      	itet	le
 800f6f2:	f1c3 0320 	rsble	r3, r3, #32
 800f6f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800f6fa:	fa06 f003 	lslle.w	r0, r6, r3
 800f6fe:	f7f0 ff01 	bl	8000504 <__aeabi_ui2d>
 800f702:	2201      	movs	r2, #1
 800f704:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f708:	3d01      	subs	r5, #1
 800f70a:	920e      	str	r2, [sp, #56]	; 0x38
 800f70c:	e76f      	b.n	800f5ee <_dtoa_r+0x126>
 800f70e:	2301      	movs	r3, #1
 800f710:	e7b3      	b.n	800f67a <_dtoa_r+0x1b2>
 800f712:	900c      	str	r0, [sp, #48]	; 0x30
 800f714:	e7b2      	b.n	800f67c <_dtoa_r+0x1b4>
 800f716:	9b05      	ldr	r3, [sp, #20]
 800f718:	eba3 030b 	sub.w	r3, r3, fp
 800f71c:	9305      	str	r3, [sp, #20]
 800f71e:	f1cb 0300 	rsb	r3, fp, #0
 800f722:	9308      	str	r3, [sp, #32]
 800f724:	2300      	movs	r3, #0
 800f726:	930b      	str	r3, [sp, #44]	; 0x2c
 800f728:	e7bf      	b.n	800f6aa <_dtoa_r+0x1e2>
 800f72a:	2300      	movs	r3, #0
 800f72c:	9309      	str	r3, [sp, #36]	; 0x24
 800f72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f730:	2b00      	cmp	r3, #0
 800f732:	dc52      	bgt.n	800f7da <_dtoa_r+0x312>
 800f734:	2301      	movs	r3, #1
 800f736:	9301      	str	r3, [sp, #4]
 800f738:	9304      	str	r3, [sp, #16]
 800f73a:	461a      	mov	r2, r3
 800f73c:	920a      	str	r2, [sp, #40]	; 0x28
 800f73e:	e00b      	b.n	800f758 <_dtoa_r+0x290>
 800f740:	2301      	movs	r3, #1
 800f742:	e7f3      	b.n	800f72c <_dtoa_r+0x264>
 800f744:	2300      	movs	r3, #0
 800f746:	9309      	str	r3, [sp, #36]	; 0x24
 800f748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f74a:	445b      	add	r3, fp
 800f74c:	9301      	str	r3, [sp, #4]
 800f74e:	3301      	adds	r3, #1
 800f750:	2b01      	cmp	r3, #1
 800f752:	9304      	str	r3, [sp, #16]
 800f754:	bfb8      	it	lt
 800f756:	2301      	movlt	r3, #1
 800f758:	69e0      	ldr	r0, [r4, #28]
 800f75a:	2100      	movs	r1, #0
 800f75c:	2204      	movs	r2, #4
 800f75e:	f102 0614 	add.w	r6, r2, #20
 800f762:	429e      	cmp	r6, r3
 800f764:	d93d      	bls.n	800f7e2 <_dtoa_r+0x31a>
 800f766:	6041      	str	r1, [r0, #4]
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fd9f 	bl	80102ac <_Balloc>
 800f76e:	9000      	str	r0, [sp, #0]
 800f770:	2800      	cmp	r0, #0
 800f772:	d139      	bne.n	800f7e8 <_dtoa_r+0x320>
 800f774:	4b16      	ldr	r3, [pc, #88]	; (800f7d0 <_dtoa_r+0x308>)
 800f776:	4602      	mov	r2, r0
 800f778:	f240 11af 	movw	r1, #431	; 0x1af
 800f77c:	e6bd      	b.n	800f4fa <_dtoa_r+0x32>
 800f77e:	2301      	movs	r3, #1
 800f780:	e7e1      	b.n	800f746 <_dtoa_r+0x27e>
 800f782:	2501      	movs	r5, #1
 800f784:	2300      	movs	r3, #0
 800f786:	9307      	str	r3, [sp, #28]
 800f788:	9509      	str	r5, [sp, #36]	; 0x24
 800f78a:	f04f 33ff 	mov.w	r3, #4294967295
 800f78e:	9301      	str	r3, [sp, #4]
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	2200      	movs	r2, #0
 800f794:	2312      	movs	r3, #18
 800f796:	e7d1      	b.n	800f73c <_dtoa_r+0x274>
 800f798:	636f4361 	.word	0x636f4361
 800f79c:	3fd287a7 	.word	0x3fd287a7
 800f7a0:	8b60c8b3 	.word	0x8b60c8b3
 800f7a4:	3fc68a28 	.word	0x3fc68a28
 800f7a8:	509f79fb 	.word	0x509f79fb
 800f7ac:	3fd34413 	.word	0x3fd34413
 800f7b0:	08013535 	.word	0x08013535
 800f7b4:	0801354c 	.word	0x0801354c
 800f7b8:	7ff00000 	.word	0x7ff00000
 800f7bc:	08013531 	.word	0x08013531
 800f7c0:	08013528 	.word	0x08013528
 800f7c4:	08013505 	.word	0x08013505
 800f7c8:	3ff80000 	.word	0x3ff80000
 800f7cc:	08013638 	.word	0x08013638
 800f7d0:	080135a4 	.word	0x080135a4
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d8:	e7d7      	b.n	800f78a <_dtoa_r+0x2c2>
 800f7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7dc:	9301      	str	r3, [sp, #4]
 800f7de:	9304      	str	r3, [sp, #16]
 800f7e0:	e7ba      	b.n	800f758 <_dtoa_r+0x290>
 800f7e2:	3101      	adds	r1, #1
 800f7e4:	0052      	lsls	r2, r2, #1
 800f7e6:	e7ba      	b.n	800f75e <_dtoa_r+0x296>
 800f7e8:	69e3      	ldr	r3, [r4, #28]
 800f7ea:	9a00      	ldr	r2, [sp, #0]
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	2b0e      	cmp	r3, #14
 800f7f2:	f200 80a8 	bhi.w	800f946 <_dtoa_r+0x47e>
 800f7f6:	2d00      	cmp	r5, #0
 800f7f8:	f000 80a5 	beq.w	800f946 <_dtoa_r+0x47e>
 800f7fc:	f1bb 0f00 	cmp.w	fp, #0
 800f800:	dd38      	ble.n	800f874 <_dtoa_r+0x3ac>
 800f802:	4bc0      	ldr	r3, [pc, #768]	; (800fb04 <_dtoa_r+0x63c>)
 800f804:	f00b 020f 	and.w	r2, fp, #15
 800f808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f80c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f810:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f814:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f818:	d019      	beq.n	800f84e <_dtoa_r+0x386>
 800f81a:	4bbb      	ldr	r3, [pc, #748]	; (800fb08 <_dtoa_r+0x640>)
 800f81c:	ec51 0b18 	vmov	r0, r1, d8
 800f820:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f824:	f7f1 f812 	bl	800084c <__aeabi_ddiv>
 800f828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f82c:	f008 080f 	and.w	r8, r8, #15
 800f830:	2503      	movs	r5, #3
 800f832:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fb08 <_dtoa_r+0x640>
 800f836:	f1b8 0f00 	cmp.w	r8, #0
 800f83a:	d10a      	bne.n	800f852 <_dtoa_r+0x38a>
 800f83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f840:	4632      	mov	r2, r6
 800f842:	463b      	mov	r3, r7
 800f844:	f7f1 f802 	bl	800084c <__aeabi_ddiv>
 800f848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f84c:	e02b      	b.n	800f8a6 <_dtoa_r+0x3de>
 800f84e:	2502      	movs	r5, #2
 800f850:	e7ef      	b.n	800f832 <_dtoa_r+0x36a>
 800f852:	f018 0f01 	tst.w	r8, #1
 800f856:	d008      	beq.n	800f86a <_dtoa_r+0x3a2>
 800f858:	4630      	mov	r0, r6
 800f85a:	4639      	mov	r1, r7
 800f85c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f860:	f7f0 feca 	bl	80005f8 <__aeabi_dmul>
 800f864:	3501      	adds	r5, #1
 800f866:	4606      	mov	r6, r0
 800f868:	460f      	mov	r7, r1
 800f86a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f86e:	f109 0908 	add.w	r9, r9, #8
 800f872:	e7e0      	b.n	800f836 <_dtoa_r+0x36e>
 800f874:	f000 809f 	beq.w	800f9b6 <_dtoa_r+0x4ee>
 800f878:	f1cb 0600 	rsb	r6, fp, #0
 800f87c:	4ba1      	ldr	r3, [pc, #644]	; (800fb04 <_dtoa_r+0x63c>)
 800f87e:	4fa2      	ldr	r7, [pc, #648]	; (800fb08 <_dtoa_r+0x640>)
 800f880:	f006 020f 	and.w	r2, r6, #15
 800f884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	ec51 0b18 	vmov	r0, r1, d8
 800f890:	f7f0 feb2 	bl	80005f8 <__aeabi_dmul>
 800f894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f898:	1136      	asrs	r6, r6, #4
 800f89a:	2300      	movs	r3, #0
 800f89c:	2502      	movs	r5, #2
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	d17e      	bne.n	800f9a0 <_dtoa_r+0x4d8>
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1d0      	bne.n	800f848 <_dtoa_r+0x380>
 800f8a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f000 8084 	beq.w	800f9ba <_dtoa_r+0x4f2>
 800f8b2:	4b96      	ldr	r3, [pc, #600]	; (800fb0c <_dtoa_r+0x644>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	f7f1 f90f 	bl	8000adc <__aeabi_dcmplt>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d07b      	beq.n	800f9ba <_dtoa_r+0x4f2>
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d078      	beq.n	800f9ba <_dtoa_r+0x4f2>
 800f8c8:	9b01      	ldr	r3, [sp, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dd39      	ble.n	800f942 <_dtoa_r+0x47a>
 800f8ce:	4b90      	ldr	r3, [pc, #576]	; (800fb10 <_dtoa_r+0x648>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4640      	mov	r0, r8
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	f7f0 fe8f 	bl	80005f8 <__aeabi_dmul>
 800f8da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8de:	9e01      	ldr	r6, [sp, #4]
 800f8e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f8e4:	3501      	adds	r5, #1
 800f8e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7f0 fe1a 	bl	8000524 <__aeabi_i2d>
 800f8f0:	4642      	mov	r2, r8
 800f8f2:	464b      	mov	r3, r9
 800f8f4:	f7f0 fe80 	bl	80005f8 <__aeabi_dmul>
 800f8f8:	4b86      	ldr	r3, [pc, #536]	; (800fb14 <_dtoa_r+0x64c>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f908:	9303      	str	r3, [sp, #12]
 800f90a:	2e00      	cmp	r6, #0
 800f90c:	d158      	bne.n	800f9c0 <_dtoa_r+0x4f8>
 800f90e:	4b82      	ldr	r3, [pc, #520]	; (800fb18 <_dtoa_r+0x650>)
 800f910:	2200      	movs	r2, #0
 800f912:	4640      	mov	r0, r8
 800f914:	4649      	mov	r1, r9
 800f916:	f7f0 fcb7 	bl	8000288 <__aeabi_dsub>
 800f91a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f91e:	4680      	mov	r8, r0
 800f920:	4689      	mov	r9, r1
 800f922:	f7f1 f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 800f926:	2800      	cmp	r0, #0
 800f928:	f040 8296 	bne.w	800fe58 <_dtoa_r+0x990>
 800f92c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f930:	4640      	mov	r0, r8
 800f932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f936:	4649      	mov	r1, r9
 800f938:	f7f1 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	f040 8289 	bne.w	800fe54 <_dtoa_r+0x98c>
 800f942:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f2c0 814e 	blt.w	800fbea <_dtoa_r+0x722>
 800f94e:	f1bb 0f0e 	cmp.w	fp, #14
 800f952:	f300 814a 	bgt.w	800fbea <_dtoa_r+0x722>
 800f956:	4b6b      	ldr	r3, [pc, #428]	; (800fb04 <_dtoa_r+0x63c>)
 800f958:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f95c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f962:	2b00      	cmp	r3, #0
 800f964:	f280 80dc 	bge.w	800fb20 <_dtoa_r+0x658>
 800f968:	9b04      	ldr	r3, [sp, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f300 80d8 	bgt.w	800fb20 <_dtoa_r+0x658>
 800f970:	f040 826f 	bne.w	800fe52 <_dtoa_r+0x98a>
 800f974:	4b68      	ldr	r3, [pc, #416]	; (800fb18 <_dtoa_r+0x650>)
 800f976:	2200      	movs	r2, #0
 800f978:	4640      	mov	r0, r8
 800f97a:	4649      	mov	r1, r9
 800f97c:	f7f0 fe3c 	bl	80005f8 <__aeabi_dmul>
 800f980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f984:	f7f1 f8be 	bl	8000b04 <__aeabi_dcmpge>
 800f988:	9e04      	ldr	r6, [sp, #16]
 800f98a:	4637      	mov	r7, r6
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f040 8245 	bne.w	800fe1c <_dtoa_r+0x954>
 800f992:	9d00      	ldr	r5, [sp, #0]
 800f994:	2331      	movs	r3, #49	; 0x31
 800f996:	f805 3b01 	strb.w	r3, [r5], #1
 800f99a:	f10b 0b01 	add.w	fp, fp, #1
 800f99e:	e241      	b.n	800fe24 <_dtoa_r+0x95c>
 800f9a0:	07f2      	lsls	r2, r6, #31
 800f9a2:	d505      	bpl.n	800f9b0 <_dtoa_r+0x4e8>
 800f9a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9a8:	f7f0 fe26 	bl	80005f8 <__aeabi_dmul>
 800f9ac:	3501      	adds	r5, #1
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	1076      	asrs	r6, r6, #1
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	e773      	b.n	800f89e <_dtoa_r+0x3d6>
 800f9b6:	2502      	movs	r5, #2
 800f9b8:	e775      	b.n	800f8a6 <_dtoa_r+0x3de>
 800f9ba:	9e04      	ldr	r6, [sp, #16]
 800f9bc:	465f      	mov	r7, fp
 800f9be:	e792      	b.n	800f8e6 <_dtoa_r+0x41e>
 800f9c0:	9900      	ldr	r1, [sp, #0]
 800f9c2:	4b50      	ldr	r3, [pc, #320]	; (800fb04 <_dtoa_r+0x63c>)
 800f9c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9c8:	4431      	add	r1, r6
 800f9ca:	9102      	str	r1, [sp, #8]
 800f9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9ce:	eeb0 9a47 	vmov.f32	s18, s14
 800f9d2:	eef0 9a67 	vmov.f32	s19, s15
 800f9d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f9da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f9de:	2900      	cmp	r1, #0
 800f9e0:	d044      	beq.n	800fa6c <_dtoa_r+0x5a4>
 800f9e2:	494e      	ldr	r1, [pc, #312]	; (800fb1c <_dtoa_r+0x654>)
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	f7f0 ff31 	bl	800084c <__aeabi_ddiv>
 800f9ea:	ec53 2b19 	vmov	r2, r3, d9
 800f9ee:	f7f0 fc4b 	bl	8000288 <__aeabi_dsub>
 800f9f2:	9d00      	ldr	r5, [sp, #0]
 800f9f4:	ec41 0b19 	vmov	d9, r0, r1
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	f7f1 f8ac 	bl	8000b58 <__aeabi_d2iz>
 800fa00:	4606      	mov	r6, r0
 800fa02:	f7f0 fd8f 	bl	8000524 <__aeabi_i2d>
 800fa06:	4602      	mov	r2, r0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	4640      	mov	r0, r8
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	f7f0 fc3b 	bl	8000288 <__aeabi_dsub>
 800fa12:	3630      	adds	r6, #48	; 0x30
 800fa14:	f805 6b01 	strb.w	r6, [r5], #1
 800fa18:	ec53 2b19 	vmov	r2, r3, d9
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	4689      	mov	r9, r1
 800fa20:	f7f1 f85c 	bl	8000adc <__aeabi_dcmplt>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d164      	bne.n	800faf2 <_dtoa_r+0x62a>
 800fa28:	4642      	mov	r2, r8
 800fa2a:	464b      	mov	r3, r9
 800fa2c:	4937      	ldr	r1, [pc, #220]	; (800fb0c <_dtoa_r+0x644>)
 800fa2e:	2000      	movs	r0, #0
 800fa30:	f7f0 fc2a 	bl	8000288 <__aeabi_dsub>
 800fa34:	ec53 2b19 	vmov	r2, r3, d9
 800fa38:	f7f1 f850 	bl	8000adc <__aeabi_dcmplt>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	f040 80b6 	bne.w	800fbae <_dtoa_r+0x6e6>
 800fa42:	9b02      	ldr	r3, [sp, #8]
 800fa44:	429d      	cmp	r5, r3
 800fa46:	f43f af7c 	beq.w	800f942 <_dtoa_r+0x47a>
 800fa4a:	4b31      	ldr	r3, [pc, #196]	; (800fb10 <_dtoa_r+0x648>)
 800fa4c:	ec51 0b19 	vmov	r0, r1, d9
 800fa50:	2200      	movs	r2, #0
 800fa52:	f7f0 fdd1 	bl	80005f8 <__aeabi_dmul>
 800fa56:	4b2e      	ldr	r3, [pc, #184]	; (800fb10 <_dtoa_r+0x648>)
 800fa58:	ec41 0b19 	vmov	d9, r0, r1
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	4640      	mov	r0, r8
 800fa60:	4649      	mov	r1, r9
 800fa62:	f7f0 fdc9 	bl	80005f8 <__aeabi_dmul>
 800fa66:	4680      	mov	r8, r0
 800fa68:	4689      	mov	r9, r1
 800fa6a:	e7c5      	b.n	800f9f8 <_dtoa_r+0x530>
 800fa6c:	ec51 0b17 	vmov	r0, r1, d7
 800fa70:	f7f0 fdc2 	bl	80005f8 <__aeabi_dmul>
 800fa74:	9b02      	ldr	r3, [sp, #8]
 800fa76:	9d00      	ldr	r5, [sp, #0]
 800fa78:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa7a:	ec41 0b19 	vmov	d9, r0, r1
 800fa7e:	4649      	mov	r1, r9
 800fa80:	4640      	mov	r0, r8
 800fa82:	f7f1 f869 	bl	8000b58 <__aeabi_d2iz>
 800fa86:	4606      	mov	r6, r0
 800fa88:	f7f0 fd4c 	bl	8000524 <__aeabi_i2d>
 800fa8c:	3630      	adds	r6, #48	; 0x30
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	4640      	mov	r0, r8
 800fa94:	4649      	mov	r1, r9
 800fa96:	f7f0 fbf7 	bl	8000288 <__aeabi_dsub>
 800fa9a:	f805 6b01 	strb.w	r6, [r5], #1
 800fa9e:	9b02      	ldr	r3, [sp, #8]
 800faa0:	429d      	cmp	r5, r3
 800faa2:	4680      	mov	r8, r0
 800faa4:	4689      	mov	r9, r1
 800faa6:	f04f 0200 	mov.w	r2, #0
 800faaa:	d124      	bne.n	800faf6 <_dtoa_r+0x62e>
 800faac:	4b1b      	ldr	r3, [pc, #108]	; (800fb1c <_dtoa_r+0x654>)
 800faae:	ec51 0b19 	vmov	r0, r1, d9
 800fab2:	f7f0 fbeb 	bl	800028c <__adddf3>
 800fab6:	4602      	mov	r2, r0
 800fab8:	460b      	mov	r3, r1
 800faba:	4640      	mov	r0, r8
 800fabc:	4649      	mov	r1, r9
 800fabe:	f7f1 f82b 	bl	8000b18 <__aeabi_dcmpgt>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d173      	bne.n	800fbae <_dtoa_r+0x6e6>
 800fac6:	ec53 2b19 	vmov	r2, r3, d9
 800faca:	4914      	ldr	r1, [pc, #80]	; (800fb1c <_dtoa_r+0x654>)
 800facc:	2000      	movs	r0, #0
 800face:	f7f0 fbdb 	bl	8000288 <__aeabi_dsub>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4640      	mov	r0, r8
 800fad8:	4649      	mov	r1, r9
 800fada:	f7f0 ffff 	bl	8000adc <__aeabi_dcmplt>
 800fade:	2800      	cmp	r0, #0
 800fae0:	f43f af2f 	beq.w	800f942 <_dtoa_r+0x47a>
 800fae4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fae6:	1e6b      	subs	r3, r5, #1
 800fae8:	930f      	str	r3, [sp, #60]	; 0x3c
 800faea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800faee:	2b30      	cmp	r3, #48	; 0x30
 800faf0:	d0f8      	beq.n	800fae4 <_dtoa_r+0x61c>
 800faf2:	46bb      	mov	fp, r7
 800faf4:	e04a      	b.n	800fb8c <_dtoa_r+0x6c4>
 800faf6:	4b06      	ldr	r3, [pc, #24]	; (800fb10 <_dtoa_r+0x648>)
 800faf8:	f7f0 fd7e 	bl	80005f8 <__aeabi_dmul>
 800fafc:	4680      	mov	r8, r0
 800fafe:	4689      	mov	r9, r1
 800fb00:	e7bd      	b.n	800fa7e <_dtoa_r+0x5b6>
 800fb02:	bf00      	nop
 800fb04:	08013638 	.word	0x08013638
 800fb08:	08013610 	.word	0x08013610
 800fb0c:	3ff00000 	.word	0x3ff00000
 800fb10:	40240000 	.word	0x40240000
 800fb14:	401c0000 	.word	0x401c0000
 800fb18:	40140000 	.word	0x40140000
 800fb1c:	3fe00000 	.word	0x3fe00000
 800fb20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb24:	9d00      	ldr	r5, [sp, #0]
 800fb26:	4642      	mov	r2, r8
 800fb28:	464b      	mov	r3, r9
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	f7f0 fe8d 	bl	800084c <__aeabi_ddiv>
 800fb32:	f7f1 f811 	bl	8000b58 <__aeabi_d2iz>
 800fb36:	9001      	str	r0, [sp, #4]
 800fb38:	f7f0 fcf4 	bl	8000524 <__aeabi_i2d>
 800fb3c:	4642      	mov	r2, r8
 800fb3e:	464b      	mov	r3, r9
 800fb40:	f7f0 fd5a 	bl	80005f8 <__aeabi_dmul>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	4630      	mov	r0, r6
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f7f0 fb9c 	bl	8000288 <__aeabi_dsub>
 800fb50:	9e01      	ldr	r6, [sp, #4]
 800fb52:	9f04      	ldr	r7, [sp, #16]
 800fb54:	3630      	adds	r6, #48	; 0x30
 800fb56:	f805 6b01 	strb.w	r6, [r5], #1
 800fb5a:	9e00      	ldr	r6, [sp, #0]
 800fb5c:	1bae      	subs	r6, r5, r6
 800fb5e:	42b7      	cmp	r7, r6
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	d134      	bne.n	800fbd0 <_dtoa_r+0x708>
 800fb66:	f7f0 fb91 	bl	800028c <__adddf3>
 800fb6a:	4642      	mov	r2, r8
 800fb6c:	464b      	mov	r3, r9
 800fb6e:	4606      	mov	r6, r0
 800fb70:	460f      	mov	r7, r1
 800fb72:	f7f0 ffd1 	bl	8000b18 <__aeabi_dcmpgt>
 800fb76:	b9c8      	cbnz	r0, 800fbac <_dtoa_r+0x6e4>
 800fb78:	4642      	mov	r2, r8
 800fb7a:	464b      	mov	r3, r9
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	4639      	mov	r1, r7
 800fb80:	f7f0 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb84:	b110      	cbz	r0, 800fb8c <_dtoa_r+0x6c4>
 800fb86:	9b01      	ldr	r3, [sp, #4]
 800fb88:	07db      	lsls	r3, r3, #31
 800fb8a:	d40f      	bmi.n	800fbac <_dtoa_r+0x6e4>
 800fb8c:	4651      	mov	r1, sl
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f000 fbcc 	bl	801032c <_Bfree>
 800fb94:	2300      	movs	r3, #0
 800fb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb98:	702b      	strb	r3, [r5, #0]
 800fb9a:	f10b 0301 	add.w	r3, fp, #1
 800fb9e:	6013      	str	r3, [r2, #0]
 800fba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f43f ace2 	beq.w	800f56c <_dtoa_r+0xa4>
 800fba8:	601d      	str	r5, [r3, #0]
 800fbaa:	e4df      	b.n	800f56c <_dtoa_r+0xa4>
 800fbac:	465f      	mov	r7, fp
 800fbae:	462b      	mov	r3, r5
 800fbb0:	461d      	mov	r5, r3
 800fbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbb6:	2a39      	cmp	r2, #57	; 0x39
 800fbb8:	d106      	bne.n	800fbc8 <_dtoa_r+0x700>
 800fbba:	9a00      	ldr	r2, [sp, #0]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d1f7      	bne.n	800fbb0 <_dtoa_r+0x6e8>
 800fbc0:	9900      	ldr	r1, [sp, #0]
 800fbc2:	2230      	movs	r2, #48	; 0x30
 800fbc4:	3701      	adds	r7, #1
 800fbc6:	700a      	strb	r2, [r1, #0]
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	3201      	adds	r2, #1
 800fbcc:	701a      	strb	r2, [r3, #0]
 800fbce:	e790      	b.n	800faf2 <_dtoa_r+0x62a>
 800fbd0:	4ba3      	ldr	r3, [pc, #652]	; (800fe60 <_dtoa_r+0x998>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f7f0 fd10 	bl	80005f8 <__aeabi_dmul>
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2300      	movs	r3, #0
 800fbdc:	4606      	mov	r6, r0
 800fbde:	460f      	mov	r7, r1
 800fbe0:	f7f0 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d09e      	beq.n	800fb26 <_dtoa_r+0x65e>
 800fbe8:	e7d0      	b.n	800fb8c <_dtoa_r+0x6c4>
 800fbea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	f000 80ca 	beq.w	800fd86 <_dtoa_r+0x8be>
 800fbf2:	9a07      	ldr	r2, [sp, #28]
 800fbf4:	2a01      	cmp	r2, #1
 800fbf6:	f300 80ad 	bgt.w	800fd54 <_dtoa_r+0x88c>
 800fbfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbfc:	2a00      	cmp	r2, #0
 800fbfe:	f000 80a5 	beq.w	800fd4c <_dtoa_r+0x884>
 800fc02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc06:	9e08      	ldr	r6, [sp, #32]
 800fc08:	9d05      	ldr	r5, [sp, #20]
 800fc0a:	9a05      	ldr	r2, [sp, #20]
 800fc0c:	441a      	add	r2, r3
 800fc0e:	9205      	str	r2, [sp, #20]
 800fc10:	9a06      	ldr	r2, [sp, #24]
 800fc12:	2101      	movs	r1, #1
 800fc14:	441a      	add	r2, r3
 800fc16:	4620      	mov	r0, r4
 800fc18:	9206      	str	r2, [sp, #24]
 800fc1a:	f000 fc3d 	bl	8010498 <__i2b>
 800fc1e:	4607      	mov	r7, r0
 800fc20:	b165      	cbz	r5, 800fc3c <_dtoa_r+0x774>
 800fc22:	9b06      	ldr	r3, [sp, #24]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	dd09      	ble.n	800fc3c <_dtoa_r+0x774>
 800fc28:	42ab      	cmp	r3, r5
 800fc2a:	9a05      	ldr	r2, [sp, #20]
 800fc2c:	bfa8      	it	ge
 800fc2e:	462b      	movge	r3, r5
 800fc30:	1ad2      	subs	r2, r2, r3
 800fc32:	9205      	str	r2, [sp, #20]
 800fc34:	9a06      	ldr	r2, [sp, #24]
 800fc36:	1aed      	subs	r5, r5, r3
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	9306      	str	r3, [sp, #24]
 800fc3c:	9b08      	ldr	r3, [sp, #32]
 800fc3e:	b1f3      	cbz	r3, 800fc7e <_dtoa_r+0x7b6>
 800fc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 80a3 	beq.w	800fd8e <_dtoa_r+0x8c6>
 800fc48:	2e00      	cmp	r6, #0
 800fc4a:	dd10      	ble.n	800fc6e <_dtoa_r+0x7a6>
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	4632      	mov	r2, r6
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fce1 	bl	8010618 <__pow5mult>
 800fc56:	4652      	mov	r2, sl
 800fc58:	4601      	mov	r1, r0
 800fc5a:	4607      	mov	r7, r0
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f000 fc31 	bl	80104c4 <__multiply>
 800fc62:	4651      	mov	r1, sl
 800fc64:	4680      	mov	r8, r0
 800fc66:	4620      	mov	r0, r4
 800fc68:	f000 fb60 	bl	801032c <_Bfree>
 800fc6c:	46c2      	mov	sl, r8
 800fc6e:	9b08      	ldr	r3, [sp, #32]
 800fc70:	1b9a      	subs	r2, r3, r6
 800fc72:	d004      	beq.n	800fc7e <_dtoa_r+0x7b6>
 800fc74:	4651      	mov	r1, sl
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 fcce 	bl	8010618 <__pow5mult>
 800fc7c:	4682      	mov	sl, r0
 800fc7e:	2101      	movs	r1, #1
 800fc80:	4620      	mov	r0, r4
 800fc82:	f000 fc09 	bl	8010498 <__i2b>
 800fc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	f340 8081 	ble.w	800fd92 <_dtoa_r+0x8ca>
 800fc90:	461a      	mov	r2, r3
 800fc92:	4601      	mov	r1, r0
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fcbf 	bl	8010618 <__pow5mult>
 800fc9a:	9b07      	ldr	r3, [sp, #28]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	4606      	mov	r6, r0
 800fca0:	dd7a      	ble.n	800fd98 <_dtoa_r+0x8d0>
 800fca2:	f04f 0800 	mov.w	r8, #0
 800fca6:	6933      	ldr	r3, [r6, #16]
 800fca8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fcac:	6918      	ldr	r0, [r3, #16]
 800fcae:	f000 fba5 	bl	80103fc <__hi0bits>
 800fcb2:	f1c0 0020 	rsb	r0, r0, #32
 800fcb6:	9b06      	ldr	r3, [sp, #24]
 800fcb8:	4418      	add	r0, r3
 800fcba:	f010 001f 	ands.w	r0, r0, #31
 800fcbe:	f000 8094 	beq.w	800fdea <_dtoa_r+0x922>
 800fcc2:	f1c0 0320 	rsb	r3, r0, #32
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	f340 8085 	ble.w	800fdd6 <_dtoa_r+0x90e>
 800fccc:	9b05      	ldr	r3, [sp, #20]
 800fcce:	f1c0 001c 	rsb	r0, r0, #28
 800fcd2:	4403      	add	r3, r0
 800fcd4:	9305      	str	r3, [sp, #20]
 800fcd6:	9b06      	ldr	r3, [sp, #24]
 800fcd8:	4403      	add	r3, r0
 800fcda:	4405      	add	r5, r0
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	9b05      	ldr	r3, [sp, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	dd05      	ble.n	800fcf0 <_dtoa_r+0x828>
 800fce4:	4651      	mov	r1, sl
 800fce6:	461a      	mov	r2, r3
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 fcef 	bl	80106cc <__lshift>
 800fcee:	4682      	mov	sl, r0
 800fcf0:	9b06      	ldr	r3, [sp, #24]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	dd05      	ble.n	800fd02 <_dtoa_r+0x83a>
 800fcf6:	4631      	mov	r1, r6
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f000 fce6 	bl	80106cc <__lshift>
 800fd00:	4606      	mov	r6, r0
 800fd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d072      	beq.n	800fdee <_dtoa_r+0x926>
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4650      	mov	r0, sl
 800fd0c:	f000 fd4a 	bl	80107a4 <__mcmp>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	da6c      	bge.n	800fdee <_dtoa_r+0x926>
 800fd14:	2300      	movs	r3, #0
 800fd16:	4651      	mov	r1, sl
 800fd18:	220a      	movs	r2, #10
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f000 fb28 	bl	8010370 <__multadd>
 800fd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd26:	4682      	mov	sl, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 81b0 	beq.w	801008e <_dtoa_r+0xbc6>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	4639      	mov	r1, r7
 800fd32:	220a      	movs	r2, #10
 800fd34:	4620      	mov	r0, r4
 800fd36:	f000 fb1b 	bl	8010370 <__multadd>
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	4607      	mov	r7, r0
 800fd40:	f300 8096 	bgt.w	800fe70 <_dtoa_r+0x9a8>
 800fd44:	9b07      	ldr	r3, [sp, #28]
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	dc59      	bgt.n	800fdfe <_dtoa_r+0x936>
 800fd4a:	e091      	b.n	800fe70 <_dtoa_r+0x9a8>
 800fd4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd52:	e758      	b.n	800fc06 <_dtoa_r+0x73e>
 800fd54:	9b04      	ldr	r3, [sp, #16]
 800fd56:	1e5e      	subs	r6, r3, #1
 800fd58:	9b08      	ldr	r3, [sp, #32]
 800fd5a:	42b3      	cmp	r3, r6
 800fd5c:	bfbf      	itttt	lt
 800fd5e:	9b08      	ldrlt	r3, [sp, #32]
 800fd60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fd62:	9608      	strlt	r6, [sp, #32]
 800fd64:	1af3      	sublt	r3, r6, r3
 800fd66:	bfb4      	ite	lt
 800fd68:	18d2      	addlt	r2, r2, r3
 800fd6a:	1b9e      	subge	r6, r3, r6
 800fd6c:	9b04      	ldr	r3, [sp, #16]
 800fd6e:	bfbc      	itt	lt
 800fd70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fd72:	2600      	movlt	r6, #0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	bfb7      	itett	lt
 800fd78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fd7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fd80:	1a9d      	sublt	r5, r3, r2
 800fd82:	2300      	movlt	r3, #0
 800fd84:	e741      	b.n	800fc0a <_dtoa_r+0x742>
 800fd86:	9e08      	ldr	r6, [sp, #32]
 800fd88:	9d05      	ldr	r5, [sp, #20]
 800fd8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd8c:	e748      	b.n	800fc20 <_dtoa_r+0x758>
 800fd8e:	9a08      	ldr	r2, [sp, #32]
 800fd90:	e770      	b.n	800fc74 <_dtoa_r+0x7ac>
 800fd92:	9b07      	ldr	r3, [sp, #28]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	dc19      	bgt.n	800fdcc <_dtoa_r+0x904>
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	b9bb      	cbnz	r3, 800fdcc <_dtoa_r+0x904>
 800fd9c:	9b03      	ldr	r3, [sp, #12]
 800fd9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fda2:	b99b      	cbnz	r3, 800fdcc <_dtoa_r+0x904>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fdaa:	0d1b      	lsrs	r3, r3, #20
 800fdac:	051b      	lsls	r3, r3, #20
 800fdae:	b183      	cbz	r3, 800fdd2 <_dtoa_r+0x90a>
 800fdb0:	9b05      	ldr	r3, [sp, #20]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	9305      	str	r3, [sp, #20]
 800fdb6:	9b06      	ldr	r3, [sp, #24]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	9306      	str	r3, [sp, #24]
 800fdbc:	f04f 0801 	mov.w	r8, #1
 800fdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f47f af6f 	bne.w	800fca6 <_dtoa_r+0x7de>
 800fdc8:	2001      	movs	r0, #1
 800fdca:	e774      	b.n	800fcb6 <_dtoa_r+0x7ee>
 800fdcc:	f04f 0800 	mov.w	r8, #0
 800fdd0:	e7f6      	b.n	800fdc0 <_dtoa_r+0x8f8>
 800fdd2:	4698      	mov	r8, r3
 800fdd4:	e7f4      	b.n	800fdc0 <_dtoa_r+0x8f8>
 800fdd6:	d082      	beq.n	800fcde <_dtoa_r+0x816>
 800fdd8:	9a05      	ldr	r2, [sp, #20]
 800fdda:	331c      	adds	r3, #28
 800fddc:	441a      	add	r2, r3
 800fdde:	9205      	str	r2, [sp, #20]
 800fde0:	9a06      	ldr	r2, [sp, #24]
 800fde2:	441a      	add	r2, r3
 800fde4:	441d      	add	r5, r3
 800fde6:	9206      	str	r2, [sp, #24]
 800fde8:	e779      	b.n	800fcde <_dtoa_r+0x816>
 800fdea:	4603      	mov	r3, r0
 800fdec:	e7f4      	b.n	800fdd8 <_dtoa_r+0x910>
 800fdee:	9b04      	ldr	r3, [sp, #16]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	dc37      	bgt.n	800fe64 <_dtoa_r+0x99c>
 800fdf4:	9b07      	ldr	r3, [sp, #28]
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	dd34      	ble.n	800fe64 <_dtoa_r+0x99c>
 800fdfa:	9b04      	ldr	r3, [sp, #16]
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	9b01      	ldr	r3, [sp, #4]
 800fe00:	b963      	cbnz	r3, 800fe1c <_dtoa_r+0x954>
 800fe02:	4631      	mov	r1, r6
 800fe04:	2205      	movs	r2, #5
 800fe06:	4620      	mov	r0, r4
 800fe08:	f000 fab2 	bl	8010370 <__multadd>
 800fe0c:	4601      	mov	r1, r0
 800fe0e:	4606      	mov	r6, r0
 800fe10:	4650      	mov	r0, sl
 800fe12:	f000 fcc7 	bl	80107a4 <__mcmp>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f73f adbb 	bgt.w	800f992 <_dtoa_r+0x4ca>
 800fe1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe1e:	9d00      	ldr	r5, [sp, #0]
 800fe20:	ea6f 0b03 	mvn.w	fp, r3
 800fe24:	f04f 0800 	mov.w	r8, #0
 800fe28:	4631      	mov	r1, r6
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fa7e 	bl	801032c <_Bfree>
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	f43f aeab 	beq.w	800fb8c <_dtoa_r+0x6c4>
 800fe36:	f1b8 0f00 	cmp.w	r8, #0
 800fe3a:	d005      	beq.n	800fe48 <_dtoa_r+0x980>
 800fe3c:	45b8      	cmp	r8, r7
 800fe3e:	d003      	beq.n	800fe48 <_dtoa_r+0x980>
 800fe40:	4641      	mov	r1, r8
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fa72 	bl	801032c <_Bfree>
 800fe48:	4639      	mov	r1, r7
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 fa6e 	bl	801032c <_Bfree>
 800fe50:	e69c      	b.n	800fb8c <_dtoa_r+0x6c4>
 800fe52:	2600      	movs	r6, #0
 800fe54:	4637      	mov	r7, r6
 800fe56:	e7e1      	b.n	800fe1c <_dtoa_r+0x954>
 800fe58:	46bb      	mov	fp, r7
 800fe5a:	4637      	mov	r7, r6
 800fe5c:	e599      	b.n	800f992 <_dtoa_r+0x4ca>
 800fe5e:	bf00      	nop
 800fe60:	40240000 	.word	0x40240000
 800fe64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	f000 80c8 	beq.w	800fffc <_dtoa_r+0xb34>
 800fe6c:	9b04      	ldr	r3, [sp, #16]
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	2d00      	cmp	r5, #0
 800fe72:	dd05      	ble.n	800fe80 <_dtoa_r+0x9b8>
 800fe74:	4639      	mov	r1, r7
 800fe76:	462a      	mov	r2, r5
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f000 fc27 	bl	80106cc <__lshift>
 800fe7e:	4607      	mov	r7, r0
 800fe80:	f1b8 0f00 	cmp.w	r8, #0
 800fe84:	d05b      	beq.n	800ff3e <_dtoa_r+0xa76>
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f000 fa0f 	bl	80102ac <_Balloc>
 800fe8e:	4605      	mov	r5, r0
 800fe90:	b928      	cbnz	r0, 800fe9e <_dtoa_r+0x9d6>
 800fe92:	4b83      	ldr	r3, [pc, #524]	; (80100a0 <_dtoa_r+0xbd8>)
 800fe94:	4602      	mov	r2, r0
 800fe96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fe9a:	f7ff bb2e 	b.w	800f4fa <_dtoa_r+0x32>
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	3202      	adds	r2, #2
 800fea2:	0092      	lsls	r2, r2, #2
 800fea4:	f107 010c 	add.w	r1, r7, #12
 800fea8:	300c      	adds	r0, #12
 800feaa:	f7ff fa76 	bl	800f39a <memcpy>
 800feae:	2201      	movs	r2, #1
 800feb0:	4629      	mov	r1, r5
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 fc0a 	bl	80106cc <__lshift>
 800feb8:	9b00      	ldr	r3, [sp, #0]
 800feba:	3301      	adds	r3, #1
 800febc:	9304      	str	r3, [sp, #16]
 800febe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fec2:	4413      	add	r3, r2
 800fec4:	9308      	str	r3, [sp, #32]
 800fec6:	9b02      	ldr	r3, [sp, #8]
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	46b8      	mov	r8, r7
 800fece:	9306      	str	r3, [sp, #24]
 800fed0:	4607      	mov	r7, r0
 800fed2:	9b04      	ldr	r3, [sp, #16]
 800fed4:	4631      	mov	r1, r6
 800fed6:	3b01      	subs	r3, #1
 800fed8:	4650      	mov	r0, sl
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	f7ff fa6b 	bl	800f3b6 <quorem>
 800fee0:	4641      	mov	r1, r8
 800fee2:	9002      	str	r0, [sp, #8]
 800fee4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fee8:	4650      	mov	r0, sl
 800feea:	f000 fc5b 	bl	80107a4 <__mcmp>
 800feee:	463a      	mov	r2, r7
 800fef0:	9005      	str	r0, [sp, #20]
 800fef2:	4631      	mov	r1, r6
 800fef4:	4620      	mov	r0, r4
 800fef6:	f000 fc71 	bl	80107dc <__mdiff>
 800fefa:	68c2      	ldr	r2, [r0, #12]
 800fefc:	4605      	mov	r5, r0
 800fefe:	bb02      	cbnz	r2, 800ff42 <_dtoa_r+0xa7a>
 800ff00:	4601      	mov	r1, r0
 800ff02:	4650      	mov	r0, sl
 800ff04:	f000 fc4e 	bl	80107a4 <__mcmp>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff10:	f000 fa0c 	bl	801032c <_Bfree>
 800ff14:	9b07      	ldr	r3, [sp, #28]
 800ff16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff18:	9d04      	ldr	r5, [sp, #16]
 800ff1a:	ea43 0102 	orr.w	r1, r3, r2
 800ff1e:	9b06      	ldr	r3, [sp, #24]
 800ff20:	4319      	orrs	r1, r3
 800ff22:	d110      	bne.n	800ff46 <_dtoa_r+0xa7e>
 800ff24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff28:	d029      	beq.n	800ff7e <_dtoa_r+0xab6>
 800ff2a:	9b05      	ldr	r3, [sp, #20]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dd02      	ble.n	800ff36 <_dtoa_r+0xa6e>
 800ff30:	9b02      	ldr	r3, [sp, #8]
 800ff32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	f883 9000 	strb.w	r9, [r3]
 800ff3c:	e774      	b.n	800fe28 <_dtoa_r+0x960>
 800ff3e:	4638      	mov	r0, r7
 800ff40:	e7ba      	b.n	800feb8 <_dtoa_r+0x9f0>
 800ff42:	2201      	movs	r2, #1
 800ff44:	e7e1      	b.n	800ff0a <_dtoa_r+0xa42>
 800ff46:	9b05      	ldr	r3, [sp, #20]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	db04      	blt.n	800ff56 <_dtoa_r+0xa8e>
 800ff4c:	9907      	ldr	r1, [sp, #28]
 800ff4e:	430b      	orrs	r3, r1
 800ff50:	9906      	ldr	r1, [sp, #24]
 800ff52:	430b      	orrs	r3, r1
 800ff54:	d120      	bne.n	800ff98 <_dtoa_r+0xad0>
 800ff56:	2a00      	cmp	r2, #0
 800ff58:	dded      	ble.n	800ff36 <_dtoa_r+0xa6e>
 800ff5a:	4651      	mov	r1, sl
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	4620      	mov	r0, r4
 800ff60:	f000 fbb4 	bl	80106cc <__lshift>
 800ff64:	4631      	mov	r1, r6
 800ff66:	4682      	mov	sl, r0
 800ff68:	f000 fc1c 	bl	80107a4 <__mcmp>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	dc03      	bgt.n	800ff78 <_dtoa_r+0xab0>
 800ff70:	d1e1      	bne.n	800ff36 <_dtoa_r+0xa6e>
 800ff72:	f019 0f01 	tst.w	r9, #1
 800ff76:	d0de      	beq.n	800ff36 <_dtoa_r+0xa6e>
 800ff78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff7c:	d1d8      	bne.n	800ff30 <_dtoa_r+0xa68>
 800ff7e:	9a01      	ldr	r2, [sp, #4]
 800ff80:	2339      	movs	r3, #57	; 0x39
 800ff82:	7013      	strb	r3, [r2, #0]
 800ff84:	462b      	mov	r3, r5
 800ff86:	461d      	mov	r5, r3
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff8e:	2a39      	cmp	r2, #57	; 0x39
 800ff90:	d06c      	beq.n	801006c <_dtoa_r+0xba4>
 800ff92:	3201      	adds	r2, #1
 800ff94:	701a      	strb	r2, [r3, #0]
 800ff96:	e747      	b.n	800fe28 <_dtoa_r+0x960>
 800ff98:	2a00      	cmp	r2, #0
 800ff9a:	dd07      	ble.n	800ffac <_dtoa_r+0xae4>
 800ff9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ffa0:	d0ed      	beq.n	800ff7e <_dtoa_r+0xab6>
 800ffa2:	9a01      	ldr	r2, [sp, #4]
 800ffa4:	f109 0301 	add.w	r3, r9, #1
 800ffa8:	7013      	strb	r3, [r2, #0]
 800ffaa:	e73d      	b.n	800fe28 <_dtoa_r+0x960>
 800ffac:	9b04      	ldr	r3, [sp, #16]
 800ffae:	9a08      	ldr	r2, [sp, #32]
 800ffb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d043      	beq.n	8010040 <_dtoa_r+0xb78>
 800ffb8:	4651      	mov	r1, sl
 800ffba:	2300      	movs	r3, #0
 800ffbc:	220a      	movs	r2, #10
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f000 f9d6 	bl	8010370 <__multadd>
 800ffc4:	45b8      	cmp	r8, r7
 800ffc6:	4682      	mov	sl, r0
 800ffc8:	f04f 0300 	mov.w	r3, #0
 800ffcc:	f04f 020a 	mov.w	r2, #10
 800ffd0:	4641      	mov	r1, r8
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	d107      	bne.n	800ffe6 <_dtoa_r+0xb1e>
 800ffd6:	f000 f9cb 	bl	8010370 <__multadd>
 800ffda:	4680      	mov	r8, r0
 800ffdc:	4607      	mov	r7, r0
 800ffde:	9b04      	ldr	r3, [sp, #16]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	9304      	str	r3, [sp, #16]
 800ffe4:	e775      	b.n	800fed2 <_dtoa_r+0xa0a>
 800ffe6:	f000 f9c3 	bl	8010370 <__multadd>
 800ffea:	4639      	mov	r1, r7
 800ffec:	4680      	mov	r8, r0
 800ffee:	2300      	movs	r3, #0
 800fff0:	220a      	movs	r2, #10
 800fff2:	4620      	mov	r0, r4
 800fff4:	f000 f9bc 	bl	8010370 <__multadd>
 800fff8:	4607      	mov	r7, r0
 800fffa:	e7f0      	b.n	800ffde <_dtoa_r+0xb16>
 800fffc:	9b04      	ldr	r3, [sp, #16]
 800fffe:	9301      	str	r3, [sp, #4]
 8010000:	9d00      	ldr	r5, [sp, #0]
 8010002:	4631      	mov	r1, r6
 8010004:	4650      	mov	r0, sl
 8010006:	f7ff f9d6 	bl	800f3b6 <quorem>
 801000a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801000e:	9b00      	ldr	r3, [sp, #0]
 8010010:	f805 9b01 	strb.w	r9, [r5], #1
 8010014:	1aea      	subs	r2, r5, r3
 8010016:	9b01      	ldr	r3, [sp, #4]
 8010018:	4293      	cmp	r3, r2
 801001a:	dd07      	ble.n	801002c <_dtoa_r+0xb64>
 801001c:	4651      	mov	r1, sl
 801001e:	2300      	movs	r3, #0
 8010020:	220a      	movs	r2, #10
 8010022:	4620      	mov	r0, r4
 8010024:	f000 f9a4 	bl	8010370 <__multadd>
 8010028:	4682      	mov	sl, r0
 801002a:	e7ea      	b.n	8010002 <_dtoa_r+0xb3a>
 801002c:	9b01      	ldr	r3, [sp, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	bfc8      	it	gt
 8010032:	461d      	movgt	r5, r3
 8010034:	9b00      	ldr	r3, [sp, #0]
 8010036:	bfd8      	it	le
 8010038:	2501      	movle	r5, #1
 801003a:	441d      	add	r5, r3
 801003c:	f04f 0800 	mov.w	r8, #0
 8010040:	4651      	mov	r1, sl
 8010042:	2201      	movs	r2, #1
 8010044:	4620      	mov	r0, r4
 8010046:	f000 fb41 	bl	80106cc <__lshift>
 801004a:	4631      	mov	r1, r6
 801004c:	4682      	mov	sl, r0
 801004e:	f000 fba9 	bl	80107a4 <__mcmp>
 8010052:	2800      	cmp	r0, #0
 8010054:	dc96      	bgt.n	800ff84 <_dtoa_r+0xabc>
 8010056:	d102      	bne.n	801005e <_dtoa_r+0xb96>
 8010058:	f019 0f01 	tst.w	r9, #1
 801005c:	d192      	bne.n	800ff84 <_dtoa_r+0xabc>
 801005e:	462b      	mov	r3, r5
 8010060:	461d      	mov	r5, r3
 8010062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010066:	2a30      	cmp	r2, #48	; 0x30
 8010068:	d0fa      	beq.n	8010060 <_dtoa_r+0xb98>
 801006a:	e6dd      	b.n	800fe28 <_dtoa_r+0x960>
 801006c:	9a00      	ldr	r2, [sp, #0]
 801006e:	429a      	cmp	r2, r3
 8010070:	d189      	bne.n	800ff86 <_dtoa_r+0xabe>
 8010072:	f10b 0b01 	add.w	fp, fp, #1
 8010076:	2331      	movs	r3, #49	; 0x31
 8010078:	e796      	b.n	800ffa8 <_dtoa_r+0xae0>
 801007a:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <_dtoa_r+0xbdc>)
 801007c:	f7ff ba99 	b.w	800f5b2 <_dtoa_r+0xea>
 8010080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010082:	2b00      	cmp	r3, #0
 8010084:	f47f aa6d 	bne.w	800f562 <_dtoa_r+0x9a>
 8010088:	4b07      	ldr	r3, [pc, #28]	; (80100a8 <_dtoa_r+0xbe0>)
 801008a:	f7ff ba92 	b.w	800f5b2 <_dtoa_r+0xea>
 801008e:	9b01      	ldr	r3, [sp, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	dcb5      	bgt.n	8010000 <_dtoa_r+0xb38>
 8010094:	9b07      	ldr	r3, [sp, #28]
 8010096:	2b02      	cmp	r3, #2
 8010098:	f73f aeb1 	bgt.w	800fdfe <_dtoa_r+0x936>
 801009c:	e7b0      	b.n	8010000 <_dtoa_r+0xb38>
 801009e:	bf00      	nop
 80100a0:	080135a4 	.word	0x080135a4
 80100a4:	08013504 	.word	0x08013504
 80100a8:	08013528 	.word	0x08013528

080100ac <_free_r>:
 80100ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100ae:	2900      	cmp	r1, #0
 80100b0:	d044      	beq.n	801013c <_free_r+0x90>
 80100b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100b6:	9001      	str	r0, [sp, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f1a1 0404 	sub.w	r4, r1, #4
 80100be:	bfb8      	it	lt
 80100c0:	18e4      	addlt	r4, r4, r3
 80100c2:	f000 f8e7 	bl	8010294 <__malloc_lock>
 80100c6:	4a1e      	ldr	r2, [pc, #120]	; (8010140 <_free_r+0x94>)
 80100c8:	9801      	ldr	r0, [sp, #4]
 80100ca:	6813      	ldr	r3, [r2, #0]
 80100cc:	b933      	cbnz	r3, 80100dc <_free_r+0x30>
 80100ce:	6063      	str	r3, [r4, #4]
 80100d0:	6014      	str	r4, [r2, #0]
 80100d2:	b003      	add	sp, #12
 80100d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100d8:	f000 b8e2 	b.w	80102a0 <__malloc_unlock>
 80100dc:	42a3      	cmp	r3, r4
 80100de:	d908      	bls.n	80100f2 <_free_r+0x46>
 80100e0:	6825      	ldr	r5, [r4, #0]
 80100e2:	1961      	adds	r1, r4, r5
 80100e4:	428b      	cmp	r3, r1
 80100e6:	bf01      	itttt	eq
 80100e8:	6819      	ldreq	r1, [r3, #0]
 80100ea:	685b      	ldreq	r3, [r3, #4]
 80100ec:	1949      	addeq	r1, r1, r5
 80100ee:	6021      	streq	r1, [r4, #0]
 80100f0:	e7ed      	b.n	80100ce <_free_r+0x22>
 80100f2:	461a      	mov	r2, r3
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	b10b      	cbz	r3, 80100fc <_free_r+0x50>
 80100f8:	42a3      	cmp	r3, r4
 80100fa:	d9fa      	bls.n	80100f2 <_free_r+0x46>
 80100fc:	6811      	ldr	r1, [r2, #0]
 80100fe:	1855      	adds	r5, r2, r1
 8010100:	42a5      	cmp	r5, r4
 8010102:	d10b      	bne.n	801011c <_free_r+0x70>
 8010104:	6824      	ldr	r4, [r4, #0]
 8010106:	4421      	add	r1, r4
 8010108:	1854      	adds	r4, r2, r1
 801010a:	42a3      	cmp	r3, r4
 801010c:	6011      	str	r1, [r2, #0]
 801010e:	d1e0      	bne.n	80100d2 <_free_r+0x26>
 8010110:	681c      	ldr	r4, [r3, #0]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	6053      	str	r3, [r2, #4]
 8010116:	440c      	add	r4, r1
 8010118:	6014      	str	r4, [r2, #0]
 801011a:	e7da      	b.n	80100d2 <_free_r+0x26>
 801011c:	d902      	bls.n	8010124 <_free_r+0x78>
 801011e:	230c      	movs	r3, #12
 8010120:	6003      	str	r3, [r0, #0]
 8010122:	e7d6      	b.n	80100d2 <_free_r+0x26>
 8010124:	6825      	ldr	r5, [r4, #0]
 8010126:	1961      	adds	r1, r4, r5
 8010128:	428b      	cmp	r3, r1
 801012a:	bf04      	itt	eq
 801012c:	6819      	ldreq	r1, [r3, #0]
 801012e:	685b      	ldreq	r3, [r3, #4]
 8010130:	6063      	str	r3, [r4, #4]
 8010132:	bf04      	itt	eq
 8010134:	1949      	addeq	r1, r1, r5
 8010136:	6021      	streq	r1, [r4, #0]
 8010138:	6054      	str	r4, [r2, #4]
 801013a:	e7ca      	b.n	80100d2 <_free_r+0x26>
 801013c:	b003      	add	sp, #12
 801013e:	bd30      	pop	{r4, r5, pc}
 8010140:	20003ee4 	.word	0x20003ee4

08010144 <malloc>:
 8010144:	4b02      	ldr	r3, [pc, #8]	; (8010150 <malloc+0xc>)
 8010146:	4601      	mov	r1, r0
 8010148:	6818      	ldr	r0, [r3, #0]
 801014a:	f000 b823 	b.w	8010194 <_malloc_r>
 801014e:	bf00      	nop
 8010150:	20000080 	.word	0x20000080

08010154 <sbrk_aligned>:
 8010154:	b570      	push	{r4, r5, r6, lr}
 8010156:	4e0e      	ldr	r6, [pc, #56]	; (8010190 <sbrk_aligned+0x3c>)
 8010158:	460c      	mov	r4, r1
 801015a:	6831      	ldr	r1, [r6, #0]
 801015c:	4605      	mov	r5, r0
 801015e:	b911      	cbnz	r1, 8010166 <sbrk_aligned+0x12>
 8010160:	f000 ffee 	bl	8011140 <_sbrk_r>
 8010164:	6030      	str	r0, [r6, #0]
 8010166:	4621      	mov	r1, r4
 8010168:	4628      	mov	r0, r5
 801016a:	f000 ffe9 	bl	8011140 <_sbrk_r>
 801016e:	1c43      	adds	r3, r0, #1
 8010170:	d00a      	beq.n	8010188 <sbrk_aligned+0x34>
 8010172:	1cc4      	adds	r4, r0, #3
 8010174:	f024 0403 	bic.w	r4, r4, #3
 8010178:	42a0      	cmp	r0, r4
 801017a:	d007      	beq.n	801018c <sbrk_aligned+0x38>
 801017c:	1a21      	subs	r1, r4, r0
 801017e:	4628      	mov	r0, r5
 8010180:	f000 ffde 	bl	8011140 <_sbrk_r>
 8010184:	3001      	adds	r0, #1
 8010186:	d101      	bne.n	801018c <sbrk_aligned+0x38>
 8010188:	f04f 34ff 	mov.w	r4, #4294967295
 801018c:	4620      	mov	r0, r4
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	20003ee8 	.word	0x20003ee8

08010194 <_malloc_r>:
 8010194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010198:	1ccd      	adds	r5, r1, #3
 801019a:	f025 0503 	bic.w	r5, r5, #3
 801019e:	3508      	adds	r5, #8
 80101a0:	2d0c      	cmp	r5, #12
 80101a2:	bf38      	it	cc
 80101a4:	250c      	movcc	r5, #12
 80101a6:	2d00      	cmp	r5, #0
 80101a8:	4607      	mov	r7, r0
 80101aa:	db01      	blt.n	80101b0 <_malloc_r+0x1c>
 80101ac:	42a9      	cmp	r1, r5
 80101ae:	d905      	bls.n	80101bc <_malloc_r+0x28>
 80101b0:	230c      	movs	r3, #12
 80101b2:	603b      	str	r3, [r7, #0]
 80101b4:	2600      	movs	r6, #0
 80101b6:	4630      	mov	r0, r6
 80101b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010290 <_malloc_r+0xfc>
 80101c0:	f000 f868 	bl	8010294 <__malloc_lock>
 80101c4:	f8d8 3000 	ldr.w	r3, [r8]
 80101c8:	461c      	mov	r4, r3
 80101ca:	bb5c      	cbnz	r4, 8010224 <_malloc_r+0x90>
 80101cc:	4629      	mov	r1, r5
 80101ce:	4638      	mov	r0, r7
 80101d0:	f7ff ffc0 	bl	8010154 <sbrk_aligned>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	4604      	mov	r4, r0
 80101d8:	d155      	bne.n	8010286 <_malloc_r+0xf2>
 80101da:	f8d8 4000 	ldr.w	r4, [r8]
 80101de:	4626      	mov	r6, r4
 80101e0:	2e00      	cmp	r6, #0
 80101e2:	d145      	bne.n	8010270 <_malloc_r+0xdc>
 80101e4:	2c00      	cmp	r4, #0
 80101e6:	d048      	beq.n	801027a <_malloc_r+0xe6>
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	4631      	mov	r1, r6
 80101ec:	4638      	mov	r0, r7
 80101ee:	eb04 0903 	add.w	r9, r4, r3
 80101f2:	f000 ffa5 	bl	8011140 <_sbrk_r>
 80101f6:	4581      	cmp	r9, r0
 80101f8:	d13f      	bne.n	801027a <_malloc_r+0xe6>
 80101fa:	6821      	ldr	r1, [r4, #0]
 80101fc:	1a6d      	subs	r5, r5, r1
 80101fe:	4629      	mov	r1, r5
 8010200:	4638      	mov	r0, r7
 8010202:	f7ff ffa7 	bl	8010154 <sbrk_aligned>
 8010206:	3001      	adds	r0, #1
 8010208:	d037      	beq.n	801027a <_malloc_r+0xe6>
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	442b      	add	r3, r5
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	f8d8 3000 	ldr.w	r3, [r8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d038      	beq.n	801028a <_malloc_r+0xf6>
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	42a2      	cmp	r2, r4
 801021c:	d12b      	bne.n	8010276 <_malloc_r+0xe2>
 801021e:	2200      	movs	r2, #0
 8010220:	605a      	str	r2, [r3, #4]
 8010222:	e00f      	b.n	8010244 <_malloc_r+0xb0>
 8010224:	6822      	ldr	r2, [r4, #0]
 8010226:	1b52      	subs	r2, r2, r5
 8010228:	d41f      	bmi.n	801026a <_malloc_r+0xd6>
 801022a:	2a0b      	cmp	r2, #11
 801022c:	d917      	bls.n	801025e <_malloc_r+0xca>
 801022e:	1961      	adds	r1, r4, r5
 8010230:	42a3      	cmp	r3, r4
 8010232:	6025      	str	r5, [r4, #0]
 8010234:	bf18      	it	ne
 8010236:	6059      	strne	r1, [r3, #4]
 8010238:	6863      	ldr	r3, [r4, #4]
 801023a:	bf08      	it	eq
 801023c:	f8c8 1000 	streq.w	r1, [r8]
 8010240:	5162      	str	r2, [r4, r5]
 8010242:	604b      	str	r3, [r1, #4]
 8010244:	4638      	mov	r0, r7
 8010246:	f104 060b 	add.w	r6, r4, #11
 801024a:	f000 f829 	bl	80102a0 <__malloc_unlock>
 801024e:	f026 0607 	bic.w	r6, r6, #7
 8010252:	1d23      	adds	r3, r4, #4
 8010254:	1af2      	subs	r2, r6, r3
 8010256:	d0ae      	beq.n	80101b6 <_malloc_r+0x22>
 8010258:	1b9b      	subs	r3, r3, r6
 801025a:	50a3      	str	r3, [r4, r2]
 801025c:	e7ab      	b.n	80101b6 <_malloc_r+0x22>
 801025e:	42a3      	cmp	r3, r4
 8010260:	6862      	ldr	r2, [r4, #4]
 8010262:	d1dd      	bne.n	8010220 <_malloc_r+0x8c>
 8010264:	f8c8 2000 	str.w	r2, [r8]
 8010268:	e7ec      	b.n	8010244 <_malloc_r+0xb0>
 801026a:	4623      	mov	r3, r4
 801026c:	6864      	ldr	r4, [r4, #4]
 801026e:	e7ac      	b.n	80101ca <_malloc_r+0x36>
 8010270:	4634      	mov	r4, r6
 8010272:	6876      	ldr	r6, [r6, #4]
 8010274:	e7b4      	b.n	80101e0 <_malloc_r+0x4c>
 8010276:	4613      	mov	r3, r2
 8010278:	e7cc      	b.n	8010214 <_malloc_r+0x80>
 801027a:	230c      	movs	r3, #12
 801027c:	603b      	str	r3, [r7, #0]
 801027e:	4638      	mov	r0, r7
 8010280:	f000 f80e 	bl	80102a0 <__malloc_unlock>
 8010284:	e797      	b.n	80101b6 <_malloc_r+0x22>
 8010286:	6025      	str	r5, [r4, #0]
 8010288:	e7dc      	b.n	8010244 <_malloc_r+0xb0>
 801028a:	605b      	str	r3, [r3, #4]
 801028c:	deff      	udf	#255	; 0xff
 801028e:	bf00      	nop
 8010290:	20003ee4 	.word	0x20003ee4

08010294 <__malloc_lock>:
 8010294:	4801      	ldr	r0, [pc, #4]	; (801029c <__malloc_lock+0x8>)
 8010296:	f7ff b87e 	b.w	800f396 <__retarget_lock_acquire_recursive>
 801029a:	bf00      	nop
 801029c:	20003ee0 	.word	0x20003ee0

080102a0 <__malloc_unlock>:
 80102a0:	4801      	ldr	r0, [pc, #4]	; (80102a8 <__malloc_unlock+0x8>)
 80102a2:	f7ff b879 	b.w	800f398 <__retarget_lock_release_recursive>
 80102a6:	bf00      	nop
 80102a8:	20003ee0 	.word	0x20003ee0

080102ac <_Balloc>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	69c6      	ldr	r6, [r0, #28]
 80102b0:	4604      	mov	r4, r0
 80102b2:	460d      	mov	r5, r1
 80102b4:	b976      	cbnz	r6, 80102d4 <_Balloc+0x28>
 80102b6:	2010      	movs	r0, #16
 80102b8:	f7ff ff44 	bl	8010144 <malloc>
 80102bc:	4602      	mov	r2, r0
 80102be:	61e0      	str	r0, [r4, #28]
 80102c0:	b920      	cbnz	r0, 80102cc <_Balloc+0x20>
 80102c2:	4b18      	ldr	r3, [pc, #96]	; (8010324 <_Balloc+0x78>)
 80102c4:	4818      	ldr	r0, [pc, #96]	; (8010328 <_Balloc+0x7c>)
 80102c6:	216b      	movs	r1, #107	; 0x6b
 80102c8:	f000 ff4a 	bl	8011160 <__assert_func>
 80102cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102d0:	6006      	str	r6, [r0, #0]
 80102d2:	60c6      	str	r6, [r0, #12]
 80102d4:	69e6      	ldr	r6, [r4, #28]
 80102d6:	68f3      	ldr	r3, [r6, #12]
 80102d8:	b183      	cbz	r3, 80102fc <_Balloc+0x50>
 80102da:	69e3      	ldr	r3, [r4, #28]
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102e2:	b9b8      	cbnz	r0, 8010314 <_Balloc+0x68>
 80102e4:	2101      	movs	r1, #1
 80102e6:	fa01 f605 	lsl.w	r6, r1, r5
 80102ea:	1d72      	adds	r2, r6, #5
 80102ec:	0092      	lsls	r2, r2, #2
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 ff54 	bl	801119c <_calloc_r>
 80102f4:	b160      	cbz	r0, 8010310 <_Balloc+0x64>
 80102f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102fa:	e00e      	b.n	801031a <_Balloc+0x6e>
 80102fc:	2221      	movs	r2, #33	; 0x21
 80102fe:	2104      	movs	r1, #4
 8010300:	4620      	mov	r0, r4
 8010302:	f000 ff4b 	bl	801119c <_calloc_r>
 8010306:	69e3      	ldr	r3, [r4, #28]
 8010308:	60f0      	str	r0, [r6, #12]
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1e4      	bne.n	80102da <_Balloc+0x2e>
 8010310:	2000      	movs	r0, #0
 8010312:	bd70      	pop	{r4, r5, r6, pc}
 8010314:	6802      	ldr	r2, [r0, #0]
 8010316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801031a:	2300      	movs	r3, #0
 801031c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010320:	e7f7      	b.n	8010312 <_Balloc+0x66>
 8010322:	bf00      	nop
 8010324:	08013535 	.word	0x08013535
 8010328:	080135b5 	.word	0x080135b5

0801032c <_Bfree>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	69c6      	ldr	r6, [r0, #28]
 8010330:	4605      	mov	r5, r0
 8010332:	460c      	mov	r4, r1
 8010334:	b976      	cbnz	r6, 8010354 <_Bfree+0x28>
 8010336:	2010      	movs	r0, #16
 8010338:	f7ff ff04 	bl	8010144 <malloc>
 801033c:	4602      	mov	r2, r0
 801033e:	61e8      	str	r0, [r5, #28]
 8010340:	b920      	cbnz	r0, 801034c <_Bfree+0x20>
 8010342:	4b09      	ldr	r3, [pc, #36]	; (8010368 <_Bfree+0x3c>)
 8010344:	4809      	ldr	r0, [pc, #36]	; (801036c <_Bfree+0x40>)
 8010346:	218f      	movs	r1, #143	; 0x8f
 8010348:	f000 ff0a 	bl	8011160 <__assert_func>
 801034c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010350:	6006      	str	r6, [r0, #0]
 8010352:	60c6      	str	r6, [r0, #12]
 8010354:	b13c      	cbz	r4, 8010366 <_Bfree+0x3a>
 8010356:	69eb      	ldr	r3, [r5, #28]
 8010358:	6862      	ldr	r2, [r4, #4]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010360:	6021      	str	r1, [r4, #0]
 8010362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010366:	bd70      	pop	{r4, r5, r6, pc}
 8010368:	08013535 	.word	0x08013535
 801036c:	080135b5 	.word	0x080135b5

08010370 <__multadd>:
 8010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010374:	690d      	ldr	r5, [r1, #16]
 8010376:	4607      	mov	r7, r0
 8010378:	460c      	mov	r4, r1
 801037a:	461e      	mov	r6, r3
 801037c:	f101 0c14 	add.w	ip, r1, #20
 8010380:	2000      	movs	r0, #0
 8010382:	f8dc 3000 	ldr.w	r3, [ip]
 8010386:	b299      	uxth	r1, r3
 8010388:	fb02 6101 	mla	r1, r2, r1, r6
 801038c:	0c1e      	lsrs	r6, r3, #16
 801038e:	0c0b      	lsrs	r3, r1, #16
 8010390:	fb02 3306 	mla	r3, r2, r6, r3
 8010394:	b289      	uxth	r1, r1
 8010396:	3001      	adds	r0, #1
 8010398:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801039c:	4285      	cmp	r5, r0
 801039e:	f84c 1b04 	str.w	r1, [ip], #4
 80103a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80103a6:	dcec      	bgt.n	8010382 <__multadd+0x12>
 80103a8:	b30e      	cbz	r6, 80103ee <__multadd+0x7e>
 80103aa:	68a3      	ldr	r3, [r4, #8]
 80103ac:	42ab      	cmp	r3, r5
 80103ae:	dc19      	bgt.n	80103e4 <__multadd+0x74>
 80103b0:	6861      	ldr	r1, [r4, #4]
 80103b2:	4638      	mov	r0, r7
 80103b4:	3101      	adds	r1, #1
 80103b6:	f7ff ff79 	bl	80102ac <_Balloc>
 80103ba:	4680      	mov	r8, r0
 80103bc:	b928      	cbnz	r0, 80103ca <__multadd+0x5a>
 80103be:	4602      	mov	r2, r0
 80103c0:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <__multadd+0x84>)
 80103c2:	480d      	ldr	r0, [pc, #52]	; (80103f8 <__multadd+0x88>)
 80103c4:	21ba      	movs	r1, #186	; 0xba
 80103c6:	f000 fecb 	bl	8011160 <__assert_func>
 80103ca:	6922      	ldr	r2, [r4, #16]
 80103cc:	3202      	adds	r2, #2
 80103ce:	f104 010c 	add.w	r1, r4, #12
 80103d2:	0092      	lsls	r2, r2, #2
 80103d4:	300c      	adds	r0, #12
 80103d6:	f7fe ffe0 	bl	800f39a <memcpy>
 80103da:	4621      	mov	r1, r4
 80103dc:	4638      	mov	r0, r7
 80103de:	f7ff ffa5 	bl	801032c <_Bfree>
 80103e2:	4644      	mov	r4, r8
 80103e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103e8:	3501      	adds	r5, #1
 80103ea:	615e      	str	r6, [r3, #20]
 80103ec:	6125      	str	r5, [r4, #16]
 80103ee:	4620      	mov	r0, r4
 80103f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f4:	080135a4 	.word	0x080135a4
 80103f8:	080135b5 	.word	0x080135b5

080103fc <__hi0bits>:
 80103fc:	0c03      	lsrs	r3, r0, #16
 80103fe:	041b      	lsls	r3, r3, #16
 8010400:	b9d3      	cbnz	r3, 8010438 <__hi0bits+0x3c>
 8010402:	0400      	lsls	r0, r0, #16
 8010404:	2310      	movs	r3, #16
 8010406:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801040a:	bf04      	itt	eq
 801040c:	0200      	lsleq	r0, r0, #8
 801040e:	3308      	addeq	r3, #8
 8010410:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010414:	bf04      	itt	eq
 8010416:	0100      	lsleq	r0, r0, #4
 8010418:	3304      	addeq	r3, #4
 801041a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801041e:	bf04      	itt	eq
 8010420:	0080      	lsleq	r0, r0, #2
 8010422:	3302      	addeq	r3, #2
 8010424:	2800      	cmp	r0, #0
 8010426:	db05      	blt.n	8010434 <__hi0bits+0x38>
 8010428:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801042c:	f103 0301 	add.w	r3, r3, #1
 8010430:	bf08      	it	eq
 8010432:	2320      	moveq	r3, #32
 8010434:	4618      	mov	r0, r3
 8010436:	4770      	bx	lr
 8010438:	2300      	movs	r3, #0
 801043a:	e7e4      	b.n	8010406 <__hi0bits+0xa>

0801043c <__lo0bits>:
 801043c:	6803      	ldr	r3, [r0, #0]
 801043e:	f013 0207 	ands.w	r2, r3, #7
 8010442:	d00c      	beq.n	801045e <__lo0bits+0x22>
 8010444:	07d9      	lsls	r1, r3, #31
 8010446:	d422      	bmi.n	801048e <__lo0bits+0x52>
 8010448:	079a      	lsls	r2, r3, #30
 801044a:	bf49      	itett	mi
 801044c:	085b      	lsrmi	r3, r3, #1
 801044e:	089b      	lsrpl	r3, r3, #2
 8010450:	6003      	strmi	r3, [r0, #0]
 8010452:	2201      	movmi	r2, #1
 8010454:	bf5c      	itt	pl
 8010456:	6003      	strpl	r3, [r0, #0]
 8010458:	2202      	movpl	r2, #2
 801045a:	4610      	mov	r0, r2
 801045c:	4770      	bx	lr
 801045e:	b299      	uxth	r1, r3
 8010460:	b909      	cbnz	r1, 8010466 <__lo0bits+0x2a>
 8010462:	0c1b      	lsrs	r3, r3, #16
 8010464:	2210      	movs	r2, #16
 8010466:	b2d9      	uxtb	r1, r3
 8010468:	b909      	cbnz	r1, 801046e <__lo0bits+0x32>
 801046a:	3208      	adds	r2, #8
 801046c:	0a1b      	lsrs	r3, r3, #8
 801046e:	0719      	lsls	r1, r3, #28
 8010470:	bf04      	itt	eq
 8010472:	091b      	lsreq	r3, r3, #4
 8010474:	3204      	addeq	r2, #4
 8010476:	0799      	lsls	r1, r3, #30
 8010478:	bf04      	itt	eq
 801047a:	089b      	lsreq	r3, r3, #2
 801047c:	3202      	addeq	r2, #2
 801047e:	07d9      	lsls	r1, r3, #31
 8010480:	d403      	bmi.n	801048a <__lo0bits+0x4e>
 8010482:	085b      	lsrs	r3, r3, #1
 8010484:	f102 0201 	add.w	r2, r2, #1
 8010488:	d003      	beq.n	8010492 <__lo0bits+0x56>
 801048a:	6003      	str	r3, [r0, #0]
 801048c:	e7e5      	b.n	801045a <__lo0bits+0x1e>
 801048e:	2200      	movs	r2, #0
 8010490:	e7e3      	b.n	801045a <__lo0bits+0x1e>
 8010492:	2220      	movs	r2, #32
 8010494:	e7e1      	b.n	801045a <__lo0bits+0x1e>
	...

08010498 <__i2b>:
 8010498:	b510      	push	{r4, lr}
 801049a:	460c      	mov	r4, r1
 801049c:	2101      	movs	r1, #1
 801049e:	f7ff ff05 	bl	80102ac <_Balloc>
 80104a2:	4602      	mov	r2, r0
 80104a4:	b928      	cbnz	r0, 80104b2 <__i2b+0x1a>
 80104a6:	4b05      	ldr	r3, [pc, #20]	; (80104bc <__i2b+0x24>)
 80104a8:	4805      	ldr	r0, [pc, #20]	; (80104c0 <__i2b+0x28>)
 80104aa:	f240 1145 	movw	r1, #325	; 0x145
 80104ae:	f000 fe57 	bl	8011160 <__assert_func>
 80104b2:	2301      	movs	r3, #1
 80104b4:	6144      	str	r4, [r0, #20]
 80104b6:	6103      	str	r3, [r0, #16]
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	bf00      	nop
 80104bc:	080135a4 	.word	0x080135a4
 80104c0:	080135b5 	.word	0x080135b5

080104c4 <__multiply>:
 80104c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c8:	4691      	mov	r9, r2
 80104ca:	690a      	ldr	r2, [r1, #16]
 80104cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	bfb8      	it	lt
 80104d4:	460b      	movlt	r3, r1
 80104d6:	460c      	mov	r4, r1
 80104d8:	bfbc      	itt	lt
 80104da:	464c      	movlt	r4, r9
 80104dc:	4699      	movlt	r9, r3
 80104de:	6927      	ldr	r7, [r4, #16]
 80104e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104e4:	68a3      	ldr	r3, [r4, #8]
 80104e6:	6861      	ldr	r1, [r4, #4]
 80104e8:	eb07 060a 	add.w	r6, r7, sl
 80104ec:	42b3      	cmp	r3, r6
 80104ee:	b085      	sub	sp, #20
 80104f0:	bfb8      	it	lt
 80104f2:	3101      	addlt	r1, #1
 80104f4:	f7ff feda 	bl	80102ac <_Balloc>
 80104f8:	b930      	cbnz	r0, 8010508 <__multiply+0x44>
 80104fa:	4602      	mov	r2, r0
 80104fc:	4b44      	ldr	r3, [pc, #272]	; (8010610 <__multiply+0x14c>)
 80104fe:	4845      	ldr	r0, [pc, #276]	; (8010614 <__multiply+0x150>)
 8010500:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010504:	f000 fe2c 	bl	8011160 <__assert_func>
 8010508:	f100 0514 	add.w	r5, r0, #20
 801050c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010510:	462b      	mov	r3, r5
 8010512:	2200      	movs	r2, #0
 8010514:	4543      	cmp	r3, r8
 8010516:	d321      	bcc.n	801055c <__multiply+0x98>
 8010518:	f104 0314 	add.w	r3, r4, #20
 801051c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010520:	f109 0314 	add.w	r3, r9, #20
 8010524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010528:	9202      	str	r2, [sp, #8]
 801052a:	1b3a      	subs	r2, r7, r4
 801052c:	3a15      	subs	r2, #21
 801052e:	f022 0203 	bic.w	r2, r2, #3
 8010532:	3204      	adds	r2, #4
 8010534:	f104 0115 	add.w	r1, r4, #21
 8010538:	428f      	cmp	r7, r1
 801053a:	bf38      	it	cc
 801053c:	2204      	movcc	r2, #4
 801053e:	9201      	str	r2, [sp, #4]
 8010540:	9a02      	ldr	r2, [sp, #8]
 8010542:	9303      	str	r3, [sp, #12]
 8010544:	429a      	cmp	r2, r3
 8010546:	d80c      	bhi.n	8010562 <__multiply+0x9e>
 8010548:	2e00      	cmp	r6, #0
 801054a:	dd03      	ble.n	8010554 <__multiply+0x90>
 801054c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010550:	2b00      	cmp	r3, #0
 8010552:	d05b      	beq.n	801060c <__multiply+0x148>
 8010554:	6106      	str	r6, [r0, #16]
 8010556:	b005      	add	sp, #20
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	f843 2b04 	str.w	r2, [r3], #4
 8010560:	e7d8      	b.n	8010514 <__multiply+0x50>
 8010562:	f8b3 a000 	ldrh.w	sl, [r3]
 8010566:	f1ba 0f00 	cmp.w	sl, #0
 801056a:	d024      	beq.n	80105b6 <__multiply+0xf2>
 801056c:	f104 0e14 	add.w	lr, r4, #20
 8010570:	46a9      	mov	r9, r5
 8010572:	f04f 0c00 	mov.w	ip, #0
 8010576:	f85e 2b04 	ldr.w	r2, [lr], #4
 801057a:	f8d9 1000 	ldr.w	r1, [r9]
 801057e:	fa1f fb82 	uxth.w	fp, r2
 8010582:	b289      	uxth	r1, r1
 8010584:	fb0a 110b 	mla	r1, sl, fp, r1
 8010588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801058c:	f8d9 2000 	ldr.w	r2, [r9]
 8010590:	4461      	add	r1, ip
 8010592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010596:	fb0a c20b 	mla	r2, sl, fp, ip
 801059a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801059e:	b289      	uxth	r1, r1
 80105a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105a4:	4577      	cmp	r7, lr
 80105a6:	f849 1b04 	str.w	r1, [r9], #4
 80105aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105ae:	d8e2      	bhi.n	8010576 <__multiply+0xb2>
 80105b0:	9a01      	ldr	r2, [sp, #4]
 80105b2:	f845 c002 	str.w	ip, [r5, r2]
 80105b6:	9a03      	ldr	r2, [sp, #12]
 80105b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105bc:	3304      	adds	r3, #4
 80105be:	f1b9 0f00 	cmp.w	r9, #0
 80105c2:	d021      	beq.n	8010608 <__multiply+0x144>
 80105c4:	6829      	ldr	r1, [r5, #0]
 80105c6:	f104 0c14 	add.w	ip, r4, #20
 80105ca:	46ae      	mov	lr, r5
 80105cc:	f04f 0a00 	mov.w	sl, #0
 80105d0:	f8bc b000 	ldrh.w	fp, [ip]
 80105d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105d8:	fb09 220b 	mla	r2, r9, fp, r2
 80105dc:	4452      	add	r2, sl
 80105de:	b289      	uxth	r1, r1
 80105e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105e4:	f84e 1b04 	str.w	r1, [lr], #4
 80105e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80105ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80105f0:	f8be 1000 	ldrh.w	r1, [lr]
 80105f4:	fb09 110a 	mla	r1, r9, sl, r1
 80105f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80105fc:	4567      	cmp	r7, ip
 80105fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010602:	d8e5      	bhi.n	80105d0 <__multiply+0x10c>
 8010604:	9a01      	ldr	r2, [sp, #4]
 8010606:	50a9      	str	r1, [r5, r2]
 8010608:	3504      	adds	r5, #4
 801060a:	e799      	b.n	8010540 <__multiply+0x7c>
 801060c:	3e01      	subs	r6, #1
 801060e:	e79b      	b.n	8010548 <__multiply+0x84>
 8010610:	080135a4 	.word	0x080135a4
 8010614:	080135b5 	.word	0x080135b5

08010618 <__pow5mult>:
 8010618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801061c:	4615      	mov	r5, r2
 801061e:	f012 0203 	ands.w	r2, r2, #3
 8010622:	4606      	mov	r6, r0
 8010624:	460f      	mov	r7, r1
 8010626:	d007      	beq.n	8010638 <__pow5mult+0x20>
 8010628:	4c25      	ldr	r4, [pc, #148]	; (80106c0 <__pow5mult+0xa8>)
 801062a:	3a01      	subs	r2, #1
 801062c:	2300      	movs	r3, #0
 801062e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010632:	f7ff fe9d 	bl	8010370 <__multadd>
 8010636:	4607      	mov	r7, r0
 8010638:	10ad      	asrs	r5, r5, #2
 801063a:	d03d      	beq.n	80106b8 <__pow5mult+0xa0>
 801063c:	69f4      	ldr	r4, [r6, #28]
 801063e:	b97c      	cbnz	r4, 8010660 <__pow5mult+0x48>
 8010640:	2010      	movs	r0, #16
 8010642:	f7ff fd7f 	bl	8010144 <malloc>
 8010646:	4602      	mov	r2, r0
 8010648:	61f0      	str	r0, [r6, #28]
 801064a:	b928      	cbnz	r0, 8010658 <__pow5mult+0x40>
 801064c:	4b1d      	ldr	r3, [pc, #116]	; (80106c4 <__pow5mult+0xac>)
 801064e:	481e      	ldr	r0, [pc, #120]	; (80106c8 <__pow5mult+0xb0>)
 8010650:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010654:	f000 fd84 	bl	8011160 <__assert_func>
 8010658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801065c:	6004      	str	r4, [r0, #0]
 801065e:	60c4      	str	r4, [r0, #12]
 8010660:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010668:	b94c      	cbnz	r4, 801067e <__pow5mult+0x66>
 801066a:	f240 2171 	movw	r1, #625	; 0x271
 801066e:	4630      	mov	r0, r6
 8010670:	f7ff ff12 	bl	8010498 <__i2b>
 8010674:	2300      	movs	r3, #0
 8010676:	f8c8 0008 	str.w	r0, [r8, #8]
 801067a:	4604      	mov	r4, r0
 801067c:	6003      	str	r3, [r0, #0]
 801067e:	f04f 0900 	mov.w	r9, #0
 8010682:	07eb      	lsls	r3, r5, #31
 8010684:	d50a      	bpl.n	801069c <__pow5mult+0x84>
 8010686:	4639      	mov	r1, r7
 8010688:	4622      	mov	r2, r4
 801068a:	4630      	mov	r0, r6
 801068c:	f7ff ff1a 	bl	80104c4 <__multiply>
 8010690:	4639      	mov	r1, r7
 8010692:	4680      	mov	r8, r0
 8010694:	4630      	mov	r0, r6
 8010696:	f7ff fe49 	bl	801032c <_Bfree>
 801069a:	4647      	mov	r7, r8
 801069c:	106d      	asrs	r5, r5, #1
 801069e:	d00b      	beq.n	80106b8 <__pow5mult+0xa0>
 80106a0:	6820      	ldr	r0, [r4, #0]
 80106a2:	b938      	cbnz	r0, 80106b4 <__pow5mult+0x9c>
 80106a4:	4622      	mov	r2, r4
 80106a6:	4621      	mov	r1, r4
 80106a8:	4630      	mov	r0, r6
 80106aa:	f7ff ff0b 	bl	80104c4 <__multiply>
 80106ae:	6020      	str	r0, [r4, #0]
 80106b0:	f8c0 9000 	str.w	r9, [r0]
 80106b4:	4604      	mov	r4, r0
 80106b6:	e7e4      	b.n	8010682 <__pow5mult+0x6a>
 80106b8:	4638      	mov	r0, r7
 80106ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106be:	bf00      	nop
 80106c0:	08013700 	.word	0x08013700
 80106c4:	08013535 	.word	0x08013535
 80106c8:	080135b5 	.word	0x080135b5

080106cc <__lshift>:
 80106cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106d0:	460c      	mov	r4, r1
 80106d2:	6849      	ldr	r1, [r1, #4]
 80106d4:	6923      	ldr	r3, [r4, #16]
 80106d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	4607      	mov	r7, r0
 80106de:	4691      	mov	r9, r2
 80106e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106e4:	f108 0601 	add.w	r6, r8, #1
 80106e8:	42b3      	cmp	r3, r6
 80106ea:	db0b      	blt.n	8010704 <__lshift+0x38>
 80106ec:	4638      	mov	r0, r7
 80106ee:	f7ff fddd 	bl	80102ac <_Balloc>
 80106f2:	4605      	mov	r5, r0
 80106f4:	b948      	cbnz	r0, 801070a <__lshift+0x3e>
 80106f6:	4602      	mov	r2, r0
 80106f8:	4b28      	ldr	r3, [pc, #160]	; (801079c <__lshift+0xd0>)
 80106fa:	4829      	ldr	r0, [pc, #164]	; (80107a0 <__lshift+0xd4>)
 80106fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010700:	f000 fd2e 	bl	8011160 <__assert_func>
 8010704:	3101      	adds	r1, #1
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	e7ee      	b.n	80106e8 <__lshift+0x1c>
 801070a:	2300      	movs	r3, #0
 801070c:	f100 0114 	add.w	r1, r0, #20
 8010710:	f100 0210 	add.w	r2, r0, #16
 8010714:	4618      	mov	r0, r3
 8010716:	4553      	cmp	r3, sl
 8010718:	db33      	blt.n	8010782 <__lshift+0xb6>
 801071a:	6920      	ldr	r0, [r4, #16]
 801071c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010720:	f104 0314 	add.w	r3, r4, #20
 8010724:	f019 091f 	ands.w	r9, r9, #31
 8010728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801072c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010730:	d02b      	beq.n	801078a <__lshift+0xbe>
 8010732:	f1c9 0e20 	rsb	lr, r9, #32
 8010736:	468a      	mov	sl, r1
 8010738:	2200      	movs	r2, #0
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	fa00 f009 	lsl.w	r0, r0, r9
 8010740:	4310      	orrs	r0, r2
 8010742:	f84a 0b04 	str.w	r0, [sl], #4
 8010746:	f853 2b04 	ldr.w	r2, [r3], #4
 801074a:	459c      	cmp	ip, r3
 801074c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010750:	d8f3      	bhi.n	801073a <__lshift+0x6e>
 8010752:	ebac 0304 	sub.w	r3, ip, r4
 8010756:	3b15      	subs	r3, #21
 8010758:	f023 0303 	bic.w	r3, r3, #3
 801075c:	3304      	adds	r3, #4
 801075e:	f104 0015 	add.w	r0, r4, #21
 8010762:	4584      	cmp	ip, r0
 8010764:	bf38      	it	cc
 8010766:	2304      	movcc	r3, #4
 8010768:	50ca      	str	r2, [r1, r3]
 801076a:	b10a      	cbz	r2, 8010770 <__lshift+0xa4>
 801076c:	f108 0602 	add.w	r6, r8, #2
 8010770:	3e01      	subs	r6, #1
 8010772:	4638      	mov	r0, r7
 8010774:	612e      	str	r6, [r5, #16]
 8010776:	4621      	mov	r1, r4
 8010778:	f7ff fdd8 	bl	801032c <_Bfree>
 801077c:	4628      	mov	r0, r5
 801077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010782:	f842 0f04 	str.w	r0, [r2, #4]!
 8010786:	3301      	adds	r3, #1
 8010788:	e7c5      	b.n	8010716 <__lshift+0x4a>
 801078a:	3904      	subs	r1, #4
 801078c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010790:	f841 2f04 	str.w	r2, [r1, #4]!
 8010794:	459c      	cmp	ip, r3
 8010796:	d8f9      	bhi.n	801078c <__lshift+0xc0>
 8010798:	e7ea      	b.n	8010770 <__lshift+0xa4>
 801079a:	bf00      	nop
 801079c:	080135a4 	.word	0x080135a4
 80107a0:	080135b5 	.word	0x080135b5

080107a4 <__mcmp>:
 80107a4:	b530      	push	{r4, r5, lr}
 80107a6:	6902      	ldr	r2, [r0, #16]
 80107a8:	690c      	ldr	r4, [r1, #16]
 80107aa:	1b12      	subs	r2, r2, r4
 80107ac:	d10e      	bne.n	80107cc <__mcmp+0x28>
 80107ae:	f100 0314 	add.w	r3, r0, #20
 80107b2:	3114      	adds	r1, #20
 80107b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107c4:	42a5      	cmp	r5, r4
 80107c6:	d003      	beq.n	80107d0 <__mcmp+0x2c>
 80107c8:	d305      	bcc.n	80107d6 <__mcmp+0x32>
 80107ca:	2201      	movs	r2, #1
 80107cc:	4610      	mov	r0, r2
 80107ce:	bd30      	pop	{r4, r5, pc}
 80107d0:	4283      	cmp	r3, r0
 80107d2:	d3f3      	bcc.n	80107bc <__mcmp+0x18>
 80107d4:	e7fa      	b.n	80107cc <__mcmp+0x28>
 80107d6:	f04f 32ff 	mov.w	r2, #4294967295
 80107da:	e7f7      	b.n	80107cc <__mcmp+0x28>

080107dc <__mdiff>:
 80107dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e0:	460c      	mov	r4, r1
 80107e2:	4606      	mov	r6, r0
 80107e4:	4611      	mov	r1, r2
 80107e6:	4620      	mov	r0, r4
 80107e8:	4690      	mov	r8, r2
 80107ea:	f7ff ffdb 	bl	80107a4 <__mcmp>
 80107ee:	1e05      	subs	r5, r0, #0
 80107f0:	d110      	bne.n	8010814 <__mdiff+0x38>
 80107f2:	4629      	mov	r1, r5
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7ff fd59 	bl	80102ac <_Balloc>
 80107fa:	b930      	cbnz	r0, 801080a <__mdiff+0x2e>
 80107fc:	4b3a      	ldr	r3, [pc, #232]	; (80108e8 <__mdiff+0x10c>)
 80107fe:	4602      	mov	r2, r0
 8010800:	f240 2137 	movw	r1, #567	; 0x237
 8010804:	4839      	ldr	r0, [pc, #228]	; (80108ec <__mdiff+0x110>)
 8010806:	f000 fcab 	bl	8011160 <__assert_func>
 801080a:	2301      	movs	r3, #1
 801080c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010814:	bfa4      	itt	ge
 8010816:	4643      	movge	r3, r8
 8010818:	46a0      	movge	r8, r4
 801081a:	4630      	mov	r0, r6
 801081c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010820:	bfa6      	itte	ge
 8010822:	461c      	movge	r4, r3
 8010824:	2500      	movge	r5, #0
 8010826:	2501      	movlt	r5, #1
 8010828:	f7ff fd40 	bl	80102ac <_Balloc>
 801082c:	b920      	cbnz	r0, 8010838 <__mdiff+0x5c>
 801082e:	4b2e      	ldr	r3, [pc, #184]	; (80108e8 <__mdiff+0x10c>)
 8010830:	4602      	mov	r2, r0
 8010832:	f240 2145 	movw	r1, #581	; 0x245
 8010836:	e7e5      	b.n	8010804 <__mdiff+0x28>
 8010838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801083c:	6926      	ldr	r6, [r4, #16]
 801083e:	60c5      	str	r5, [r0, #12]
 8010840:	f104 0914 	add.w	r9, r4, #20
 8010844:	f108 0514 	add.w	r5, r8, #20
 8010848:	f100 0e14 	add.w	lr, r0, #20
 801084c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010854:	f108 0210 	add.w	r2, r8, #16
 8010858:	46f2      	mov	sl, lr
 801085a:	2100      	movs	r1, #0
 801085c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010864:	fa11 f88b 	uxtah	r8, r1, fp
 8010868:	b299      	uxth	r1, r3
 801086a:	0c1b      	lsrs	r3, r3, #16
 801086c:	eba8 0801 	sub.w	r8, r8, r1
 8010870:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010874:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010878:	fa1f f888 	uxth.w	r8, r8
 801087c:	1419      	asrs	r1, r3, #16
 801087e:	454e      	cmp	r6, r9
 8010880:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010884:	f84a 3b04 	str.w	r3, [sl], #4
 8010888:	d8e8      	bhi.n	801085c <__mdiff+0x80>
 801088a:	1b33      	subs	r3, r6, r4
 801088c:	3b15      	subs	r3, #21
 801088e:	f023 0303 	bic.w	r3, r3, #3
 8010892:	3304      	adds	r3, #4
 8010894:	3415      	adds	r4, #21
 8010896:	42a6      	cmp	r6, r4
 8010898:	bf38      	it	cc
 801089a:	2304      	movcc	r3, #4
 801089c:	441d      	add	r5, r3
 801089e:	4473      	add	r3, lr
 80108a0:	469e      	mov	lr, r3
 80108a2:	462e      	mov	r6, r5
 80108a4:	4566      	cmp	r6, ip
 80108a6:	d30e      	bcc.n	80108c6 <__mdiff+0xea>
 80108a8:	f10c 0203 	add.w	r2, ip, #3
 80108ac:	1b52      	subs	r2, r2, r5
 80108ae:	f022 0203 	bic.w	r2, r2, #3
 80108b2:	3d03      	subs	r5, #3
 80108b4:	45ac      	cmp	ip, r5
 80108b6:	bf38      	it	cc
 80108b8:	2200      	movcc	r2, #0
 80108ba:	4413      	add	r3, r2
 80108bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80108c0:	b17a      	cbz	r2, 80108e2 <__mdiff+0x106>
 80108c2:	6107      	str	r7, [r0, #16]
 80108c4:	e7a4      	b.n	8010810 <__mdiff+0x34>
 80108c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80108ca:	fa11 f288 	uxtah	r2, r1, r8
 80108ce:	1414      	asrs	r4, r2, #16
 80108d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108d4:	b292      	uxth	r2, r2
 80108d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108da:	f84e 2b04 	str.w	r2, [lr], #4
 80108de:	1421      	asrs	r1, r4, #16
 80108e0:	e7e0      	b.n	80108a4 <__mdiff+0xc8>
 80108e2:	3f01      	subs	r7, #1
 80108e4:	e7ea      	b.n	80108bc <__mdiff+0xe0>
 80108e6:	bf00      	nop
 80108e8:	080135a4 	.word	0x080135a4
 80108ec:	080135b5 	.word	0x080135b5

080108f0 <__d2b>:
 80108f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108f4:	460f      	mov	r7, r1
 80108f6:	2101      	movs	r1, #1
 80108f8:	ec59 8b10 	vmov	r8, r9, d0
 80108fc:	4616      	mov	r6, r2
 80108fe:	f7ff fcd5 	bl	80102ac <_Balloc>
 8010902:	4604      	mov	r4, r0
 8010904:	b930      	cbnz	r0, 8010914 <__d2b+0x24>
 8010906:	4602      	mov	r2, r0
 8010908:	4b24      	ldr	r3, [pc, #144]	; (801099c <__d2b+0xac>)
 801090a:	4825      	ldr	r0, [pc, #148]	; (80109a0 <__d2b+0xb0>)
 801090c:	f240 310f 	movw	r1, #783	; 0x30f
 8010910:	f000 fc26 	bl	8011160 <__assert_func>
 8010914:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801091c:	bb2d      	cbnz	r5, 801096a <__d2b+0x7a>
 801091e:	9301      	str	r3, [sp, #4]
 8010920:	f1b8 0300 	subs.w	r3, r8, #0
 8010924:	d026      	beq.n	8010974 <__d2b+0x84>
 8010926:	4668      	mov	r0, sp
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	f7ff fd87 	bl	801043c <__lo0bits>
 801092e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010932:	b1e8      	cbz	r0, 8010970 <__d2b+0x80>
 8010934:	f1c0 0320 	rsb	r3, r0, #32
 8010938:	fa02 f303 	lsl.w	r3, r2, r3
 801093c:	430b      	orrs	r3, r1
 801093e:	40c2      	lsrs	r2, r0
 8010940:	6163      	str	r3, [r4, #20]
 8010942:	9201      	str	r2, [sp, #4]
 8010944:	9b01      	ldr	r3, [sp, #4]
 8010946:	61a3      	str	r3, [r4, #24]
 8010948:	2b00      	cmp	r3, #0
 801094a:	bf14      	ite	ne
 801094c:	2202      	movne	r2, #2
 801094e:	2201      	moveq	r2, #1
 8010950:	6122      	str	r2, [r4, #16]
 8010952:	b1bd      	cbz	r5, 8010984 <__d2b+0x94>
 8010954:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010958:	4405      	add	r5, r0
 801095a:	603d      	str	r5, [r7, #0]
 801095c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010960:	6030      	str	r0, [r6, #0]
 8010962:	4620      	mov	r0, r4
 8010964:	b003      	add	sp, #12
 8010966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801096a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801096e:	e7d6      	b.n	801091e <__d2b+0x2e>
 8010970:	6161      	str	r1, [r4, #20]
 8010972:	e7e7      	b.n	8010944 <__d2b+0x54>
 8010974:	a801      	add	r0, sp, #4
 8010976:	f7ff fd61 	bl	801043c <__lo0bits>
 801097a:	9b01      	ldr	r3, [sp, #4]
 801097c:	6163      	str	r3, [r4, #20]
 801097e:	3020      	adds	r0, #32
 8010980:	2201      	movs	r2, #1
 8010982:	e7e5      	b.n	8010950 <__d2b+0x60>
 8010984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801098c:	6038      	str	r0, [r7, #0]
 801098e:	6918      	ldr	r0, [r3, #16]
 8010990:	f7ff fd34 	bl	80103fc <__hi0bits>
 8010994:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010998:	e7e2      	b.n	8010960 <__d2b+0x70>
 801099a:	bf00      	nop
 801099c:	080135a4 	.word	0x080135a4
 80109a0:	080135b5 	.word	0x080135b5

080109a4 <__ssputs_r>:
 80109a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109a8:	688e      	ldr	r6, [r1, #8]
 80109aa:	461f      	mov	r7, r3
 80109ac:	42be      	cmp	r6, r7
 80109ae:	680b      	ldr	r3, [r1, #0]
 80109b0:	4682      	mov	sl, r0
 80109b2:	460c      	mov	r4, r1
 80109b4:	4690      	mov	r8, r2
 80109b6:	d82c      	bhi.n	8010a12 <__ssputs_r+0x6e>
 80109b8:	898a      	ldrh	r2, [r1, #12]
 80109ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109be:	d026      	beq.n	8010a0e <__ssputs_r+0x6a>
 80109c0:	6965      	ldr	r5, [r4, #20]
 80109c2:	6909      	ldr	r1, [r1, #16]
 80109c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109c8:	eba3 0901 	sub.w	r9, r3, r1
 80109cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109d0:	1c7b      	adds	r3, r7, #1
 80109d2:	444b      	add	r3, r9
 80109d4:	106d      	asrs	r5, r5, #1
 80109d6:	429d      	cmp	r5, r3
 80109d8:	bf38      	it	cc
 80109da:	461d      	movcc	r5, r3
 80109dc:	0553      	lsls	r3, r2, #21
 80109de:	d527      	bpl.n	8010a30 <__ssputs_r+0x8c>
 80109e0:	4629      	mov	r1, r5
 80109e2:	f7ff fbd7 	bl	8010194 <_malloc_r>
 80109e6:	4606      	mov	r6, r0
 80109e8:	b360      	cbz	r0, 8010a44 <__ssputs_r+0xa0>
 80109ea:	6921      	ldr	r1, [r4, #16]
 80109ec:	464a      	mov	r2, r9
 80109ee:	f7fe fcd4 	bl	800f39a <memcpy>
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80109f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109fc:	81a3      	strh	r3, [r4, #12]
 80109fe:	6126      	str	r6, [r4, #16]
 8010a00:	6165      	str	r5, [r4, #20]
 8010a02:	444e      	add	r6, r9
 8010a04:	eba5 0509 	sub.w	r5, r5, r9
 8010a08:	6026      	str	r6, [r4, #0]
 8010a0a:	60a5      	str	r5, [r4, #8]
 8010a0c:	463e      	mov	r6, r7
 8010a0e:	42be      	cmp	r6, r7
 8010a10:	d900      	bls.n	8010a14 <__ssputs_r+0x70>
 8010a12:	463e      	mov	r6, r7
 8010a14:	6820      	ldr	r0, [r4, #0]
 8010a16:	4632      	mov	r2, r6
 8010a18:	4641      	mov	r1, r8
 8010a1a:	f7fe fc25 	bl	800f268 <memmove>
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	1b9b      	subs	r3, r3, r6
 8010a22:	60a3      	str	r3, [r4, #8]
 8010a24:	6823      	ldr	r3, [r4, #0]
 8010a26:	4433      	add	r3, r6
 8010a28:	6023      	str	r3, [r4, #0]
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a30:	462a      	mov	r2, r5
 8010a32:	f000 fbdb 	bl	80111ec <_realloc_r>
 8010a36:	4606      	mov	r6, r0
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	d1e0      	bne.n	80109fe <__ssputs_r+0x5a>
 8010a3c:	6921      	ldr	r1, [r4, #16]
 8010a3e:	4650      	mov	r0, sl
 8010a40:	f7ff fb34 	bl	80100ac <_free_r>
 8010a44:	230c      	movs	r3, #12
 8010a46:	f8ca 3000 	str.w	r3, [sl]
 8010a4a:	89a3      	ldrh	r3, [r4, #12]
 8010a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a50:	81a3      	strh	r3, [r4, #12]
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	e7e9      	b.n	8010a2c <__ssputs_r+0x88>

08010a58 <_svfiprintf_r>:
 8010a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5c:	4698      	mov	r8, r3
 8010a5e:	898b      	ldrh	r3, [r1, #12]
 8010a60:	061b      	lsls	r3, r3, #24
 8010a62:	b09d      	sub	sp, #116	; 0x74
 8010a64:	4607      	mov	r7, r0
 8010a66:	460d      	mov	r5, r1
 8010a68:	4614      	mov	r4, r2
 8010a6a:	d50e      	bpl.n	8010a8a <_svfiprintf_r+0x32>
 8010a6c:	690b      	ldr	r3, [r1, #16]
 8010a6e:	b963      	cbnz	r3, 8010a8a <_svfiprintf_r+0x32>
 8010a70:	2140      	movs	r1, #64	; 0x40
 8010a72:	f7ff fb8f 	bl	8010194 <_malloc_r>
 8010a76:	6028      	str	r0, [r5, #0]
 8010a78:	6128      	str	r0, [r5, #16]
 8010a7a:	b920      	cbnz	r0, 8010a86 <_svfiprintf_r+0x2e>
 8010a7c:	230c      	movs	r3, #12
 8010a7e:	603b      	str	r3, [r7, #0]
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295
 8010a84:	e0d0      	b.n	8010c28 <_svfiprintf_r+0x1d0>
 8010a86:	2340      	movs	r3, #64	; 0x40
 8010a88:	616b      	str	r3, [r5, #20]
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8e:	2320      	movs	r3, #32
 8010a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a98:	2330      	movs	r3, #48	; 0x30
 8010a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c40 <_svfiprintf_r+0x1e8>
 8010a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010aa2:	f04f 0901 	mov.w	r9, #1
 8010aa6:	4623      	mov	r3, r4
 8010aa8:	469a      	mov	sl, r3
 8010aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aae:	b10a      	cbz	r2, 8010ab4 <_svfiprintf_r+0x5c>
 8010ab0:	2a25      	cmp	r2, #37	; 0x25
 8010ab2:	d1f9      	bne.n	8010aa8 <_svfiprintf_r+0x50>
 8010ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ab8:	d00b      	beq.n	8010ad2 <_svfiprintf_r+0x7a>
 8010aba:	465b      	mov	r3, fp
 8010abc:	4622      	mov	r2, r4
 8010abe:	4629      	mov	r1, r5
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	f7ff ff6f 	bl	80109a4 <__ssputs_r>
 8010ac6:	3001      	adds	r0, #1
 8010ac8:	f000 80a9 	beq.w	8010c1e <_svfiprintf_r+0x1c6>
 8010acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ace:	445a      	add	r2, fp
 8010ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f000 80a1 	beq.w	8010c1e <_svfiprintf_r+0x1c6>
 8010adc:	2300      	movs	r3, #0
 8010ade:	f04f 32ff 	mov.w	r2, #4294967295
 8010ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ae6:	f10a 0a01 	add.w	sl, sl, #1
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	9307      	str	r3, [sp, #28]
 8010aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010af2:	931a      	str	r3, [sp, #104]	; 0x68
 8010af4:	4654      	mov	r4, sl
 8010af6:	2205      	movs	r2, #5
 8010af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010afc:	4850      	ldr	r0, [pc, #320]	; (8010c40 <_svfiprintf_r+0x1e8>)
 8010afe:	f7ef fb67 	bl	80001d0 <memchr>
 8010b02:	9a04      	ldr	r2, [sp, #16]
 8010b04:	b9d8      	cbnz	r0, 8010b3e <_svfiprintf_r+0xe6>
 8010b06:	06d0      	lsls	r0, r2, #27
 8010b08:	bf44      	itt	mi
 8010b0a:	2320      	movmi	r3, #32
 8010b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b10:	0711      	lsls	r1, r2, #28
 8010b12:	bf44      	itt	mi
 8010b14:	232b      	movmi	r3, #43	; 0x2b
 8010b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b20:	d015      	beq.n	8010b4e <_svfiprintf_r+0xf6>
 8010b22:	9a07      	ldr	r2, [sp, #28]
 8010b24:	4654      	mov	r4, sl
 8010b26:	2000      	movs	r0, #0
 8010b28:	f04f 0c0a 	mov.w	ip, #10
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b32:	3b30      	subs	r3, #48	; 0x30
 8010b34:	2b09      	cmp	r3, #9
 8010b36:	d94d      	bls.n	8010bd4 <_svfiprintf_r+0x17c>
 8010b38:	b1b0      	cbz	r0, 8010b68 <_svfiprintf_r+0x110>
 8010b3a:	9207      	str	r2, [sp, #28]
 8010b3c:	e014      	b.n	8010b68 <_svfiprintf_r+0x110>
 8010b3e:	eba0 0308 	sub.w	r3, r0, r8
 8010b42:	fa09 f303 	lsl.w	r3, r9, r3
 8010b46:	4313      	orrs	r3, r2
 8010b48:	9304      	str	r3, [sp, #16]
 8010b4a:	46a2      	mov	sl, r4
 8010b4c:	e7d2      	b.n	8010af4 <_svfiprintf_r+0x9c>
 8010b4e:	9b03      	ldr	r3, [sp, #12]
 8010b50:	1d19      	adds	r1, r3, #4
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	9103      	str	r1, [sp, #12]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	bfbb      	ittet	lt
 8010b5a:	425b      	neglt	r3, r3
 8010b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8010b60:	9307      	strge	r3, [sp, #28]
 8010b62:	9307      	strlt	r3, [sp, #28]
 8010b64:	bfb8      	it	lt
 8010b66:	9204      	strlt	r2, [sp, #16]
 8010b68:	7823      	ldrb	r3, [r4, #0]
 8010b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010b6c:	d10c      	bne.n	8010b88 <_svfiprintf_r+0x130>
 8010b6e:	7863      	ldrb	r3, [r4, #1]
 8010b70:	2b2a      	cmp	r3, #42	; 0x2a
 8010b72:	d134      	bne.n	8010bde <_svfiprintf_r+0x186>
 8010b74:	9b03      	ldr	r3, [sp, #12]
 8010b76:	1d1a      	adds	r2, r3, #4
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	9203      	str	r2, [sp, #12]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	bfb8      	it	lt
 8010b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b84:	3402      	adds	r4, #2
 8010b86:	9305      	str	r3, [sp, #20]
 8010b88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010c50 <_svfiprintf_r+0x1f8>
 8010b8c:	7821      	ldrb	r1, [r4, #0]
 8010b8e:	2203      	movs	r2, #3
 8010b90:	4650      	mov	r0, sl
 8010b92:	f7ef fb1d 	bl	80001d0 <memchr>
 8010b96:	b138      	cbz	r0, 8010ba8 <_svfiprintf_r+0x150>
 8010b98:	9b04      	ldr	r3, [sp, #16]
 8010b9a:	eba0 000a 	sub.w	r0, r0, sl
 8010b9e:	2240      	movs	r2, #64	; 0x40
 8010ba0:	4082      	lsls	r2, r0
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	3401      	adds	r4, #1
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bac:	4825      	ldr	r0, [pc, #148]	; (8010c44 <_svfiprintf_r+0x1ec>)
 8010bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bb2:	2206      	movs	r2, #6
 8010bb4:	f7ef fb0c 	bl	80001d0 <memchr>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	d038      	beq.n	8010c2e <_svfiprintf_r+0x1d6>
 8010bbc:	4b22      	ldr	r3, [pc, #136]	; (8010c48 <_svfiprintf_r+0x1f0>)
 8010bbe:	bb1b      	cbnz	r3, 8010c08 <_svfiprintf_r+0x1b0>
 8010bc0:	9b03      	ldr	r3, [sp, #12]
 8010bc2:	3307      	adds	r3, #7
 8010bc4:	f023 0307 	bic.w	r3, r3, #7
 8010bc8:	3308      	adds	r3, #8
 8010bca:	9303      	str	r3, [sp, #12]
 8010bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bce:	4433      	add	r3, r6
 8010bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8010bd2:	e768      	b.n	8010aa6 <_svfiprintf_r+0x4e>
 8010bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bd8:	460c      	mov	r4, r1
 8010bda:	2001      	movs	r0, #1
 8010bdc:	e7a6      	b.n	8010b2c <_svfiprintf_r+0xd4>
 8010bde:	2300      	movs	r3, #0
 8010be0:	3401      	adds	r4, #1
 8010be2:	9305      	str	r3, [sp, #20]
 8010be4:	4619      	mov	r1, r3
 8010be6:	f04f 0c0a 	mov.w	ip, #10
 8010bea:	4620      	mov	r0, r4
 8010bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bf0:	3a30      	subs	r2, #48	; 0x30
 8010bf2:	2a09      	cmp	r2, #9
 8010bf4:	d903      	bls.n	8010bfe <_svfiprintf_r+0x1a6>
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d0c6      	beq.n	8010b88 <_svfiprintf_r+0x130>
 8010bfa:	9105      	str	r1, [sp, #20]
 8010bfc:	e7c4      	b.n	8010b88 <_svfiprintf_r+0x130>
 8010bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c02:	4604      	mov	r4, r0
 8010c04:	2301      	movs	r3, #1
 8010c06:	e7f0      	b.n	8010bea <_svfiprintf_r+0x192>
 8010c08:	ab03      	add	r3, sp, #12
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	462a      	mov	r2, r5
 8010c0e:	4b0f      	ldr	r3, [pc, #60]	; (8010c4c <_svfiprintf_r+0x1f4>)
 8010c10:	a904      	add	r1, sp, #16
 8010c12:	4638      	mov	r0, r7
 8010c14:	f7fd fd3a 	bl	800e68c <_printf_float>
 8010c18:	1c42      	adds	r2, r0, #1
 8010c1a:	4606      	mov	r6, r0
 8010c1c:	d1d6      	bne.n	8010bcc <_svfiprintf_r+0x174>
 8010c1e:	89ab      	ldrh	r3, [r5, #12]
 8010c20:	065b      	lsls	r3, r3, #25
 8010c22:	f53f af2d 	bmi.w	8010a80 <_svfiprintf_r+0x28>
 8010c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c28:	b01d      	add	sp, #116	; 0x74
 8010c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c2e:	ab03      	add	r3, sp, #12
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	462a      	mov	r2, r5
 8010c34:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <_svfiprintf_r+0x1f4>)
 8010c36:	a904      	add	r1, sp, #16
 8010c38:	4638      	mov	r0, r7
 8010c3a:	f7fd ffcb 	bl	800ebd4 <_printf_i>
 8010c3e:	e7eb      	b.n	8010c18 <_svfiprintf_r+0x1c0>
 8010c40:	0801370c 	.word	0x0801370c
 8010c44:	08013716 	.word	0x08013716
 8010c48:	0800e68d 	.word	0x0800e68d
 8010c4c:	080109a5 	.word	0x080109a5
 8010c50:	08013712 	.word	0x08013712

08010c54 <__sfputc_r>:
 8010c54:	6893      	ldr	r3, [r2, #8]
 8010c56:	3b01      	subs	r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	b410      	push	{r4}
 8010c5c:	6093      	str	r3, [r2, #8]
 8010c5e:	da08      	bge.n	8010c72 <__sfputc_r+0x1e>
 8010c60:	6994      	ldr	r4, [r2, #24]
 8010c62:	42a3      	cmp	r3, r4
 8010c64:	db01      	blt.n	8010c6a <__sfputc_r+0x16>
 8010c66:	290a      	cmp	r1, #10
 8010c68:	d103      	bne.n	8010c72 <__sfputc_r+0x1e>
 8010c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c6e:	f7fe ba66 	b.w	800f13e <__swbuf_r>
 8010c72:	6813      	ldr	r3, [r2, #0]
 8010c74:	1c58      	adds	r0, r3, #1
 8010c76:	6010      	str	r0, [r2, #0]
 8010c78:	7019      	strb	r1, [r3, #0]
 8010c7a:	4608      	mov	r0, r1
 8010c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <__sfputs_r>:
 8010c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c84:	4606      	mov	r6, r0
 8010c86:	460f      	mov	r7, r1
 8010c88:	4614      	mov	r4, r2
 8010c8a:	18d5      	adds	r5, r2, r3
 8010c8c:	42ac      	cmp	r4, r5
 8010c8e:	d101      	bne.n	8010c94 <__sfputs_r+0x12>
 8010c90:	2000      	movs	r0, #0
 8010c92:	e007      	b.n	8010ca4 <__sfputs_r+0x22>
 8010c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c98:	463a      	mov	r2, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	f7ff ffda 	bl	8010c54 <__sfputc_r>
 8010ca0:	1c43      	adds	r3, r0, #1
 8010ca2:	d1f3      	bne.n	8010c8c <__sfputs_r+0xa>
 8010ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ca8 <_vfiprintf_r>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	460d      	mov	r5, r1
 8010cae:	b09d      	sub	sp, #116	; 0x74
 8010cb0:	4614      	mov	r4, r2
 8010cb2:	4698      	mov	r8, r3
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	b118      	cbz	r0, 8010cc0 <_vfiprintf_r+0x18>
 8010cb8:	6a03      	ldr	r3, [r0, #32]
 8010cba:	b90b      	cbnz	r3, 8010cc0 <_vfiprintf_r+0x18>
 8010cbc:	f7fe f938 	bl	800ef30 <__sinit>
 8010cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cc2:	07d9      	lsls	r1, r3, #31
 8010cc4:	d405      	bmi.n	8010cd2 <_vfiprintf_r+0x2a>
 8010cc6:	89ab      	ldrh	r3, [r5, #12]
 8010cc8:	059a      	lsls	r2, r3, #22
 8010cca:	d402      	bmi.n	8010cd2 <_vfiprintf_r+0x2a>
 8010ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cce:	f7fe fb62 	bl	800f396 <__retarget_lock_acquire_recursive>
 8010cd2:	89ab      	ldrh	r3, [r5, #12]
 8010cd4:	071b      	lsls	r3, r3, #28
 8010cd6:	d501      	bpl.n	8010cdc <_vfiprintf_r+0x34>
 8010cd8:	692b      	ldr	r3, [r5, #16]
 8010cda:	b99b      	cbnz	r3, 8010d04 <_vfiprintf_r+0x5c>
 8010cdc:	4629      	mov	r1, r5
 8010cde:	4630      	mov	r0, r6
 8010ce0:	f7fe fa6a 	bl	800f1b8 <__swsetup_r>
 8010ce4:	b170      	cbz	r0, 8010d04 <_vfiprintf_r+0x5c>
 8010ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ce8:	07dc      	lsls	r4, r3, #31
 8010cea:	d504      	bpl.n	8010cf6 <_vfiprintf_r+0x4e>
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf0:	b01d      	add	sp, #116	; 0x74
 8010cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf6:	89ab      	ldrh	r3, [r5, #12]
 8010cf8:	0598      	lsls	r0, r3, #22
 8010cfa:	d4f7      	bmi.n	8010cec <_vfiprintf_r+0x44>
 8010cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cfe:	f7fe fb4b 	bl	800f398 <__retarget_lock_release_recursive>
 8010d02:	e7f3      	b.n	8010cec <_vfiprintf_r+0x44>
 8010d04:	2300      	movs	r3, #0
 8010d06:	9309      	str	r3, [sp, #36]	; 0x24
 8010d08:	2320      	movs	r3, #32
 8010d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d12:	2330      	movs	r3, #48	; 0x30
 8010d14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010ec8 <_vfiprintf_r+0x220>
 8010d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d1c:	f04f 0901 	mov.w	r9, #1
 8010d20:	4623      	mov	r3, r4
 8010d22:	469a      	mov	sl, r3
 8010d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d28:	b10a      	cbz	r2, 8010d2e <_vfiprintf_r+0x86>
 8010d2a:	2a25      	cmp	r2, #37	; 0x25
 8010d2c:	d1f9      	bne.n	8010d22 <_vfiprintf_r+0x7a>
 8010d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d32:	d00b      	beq.n	8010d4c <_vfiprintf_r+0xa4>
 8010d34:	465b      	mov	r3, fp
 8010d36:	4622      	mov	r2, r4
 8010d38:	4629      	mov	r1, r5
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f7ff ffa1 	bl	8010c82 <__sfputs_r>
 8010d40:	3001      	adds	r0, #1
 8010d42:	f000 80a9 	beq.w	8010e98 <_vfiprintf_r+0x1f0>
 8010d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d48:	445a      	add	r2, fp
 8010d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 80a1 	beq.w	8010e98 <_vfiprintf_r+0x1f0>
 8010d56:	2300      	movs	r3, #0
 8010d58:	f04f 32ff 	mov.w	r2, #4294967295
 8010d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d60:	f10a 0a01 	add.w	sl, sl, #1
 8010d64:	9304      	str	r3, [sp, #16]
 8010d66:	9307      	str	r3, [sp, #28]
 8010d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d6e:	4654      	mov	r4, sl
 8010d70:	2205      	movs	r2, #5
 8010d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d76:	4854      	ldr	r0, [pc, #336]	; (8010ec8 <_vfiprintf_r+0x220>)
 8010d78:	f7ef fa2a 	bl	80001d0 <memchr>
 8010d7c:	9a04      	ldr	r2, [sp, #16]
 8010d7e:	b9d8      	cbnz	r0, 8010db8 <_vfiprintf_r+0x110>
 8010d80:	06d1      	lsls	r1, r2, #27
 8010d82:	bf44      	itt	mi
 8010d84:	2320      	movmi	r3, #32
 8010d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d8a:	0713      	lsls	r3, r2, #28
 8010d8c:	bf44      	itt	mi
 8010d8e:	232b      	movmi	r3, #43	; 0x2b
 8010d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d94:	f89a 3000 	ldrb.w	r3, [sl]
 8010d98:	2b2a      	cmp	r3, #42	; 0x2a
 8010d9a:	d015      	beq.n	8010dc8 <_vfiprintf_r+0x120>
 8010d9c:	9a07      	ldr	r2, [sp, #28]
 8010d9e:	4654      	mov	r4, sl
 8010da0:	2000      	movs	r0, #0
 8010da2:	f04f 0c0a 	mov.w	ip, #10
 8010da6:	4621      	mov	r1, r4
 8010da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dac:	3b30      	subs	r3, #48	; 0x30
 8010dae:	2b09      	cmp	r3, #9
 8010db0:	d94d      	bls.n	8010e4e <_vfiprintf_r+0x1a6>
 8010db2:	b1b0      	cbz	r0, 8010de2 <_vfiprintf_r+0x13a>
 8010db4:	9207      	str	r2, [sp, #28]
 8010db6:	e014      	b.n	8010de2 <_vfiprintf_r+0x13a>
 8010db8:	eba0 0308 	sub.w	r3, r0, r8
 8010dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	9304      	str	r3, [sp, #16]
 8010dc4:	46a2      	mov	sl, r4
 8010dc6:	e7d2      	b.n	8010d6e <_vfiprintf_r+0xc6>
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	1d19      	adds	r1, r3, #4
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	9103      	str	r1, [sp, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	bfbb      	ittet	lt
 8010dd4:	425b      	neglt	r3, r3
 8010dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8010dda:	9307      	strge	r3, [sp, #28]
 8010ddc:	9307      	strlt	r3, [sp, #28]
 8010dde:	bfb8      	it	lt
 8010de0:	9204      	strlt	r2, [sp, #16]
 8010de2:	7823      	ldrb	r3, [r4, #0]
 8010de4:	2b2e      	cmp	r3, #46	; 0x2e
 8010de6:	d10c      	bne.n	8010e02 <_vfiprintf_r+0x15a>
 8010de8:	7863      	ldrb	r3, [r4, #1]
 8010dea:	2b2a      	cmp	r3, #42	; 0x2a
 8010dec:	d134      	bne.n	8010e58 <_vfiprintf_r+0x1b0>
 8010dee:	9b03      	ldr	r3, [sp, #12]
 8010df0:	1d1a      	adds	r2, r3, #4
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	9203      	str	r2, [sp, #12]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	bfb8      	it	lt
 8010dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dfe:	3402      	adds	r4, #2
 8010e00:	9305      	str	r3, [sp, #20]
 8010e02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ed8 <_vfiprintf_r+0x230>
 8010e06:	7821      	ldrb	r1, [r4, #0]
 8010e08:	2203      	movs	r2, #3
 8010e0a:	4650      	mov	r0, sl
 8010e0c:	f7ef f9e0 	bl	80001d0 <memchr>
 8010e10:	b138      	cbz	r0, 8010e22 <_vfiprintf_r+0x17a>
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	eba0 000a 	sub.w	r0, r0, sl
 8010e18:	2240      	movs	r2, #64	; 0x40
 8010e1a:	4082      	lsls	r2, r0
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	3401      	adds	r4, #1
 8010e20:	9304      	str	r3, [sp, #16]
 8010e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e26:	4829      	ldr	r0, [pc, #164]	; (8010ecc <_vfiprintf_r+0x224>)
 8010e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e2c:	2206      	movs	r2, #6
 8010e2e:	f7ef f9cf 	bl	80001d0 <memchr>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d03f      	beq.n	8010eb6 <_vfiprintf_r+0x20e>
 8010e36:	4b26      	ldr	r3, [pc, #152]	; (8010ed0 <_vfiprintf_r+0x228>)
 8010e38:	bb1b      	cbnz	r3, 8010e82 <_vfiprintf_r+0x1da>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	3307      	adds	r3, #7
 8010e3e:	f023 0307 	bic.w	r3, r3, #7
 8010e42:	3308      	adds	r3, #8
 8010e44:	9303      	str	r3, [sp, #12]
 8010e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e48:	443b      	add	r3, r7
 8010e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e4c:	e768      	b.n	8010d20 <_vfiprintf_r+0x78>
 8010e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e52:	460c      	mov	r4, r1
 8010e54:	2001      	movs	r0, #1
 8010e56:	e7a6      	b.n	8010da6 <_vfiprintf_r+0xfe>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	3401      	adds	r4, #1
 8010e5c:	9305      	str	r3, [sp, #20]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	f04f 0c0a 	mov.w	ip, #10
 8010e64:	4620      	mov	r0, r4
 8010e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e6a:	3a30      	subs	r2, #48	; 0x30
 8010e6c:	2a09      	cmp	r2, #9
 8010e6e:	d903      	bls.n	8010e78 <_vfiprintf_r+0x1d0>
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d0c6      	beq.n	8010e02 <_vfiprintf_r+0x15a>
 8010e74:	9105      	str	r1, [sp, #20]
 8010e76:	e7c4      	b.n	8010e02 <_vfiprintf_r+0x15a>
 8010e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e7f0      	b.n	8010e64 <_vfiprintf_r+0x1bc>
 8010e82:	ab03      	add	r3, sp, #12
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	462a      	mov	r2, r5
 8010e88:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <_vfiprintf_r+0x22c>)
 8010e8a:	a904      	add	r1, sp, #16
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7fd fbfd 	bl	800e68c <_printf_float>
 8010e92:	4607      	mov	r7, r0
 8010e94:	1c78      	adds	r0, r7, #1
 8010e96:	d1d6      	bne.n	8010e46 <_vfiprintf_r+0x19e>
 8010e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e9a:	07d9      	lsls	r1, r3, #31
 8010e9c:	d405      	bmi.n	8010eaa <_vfiprintf_r+0x202>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	059a      	lsls	r2, r3, #22
 8010ea2:	d402      	bmi.n	8010eaa <_vfiprintf_r+0x202>
 8010ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ea6:	f7fe fa77 	bl	800f398 <__retarget_lock_release_recursive>
 8010eaa:	89ab      	ldrh	r3, [r5, #12]
 8010eac:	065b      	lsls	r3, r3, #25
 8010eae:	f53f af1d 	bmi.w	8010cec <_vfiprintf_r+0x44>
 8010eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eb4:	e71c      	b.n	8010cf0 <_vfiprintf_r+0x48>
 8010eb6:	ab03      	add	r3, sp, #12
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	462a      	mov	r2, r5
 8010ebc:	4b05      	ldr	r3, [pc, #20]	; (8010ed4 <_vfiprintf_r+0x22c>)
 8010ebe:	a904      	add	r1, sp, #16
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7fd fe87 	bl	800ebd4 <_printf_i>
 8010ec6:	e7e4      	b.n	8010e92 <_vfiprintf_r+0x1ea>
 8010ec8:	0801370c 	.word	0x0801370c
 8010ecc:	08013716 	.word	0x08013716
 8010ed0:	0800e68d 	.word	0x0800e68d
 8010ed4:	08010c83 	.word	0x08010c83
 8010ed8:	08013712 	.word	0x08013712

08010edc <__sflush_r>:
 8010edc:	898a      	ldrh	r2, [r1, #12]
 8010ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	0710      	lsls	r0, r2, #28
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	d458      	bmi.n	8010f9c <__sflush_r+0xc0>
 8010eea:	684b      	ldr	r3, [r1, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	dc05      	bgt.n	8010efc <__sflush_r+0x20>
 8010ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	dc02      	bgt.n	8010efc <__sflush_r+0x20>
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010efe:	2e00      	cmp	r6, #0
 8010f00:	d0f9      	beq.n	8010ef6 <__sflush_r+0x1a>
 8010f02:	2300      	movs	r3, #0
 8010f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f08:	682f      	ldr	r7, [r5, #0]
 8010f0a:	6a21      	ldr	r1, [r4, #32]
 8010f0c:	602b      	str	r3, [r5, #0]
 8010f0e:	d032      	beq.n	8010f76 <__sflush_r+0x9a>
 8010f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	075a      	lsls	r2, r3, #29
 8010f16:	d505      	bpl.n	8010f24 <__sflush_r+0x48>
 8010f18:	6863      	ldr	r3, [r4, #4]
 8010f1a:	1ac0      	subs	r0, r0, r3
 8010f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f1e:	b10b      	cbz	r3, 8010f24 <__sflush_r+0x48>
 8010f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f22:	1ac0      	subs	r0, r0, r3
 8010f24:	2300      	movs	r3, #0
 8010f26:	4602      	mov	r2, r0
 8010f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f2a:	6a21      	ldr	r1, [r4, #32]
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	47b0      	blx	r6
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	d106      	bne.n	8010f44 <__sflush_r+0x68>
 8010f36:	6829      	ldr	r1, [r5, #0]
 8010f38:	291d      	cmp	r1, #29
 8010f3a:	d82b      	bhi.n	8010f94 <__sflush_r+0xb8>
 8010f3c:	4a29      	ldr	r2, [pc, #164]	; (8010fe4 <__sflush_r+0x108>)
 8010f3e:	410a      	asrs	r2, r1
 8010f40:	07d6      	lsls	r6, r2, #31
 8010f42:	d427      	bmi.n	8010f94 <__sflush_r+0xb8>
 8010f44:	2200      	movs	r2, #0
 8010f46:	6062      	str	r2, [r4, #4]
 8010f48:	04d9      	lsls	r1, r3, #19
 8010f4a:	6922      	ldr	r2, [r4, #16]
 8010f4c:	6022      	str	r2, [r4, #0]
 8010f4e:	d504      	bpl.n	8010f5a <__sflush_r+0x7e>
 8010f50:	1c42      	adds	r2, r0, #1
 8010f52:	d101      	bne.n	8010f58 <__sflush_r+0x7c>
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	b903      	cbnz	r3, 8010f5a <__sflush_r+0x7e>
 8010f58:	6560      	str	r0, [r4, #84]	; 0x54
 8010f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f5c:	602f      	str	r7, [r5, #0]
 8010f5e:	2900      	cmp	r1, #0
 8010f60:	d0c9      	beq.n	8010ef6 <__sflush_r+0x1a>
 8010f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f66:	4299      	cmp	r1, r3
 8010f68:	d002      	beq.n	8010f70 <__sflush_r+0x94>
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f7ff f89e 	bl	80100ac <_free_r>
 8010f70:	2000      	movs	r0, #0
 8010f72:	6360      	str	r0, [r4, #52]	; 0x34
 8010f74:	e7c0      	b.n	8010ef8 <__sflush_r+0x1c>
 8010f76:	2301      	movs	r3, #1
 8010f78:	4628      	mov	r0, r5
 8010f7a:	47b0      	blx	r6
 8010f7c:	1c41      	adds	r1, r0, #1
 8010f7e:	d1c8      	bne.n	8010f12 <__sflush_r+0x36>
 8010f80:	682b      	ldr	r3, [r5, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d0c5      	beq.n	8010f12 <__sflush_r+0x36>
 8010f86:	2b1d      	cmp	r3, #29
 8010f88:	d001      	beq.n	8010f8e <__sflush_r+0xb2>
 8010f8a:	2b16      	cmp	r3, #22
 8010f8c:	d101      	bne.n	8010f92 <__sflush_r+0xb6>
 8010f8e:	602f      	str	r7, [r5, #0]
 8010f90:	e7b1      	b.n	8010ef6 <__sflush_r+0x1a>
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f98:	81a3      	strh	r3, [r4, #12]
 8010f9a:	e7ad      	b.n	8010ef8 <__sflush_r+0x1c>
 8010f9c:	690f      	ldr	r7, [r1, #16]
 8010f9e:	2f00      	cmp	r7, #0
 8010fa0:	d0a9      	beq.n	8010ef6 <__sflush_r+0x1a>
 8010fa2:	0793      	lsls	r3, r2, #30
 8010fa4:	680e      	ldr	r6, [r1, #0]
 8010fa6:	bf08      	it	eq
 8010fa8:	694b      	ldreq	r3, [r1, #20]
 8010faa:	600f      	str	r7, [r1, #0]
 8010fac:	bf18      	it	ne
 8010fae:	2300      	movne	r3, #0
 8010fb0:	eba6 0807 	sub.w	r8, r6, r7
 8010fb4:	608b      	str	r3, [r1, #8]
 8010fb6:	f1b8 0f00 	cmp.w	r8, #0
 8010fba:	dd9c      	ble.n	8010ef6 <__sflush_r+0x1a>
 8010fbc:	6a21      	ldr	r1, [r4, #32]
 8010fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fc0:	4643      	mov	r3, r8
 8010fc2:	463a      	mov	r2, r7
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	47b0      	blx	r6
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	dc06      	bgt.n	8010fda <__sflush_r+0xfe>
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fd2:	81a3      	strh	r3, [r4, #12]
 8010fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fd8:	e78e      	b.n	8010ef8 <__sflush_r+0x1c>
 8010fda:	4407      	add	r7, r0
 8010fdc:	eba8 0800 	sub.w	r8, r8, r0
 8010fe0:	e7e9      	b.n	8010fb6 <__sflush_r+0xda>
 8010fe2:	bf00      	nop
 8010fe4:	dfbffffe 	.word	0xdfbffffe

08010fe8 <_fflush_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	690b      	ldr	r3, [r1, #16]
 8010fec:	4605      	mov	r5, r0
 8010fee:	460c      	mov	r4, r1
 8010ff0:	b913      	cbnz	r3, 8010ff8 <_fflush_r+0x10>
 8010ff2:	2500      	movs	r5, #0
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	bd38      	pop	{r3, r4, r5, pc}
 8010ff8:	b118      	cbz	r0, 8011002 <_fflush_r+0x1a>
 8010ffa:	6a03      	ldr	r3, [r0, #32]
 8010ffc:	b90b      	cbnz	r3, 8011002 <_fflush_r+0x1a>
 8010ffe:	f7fd ff97 	bl	800ef30 <__sinit>
 8011002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d0f3      	beq.n	8010ff2 <_fflush_r+0xa>
 801100a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801100c:	07d0      	lsls	r0, r2, #31
 801100e:	d404      	bmi.n	801101a <_fflush_r+0x32>
 8011010:	0599      	lsls	r1, r3, #22
 8011012:	d402      	bmi.n	801101a <_fflush_r+0x32>
 8011014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011016:	f7fe f9be 	bl	800f396 <__retarget_lock_acquire_recursive>
 801101a:	4628      	mov	r0, r5
 801101c:	4621      	mov	r1, r4
 801101e:	f7ff ff5d 	bl	8010edc <__sflush_r>
 8011022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011024:	07da      	lsls	r2, r3, #31
 8011026:	4605      	mov	r5, r0
 8011028:	d4e4      	bmi.n	8010ff4 <_fflush_r+0xc>
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	059b      	lsls	r3, r3, #22
 801102e:	d4e1      	bmi.n	8010ff4 <_fflush_r+0xc>
 8011030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011032:	f7fe f9b1 	bl	800f398 <__retarget_lock_release_recursive>
 8011036:	e7dd      	b.n	8010ff4 <_fflush_r+0xc>

08011038 <__swhatbuf_r>:
 8011038:	b570      	push	{r4, r5, r6, lr}
 801103a:	460c      	mov	r4, r1
 801103c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011040:	2900      	cmp	r1, #0
 8011042:	b096      	sub	sp, #88	; 0x58
 8011044:	4615      	mov	r5, r2
 8011046:	461e      	mov	r6, r3
 8011048:	da0d      	bge.n	8011066 <__swhatbuf_r+0x2e>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011050:	f04f 0100 	mov.w	r1, #0
 8011054:	bf0c      	ite	eq
 8011056:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801105a:	2340      	movne	r3, #64	; 0x40
 801105c:	2000      	movs	r0, #0
 801105e:	6031      	str	r1, [r6, #0]
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	b016      	add	sp, #88	; 0x58
 8011064:	bd70      	pop	{r4, r5, r6, pc}
 8011066:	466a      	mov	r2, sp
 8011068:	f000 f848 	bl	80110fc <_fstat_r>
 801106c:	2800      	cmp	r0, #0
 801106e:	dbec      	blt.n	801104a <__swhatbuf_r+0x12>
 8011070:	9901      	ldr	r1, [sp, #4]
 8011072:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011076:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801107a:	4259      	negs	r1, r3
 801107c:	4159      	adcs	r1, r3
 801107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011082:	e7eb      	b.n	801105c <__swhatbuf_r+0x24>

08011084 <__smakebuf_r>:
 8011084:	898b      	ldrh	r3, [r1, #12]
 8011086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011088:	079d      	lsls	r5, r3, #30
 801108a:	4606      	mov	r6, r0
 801108c:	460c      	mov	r4, r1
 801108e:	d507      	bpl.n	80110a0 <__smakebuf_r+0x1c>
 8011090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011094:	6023      	str	r3, [r4, #0]
 8011096:	6123      	str	r3, [r4, #16]
 8011098:	2301      	movs	r3, #1
 801109a:	6163      	str	r3, [r4, #20]
 801109c:	b002      	add	sp, #8
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	ab01      	add	r3, sp, #4
 80110a2:	466a      	mov	r2, sp
 80110a4:	f7ff ffc8 	bl	8011038 <__swhatbuf_r>
 80110a8:	9900      	ldr	r1, [sp, #0]
 80110aa:	4605      	mov	r5, r0
 80110ac:	4630      	mov	r0, r6
 80110ae:	f7ff f871 	bl	8010194 <_malloc_r>
 80110b2:	b948      	cbnz	r0, 80110c8 <__smakebuf_r+0x44>
 80110b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110b8:	059a      	lsls	r2, r3, #22
 80110ba:	d4ef      	bmi.n	801109c <__smakebuf_r+0x18>
 80110bc:	f023 0303 	bic.w	r3, r3, #3
 80110c0:	f043 0302 	orr.w	r3, r3, #2
 80110c4:	81a3      	strh	r3, [r4, #12]
 80110c6:	e7e3      	b.n	8011090 <__smakebuf_r+0xc>
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	6020      	str	r0, [r4, #0]
 80110cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d0:	81a3      	strh	r3, [r4, #12]
 80110d2:	9b00      	ldr	r3, [sp, #0]
 80110d4:	6163      	str	r3, [r4, #20]
 80110d6:	9b01      	ldr	r3, [sp, #4]
 80110d8:	6120      	str	r0, [r4, #16]
 80110da:	b15b      	cbz	r3, 80110f4 <__smakebuf_r+0x70>
 80110dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110e0:	4630      	mov	r0, r6
 80110e2:	f000 f81d 	bl	8011120 <_isatty_r>
 80110e6:	b128      	cbz	r0, 80110f4 <__smakebuf_r+0x70>
 80110e8:	89a3      	ldrh	r3, [r4, #12]
 80110ea:	f023 0303 	bic.w	r3, r3, #3
 80110ee:	f043 0301 	orr.w	r3, r3, #1
 80110f2:	81a3      	strh	r3, [r4, #12]
 80110f4:	89a3      	ldrh	r3, [r4, #12]
 80110f6:	431d      	orrs	r5, r3
 80110f8:	81a5      	strh	r5, [r4, #12]
 80110fa:	e7cf      	b.n	801109c <__smakebuf_r+0x18>

080110fc <_fstat_r>:
 80110fc:	b538      	push	{r3, r4, r5, lr}
 80110fe:	4d07      	ldr	r5, [pc, #28]	; (801111c <_fstat_r+0x20>)
 8011100:	2300      	movs	r3, #0
 8011102:	4604      	mov	r4, r0
 8011104:	4608      	mov	r0, r1
 8011106:	4611      	mov	r1, r2
 8011108:	602b      	str	r3, [r5, #0]
 801110a:	f7f1 fe62 	bl	8002dd2 <_fstat>
 801110e:	1c43      	adds	r3, r0, #1
 8011110:	d102      	bne.n	8011118 <_fstat_r+0x1c>
 8011112:	682b      	ldr	r3, [r5, #0]
 8011114:	b103      	cbz	r3, 8011118 <_fstat_r+0x1c>
 8011116:	6023      	str	r3, [r4, #0]
 8011118:	bd38      	pop	{r3, r4, r5, pc}
 801111a:	bf00      	nop
 801111c:	20003edc 	.word	0x20003edc

08011120 <_isatty_r>:
 8011120:	b538      	push	{r3, r4, r5, lr}
 8011122:	4d06      	ldr	r5, [pc, #24]	; (801113c <_isatty_r+0x1c>)
 8011124:	2300      	movs	r3, #0
 8011126:	4604      	mov	r4, r0
 8011128:	4608      	mov	r0, r1
 801112a:	602b      	str	r3, [r5, #0]
 801112c:	f7f1 fe61 	bl	8002df2 <_isatty>
 8011130:	1c43      	adds	r3, r0, #1
 8011132:	d102      	bne.n	801113a <_isatty_r+0x1a>
 8011134:	682b      	ldr	r3, [r5, #0]
 8011136:	b103      	cbz	r3, 801113a <_isatty_r+0x1a>
 8011138:	6023      	str	r3, [r4, #0]
 801113a:	bd38      	pop	{r3, r4, r5, pc}
 801113c:	20003edc 	.word	0x20003edc

08011140 <_sbrk_r>:
 8011140:	b538      	push	{r3, r4, r5, lr}
 8011142:	4d06      	ldr	r5, [pc, #24]	; (801115c <_sbrk_r+0x1c>)
 8011144:	2300      	movs	r3, #0
 8011146:	4604      	mov	r4, r0
 8011148:	4608      	mov	r0, r1
 801114a:	602b      	str	r3, [r5, #0]
 801114c:	f7f1 fe6a 	bl	8002e24 <_sbrk>
 8011150:	1c43      	adds	r3, r0, #1
 8011152:	d102      	bne.n	801115a <_sbrk_r+0x1a>
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	b103      	cbz	r3, 801115a <_sbrk_r+0x1a>
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	20003edc 	.word	0x20003edc

08011160 <__assert_func>:
 8011160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011162:	4614      	mov	r4, r2
 8011164:	461a      	mov	r2, r3
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <__assert_func+0x2c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4605      	mov	r5, r0
 801116c:	68d8      	ldr	r0, [r3, #12]
 801116e:	b14c      	cbz	r4, 8011184 <__assert_func+0x24>
 8011170:	4b07      	ldr	r3, [pc, #28]	; (8011190 <__assert_func+0x30>)
 8011172:	9100      	str	r1, [sp, #0]
 8011174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011178:	4906      	ldr	r1, [pc, #24]	; (8011194 <__assert_func+0x34>)
 801117a:	462b      	mov	r3, r5
 801117c:	f000 f872 	bl	8011264 <fiprintf>
 8011180:	f000 f882 	bl	8011288 <abort>
 8011184:	4b04      	ldr	r3, [pc, #16]	; (8011198 <__assert_func+0x38>)
 8011186:	461c      	mov	r4, r3
 8011188:	e7f3      	b.n	8011172 <__assert_func+0x12>
 801118a:	bf00      	nop
 801118c:	20000080 	.word	0x20000080
 8011190:	08013727 	.word	0x08013727
 8011194:	08013734 	.word	0x08013734
 8011198:	08013762 	.word	0x08013762

0801119c <_calloc_r>:
 801119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801119e:	fba1 2402 	umull	r2, r4, r1, r2
 80111a2:	b94c      	cbnz	r4, 80111b8 <_calloc_r+0x1c>
 80111a4:	4611      	mov	r1, r2
 80111a6:	9201      	str	r2, [sp, #4]
 80111a8:	f7fe fff4 	bl	8010194 <_malloc_r>
 80111ac:	9a01      	ldr	r2, [sp, #4]
 80111ae:	4605      	mov	r5, r0
 80111b0:	b930      	cbnz	r0, 80111c0 <_calloc_r+0x24>
 80111b2:	4628      	mov	r0, r5
 80111b4:	b003      	add	sp, #12
 80111b6:	bd30      	pop	{r4, r5, pc}
 80111b8:	220c      	movs	r2, #12
 80111ba:	6002      	str	r2, [r0, #0]
 80111bc:	2500      	movs	r5, #0
 80111be:	e7f8      	b.n	80111b2 <_calloc_r+0x16>
 80111c0:	4621      	mov	r1, r4
 80111c2:	f7fe f86b 	bl	800f29c <memset>
 80111c6:	e7f4      	b.n	80111b2 <_calloc_r+0x16>

080111c8 <__ascii_mbtowc>:
 80111c8:	b082      	sub	sp, #8
 80111ca:	b901      	cbnz	r1, 80111ce <__ascii_mbtowc+0x6>
 80111cc:	a901      	add	r1, sp, #4
 80111ce:	b142      	cbz	r2, 80111e2 <__ascii_mbtowc+0x1a>
 80111d0:	b14b      	cbz	r3, 80111e6 <__ascii_mbtowc+0x1e>
 80111d2:	7813      	ldrb	r3, [r2, #0]
 80111d4:	600b      	str	r3, [r1, #0]
 80111d6:	7812      	ldrb	r2, [r2, #0]
 80111d8:	1e10      	subs	r0, r2, #0
 80111da:	bf18      	it	ne
 80111dc:	2001      	movne	r0, #1
 80111de:	b002      	add	sp, #8
 80111e0:	4770      	bx	lr
 80111e2:	4610      	mov	r0, r2
 80111e4:	e7fb      	b.n	80111de <__ascii_mbtowc+0x16>
 80111e6:	f06f 0001 	mvn.w	r0, #1
 80111ea:	e7f8      	b.n	80111de <__ascii_mbtowc+0x16>

080111ec <_realloc_r>:
 80111ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f0:	4680      	mov	r8, r0
 80111f2:	4614      	mov	r4, r2
 80111f4:	460e      	mov	r6, r1
 80111f6:	b921      	cbnz	r1, 8011202 <_realloc_r+0x16>
 80111f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111fc:	4611      	mov	r1, r2
 80111fe:	f7fe bfc9 	b.w	8010194 <_malloc_r>
 8011202:	b92a      	cbnz	r2, 8011210 <_realloc_r+0x24>
 8011204:	f7fe ff52 	bl	80100ac <_free_r>
 8011208:	4625      	mov	r5, r4
 801120a:	4628      	mov	r0, r5
 801120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011210:	f000 f841 	bl	8011296 <_malloc_usable_size_r>
 8011214:	4284      	cmp	r4, r0
 8011216:	4607      	mov	r7, r0
 8011218:	d802      	bhi.n	8011220 <_realloc_r+0x34>
 801121a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801121e:	d812      	bhi.n	8011246 <_realloc_r+0x5a>
 8011220:	4621      	mov	r1, r4
 8011222:	4640      	mov	r0, r8
 8011224:	f7fe ffb6 	bl	8010194 <_malloc_r>
 8011228:	4605      	mov	r5, r0
 801122a:	2800      	cmp	r0, #0
 801122c:	d0ed      	beq.n	801120a <_realloc_r+0x1e>
 801122e:	42bc      	cmp	r4, r7
 8011230:	4622      	mov	r2, r4
 8011232:	4631      	mov	r1, r6
 8011234:	bf28      	it	cs
 8011236:	463a      	movcs	r2, r7
 8011238:	f7fe f8af 	bl	800f39a <memcpy>
 801123c:	4631      	mov	r1, r6
 801123e:	4640      	mov	r0, r8
 8011240:	f7fe ff34 	bl	80100ac <_free_r>
 8011244:	e7e1      	b.n	801120a <_realloc_r+0x1e>
 8011246:	4635      	mov	r5, r6
 8011248:	e7df      	b.n	801120a <_realloc_r+0x1e>

0801124a <__ascii_wctomb>:
 801124a:	b149      	cbz	r1, 8011260 <__ascii_wctomb+0x16>
 801124c:	2aff      	cmp	r2, #255	; 0xff
 801124e:	bf85      	ittet	hi
 8011250:	238a      	movhi	r3, #138	; 0x8a
 8011252:	6003      	strhi	r3, [r0, #0]
 8011254:	700a      	strbls	r2, [r1, #0]
 8011256:	f04f 30ff 	movhi.w	r0, #4294967295
 801125a:	bf98      	it	ls
 801125c:	2001      	movls	r0, #1
 801125e:	4770      	bx	lr
 8011260:	4608      	mov	r0, r1
 8011262:	4770      	bx	lr

08011264 <fiprintf>:
 8011264:	b40e      	push	{r1, r2, r3}
 8011266:	b503      	push	{r0, r1, lr}
 8011268:	4601      	mov	r1, r0
 801126a:	ab03      	add	r3, sp, #12
 801126c:	4805      	ldr	r0, [pc, #20]	; (8011284 <fiprintf+0x20>)
 801126e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011272:	6800      	ldr	r0, [r0, #0]
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	f7ff fd17 	bl	8010ca8 <_vfiprintf_r>
 801127a:	b002      	add	sp, #8
 801127c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011280:	b003      	add	sp, #12
 8011282:	4770      	bx	lr
 8011284:	20000080 	.word	0x20000080

08011288 <abort>:
 8011288:	b508      	push	{r3, lr}
 801128a:	2006      	movs	r0, #6
 801128c:	f000 f834 	bl	80112f8 <raise>
 8011290:	2001      	movs	r0, #1
 8011292:	f7f1 fd6b 	bl	8002d6c <_exit>

08011296 <_malloc_usable_size_r>:
 8011296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801129a:	1f18      	subs	r0, r3, #4
 801129c:	2b00      	cmp	r3, #0
 801129e:	bfbc      	itt	lt
 80112a0:	580b      	ldrlt	r3, [r1, r0]
 80112a2:	18c0      	addlt	r0, r0, r3
 80112a4:	4770      	bx	lr

080112a6 <_raise_r>:
 80112a6:	291f      	cmp	r1, #31
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	4604      	mov	r4, r0
 80112ac:	460d      	mov	r5, r1
 80112ae:	d904      	bls.n	80112ba <_raise_r+0x14>
 80112b0:	2316      	movs	r3, #22
 80112b2:	6003      	str	r3, [r0, #0]
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	bd38      	pop	{r3, r4, r5, pc}
 80112ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80112bc:	b112      	cbz	r2, 80112c4 <_raise_r+0x1e>
 80112be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112c2:	b94b      	cbnz	r3, 80112d8 <_raise_r+0x32>
 80112c4:	4620      	mov	r0, r4
 80112c6:	f000 f831 	bl	801132c <_getpid_r>
 80112ca:	462a      	mov	r2, r5
 80112cc:	4601      	mov	r1, r0
 80112ce:	4620      	mov	r0, r4
 80112d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d4:	f000 b818 	b.w	8011308 <_kill_r>
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d00a      	beq.n	80112f2 <_raise_r+0x4c>
 80112dc:	1c59      	adds	r1, r3, #1
 80112de:	d103      	bne.n	80112e8 <_raise_r+0x42>
 80112e0:	2316      	movs	r3, #22
 80112e2:	6003      	str	r3, [r0, #0]
 80112e4:	2001      	movs	r0, #1
 80112e6:	e7e7      	b.n	80112b8 <_raise_r+0x12>
 80112e8:	2400      	movs	r4, #0
 80112ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112ee:	4628      	mov	r0, r5
 80112f0:	4798      	blx	r3
 80112f2:	2000      	movs	r0, #0
 80112f4:	e7e0      	b.n	80112b8 <_raise_r+0x12>
	...

080112f8 <raise>:
 80112f8:	4b02      	ldr	r3, [pc, #8]	; (8011304 <raise+0xc>)
 80112fa:	4601      	mov	r1, r0
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	f7ff bfd2 	b.w	80112a6 <_raise_r>
 8011302:	bf00      	nop
 8011304:	20000080 	.word	0x20000080

08011308 <_kill_r>:
 8011308:	b538      	push	{r3, r4, r5, lr}
 801130a:	4d07      	ldr	r5, [pc, #28]	; (8011328 <_kill_r+0x20>)
 801130c:	2300      	movs	r3, #0
 801130e:	4604      	mov	r4, r0
 8011310:	4608      	mov	r0, r1
 8011312:	4611      	mov	r1, r2
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	f7f1 fd19 	bl	8002d4c <_kill>
 801131a:	1c43      	adds	r3, r0, #1
 801131c:	d102      	bne.n	8011324 <_kill_r+0x1c>
 801131e:	682b      	ldr	r3, [r5, #0]
 8011320:	b103      	cbz	r3, 8011324 <_kill_r+0x1c>
 8011322:	6023      	str	r3, [r4, #0]
 8011324:	bd38      	pop	{r3, r4, r5, pc}
 8011326:	bf00      	nop
 8011328:	20003edc 	.word	0x20003edc

0801132c <_getpid_r>:
 801132c:	f7f1 bd06 	b.w	8002d3c <_getpid>

08011330 <log>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	ed2d 8b02 	vpush	{d8}
 8011336:	ec55 4b10 	vmov	r4, r5, d0
 801133a:	f000 f8bd 	bl	80114b8 <__ieee754_log>
 801133e:	4622      	mov	r2, r4
 8011340:	462b      	mov	r3, r5
 8011342:	4620      	mov	r0, r4
 8011344:	4629      	mov	r1, r5
 8011346:	eeb0 8a40 	vmov.f32	s16, s0
 801134a:	eef0 8a60 	vmov.f32	s17, s1
 801134e:	f7ef fbed 	bl	8000b2c <__aeabi_dcmpun>
 8011352:	b998      	cbnz	r0, 801137c <log+0x4c>
 8011354:	2200      	movs	r2, #0
 8011356:	2300      	movs	r3, #0
 8011358:	4620      	mov	r0, r4
 801135a:	4629      	mov	r1, r5
 801135c:	f7ef fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8011360:	b960      	cbnz	r0, 801137c <log+0x4c>
 8011362:	2200      	movs	r2, #0
 8011364:	2300      	movs	r3, #0
 8011366:	4620      	mov	r0, r4
 8011368:	4629      	mov	r1, r5
 801136a:	f7ef fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 801136e:	b160      	cbz	r0, 801138a <log+0x5a>
 8011370:	f7fd ffe6 	bl	800f340 <__errno>
 8011374:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80113a0 <log+0x70>
 8011378:	2322      	movs	r3, #34	; 0x22
 801137a:	6003      	str	r3, [r0, #0]
 801137c:	eeb0 0a48 	vmov.f32	s0, s16
 8011380:	eef0 0a68 	vmov.f32	s1, s17
 8011384:	ecbd 8b02 	vpop	{d8}
 8011388:	bd38      	pop	{r3, r4, r5, pc}
 801138a:	f7fd ffd9 	bl	800f340 <__errno>
 801138e:	ecbd 8b02 	vpop	{d8}
 8011392:	2321      	movs	r3, #33	; 0x21
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801139a:	4803      	ldr	r0, [pc, #12]	; (80113a8 <log+0x78>)
 801139c:	f000 b884 	b.w	80114a8 <nan>
 80113a0:	00000000 	.word	0x00000000
 80113a4:	fff00000 	.word	0xfff00000
 80113a8:	08013762 	.word	0x08013762

080113ac <pow>:
 80113ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ae:	ed2d 8b02 	vpush	{d8}
 80113b2:	eeb0 8a40 	vmov.f32	s16, s0
 80113b6:	eef0 8a60 	vmov.f32	s17, s1
 80113ba:	ec55 4b11 	vmov	r4, r5, d1
 80113be:	f000 fa37 	bl	8011830 <__ieee754_pow>
 80113c2:	4622      	mov	r2, r4
 80113c4:	462b      	mov	r3, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	4629      	mov	r1, r5
 80113ca:	ec57 6b10 	vmov	r6, r7, d0
 80113ce:	f7ef fbad 	bl	8000b2c <__aeabi_dcmpun>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d13b      	bne.n	801144e <pow+0xa2>
 80113d6:	ec51 0b18 	vmov	r0, r1, d8
 80113da:	2200      	movs	r2, #0
 80113dc:	2300      	movs	r3, #0
 80113de:	f7ef fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80113e2:	b1b8      	cbz	r0, 8011414 <pow+0x68>
 80113e4:	2200      	movs	r2, #0
 80113e6:	2300      	movs	r3, #0
 80113e8:	4620      	mov	r0, r4
 80113ea:	4629      	mov	r1, r5
 80113ec:	f7ef fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d146      	bne.n	8011482 <pow+0xd6>
 80113f4:	ec45 4b10 	vmov	d0, r4, r5
 80113f8:	f000 f848 	bl	801148c <finite>
 80113fc:	b338      	cbz	r0, 801144e <pow+0xa2>
 80113fe:	2200      	movs	r2, #0
 8011400:	2300      	movs	r3, #0
 8011402:	4620      	mov	r0, r4
 8011404:	4629      	mov	r1, r5
 8011406:	f7ef fb69 	bl	8000adc <__aeabi_dcmplt>
 801140a:	b300      	cbz	r0, 801144e <pow+0xa2>
 801140c:	f7fd ff98 	bl	800f340 <__errno>
 8011410:	2322      	movs	r3, #34	; 0x22
 8011412:	e01b      	b.n	801144c <pow+0xa0>
 8011414:	ec47 6b10 	vmov	d0, r6, r7
 8011418:	f000 f838 	bl	801148c <finite>
 801141c:	b9e0      	cbnz	r0, 8011458 <pow+0xac>
 801141e:	eeb0 0a48 	vmov.f32	s0, s16
 8011422:	eef0 0a68 	vmov.f32	s1, s17
 8011426:	f000 f831 	bl	801148c <finite>
 801142a:	b1a8      	cbz	r0, 8011458 <pow+0xac>
 801142c:	ec45 4b10 	vmov	d0, r4, r5
 8011430:	f000 f82c 	bl	801148c <finite>
 8011434:	b180      	cbz	r0, 8011458 <pow+0xac>
 8011436:	4632      	mov	r2, r6
 8011438:	463b      	mov	r3, r7
 801143a:	4630      	mov	r0, r6
 801143c:	4639      	mov	r1, r7
 801143e:	f7ef fb75 	bl	8000b2c <__aeabi_dcmpun>
 8011442:	2800      	cmp	r0, #0
 8011444:	d0e2      	beq.n	801140c <pow+0x60>
 8011446:	f7fd ff7b 	bl	800f340 <__errno>
 801144a:	2321      	movs	r3, #33	; 0x21
 801144c:	6003      	str	r3, [r0, #0]
 801144e:	ecbd 8b02 	vpop	{d8}
 8011452:	ec47 6b10 	vmov	d0, r6, r7
 8011456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011458:	2200      	movs	r2, #0
 801145a:	2300      	movs	r3, #0
 801145c:	4630      	mov	r0, r6
 801145e:	4639      	mov	r1, r7
 8011460:	f7ef fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8011464:	2800      	cmp	r0, #0
 8011466:	d0f2      	beq.n	801144e <pow+0xa2>
 8011468:	eeb0 0a48 	vmov.f32	s0, s16
 801146c:	eef0 0a68 	vmov.f32	s1, s17
 8011470:	f000 f80c 	bl	801148c <finite>
 8011474:	2800      	cmp	r0, #0
 8011476:	d0ea      	beq.n	801144e <pow+0xa2>
 8011478:	ec45 4b10 	vmov	d0, r4, r5
 801147c:	f000 f806 	bl	801148c <finite>
 8011480:	e7c3      	b.n	801140a <pow+0x5e>
 8011482:	4f01      	ldr	r7, [pc, #4]	; (8011488 <pow+0xdc>)
 8011484:	2600      	movs	r6, #0
 8011486:	e7e2      	b.n	801144e <pow+0xa2>
 8011488:	3ff00000 	.word	0x3ff00000

0801148c <finite>:
 801148c:	b082      	sub	sp, #8
 801148e:	ed8d 0b00 	vstr	d0, [sp]
 8011492:	9801      	ldr	r0, [sp, #4]
 8011494:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011498:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801149c:	0fc0      	lsrs	r0, r0, #31
 801149e:	b002      	add	sp, #8
 80114a0:	4770      	bx	lr
 80114a2:	0000      	movs	r0, r0
 80114a4:	0000      	movs	r0, r0
	...

080114a8 <nan>:
 80114a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80114b0 <nan+0x8>
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	00000000 	.word	0x00000000
 80114b4:	7ff80000 	.word	0x7ff80000

080114b8 <__ieee754_log>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	ec51 0b10 	vmov	r0, r1, d0
 80114c0:	ed2d 8b04 	vpush	{d8-d9}
 80114c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80114c8:	b083      	sub	sp, #12
 80114ca:	460d      	mov	r5, r1
 80114cc:	da29      	bge.n	8011522 <__ieee754_log+0x6a>
 80114ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114d2:	4303      	orrs	r3, r0
 80114d4:	ee10 2a10 	vmov	r2, s0
 80114d8:	d10c      	bne.n	80114f4 <__ieee754_log+0x3c>
 80114da:	49cf      	ldr	r1, [pc, #828]	; (8011818 <__ieee754_log+0x360>)
 80114dc:	2200      	movs	r2, #0
 80114de:	2300      	movs	r3, #0
 80114e0:	2000      	movs	r0, #0
 80114e2:	f7ef f9b3 	bl	800084c <__aeabi_ddiv>
 80114e6:	ec41 0b10 	vmov	d0, r0, r1
 80114ea:	b003      	add	sp, #12
 80114ec:	ecbd 8b04 	vpop	{d8-d9}
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	2900      	cmp	r1, #0
 80114f6:	da05      	bge.n	8011504 <__ieee754_log+0x4c>
 80114f8:	460b      	mov	r3, r1
 80114fa:	f7ee fec5 	bl	8000288 <__aeabi_dsub>
 80114fe:	2200      	movs	r2, #0
 8011500:	2300      	movs	r3, #0
 8011502:	e7ee      	b.n	80114e2 <__ieee754_log+0x2a>
 8011504:	4bc5      	ldr	r3, [pc, #788]	; (801181c <__ieee754_log+0x364>)
 8011506:	2200      	movs	r2, #0
 8011508:	f7ef f876 	bl	80005f8 <__aeabi_dmul>
 801150c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8011510:	460d      	mov	r5, r1
 8011512:	4ac3      	ldr	r2, [pc, #780]	; (8011820 <__ieee754_log+0x368>)
 8011514:	4295      	cmp	r5, r2
 8011516:	dd06      	ble.n	8011526 <__ieee754_log+0x6e>
 8011518:	4602      	mov	r2, r0
 801151a:	460b      	mov	r3, r1
 801151c:	f7ee feb6 	bl	800028c <__adddf3>
 8011520:	e7e1      	b.n	80114e6 <__ieee754_log+0x2e>
 8011522:	2300      	movs	r3, #0
 8011524:	e7f5      	b.n	8011512 <__ieee754_log+0x5a>
 8011526:	152c      	asrs	r4, r5, #20
 8011528:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801152c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011530:	441c      	add	r4, r3
 8011532:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8011536:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801153e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8011542:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8011546:	ea42 0105 	orr.w	r1, r2, r5
 801154a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801154e:	2200      	movs	r2, #0
 8011550:	4bb4      	ldr	r3, [pc, #720]	; (8011824 <__ieee754_log+0x36c>)
 8011552:	f7ee fe99 	bl	8000288 <__aeabi_dsub>
 8011556:	1cab      	adds	r3, r5, #2
 8011558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801155c:	2b02      	cmp	r3, #2
 801155e:	4682      	mov	sl, r0
 8011560:	468b      	mov	fp, r1
 8011562:	f04f 0200 	mov.w	r2, #0
 8011566:	dc53      	bgt.n	8011610 <__ieee754_log+0x158>
 8011568:	2300      	movs	r3, #0
 801156a:	f7ef faad 	bl	8000ac8 <__aeabi_dcmpeq>
 801156e:	b1d0      	cbz	r0, 80115a6 <__ieee754_log+0xee>
 8011570:	2c00      	cmp	r4, #0
 8011572:	f000 8122 	beq.w	80117ba <__ieee754_log+0x302>
 8011576:	4620      	mov	r0, r4
 8011578:	f7ee ffd4 	bl	8000524 <__aeabi_i2d>
 801157c:	a390      	add	r3, pc, #576	; (adr r3, 80117c0 <__ieee754_log+0x308>)
 801157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011582:	4606      	mov	r6, r0
 8011584:	460f      	mov	r7, r1
 8011586:	f7ef f837 	bl	80005f8 <__aeabi_dmul>
 801158a:	a38f      	add	r3, pc, #572	; (adr r3, 80117c8 <__ieee754_log+0x310>)
 801158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011590:	4604      	mov	r4, r0
 8011592:	460d      	mov	r5, r1
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	f7ef f82e 	bl	80005f8 <__aeabi_dmul>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	4620      	mov	r0, r4
 80115a2:	4629      	mov	r1, r5
 80115a4:	e7ba      	b.n	801151c <__ieee754_log+0x64>
 80115a6:	a38a      	add	r3, pc, #552	; (adr r3, 80117d0 <__ieee754_log+0x318>)
 80115a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ac:	4650      	mov	r0, sl
 80115ae:	4659      	mov	r1, fp
 80115b0:	f7ef f822 	bl	80005f8 <__aeabi_dmul>
 80115b4:	4602      	mov	r2, r0
 80115b6:	460b      	mov	r3, r1
 80115b8:	2000      	movs	r0, #0
 80115ba:	499b      	ldr	r1, [pc, #620]	; (8011828 <__ieee754_log+0x370>)
 80115bc:	f7ee fe64 	bl	8000288 <__aeabi_dsub>
 80115c0:	4652      	mov	r2, sl
 80115c2:	4606      	mov	r6, r0
 80115c4:	460f      	mov	r7, r1
 80115c6:	465b      	mov	r3, fp
 80115c8:	4650      	mov	r0, sl
 80115ca:	4659      	mov	r1, fp
 80115cc:	f7ef f814 	bl	80005f8 <__aeabi_dmul>
 80115d0:	4602      	mov	r2, r0
 80115d2:	460b      	mov	r3, r1
 80115d4:	4630      	mov	r0, r6
 80115d6:	4639      	mov	r1, r7
 80115d8:	f7ef f80e 	bl	80005f8 <__aeabi_dmul>
 80115dc:	4606      	mov	r6, r0
 80115de:	460f      	mov	r7, r1
 80115e0:	b914      	cbnz	r4, 80115e8 <__ieee754_log+0x130>
 80115e2:	4632      	mov	r2, r6
 80115e4:	463b      	mov	r3, r7
 80115e6:	e0a2      	b.n	801172e <__ieee754_log+0x276>
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ee ff9b 	bl	8000524 <__aeabi_i2d>
 80115ee:	a374      	add	r3, pc, #464	; (adr r3, 80117c0 <__ieee754_log+0x308>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	4680      	mov	r8, r0
 80115f6:	4689      	mov	r9, r1
 80115f8:	f7ee fffe 	bl	80005f8 <__aeabi_dmul>
 80115fc:	a372      	add	r3, pc, #456	; (adr r3, 80117c8 <__ieee754_log+0x310>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	4604      	mov	r4, r0
 8011604:	460d      	mov	r5, r1
 8011606:	4640      	mov	r0, r8
 8011608:	4649      	mov	r1, r9
 801160a:	f7ee fff5 	bl	80005f8 <__aeabi_dmul>
 801160e:	e0a7      	b.n	8011760 <__ieee754_log+0x2a8>
 8011610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011614:	f7ee fe3a 	bl	800028c <__adddf3>
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	4650      	mov	r0, sl
 801161e:	4659      	mov	r1, fp
 8011620:	f7ef f914 	bl	800084c <__aeabi_ddiv>
 8011624:	ec41 0b18 	vmov	d8, r0, r1
 8011628:	4620      	mov	r0, r4
 801162a:	f7ee ff7b 	bl	8000524 <__aeabi_i2d>
 801162e:	ec53 2b18 	vmov	r2, r3, d8
 8011632:	ec41 0b19 	vmov	d9, r0, r1
 8011636:	ec51 0b18 	vmov	r0, r1, d8
 801163a:	f7ee ffdd 	bl	80005f8 <__aeabi_dmul>
 801163e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8011642:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8011646:	9301      	str	r3, [sp, #4]
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4680      	mov	r8, r0
 801164e:	4689      	mov	r9, r1
 8011650:	f7ee ffd2 	bl	80005f8 <__aeabi_dmul>
 8011654:	a360      	add	r3, pc, #384	; (adr r3, 80117d8 <__ieee754_log+0x320>)
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	4606      	mov	r6, r0
 801165c:	460f      	mov	r7, r1
 801165e:	f7ee ffcb 	bl	80005f8 <__aeabi_dmul>
 8011662:	a35f      	add	r3, pc, #380	; (adr r3, 80117e0 <__ieee754_log+0x328>)
 8011664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011668:	f7ee fe10 	bl	800028c <__adddf3>
 801166c:	4632      	mov	r2, r6
 801166e:	463b      	mov	r3, r7
 8011670:	f7ee ffc2 	bl	80005f8 <__aeabi_dmul>
 8011674:	a35c      	add	r3, pc, #368	; (adr r3, 80117e8 <__ieee754_log+0x330>)
 8011676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167a:	f7ee fe07 	bl	800028c <__adddf3>
 801167e:	4632      	mov	r2, r6
 8011680:	463b      	mov	r3, r7
 8011682:	f7ee ffb9 	bl	80005f8 <__aeabi_dmul>
 8011686:	a35a      	add	r3, pc, #360	; (adr r3, 80117f0 <__ieee754_log+0x338>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	f7ee fdfe 	bl	800028c <__adddf3>
 8011690:	4642      	mov	r2, r8
 8011692:	464b      	mov	r3, r9
 8011694:	f7ee ffb0 	bl	80005f8 <__aeabi_dmul>
 8011698:	a357      	add	r3, pc, #348	; (adr r3, 80117f8 <__ieee754_log+0x340>)
 801169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169e:	4680      	mov	r8, r0
 80116a0:	4689      	mov	r9, r1
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7ee ffa7 	bl	80005f8 <__aeabi_dmul>
 80116aa:	a355      	add	r3, pc, #340	; (adr r3, 8011800 <__ieee754_log+0x348>)
 80116ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b0:	f7ee fdec 	bl	800028c <__adddf3>
 80116b4:	4632      	mov	r2, r6
 80116b6:	463b      	mov	r3, r7
 80116b8:	f7ee ff9e 	bl	80005f8 <__aeabi_dmul>
 80116bc:	a352      	add	r3, pc, #328	; (adr r3, 8011808 <__ieee754_log+0x350>)
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	f7ee fde3 	bl	800028c <__adddf3>
 80116c6:	4632      	mov	r2, r6
 80116c8:	463b      	mov	r3, r7
 80116ca:	f7ee ff95 	bl	80005f8 <__aeabi_dmul>
 80116ce:	460b      	mov	r3, r1
 80116d0:	4602      	mov	r2, r0
 80116d2:	4649      	mov	r1, r9
 80116d4:	4640      	mov	r0, r8
 80116d6:	f7ee fdd9 	bl	800028c <__adddf3>
 80116da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80116de:	9b01      	ldr	r3, [sp, #4]
 80116e0:	3551      	adds	r5, #81	; 0x51
 80116e2:	431d      	orrs	r5, r3
 80116e4:	2d00      	cmp	r5, #0
 80116e6:	4680      	mov	r8, r0
 80116e8:	4689      	mov	r9, r1
 80116ea:	dd48      	ble.n	801177e <__ieee754_log+0x2c6>
 80116ec:	4b4e      	ldr	r3, [pc, #312]	; (8011828 <__ieee754_log+0x370>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	4650      	mov	r0, sl
 80116f2:	4659      	mov	r1, fp
 80116f4:	f7ee ff80 	bl	80005f8 <__aeabi_dmul>
 80116f8:	4652      	mov	r2, sl
 80116fa:	465b      	mov	r3, fp
 80116fc:	f7ee ff7c 	bl	80005f8 <__aeabi_dmul>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	4606      	mov	r6, r0
 8011706:	460f      	mov	r7, r1
 8011708:	4640      	mov	r0, r8
 801170a:	4649      	mov	r1, r9
 801170c:	f7ee fdbe 	bl	800028c <__adddf3>
 8011710:	ec53 2b18 	vmov	r2, r3, d8
 8011714:	f7ee ff70 	bl	80005f8 <__aeabi_dmul>
 8011718:	4680      	mov	r8, r0
 801171a:	4689      	mov	r9, r1
 801171c:	b964      	cbnz	r4, 8011738 <__ieee754_log+0x280>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4630      	mov	r0, r6
 8011724:	4639      	mov	r1, r7
 8011726:	f7ee fdaf 	bl	8000288 <__aeabi_dsub>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	4650      	mov	r0, sl
 8011730:	4659      	mov	r1, fp
 8011732:	f7ee fda9 	bl	8000288 <__aeabi_dsub>
 8011736:	e6d6      	b.n	80114e6 <__ieee754_log+0x2e>
 8011738:	a321      	add	r3, pc, #132	; (adr r3, 80117c0 <__ieee754_log+0x308>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	ec51 0b19 	vmov	r0, r1, d9
 8011742:	f7ee ff59 	bl	80005f8 <__aeabi_dmul>
 8011746:	a320      	add	r3, pc, #128	; (adr r3, 80117c8 <__ieee754_log+0x310>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	4604      	mov	r4, r0
 801174e:	460d      	mov	r5, r1
 8011750:	ec51 0b19 	vmov	r0, r1, d9
 8011754:	f7ee ff50 	bl	80005f8 <__aeabi_dmul>
 8011758:	4642      	mov	r2, r8
 801175a:	464b      	mov	r3, r9
 801175c:	f7ee fd96 	bl	800028c <__adddf3>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	4630      	mov	r0, r6
 8011766:	4639      	mov	r1, r7
 8011768:	f7ee fd8e 	bl	8000288 <__aeabi_dsub>
 801176c:	4652      	mov	r2, sl
 801176e:	465b      	mov	r3, fp
 8011770:	f7ee fd8a 	bl	8000288 <__aeabi_dsub>
 8011774:	4602      	mov	r2, r0
 8011776:	460b      	mov	r3, r1
 8011778:	4620      	mov	r0, r4
 801177a:	4629      	mov	r1, r5
 801177c:	e7d9      	b.n	8011732 <__ieee754_log+0x27a>
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	4650      	mov	r0, sl
 8011784:	4659      	mov	r1, fp
 8011786:	f7ee fd7f 	bl	8000288 <__aeabi_dsub>
 801178a:	ec53 2b18 	vmov	r2, r3, d8
 801178e:	f7ee ff33 	bl	80005f8 <__aeabi_dmul>
 8011792:	4606      	mov	r6, r0
 8011794:	460f      	mov	r7, r1
 8011796:	2c00      	cmp	r4, #0
 8011798:	f43f af23 	beq.w	80115e2 <__ieee754_log+0x12a>
 801179c:	a308      	add	r3, pc, #32	; (adr r3, 80117c0 <__ieee754_log+0x308>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	ec51 0b19 	vmov	r0, r1, d9
 80117a6:	f7ee ff27 	bl	80005f8 <__aeabi_dmul>
 80117aa:	a307      	add	r3, pc, #28	; (adr r3, 80117c8 <__ieee754_log+0x310>)
 80117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b0:	4604      	mov	r4, r0
 80117b2:	460d      	mov	r5, r1
 80117b4:	ec51 0b19 	vmov	r0, r1, d9
 80117b8:	e727      	b.n	801160a <__ieee754_log+0x152>
 80117ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8011810 <__ieee754_log+0x358>
 80117be:	e694      	b.n	80114ea <__ieee754_log+0x32>
 80117c0:	fee00000 	.word	0xfee00000
 80117c4:	3fe62e42 	.word	0x3fe62e42
 80117c8:	35793c76 	.word	0x35793c76
 80117cc:	3dea39ef 	.word	0x3dea39ef
 80117d0:	55555555 	.word	0x55555555
 80117d4:	3fd55555 	.word	0x3fd55555
 80117d8:	df3e5244 	.word	0xdf3e5244
 80117dc:	3fc2f112 	.word	0x3fc2f112
 80117e0:	96cb03de 	.word	0x96cb03de
 80117e4:	3fc74664 	.word	0x3fc74664
 80117e8:	94229359 	.word	0x94229359
 80117ec:	3fd24924 	.word	0x3fd24924
 80117f0:	55555593 	.word	0x55555593
 80117f4:	3fe55555 	.word	0x3fe55555
 80117f8:	d078c69f 	.word	0xd078c69f
 80117fc:	3fc39a09 	.word	0x3fc39a09
 8011800:	1d8e78af 	.word	0x1d8e78af
 8011804:	3fcc71c5 	.word	0x3fcc71c5
 8011808:	9997fa04 	.word	0x9997fa04
 801180c:	3fd99999 	.word	0x3fd99999
	...
 8011818:	c3500000 	.word	0xc3500000
 801181c:	43500000 	.word	0x43500000
 8011820:	7fefffff 	.word	0x7fefffff
 8011824:	3ff00000 	.word	0x3ff00000
 8011828:	3fe00000 	.word	0x3fe00000
 801182c:	00000000 	.word	0x00000000

08011830 <__ieee754_pow>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	ed2d 8b06 	vpush	{d8-d10}
 8011838:	b089      	sub	sp, #36	; 0x24
 801183a:	ed8d 1b00 	vstr	d1, [sp]
 801183e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011842:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011846:	ea58 0102 	orrs.w	r1, r8, r2
 801184a:	ec57 6b10 	vmov	r6, r7, d0
 801184e:	d115      	bne.n	801187c <__ieee754_pow+0x4c>
 8011850:	19b3      	adds	r3, r6, r6
 8011852:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011856:	4152      	adcs	r2, r2
 8011858:	4299      	cmp	r1, r3
 801185a:	4b89      	ldr	r3, [pc, #548]	; (8011a80 <__ieee754_pow+0x250>)
 801185c:	4193      	sbcs	r3, r2
 801185e:	f080 84d1 	bcs.w	8012204 <__ieee754_pow+0x9d4>
 8011862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fd0f 	bl	800028c <__adddf3>
 801186e:	ec41 0b10 	vmov	d0, r0, r1
 8011872:	b009      	add	sp, #36	; 0x24
 8011874:	ecbd 8b06 	vpop	{d8-d10}
 8011878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187c:	4b81      	ldr	r3, [pc, #516]	; (8011a84 <__ieee754_pow+0x254>)
 801187e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011882:	429c      	cmp	r4, r3
 8011884:	ee10 aa10 	vmov	sl, s0
 8011888:	463d      	mov	r5, r7
 801188a:	dc06      	bgt.n	801189a <__ieee754_pow+0x6a>
 801188c:	d101      	bne.n	8011892 <__ieee754_pow+0x62>
 801188e:	2e00      	cmp	r6, #0
 8011890:	d1e7      	bne.n	8011862 <__ieee754_pow+0x32>
 8011892:	4598      	cmp	r8, r3
 8011894:	dc01      	bgt.n	801189a <__ieee754_pow+0x6a>
 8011896:	d10f      	bne.n	80118b8 <__ieee754_pow+0x88>
 8011898:	b172      	cbz	r2, 80118b8 <__ieee754_pow+0x88>
 801189a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801189e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80118a2:	ea55 050a 	orrs.w	r5, r5, sl
 80118a6:	d1dc      	bne.n	8011862 <__ieee754_pow+0x32>
 80118a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80118ac:	18db      	adds	r3, r3, r3
 80118ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80118b2:	4152      	adcs	r2, r2
 80118b4:	429d      	cmp	r5, r3
 80118b6:	e7d0      	b.n	801185a <__ieee754_pow+0x2a>
 80118b8:	2d00      	cmp	r5, #0
 80118ba:	da3b      	bge.n	8011934 <__ieee754_pow+0x104>
 80118bc:	4b72      	ldr	r3, [pc, #456]	; (8011a88 <__ieee754_pow+0x258>)
 80118be:	4598      	cmp	r8, r3
 80118c0:	dc51      	bgt.n	8011966 <__ieee754_pow+0x136>
 80118c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80118c6:	4598      	cmp	r8, r3
 80118c8:	f340 84ab 	ble.w	8012222 <__ieee754_pow+0x9f2>
 80118cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80118d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80118d4:	2b14      	cmp	r3, #20
 80118d6:	dd0f      	ble.n	80118f8 <__ieee754_pow+0xc8>
 80118d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80118dc:	fa22 f103 	lsr.w	r1, r2, r3
 80118e0:	fa01 f303 	lsl.w	r3, r1, r3
 80118e4:	4293      	cmp	r3, r2
 80118e6:	f040 849c 	bne.w	8012222 <__ieee754_pow+0x9f2>
 80118ea:	f001 0101 	and.w	r1, r1, #1
 80118ee:	f1c1 0302 	rsb	r3, r1, #2
 80118f2:	9304      	str	r3, [sp, #16]
 80118f4:	b182      	cbz	r2, 8011918 <__ieee754_pow+0xe8>
 80118f6:	e05f      	b.n	80119b8 <__ieee754_pow+0x188>
 80118f8:	2a00      	cmp	r2, #0
 80118fa:	d15b      	bne.n	80119b4 <__ieee754_pow+0x184>
 80118fc:	f1c3 0314 	rsb	r3, r3, #20
 8011900:	fa48 f103 	asr.w	r1, r8, r3
 8011904:	fa01 f303 	lsl.w	r3, r1, r3
 8011908:	4543      	cmp	r3, r8
 801190a:	f040 8487 	bne.w	801221c <__ieee754_pow+0x9ec>
 801190e:	f001 0101 	and.w	r1, r1, #1
 8011912:	f1c1 0302 	rsb	r3, r1, #2
 8011916:	9304      	str	r3, [sp, #16]
 8011918:	4b5c      	ldr	r3, [pc, #368]	; (8011a8c <__ieee754_pow+0x25c>)
 801191a:	4598      	cmp	r8, r3
 801191c:	d132      	bne.n	8011984 <__ieee754_pow+0x154>
 801191e:	f1b9 0f00 	cmp.w	r9, #0
 8011922:	f280 8477 	bge.w	8012214 <__ieee754_pow+0x9e4>
 8011926:	4959      	ldr	r1, [pc, #356]	; (8011a8c <__ieee754_pow+0x25c>)
 8011928:	4632      	mov	r2, r6
 801192a:	463b      	mov	r3, r7
 801192c:	2000      	movs	r0, #0
 801192e:	f7ee ff8d 	bl	800084c <__aeabi_ddiv>
 8011932:	e79c      	b.n	801186e <__ieee754_pow+0x3e>
 8011934:	2300      	movs	r3, #0
 8011936:	9304      	str	r3, [sp, #16]
 8011938:	2a00      	cmp	r2, #0
 801193a:	d13d      	bne.n	80119b8 <__ieee754_pow+0x188>
 801193c:	4b51      	ldr	r3, [pc, #324]	; (8011a84 <__ieee754_pow+0x254>)
 801193e:	4598      	cmp	r8, r3
 8011940:	d1ea      	bne.n	8011918 <__ieee754_pow+0xe8>
 8011942:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801194a:	ea53 030a 	orrs.w	r3, r3, sl
 801194e:	f000 8459 	beq.w	8012204 <__ieee754_pow+0x9d4>
 8011952:	4b4f      	ldr	r3, [pc, #316]	; (8011a90 <__ieee754_pow+0x260>)
 8011954:	429c      	cmp	r4, r3
 8011956:	dd08      	ble.n	801196a <__ieee754_pow+0x13a>
 8011958:	f1b9 0f00 	cmp.w	r9, #0
 801195c:	f2c0 8456 	blt.w	801220c <__ieee754_pow+0x9dc>
 8011960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011964:	e783      	b.n	801186e <__ieee754_pow+0x3e>
 8011966:	2302      	movs	r3, #2
 8011968:	e7e5      	b.n	8011936 <__ieee754_pow+0x106>
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	f04f 0000 	mov.w	r0, #0
 8011972:	f04f 0100 	mov.w	r1, #0
 8011976:	f6bf af7a 	bge.w	801186e <__ieee754_pow+0x3e>
 801197a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801197e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011982:	e774      	b.n	801186e <__ieee754_pow+0x3e>
 8011984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011988:	d106      	bne.n	8011998 <__ieee754_pow+0x168>
 801198a:	4632      	mov	r2, r6
 801198c:	463b      	mov	r3, r7
 801198e:	4630      	mov	r0, r6
 8011990:	4639      	mov	r1, r7
 8011992:	f7ee fe31 	bl	80005f8 <__aeabi_dmul>
 8011996:	e76a      	b.n	801186e <__ieee754_pow+0x3e>
 8011998:	4b3e      	ldr	r3, [pc, #248]	; (8011a94 <__ieee754_pow+0x264>)
 801199a:	4599      	cmp	r9, r3
 801199c:	d10c      	bne.n	80119b8 <__ieee754_pow+0x188>
 801199e:	2d00      	cmp	r5, #0
 80119a0:	db0a      	blt.n	80119b8 <__ieee754_pow+0x188>
 80119a2:	ec47 6b10 	vmov	d0, r6, r7
 80119a6:	b009      	add	sp, #36	; 0x24
 80119a8:	ecbd 8b06 	vpop	{d8-d10}
 80119ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b0:	f000 bd20 	b.w	80123f4 <__ieee754_sqrt>
 80119b4:	2300      	movs	r3, #0
 80119b6:	9304      	str	r3, [sp, #16]
 80119b8:	ec47 6b10 	vmov	d0, r6, r7
 80119bc:	f000 fc62 	bl	8012284 <fabs>
 80119c0:	ec51 0b10 	vmov	r0, r1, d0
 80119c4:	f1ba 0f00 	cmp.w	sl, #0
 80119c8:	d129      	bne.n	8011a1e <__ieee754_pow+0x1ee>
 80119ca:	b124      	cbz	r4, 80119d6 <__ieee754_pow+0x1a6>
 80119cc:	4b2f      	ldr	r3, [pc, #188]	; (8011a8c <__ieee754_pow+0x25c>)
 80119ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d123      	bne.n	8011a1e <__ieee754_pow+0x1ee>
 80119d6:	f1b9 0f00 	cmp.w	r9, #0
 80119da:	da05      	bge.n	80119e8 <__ieee754_pow+0x1b8>
 80119dc:	4602      	mov	r2, r0
 80119de:	460b      	mov	r3, r1
 80119e0:	2000      	movs	r0, #0
 80119e2:	492a      	ldr	r1, [pc, #168]	; (8011a8c <__ieee754_pow+0x25c>)
 80119e4:	f7ee ff32 	bl	800084c <__aeabi_ddiv>
 80119e8:	2d00      	cmp	r5, #0
 80119ea:	f6bf af40 	bge.w	801186e <__ieee754_pow+0x3e>
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80119f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80119f8:	431c      	orrs	r4, r3
 80119fa:	d108      	bne.n	8011a0e <__ieee754_pow+0x1de>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	4610      	mov	r0, r2
 8011a02:	4619      	mov	r1, r3
 8011a04:	f7ee fc40 	bl	8000288 <__aeabi_dsub>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	e78f      	b.n	801192e <__ieee754_pow+0xfe>
 8011a0e:	9b04      	ldr	r3, [sp, #16]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	f47f af2c 	bne.w	801186e <__ieee754_pow+0x3e>
 8011a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	e727      	b.n	801186e <__ieee754_pow+0x3e>
 8011a1e:	0feb      	lsrs	r3, r5, #31
 8011a20:	3b01      	subs	r3, #1
 8011a22:	9306      	str	r3, [sp, #24]
 8011a24:	9a06      	ldr	r2, [sp, #24]
 8011a26:	9b04      	ldr	r3, [sp, #16]
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	d102      	bne.n	8011a32 <__ieee754_pow+0x202>
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	463b      	mov	r3, r7
 8011a30:	e7e6      	b.n	8011a00 <__ieee754_pow+0x1d0>
 8011a32:	4b19      	ldr	r3, [pc, #100]	; (8011a98 <__ieee754_pow+0x268>)
 8011a34:	4598      	cmp	r8, r3
 8011a36:	f340 80fb 	ble.w	8011c30 <__ieee754_pow+0x400>
 8011a3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011a3e:	4598      	cmp	r8, r3
 8011a40:	4b13      	ldr	r3, [pc, #76]	; (8011a90 <__ieee754_pow+0x260>)
 8011a42:	dd0c      	ble.n	8011a5e <__ieee754_pow+0x22e>
 8011a44:	429c      	cmp	r4, r3
 8011a46:	dc0f      	bgt.n	8011a68 <__ieee754_pow+0x238>
 8011a48:	f1b9 0f00 	cmp.w	r9, #0
 8011a4c:	da0f      	bge.n	8011a6e <__ieee754_pow+0x23e>
 8011a4e:	2000      	movs	r0, #0
 8011a50:	b009      	add	sp, #36	; 0x24
 8011a52:	ecbd 8b06 	vpop	{d8-d10}
 8011a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5a:	f000 bcc2 	b.w	80123e2 <__math_oflow>
 8011a5e:	429c      	cmp	r4, r3
 8011a60:	dbf2      	blt.n	8011a48 <__ieee754_pow+0x218>
 8011a62:	4b0a      	ldr	r3, [pc, #40]	; (8011a8c <__ieee754_pow+0x25c>)
 8011a64:	429c      	cmp	r4, r3
 8011a66:	dd19      	ble.n	8011a9c <__ieee754_pow+0x26c>
 8011a68:	f1b9 0f00 	cmp.w	r9, #0
 8011a6c:	dcef      	bgt.n	8011a4e <__ieee754_pow+0x21e>
 8011a6e:	2000      	movs	r0, #0
 8011a70:	b009      	add	sp, #36	; 0x24
 8011a72:	ecbd 8b06 	vpop	{d8-d10}
 8011a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	f000 bca9 	b.w	80123d0 <__math_uflow>
 8011a7e:	bf00      	nop
 8011a80:	fff00000 	.word	0xfff00000
 8011a84:	7ff00000 	.word	0x7ff00000
 8011a88:	433fffff 	.word	0x433fffff
 8011a8c:	3ff00000 	.word	0x3ff00000
 8011a90:	3fefffff 	.word	0x3fefffff
 8011a94:	3fe00000 	.word	0x3fe00000
 8011a98:	41e00000 	.word	0x41e00000
 8011a9c:	4b60      	ldr	r3, [pc, #384]	; (8011c20 <__ieee754_pow+0x3f0>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	f7ee fbf2 	bl	8000288 <__aeabi_dsub>
 8011aa4:	a354      	add	r3, pc, #336	; (adr r3, 8011bf8 <__ieee754_pow+0x3c8>)
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	4604      	mov	r4, r0
 8011aac:	460d      	mov	r5, r1
 8011aae:	f7ee fda3 	bl	80005f8 <__aeabi_dmul>
 8011ab2:	a353      	add	r3, pc, #332	; (adr r3, 8011c00 <__ieee754_pow+0x3d0>)
 8011ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab8:	4606      	mov	r6, r0
 8011aba:	460f      	mov	r7, r1
 8011abc:	4620      	mov	r0, r4
 8011abe:	4629      	mov	r1, r5
 8011ac0:	f7ee fd9a 	bl	80005f8 <__aeabi_dmul>
 8011ac4:	4b57      	ldr	r3, [pc, #348]	; (8011c24 <__ieee754_pow+0x3f4>)
 8011ac6:	4682      	mov	sl, r0
 8011ac8:	468b      	mov	fp, r1
 8011aca:	2200      	movs	r2, #0
 8011acc:	4620      	mov	r0, r4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7ee fd92 	bl	80005f8 <__aeabi_dmul>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	a14b      	add	r1, pc, #300	; (adr r1, 8011c08 <__ieee754_pow+0x3d8>)
 8011ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ade:	f7ee fbd3 	bl	8000288 <__aeabi_dsub>
 8011ae2:	4622      	mov	r2, r4
 8011ae4:	462b      	mov	r3, r5
 8011ae6:	f7ee fd87 	bl	80005f8 <__aeabi_dmul>
 8011aea:	4602      	mov	r2, r0
 8011aec:	460b      	mov	r3, r1
 8011aee:	2000      	movs	r0, #0
 8011af0:	494d      	ldr	r1, [pc, #308]	; (8011c28 <__ieee754_pow+0x3f8>)
 8011af2:	f7ee fbc9 	bl	8000288 <__aeabi_dsub>
 8011af6:	4622      	mov	r2, r4
 8011af8:	4680      	mov	r8, r0
 8011afa:	4689      	mov	r9, r1
 8011afc:	462b      	mov	r3, r5
 8011afe:	4620      	mov	r0, r4
 8011b00:	4629      	mov	r1, r5
 8011b02:	f7ee fd79 	bl	80005f8 <__aeabi_dmul>
 8011b06:	4602      	mov	r2, r0
 8011b08:	460b      	mov	r3, r1
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	f7ee fd73 	bl	80005f8 <__aeabi_dmul>
 8011b12:	a33f      	add	r3, pc, #252	; (adr r3, 8011c10 <__ieee754_pow+0x3e0>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	f7ee fd6e 	bl	80005f8 <__aeabi_dmul>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	460b      	mov	r3, r1
 8011b20:	4650      	mov	r0, sl
 8011b22:	4659      	mov	r1, fp
 8011b24:	f7ee fbb0 	bl	8000288 <__aeabi_dsub>
 8011b28:	4602      	mov	r2, r0
 8011b2a:	460b      	mov	r3, r1
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	4689      	mov	r9, r1
 8011b30:	4630      	mov	r0, r6
 8011b32:	4639      	mov	r1, r7
 8011b34:	f7ee fbaa 	bl	800028c <__adddf3>
 8011b38:	2000      	movs	r0, #0
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	4604      	mov	r4, r0
 8011b40:	460d      	mov	r5, r1
 8011b42:	f7ee fba1 	bl	8000288 <__aeabi_dsub>
 8011b46:	4602      	mov	r2, r0
 8011b48:	460b      	mov	r3, r1
 8011b4a:	4640      	mov	r0, r8
 8011b4c:	4649      	mov	r1, r9
 8011b4e:	f7ee fb9b 	bl	8000288 <__aeabi_dsub>
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	9a06      	ldr	r2, [sp, #24]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	4682      	mov	sl, r0
 8011b5c:	468b      	mov	fp, r1
 8011b5e:	f040 81e7 	bne.w	8011f30 <__ieee754_pow+0x700>
 8011b62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011c18 <__ieee754_pow+0x3e8>
 8011b66:	eeb0 8a47 	vmov.f32	s16, s14
 8011b6a:	eef0 8a67 	vmov.f32	s17, s15
 8011b6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011b72:	2600      	movs	r6, #0
 8011b74:	4632      	mov	r2, r6
 8011b76:	463b      	mov	r3, r7
 8011b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b7c:	f7ee fb84 	bl	8000288 <__aeabi_dsub>
 8011b80:	4622      	mov	r2, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	f7ee fd38 	bl	80005f8 <__aeabi_dmul>
 8011b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b8c:	4680      	mov	r8, r0
 8011b8e:	4689      	mov	r9, r1
 8011b90:	4650      	mov	r0, sl
 8011b92:	4659      	mov	r1, fp
 8011b94:	f7ee fd30 	bl	80005f8 <__aeabi_dmul>
 8011b98:	4602      	mov	r2, r0
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	4640      	mov	r0, r8
 8011b9e:	4649      	mov	r1, r9
 8011ba0:	f7ee fb74 	bl	800028c <__adddf3>
 8011ba4:	4632      	mov	r2, r6
 8011ba6:	463b      	mov	r3, r7
 8011ba8:	4680      	mov	r8, r0
 8011baa:	4689      	mov	r9, r1
 8011bac:	4620      	mov	r0, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7ee fd22 	bl	80005f8 <__aeabi_dmul>
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	460d      	mov	r5, r1
 8011bba:	4602      	mov	r2, r0
 8011bbc:	4649      	mov	r1, r9
 8011bbe:	4640      	mov	r0, r8
 8011bc0:	f7ee fb64 	bl	800028c <__adddf3>
 8011bc4:	4b19      	ldr	r3, [pc, #100]	; (8011c2c <__ieee754_pow+0x3fc>)
 8011bc6:	4299      	cmp	r1, r3
 8011bc8:	ec45 4b19 	vmov	d9, r4, r5
 8011bcc:	4606      	mov	r6, r0
 8011bce:	460f      	mov	r7, r1
 8011bd0:	468b      	mov	fp, r1
 8011bd2:	f340 82f0 	ble.w	80121b6 <__ieee754_pow+0x986>
 8011bd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011bda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011bde:	4303      	orrs	r3, r0
 8011be0:	f000 81e4 	beq.w	8011fac <__ieee754_pow+0x77c>
 8011be4:	ec51 0b18 	vmov	r0, r1, d8
 8011be8:	2200      	movs	r2, #0
 8011bea:	2300      	movs	r3, #0
 8011bec:	f7ee ff76 	bl	8000adc <__aeabi_dcmplt>
 8011bf0:	3800      	subs	r0, #0
 8011bf2:	bf18      	it	ne
 8011bf4:	2001      	movne	r0, #1
 8011bf6:	e72b      	b.n	8011a50 <__ieee754_pow+0x220>
 8011bf8:	60000000 	.word	0x60000000
 8011bfc:	3ff71547 	.word	0x3ff71547
 8011c00:	f85ddf44 	.word	0xf85ddf44
 8011c04:	3e54ae0b 	.word	0x3e54ae0b
 8011c08:	55555555 	.word	0x55555555
 8011c0c:	3fd55555 	.word	0x3fd55555
 8011c10:	652b82fe 	.word	0x652b82fe
 8011c14:	3ff71547 	.word	0x3ff71547
 8011c18:	00000000 	.word	0x00000000
 8011c1c:	bff00000 	.word	0xbff00000
 8011c20:	3ff00000 	.word	0x3ff00000
 8011c24:	3fd00000 	.word	0x3fd00000
 8011c28:	3fe00000 	.word	0x3fe00000
 8011c2c:	408fffff 	.word	0x408fffff
 8011c30:	4bd5      	ldr	r3, [pc, #852]	; (8011f88 <__ieee754_pow+0x758>)
 8011c32:	402b      	ands	r3, r5
 8011c34:	2200      	movs	r2, #0
 8011c36:	b92b      	cbnz	r3, 8011c44 <__ieee754_pow+0x414>
 8011c38:	4bd4      	ldr	r3, [pc, #848]	; (8011f8c <__ieee754_pow+0x75c>)
 8011c3a:	f7ee fcdd 	bl	80005f8 <__aeabi_dmul>
 8011c3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011c42:	460c      	mov	r4, r1
 8011c44:	1523      	asrs	r3, r4, #20
 8011c46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011c4a:	4413      	add	r3, r2
 8011c4c:	9305      	str	r3, [sp, #20]
 8011c4e:	4bd0      	ldr	r3, [pc, #832]	; (8011f90 <__ieee754_pow+0x760>)
 8011c50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011c54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011c58:	429c      	cmp	r4, r3
 8011c5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011c5e:	dd08      	ble.n	8011c72 <__ieee754_pow+0x442>
 8011c60:	4bcc      	ldr	r3, [pc, #816]	; (8011f94 <__ieee754_pow+0x764>)
 8011c62:	429c      	cmp	r4, r3
 8011c64:	f340 8162 	ble.w	8011f2c <__ieee754_pow+0x6fc>
 8011c68:	9b05      	ldr	r3, [sp, #20]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	9305      	str	r3, [sp, #20]
 8011c6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011c72:	2400      	movs	r4, #0
 8011c74:	00e3      	lsls	r3, r4, #3
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	4bc7      	ldr	r3, [pc, #796]	; (8011f98 <__ieee754_pow+0x768>)
 8011c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c7e:	ed93 7b00 	vldr	d7, [r3]
 8011c82:	4629      	mov	r1, r5
 8011c84:	ec53 2b17 	vmov	r2, r3, d7
 8011c88:	eeb0 9a47 	vmov.f32	s18, s14
 8011c8c:	eef0 9a67 	vmov.f32	s19, s15
 8011c90:	4682      	mov	sl, r0
 8011c92:	f7ee faf9 	bl	8000288 <__aeabi_dsub>
 8011c96:	4652      	mov	r2, sl
 8011c98:	4606      	mov	r6, r0
 8011c9a:	460f      	mov	r7, r1
 8011c9c:	462b      	mov	r3, r5
 8011c9e:	ec51 0b19 	vmov	r0, r1, d9
 8011ca2:	f7ee faf3 	bl	800028c <__adddf3>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	2000      	movs	r0, #0
 8011cac:	49bb      	ldr	r1, [pc, #748]	; (8011f9c <__ieee754_pow+0x76c>)
 8011cae:	f7ee fdcd 	bl	800084c <__aeabi_ddiv>
 8011cb2:	ec41 0b1a 	vmov	d10, r0, r1
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	f7ee fc9b 	bl	80005f8 <__aeabi_dmul>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cc8:	9302      	str	r3, [sp, #8]
 8011cca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011cce:	46ab      	mov	fp, r5
 8011cd0:	106d      	asrs	r5, r5, #1
 8011cd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011cd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011cda:	ec41 0b18 	vmov	d8, r0, r1
 8011cde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	4640      	mov	r0, r8
 8011ce6:	4649      	mov	r1, r9
 8011ce8:	4614      	mov	r4, r2
 8011cea:	461d      	mov	r5, r3
 8011cec:	f7ee fc84 	bl	80005f8 <__aeabi_dmul>
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	4639      	mov	r1, r7
 8011cf8:	f7ee fac6 	bl	8000288 <__aeabi_dsub>
 8011cfc:	ec53 2b19 	vmov	r2, r3, d9
 8011d00:	4606      	mov	r6, r0
 8011d02:	460f      	mov	r7, r1
 8011d04:	4620      	mov	r0, r4
 8011d06:	4629      	mov	r1, r5
 8011d08:	f7ee fabe 	bl	8000288 <__aeabi_dsub>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	460b      	mov	r3, r1
 8011d10:	4650      	mov	r0, sl
 8011d12:	4659      	mov	r1, fp
 8011d14:	f7ee fab8 	bl	8000288 <__aeabi_dsub>
 8011d18:	4642      	mov	r2, r8
 8011d1a:	464b      	mov	r3, r9
 8011d1c:	f7ee fc6c 	bl	80005f8 <__aeabi_dmul>
 8011d20:	4602      	mov	r2, r0
 8011d22:	460b      	mov	r3, r1
 8011d24:	4630      	mov	r0, r6
 8011d26:	4639      	mov	r1, r7
 8011d28:	f7ee faae 	bl	8000288 <__aeabi_dsub>
 8011d2c:	ec53 2b1a 	vmov	r2, r3, d10
 8011d30:	f7ee fc62 	bl	80005f8 <__aeabi_dmul>
 8011d34:	ec53 2b18 	vmov	r2, r3, d8
 8011d38:	ec41 0b19 	vmov	d9, r0, r1
 8011d3c:	ec51 0b18 	vmov	r0, r1, d8
 8011d40:	f7ee fc5a 	bl	80005f8 <__aeabi_dmul>
 8011d44:	a37c      	add	r3, pc, #496	; (adr r3, 8011f38 <__ieee754_pow+0x708>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	f7ee fc53 	bl	80005f8 <__aeabi_dmul>
 8011d52:	a37b      	add	r3, pc, #492	; (adr r3, 8011f40 <__ieee754_pow+0x710>)
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	f7ee fa98 	bl	800028c <__adddf3>
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	462b      	mov	r3, r5
 8011d60:	f7ee fc4a 	bl	80005f8 <__aeabi_dmul>
 8011d64:	a378      	add	r3, pc, #480	; (adr r3, 8011f48 <__ieee754_pow+0x718>)
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	f7ee fa8f 	bl	800028c <__adddf3>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	462b      	mov	r3, r5
 8011d72:	f7ee fc41 	bl	80005f8 <__aeabi_dmul>
 8011d76:	a376      	add	r3, pc, #472	; (adr r3, 8011f50 <__ieee754_pow+0x720>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee fa86 	bl	800028c <__adddf3>
 8011d80:	4622      	mov	r2, r4
 8011d82:	462b      	mov	r3, r5
 8011d84:	f7ee fc38 	bl	80005f8 <__aeabi_dmul>
 8011d88:	a373      	add	r3, pc, #460	; (adr r3, 8011f58 <__ieee754_pow+0x728>)
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	f7ee fa7d 	bl	800028c <__adddf3>
 8011d92:	4622      	mov	r2, r4
 8011d94:	462b      	mov	r3, r5
 8011d96:	f7ee fc2f 	bl	80005f8 <__aeabi_dmul>
 8011d9a:	a371      	add	r3, pc, #452	; (adr r3, 8011f60 <__ieee754_pow+0x730>)
 8011d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da0:	f7ee fa74 	bl	800028c <__adddf3>
 8011da4:	4622      	mov	r2, r4
 8011da6:	4606      	mov	r6, r0
 8011da8:	460f      	mov	r7, r1
 8011daa:	462b      	mov	r3, r5
 8011dac:	4620      	mov	r0, r4
 8011dae:	4629      	mov	r1, r5
 8011db0:	f7ee fc22 	bl	80005f8 <__aeabi_dmul>
 8011db4:	4602      	mov	r2, r0
 8011db6:	460b      	mov	r3, r1
 8011db8:	4630      	mov	r0, r6
 8011dba:	4639      	mov	r1, r7
 8011dbc:	f7ee fc1c 	bl	80005f8 <__aeabi_dmul>
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	460d      	mov	r5, r1
 8011dc6:	464b      	mov	r3, r9
 8011dc8:	ec51 0b18 	vmov	r0, r1, d8
 8011dcc:	f7ee fa5e 	bl	800028c <__adddf3>
 8011dd0:	ec53 2b19 	vmov	r2, r3, d9
 8011dd4:	f7ee fc10 	bl	80005f8 <__aeabi_dmul>
 8011dd8:	4622      	mov	r2, r4
 8011dda:	462b      	mov	r3, r5
 8011ddc:	f7ee fa56 	bl	800028c <__adddf3>
 8011de0:	4642      	mov	r2, r8
 8011de2:	4682      	mov	sl, r0
 8011de4:	468b      	mov	fp, r1
 8011de6:	464b      	mov	r3, r9
 8011de8:	4640      	mov	r0, r8
 8011dea:	4649      	mov	r1, r9
 8011dec:	f7ee fc04 	bl	80005f8 <__aeabi_dmul>
 8011df0:	4b6b      	ldr	r3, [pc, #428]	; (8011fa0 <__ieee754_pow+0x770>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	f7ee fa48 	bl	800028c <__adddf3>
 8011dfc:	4652      	mov	r2, sl
 8011dfe:	465b      	mov	r3, fp
 8011e00:	f7ee fa44 	bl	800028c <__adddf3>
 8011e04:	2000      	movs	r0, #0
 8011e06:	4604      	mov	r4, r0
 8011e08:	460d      	mov	r5, r1
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	4640      	mov	r0, r8
 8011e10:	4649      	mov	r1, r9
 8011e12:	f7ee fbf1 	bl	80005f8 <__aeabi_dmul>
 8011e16:	4b62      	ldr	r3, [pc, #392]	; (8011fa0 <__ieee754_pow+0x770>)
 8011e18:	4680      	mov	r8, r0
 8011e1a:	4689      	mov	r9, r1
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	4620      	mov	r0, r4
 8011e20:	4629      	mov	r1, r5
 8011e22:	f7ee fa31 	bl	8000288 <__aeabi_dsub>
 8011e26:	4632      	mov	r2, r6
 8011e28:	463b      	mov	r3, r7
 8011e2a:	f7ee fa2d 	bl	8000288 <__aeabi_dsub>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	460b      	mov	r3, r1
 8011e32:	4650      	mov	r0, sl
 8011e34:	4659      	mov	r1, fp
 8011e36:	f7ee fa27 	bl	8000288 <__aeabi_dsub>
 8011e3a:	ec53 2b18 	vmov	r2, r3, d8
 8011e3e:	f7ee fbdb 	bl	80005f8 <__aeabi_dmul>
 8011e42:	4622      	mov	r2, r4
 8011e44:	4606      	mov	r6, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	462b      	mov	r3, r5
 8011e4a:	ec51 0b19 	vmov	r0, r1, d9
 8011e4e:	f7ee fbd3 	bl	80005f8 <__aeabi_dmul>
 8011e52:	4602      	mov	r2, r0
 8011e54:	460b      	mov	r3, r1
 8011e56:	4630      	mov	r0, r6
 8011e58:	4639      	mov	r1, r7
 8011e5a:	f7ee fa17 	bl	800028c <__adddf3>
 8011e5e:	4606      	mov	r6, r0
 8011e60:	460f      	mov	r7, r1
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	4640      	mov	r0, r8
 8011e68:	4649      	mov	r1, r9
 8011e6a:	f7ee fa0f 	bl	800028c <__adddf3>
 8011e6e:	a33e      	add	r3, pc, #248	; (adr r3, 8011f68 <__ieee754_pow+0x738>)
 8011e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e74:	2000      	movs	r0, #0
 8011e76:	4604      	mov	r4, r0
 8011e78:	460d      	mov	r5, r1
 8011e7a:	f7ee fbbd 	bl	80005f8 <__aeabi_dmul>
 8011e7e:	4642      	mov	r2, r8
 8011e80:	ec41 0b18 	vmov	d8, r0, r1
 8011e84:	464b      	mov	r3, r9
 8011e86:	4620      	mov	r0, r4
 8011e88:	4629      	mov	r1, r5
 8011e8a:	f7ee f9fd 	bl	8000288 <__aeabi_dsub>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	4630      	mov	r0, r6
 8011e94:	4639      	mov	r1, r7
 8011e96:	f7ee f9f7 	bl	8000288 <__aeabi_dsub>
 8011e9a:	a335      	add	r3, pc, #212	; (adr r3, 8011f70 <__ieee754_pow+0x740>)
 8011e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea0:	f7ee fbaa 	bl	80005f8 <__aeabi_dmul>
 8011ea4:	a334      	add	r3, pc, #208	; (adr r3, 8011f78 <__ieee754_pow+0x748>)
 8011ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eaa:	4606      	mov	r6, r0
 8011eac:	460f      	mov	r7, r1
 8011eae:	4620      	mov	r0, r4
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7ee fba1 	bl	80005f8 <__aeabi_dmul>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	460b      	mov	r3, r1
 8011eba:	4630      	mov	r0, r6
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	f7ee f9e5 	bl	800028c <__adddf3>
 8011ec2:	9a07      	ldr	r2, [sp, #28]
 8011ec4:	4b37      	ldr	r3, [pc, #220]	; (8011fa4 <__ieee754_pow+0x774>)
 8011ec6:	4413      	add	r3, r2
 8011ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ecc:	f7ee f9de 	bl	800028c <__adddf3>
 8011ed0:	4682      	mov	sl, r0
 8011ed2:	9805      	ldr	r0, [sp, #20]
 8011ed4:	468b      	mov	fp, r1
 8011ed6:	f7ee fb25 	bl	8000524 <__aeabi_i2d>
 8011eda:	9a07      	ldr	r2, [sp, #28]
 8011edc:	4b32      	ldr	r3, [pc, #200]	; (8011fa8 <__ieee754_pow+0x778>)
 8011ede:	4413      	add	r3, r2
 8011ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	4652      	mov	r2, sl
 8011eea:	465b      	mov	r3, fp
 8011eec:	ec51 0b18 	vmov	r0, r1, d8
 8011ef0:	f7ee f9cc 	bl	800028c <__adddf3>
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	464b      	mov	r3, r9
 8011ef8:	f7ee f9c8 	bl	800028c <__adddf3>
 8011efc:	4632      	mov	r2, r6
 8011efe:	463b      	mov	r3, r7
 8011f00:	f7ee f9c4 	bl	800028c <__adddf3>
 8011f04:	2000      	movs	r0, #0
 8011f06:	4632      	mov	r2, r6
 8011f08:	463b      	mov	r3, r7
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	f7ee f9bb 	bl	8000288 <__aeabi_dsub>
 8011f12:	4642      	mov	r2, r8
 8011f14:	464b      	mov	r3, r9
 8011f16:	f7ee f9b7 	bl	8000288 <__aeabi_dsub>
 8011f1a:	ec53 2b18 	vmov	r2, r3, d8
 8011f1e:	f7ee f9b3 	bl	8000288 <__aeabi_dsub>
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	4650      	mov	r0, sl
 8011f28:	4659      	mov	r1, fp
 8011f2a:	e610      	b.n	8011b4e <__ieee754_pow+0x31e>
 8011f2c:	2401      	movs	r4, #1
 8011f2e:	e6a1      	b.n	8011c74 <__ieee754_pow+0x444>
 8011f30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011f80 <__ieee754_pow+0x750>
 8011f34:	e617      	b.n	8011b66 <__ieee754_pow+0x336>
 8011f36:	bf00      	nop
 8011f38:	4a454eef 	.word	0x4a454eef
 8011f3c:	3fca7e28 	.word	0x3fca7e28
 8011f40:	93c9db65 	.word	0x93c9db65
 8011f44:	3fcd864a 	.word	0x3fcd864a
 8011f48:	a91d4101 	.word	0xa91d4101
 8011f4c:	3fd17460 	.word	0x3fd17460
 8011f50:	518f264d 	.word	0x518f264d
 8011f54:	3fd55555 	.word	0x3fd55555
 8011f58:	db6fabff 	.word	0xdb6fabff
 8011f5c:	3fdb6db6 	.word	0x3fdb6db6
 8011f60:	33333303 	.word	0x33333303
 8011f64:	3fe33333 	.word	0x3fe33333
 8011f68:	e0000000 	.word	0xe0000000
 8011f6c:	3feec709 	.word	0x3feec709
 8011f70:	dc3a03fd 	.word	0xdc3a03fd
 8011f74:	3feec709 	.word	0x3feec709
 8011f78:	145b01f5 	.word	0x145b01f5
 8011f7c:	be3e2fe0 	.word	0xbe3e2fe0
 8011f80:	00000000 	.word	0x00000000
 8011f84:	3ff00000 	.word	0x3ff00000
 8011f88:	7ff00000 	.word	0x7ff00000
 8011f8c:	43400000 	.word	0x43400000
 8011f90:	0003988e 	.word	0x0003988e
 8011f94:	000bb679 	.word	0x000bb679
 8011f98:	08013868 	.word	0x08013868
 8011f9c:	3ff00000 	.word	0x3ff00000
 8011fa0:	40080000 	.word	0x40080000
 8011fa4:	08013888 	.word	0x08013888
 8011fa8:	08013878 	.word	0x08013878
 8011fac:	a3b3      	add	r3, pc, #716	; (adr r3, 801227c <__ieee754_pow+0xa4c>)
 8011fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	f7ee f969 	bl	800028c <__adddf3>
 8011fba:	4622      	mov	r2, r4
 8011fbc:	ec41 0b1a 	vmov	d10, r0, r1
 8011fc0:	462b      	mov	r3, r5
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	f7ee f95f 	bl	8000288 <__aeabi_dsub>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	460b      	mov	r3, r1
 8011fce:	ec51 0b1a 	vmov	r0, r1, d10
 8011fd2:	f7ee fda1 	bl	8000b18 <__aeabi_dcmpgt>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	f47f ae04 	bne.w	8011be4 <__ieee754_pow+0x3b4>
 8011fdc:	4aa2      	ldr	r2, [pc, #648]	; (8012268 <__ieee754_pow+0xa38>)
 8011fde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	f340 8107 	ble.w	80121f6 <__ieee754_pow+0x9c6>
 8011fe8:	151b      	asrs	r3, r3, #20
 8011fea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011fee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011ff2:	fa4a fa03 	asr.w	sl, sl, r3
 8011ff6:	44da      	add	sl, fp
 8011ff8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011ffc:	489b      	ldr	r0, [pc, #620]	; (801226c <__ieee754_pow+0xa3c>)
 8011ffe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012002:	4108      	asrs	r0, r1
 8012004:	ea00 030a 	and.w	r3, r0, sl
 8012008:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801200c:	f1c1 0114 	rsb	r1, r1, #20
 8012010:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012014:	fa4a fa01 	asr.w	sl, sl, r1
 8012018:	f1bb 0f00 	cmp.w	fp, #0
 801201c:	f04f 0200 	mov.w	r2, #0
 8012020:	4620      	mov	r0, r4
 8012022:	4629      	mov	r1, r5
 8012024:	bfb8      	it	lt
 8012026:	f1ca 0a00 	rsblt	sl, sl, #0
 801202a:	f7ee f92d 	bl	8000288 <__aeabi_dsub>
 801202e:	ec41 0b19 	vmov	d9, r0, r1
 8012032:	4642      	mov	r2, r8
 8012034:	464b      	mov	r3, r9
 8012036:	ec51 0b19 	vmov	r0, r1, d9
 801203a:	f7ee f927 	bl	800028c <__adddf3>
 801203e:	a37a      	add	r3, pc, #488	; (adr r3, 8012228 <__ieee754_pow+0x9f8>)
 8012040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012044:	2000      	movs	r0, #0
 8012046:	4604      	mov	r4, r0
 8012048:	460d      	mov	r5, r1
 801204a:	f7ee fad5 	bl	80005f8 <__aeabi_dmul>
 801204e:	ec53 2b19 	vmov	r2, r3, d9
 8012052:	4606      	mov	r6, r0
 8012054:	460f      	mov	r7, r1
 8012056:	4620      	mov	r0, r4
 8012058:	4629      	mov	r1, r5
 801205a:	f7ee f915 	bl	8000288 <__aeabi_dsub>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4640      	mov	r0, r8
 8012064:	4649      	mov	r1, r9
 8012066:	f7ee f90f 	bl	8000288 <__aeabi_dsub>
 801206a:	a371      	add	r3, pc, #452	; (adr r3, 8012230 <__ieee754_pow+0xa00>)
 801206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012070:	f7ee fac2 	bl	80005f8 <__aeabi_dmul>
 8012074:	a370      	add	r3, pc, #448	; (adr r3, 8012238 <__ieee754_pow+0xa08>)
 8012076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207a:	4680      	mov	r8, r0
 801207c:	4689      	mov	r9, r1
 801207e:	4620      	mov	r0, r4
 8012080:	4629      	mov	r1, r5
 8012082:	f7ee fab9 	bl	80005f8 <__aeabi_dmul>
 8012086:	4602      	mov	r2, r0
 8012088:	460b      	mov	r3, r1
 801208a:	4640      	mov	r0, r8
 801208c:	4649      	mov	r1, r9
 801208e:	f7ee f8fd 	bl	800028c <__adddf3>
 8012092:	4604      	mov	r4, r0
 8012094:	460d      	mov	r5, r1
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	4630      	mov	r0, r6
 801209c:	4639      	mov	r1, r7
 801209e:	f7ee f8f5 	bl	800028c <__adddf3>
 80120a2:	4632      	mov	r2, r6
 80120a4:	463b      	mov	r3, r7
 80120a6:	4680      	mov	r8, r0
 80120a8:	4689      	mov	r9, r1
 80120aa:	f7ee f8ed 	bl	8000288 <__aeabi_dsub>
 80120ae:	4602      	mov	r2, r0
 80120b0:	460b      	mov	r3, r1
 80120b2:	4620      	mov	r0, r4
 80120b4:	4629      	mov	r1, r5
 80120b6:	f7ee f8e7 	bl	8000288 <__aeabi_dsub>
 80120ba:	4642      	mov	r2, r8
 80120bc:	4606      	mov	r6, r0
 80120be:	460f      	mov	r7, r1
 80120c0:	464b      	mov	r3, r9
 80120c2:	4640      	mov	r0, r8
 80120c4:	4649      	mov	r1, r9
 80120c6:	f7ee fa97 	bl	80005f8 <__aeabi_dmul>
 80120ca:	a35d      	add	r3, pc, #372	; (adr r3, 8012240 <__ieee754_pow+0xa10>)
 80120cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d0:	4604      	mov	r4, r0
 80120d2:	460d      	mov	r5, r1
 80120d4:	f7ee fa90 	bl	80005f8 <__aeabi_dmul>
 80120d8:	a35b      	add	r3, pc, #364	; (adr r3, 8012248 <__ieee754_pow+0xa18>)
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	f7ee f8d3 	bl	8000288 <__aeabi_dsub>
 80120e2:	4622      	mov	r2, r4
 80120e4:	462b      	mov	r3, r5
 80120e6:	f7ee fa87 	bl	80005f8 <__aeabi_dmul>
 80120ea:	a359      	add	r3, pc, #356	; (adr r3, 8012250 <__ieee754_pow+0xa20>)
 80120ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f0:	f7ee f8cc 	bl	800028c <__adddf3>
 80120f4:	4622      	mov	r2, r4
 80120f6:	462b      	mov	r3, r5
 80120f8:	f7ee fa7e 	bl	80005f8 <__aeabi_dmul>
 80120fc:	a356      	add	r3, pc, #344	; (adr r3, 8012258 <__ieee754_pow+0xa28>)
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	f7ee f8c1 	bl	8000288 <__aeabi_dsub>
 8012106:	4622      	mov	r2, r4
 8012108:	462b      	mov	r3, r5
 801210a:	f7ee fa75 	bl	80005f8 <__aeabi_dmul>
 801210e:	a354      	add	r3, pc, #336	; (adr r3, 8012260 <__ieee754_pow+0xa30>)
 8012110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012114:	f7ee f8ba 	bl	800028c <__adddf3>
 8012118:	4622      	mov	r2, r4
 801211a:	462b      	mov	r3, r5
 801211c:	f7ee fa6c 	bl	80005f8 <__aeabi_dmul>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	4640      	mov	r0, r8
 8012126:	4649      	mov	r1, r9
 8012128:	f7ee f8ae 	bl	8000288 <__aeabi_dsub>
 801212c:	4604      	mov	r4, r0
 801212e:	460d      	mov	r5, r1
 8012130:	4602      	mov	r2, r0
 8012132:	460b      	mov	r3, r1
 8012134:	4640      	mov	r0, r8
 8012136:	4649      	mov	r1, r9
 8012138:	f7ee fa5e 	bl	80005f8 <__aeabi_dmul>
 801213c:	2200      	movs	r2, #0
 801213e:	ec41 0b19 	vmov	d9, r0, r1
 8012142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	f7ee f89d 	bl	8000288 <__aeabi_dsub>
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	ec51 0b19 	vmov	r0, r1, d9
 8012156:	f7ee fb79 	bl	800084c <__aeabi_ddiv>
 801215a:	4632      	mov	r2, r6
 801215c:	4604      	mov	r4, r0
 801215e:	460d      	mov	r5, r1
 8012160:	463b      	mov	r3, r7
 8012162:	4640      	mov	r0, r8
 8012164:	4649      	mov	r1, r9
 8012166:	f7ee fa47 	bl	80005f8 <__aeabi_dmul>
 801216a:	4632      	mov	r2, r6
 801216c:	463b      	mov	r3, r7
 801216e:	f7ee f88d 	bl	800028c <__adddf3>
 8012172:	4602      	mov	r2, r0
 8012174:	460b      	mov	r3, r1
 8012176:	4620      	mov	r0, r4
 8012178:	4629      	mov	r1, r5
 801217a:	f7ee f885 	bl	8000288 <__aeabi_dsub>
 801217e:	4642      	mov	r2, r8
 8012180:	464b      	mov	r3, r9
 8012182:	f7ee f881 	bl	8000288 <__aeabi_dsub>
 8012186:	460b      	mov	r3, r1
 8012188:	4602      	mov	r2, r0
 801218a:	4939      	ldr	r1, [pc, #228]	; (8012270 <__ieee754_pow+0xa40>)
 801218c:	2000      	movs	r0, #0
 801218e:	f7ee f87b 	bl	8000288 <__aeabi_dsub>
 8012192:	ec41 0b10 	vmov	d0, r0, r1
 8012196:	ee10 3a90 	vmov	r3, s1
 801219a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801219e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121a2:	da2b      	bge.n	80121fc <__ieee754_pow+0x9cc>
 80121a4:	4650      	mov	r0, sl
 80121a6:	f000 f877 	bl	8012298 <scalbn>
 80121aa:	ec51 0b10 	vmov	r0, r1, d0
 80121ae:	ec53 2b18 	vmov	r2, r3, d8
 80121b2:	f7ff bbee 	b.w	8011992 <__ieee754_pow+0x162>
 80121b6:	4b2f      	ldr	r3, [pc, #188]	; (8012274 <__ieee754_pow+0xa44>)
 80121b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80121bc:	429e      	cmp	r6, r3
 80121be:	f77f af0d 	ble.w	8011fdc <__ieee754_pow+0x7ac>
 80121c2:	4b2d      	ldr	r3, [pc, #180]	; (8012278 <__ieee754_pow+0xa48>)
 80121c4:	440b      	add	r3, r1
 80121c6:	4303      	orrs	r3, r0
 80121c8:	d009      	beq.n	80121de <__ieee754_pow+0x9ae>
 80121ca:	ec51 0b18 	vmov	r0, r1, d8
 80121ce:	2200      	movs	r2, #0
 80121d0:	2300      	movs	r3, #0
 80121d2:	f7ee fc83 	bl	8000adc <__aeabi_dcmplt>
 80121d6:	3800      	subs	r0, #0
 80121d8:	bf18      	it	ne
 80121da:	2001      	movne	r0, #1
 80121dc:	e448      	b.n	8011a70 <__ieee754_pow+0x240>
 80121de:	4622      	mov	r2, r4
 80121e0:	462b      	mov	r3, r5
 80121e2:	f7ee f851 	bl	8000288 <__aeabi_dsub>
 80121e6:	4642      	mov	r2, r8
 80121e8:	464b      	mov	r3, r9
 80121ea:	f7ee fc8b 	bl	8000b04 <__aeabi_dcmpge>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	f43f aef4 	beq.w	8011fdc <__ieee754_pow+0x7ac>
 80121f4:	e7e9      	b.n	80121ca <__ieee754_pow+0x99a>
 80121f6:	f04f 0a00 	mov.w	sl, #0
 80121fa:	e71a      	b.n	8012032 <__ieee754_pow+0x802>
 80121fc:	ec51 0b10 	vmov	r0, r1, d0
 8012200:	4619      	mov	r1, r3
 8012202:	e7d4      	b.n	80121ae <__ieee754_pow+0x97e>
 8012204:	491a      	ldr	r1, [pc, #104]	; (8012270 <__ieee754_pow+0xa40>)
 8012206:	2000      	movs	r0, #0
 8012208:	f7ff bb31 	b.w	801186e <__ieee754_pow+0x3e>
 801220c:	2000      	movs	r0, #0
 801220e:	2100      	movs	r1, #0
 8012210:	f7ff bb2d 	b.w	801186e <__ieee754_pow+0x3e>
 8012214:	4630      	mov	r0, r6
 8012216:	4639      	mov	r1, r7
 8012218:	f7ff bb29 	b.w	801186e <__ieee754_pow+0x3e>
 801221c:	9204      	str	r2, [sp, #16]
 801221e:	f7ff bb7b 	b.w	8011918 <__ieee754_pow+0xe8>
 8012222:	2300      	movs	r3, #0
 8012224:	f7ff bb65 	b.w	80118f2 <__ieee754_pow+0xc2>
 8012228:	00000000 	.word	0x00000000
 801222c:	3fe62e43 	.word	0x3fe62e43
 8012230:	fefa39ef 	.word	0xfefa39ef
 8012234:	3fe62e42 	.word	0x3fe62e42
 8012238:	0ca86c39 	.word	0x0ca86c39
 801223c:	be205c61 	.word	0xbe205c61
 8012240:	72bea4d0 	.word	0x72bea4d0
 8012244:	3e663769 	.word	0x3e663769
 8012248:	c5d26bf1 	.word	0xc5d26bf1
 801224c:	3ebbbd41 	.word	0x3ebbbd41
 8012250:	af25de2c 	.word	0xaf25de2c
 8012254:	3f11566a 	.word	0x3f11566a
 8012258:	16bebd93 	.word	0x16bebd93
 801225c:	3f66c16c 	.word	0x3f66c16c
 8012260:	5555553e 	.word	0x5555553e
 8012264:	3fc55555 	.word	0x3fc55555
 8012268:	3fe00000 	.word	0x3fe00000
 801226c:	fff00000 	.word	0xfff00000
 8012270:	3ff00000 	.word	0x3ff00000
 8012274:	4090cbff 	.word	0x4090cbff
 8012278:	3f6f3400 	.word	0x3f6f3400
 801227c:	652b82fe 	.word	0x652b82fe
 8012280:	3c971547 	.word	0x3c971547

08012284 <fabs>:
 8012284:	ec51 0b10 	vmov	r0, r1, d0
 8012288:	ee10 2a10 	vmov	r2, s0
 801228c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012290:	ec43 2b10 	vmov	d0, r2, r3
 8012294:	4770      	bx	lr
	...

08012298 <scalbn>:
 8012298:	b570      	push	{r4, r5, r6, lr}
 801229a:	ec55 4b10 	vmov	r4, r5, d0
 801229e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80122a2:	4606      	mov	r6, r0
 80122a4:	462b      	mov	r3, r5
 80122a6:	b999      	cbnz	r1, 80122d0 <scalbn+0x38>
 80122a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80122ac:	4323      	orrs	r3, r4
 80122ae:	d03f      	beq.n	8012330 <scalbn+0x98>
 80122b0:	4b35      	ldr	r3, [pc, #212]	; (8012388 <scalbn+0xf0>)
 80122b2:	4629      	mov	r1, r5
 80122b4:	ee10 0a10 	vmov	r0, s0
 80122b8:	2200      	movs	r2, #0
 80122ba:	f7ee f99d 	bl	80005f8 <__aeabi_dmul>
 80122be:	4b33      	ldr	r3, [pc, #204]	; (801238c <scalbn+0xf4>)
 80122c0:	429e      	cmp	r6, r3
 80122c2:	4604      	mov	r4, r0
 80122c4:	460d      	mov	r5, r1
 80122c6:	da10      	bge.n	80122ea <scalbn+0x52>
 80122c8:	a327      	add	r3, pc, #156	; (adr r3, 8012368 <scalbn+0xd0>)
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	e01f      	b.n	8012310 <scalbn+0x78>
 80122d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80122d4:	4291      	cmp	r1, r2
 80122d6:	d10c      	bne.n	80122f2 <scalbn+0x5a>
 80122d8:	ee10 2a10 	vmov	r2, s0
 80122dc:	4620      	mov	r0, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ed ffd4 	bl	800028c <__adddf3>
 80122e4:	4604      	mov	r4, r0
 80122e6:	460d      	mov	r5, r1
 80122e8:	e022      	b.n	8012330 <scalbn+0x98>
 80122ea:	460b      	mov	r3, r1
 80122ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80122f0:	3936      	subs	r1, #54	; 0x36
 80122f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80122f6:	4296      	cmp	r6, r2
 80122f8:	dd0d      	ble.n	8012316 <scalbn+0x7e>
 80122fa:	2d00      	cmp	r5, #0
 80122fc:	a11c      	add	r1, pc, #112	; (adr r1, 8012370 <scalbn+0xd8>)
 80122fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012302:	da02      	bge.n	801230a <scalbn+0x72>
 8012304:	a11c      	add	r1, pc, #112	; (adr r1, 8012378 <scalbn+0xe0>)
 8012306:	e9d1 0100 	ldrd	r0, r1, [r1]
 801230a:	a319      	add	r3, pc, #100	; (adr r3, 8012370 <scalbn+0xd8>)
 801230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012310:	f7ee f972 	bl	80005f8 <__aeabi_dmul>
 8012314:	e7e6      	b.n	80122e4 <scalbn+0x4c>
 8012316:	1872      	adds	r2, r6, r1
 8012318:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801231c:	428a      	cmp	r2, r1
 801231e:	dcec      	bgt.n	80122fa <scalbn+0x62>
 8012320:	2a00      	cmp	r2, #0
 8012322:	dd08      	ble.n	8012336 <scalbn+0x9e>
 8012324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801232c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012330:	ec45 4b10 	vmov	d0, r4, r5
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801233a:	da08      	bge.n	801234e <scalbn+0xb6>
 801233c:	2d00      	cmp	r5, #0
 801233e:	a10a      	add	r1, pc, #40	; (adr r1, 8012368 <scalbn+0xd0>)
 8012340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012344:	dac0      	bge.n	80122c8 <scalbn+0x30>
 8012346:	a10e      	add	r1, pc, #56	; (adr r1, 8012380 <scalbn+0xe8>)
 8012348:	e9d1 0100 	ldrd	r0, r1, [r1]
 801234c:	e7bc      	b.n	80122c8 <scalbn+0x30>
 801234e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012352:	3236      	adds	r2, #54	; 0x36
 8012354:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012358:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801235c:	4620      	mov	r0, r4
 801235e:	4b0c      	ldr	r3, [pc, #48]	; (8012390 <scalbn+0xf8>)
 8012360:	2200      	movs	r2, #0
 8012362:	e7d5      	b.n	8012310 <scalbn+0x78>
 8012364:	f3af 8000 	nop.w
 8012368:	c2f8f359 	.word	0xc2f8f359
 801236c:	01a56e1f 	.word	0x01a56e1f
 8012370:	8800759c 	.word	0x8800759c
 8012374:	7e37e43c 	.word	0x7e37e43c
 8012378:	8800759c 	.word	0x8800759c
 801237c:	fe37e43c 	.word	0xfe37e43c
 8012380:	c2f8f359 	.word	0xc2f8f359
 8012384:	81a56e1f 	.word	0x81a56e1f
 8012388:	43500000 	.word	0x43500000
 801238c:	ffff3cb0 	.word	0xffff3cb0
 8012390:	3c900000 	.word	0x3c900000

08012394 <with_errno>:
 8012394:	b570      	push	{r4, r5, r6, lr}
 8012396:	4604      	mov	r4, r0
 8012398:	460d      	mov	r5, r1
 801239a:	4616      	mov	r6, r2
 801239c:	f7fc ffd0 	bl	800f340 <__errno>
 80123a0:	4629      	mov	r1, r5
 80123a2:	6006      	str	r6, [r0, #0]
 80123a4:	4620      	mov	r0, r4
 80123a6:	bd70      	pop	{r4, r5, r6, pc}

080123a8 <xflow>:
 80123a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123aa:	4614      	mov	r4, r2
 80123ac:	461d      	mov	r5, r3
 80123ae:	b108      	cbz	r0, 80123b4 <xflow+0xc>
 80123b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80123b4:	e9cd 2300 	strd	r2, r3, [sp]
 80123b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ee f91a 	bl	80005f8 <__aeabi_dmul>
 80123c4:	2222      	movs	r2, #34	; 0x22
 80123c6:	b003      	add	sp, #12
 80123c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123cc:	f7ff bfe2 	b.w	8012394 <with_errno>

080123d0 <__math_uflow>:
 80123d0:	b508      	push	{r3, lr}
 80123d2:	2200      	movs	r2, #0
 80123d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80123d8:	f7ff ffe6 	bl	80123a8 <xflow>
 80123dc:	ec41 0b10 	vmov	d0, r0, r1
 80123e0:	bd08      	pop	{r3, pc}

080123e2 <__math_oflow>:
 80123e2:	b508      	push	{r3, lr}
 80123e4:	2200      	movs	r2, #0
 80123e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80123ea:	f7ff ffdd 	bl	80123a8 <xflow>
 80123ee:	ec41 0b10 	vmov	d0, r0, r1
 80123f2:	bd08      	pop	{r3, pc}

080123f4 <__ieee754_sqrt>:
 80123f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f8:	ec55 4b10 	vmov	r4, r5, d0
 80123fc:	4e67      	ldr	r6, [pc, #412]	; (801259c <__ieee754_sqrt+0x1a8>)
 80123fe:	43ae      	bics	r6, r5
 8012400:	ee10 0a10 	vmov	r0, s0
 8012404:	ee10 2a10 	vmov	r2, s0
 8012408:	4629      	mov	r1, r5
 801240a:	462b      	mov	r3, r5
 801240c:	d10d      	bne.n	801242a <__ieee754_sqrt+0x36>
 801240e:	f7ee f8f3 	bl	80005f8 <__aeabi_dmul>
 8012412:	4602      	mov	r2, r0
 8012414:	460b      	mov	r3, r1
 8012416:	4620      	mov	r0, r4
 8012418:	4629      	mov	r1, r5
 801241a:	f7ed ff37 	bl	800028c <__adddf3>
 801241e:	4604      	mov	r4, r0
 8012420:	460d      	mov	r5, r1
 8012422:	ec45 4b10 	vmov	d0, r4, r5
 8012426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242a:	2d00      	cmp	r5, #0
 801242c:	dc0b      	bgt.n	8012446 <__ieee754_sqrt+0x52>
 801242e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012432:	4326      	orrs	r6, r4
 8012434:	d0f5      	beq.n	8012422 <__ieee754_sqrt+0x2e>
 8012436:	b135      	cbz	r5, 8012446 <__ieee754_sqrt+0x52>
 8012438:	f7ed ff26 	bl	8000288 <__aeabi_dsub>
 801243c:	4602      	mov	r2, r0
 801243e:	460b      	mov	r3, r1
 8012440:	f7ee fa04 	bl	800084c <__aeabi_ddiv>
 8012444:	e7eb      	b.n	801241e <__ieee754_sqrt+0x2a>
 8012446:	1509      	asrs	r1, r1, #20
 8012448:	f000 808d 	beq.w	8012566 <__ieee754_sqrt+0x172>
 801244c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012450:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012458:	07c9      	lsls	r1, r1, #31
 801245a:	bf5c      	itt	pl
 801245c:	005b      	lslpl	r3, r3, #1
 801245e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012462:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012466:	bf58      	it	pl
 8012468:	0052      	lslpl	r2, r2, #1
 801246a:	2500      	movs	r5, #0
 801246c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012470:	1076      	asrs	r6, r6, #1
 8012472:	0052      	lsls	r2, r2, #1
 8012474:	f04f 0e16 	mov.w	lr, #22
 8012478:	46ac      	mov	ip, r5
 801247a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801247e:	eb0c 0001 	add.w	r0, ip, r1
 8012482:	4298      	cmp	r0, r3
 8012484:	bfde      	ittt	le
 8012486:	1a1b      	suble	r3, r3, r0
 8012488:	eb00 0c01 	addle.w	ip, r0, r1
 801248c:	186d      	addle	r5, r5, r1
 801248e:	005b      	lsls	r3, r3, #1
 8012490:	f1be 0e01 	subs.w	lr, lr, #1
 8012494:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012498:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801249c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80124a0:	d1ed      	bne.n	801247e <__ieee754_sqrt+0x8a>
 80124a2:	4674      	mov	r4, lr
 80124a4:	2720      	movs	r7, #32
 80124a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80124aa:	4563      	cmp	r3, ip
 80124ac:	eb01 000e 	add.w	r0, r1, lr
 80124b0:	dc02      	bgt.n	80124b8 <__ieee754_sqrt+0xc4>
 80124b2:	d113      	bne.n	80124dc <__ieee754_sqrt+0xe8>
 80124b4:	4290      	cmp	r0, r2
 80124b6:	d811      	bhi.n	80124dc <__ieee754_sqrt+0xe8>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	eb00 0e01 	add.w	lr, r0, r1
 80124be:	da57      	bge.n	8012570 <__ieee754_sqrt+0x17c>
 80124c0:	f1be 0f00 	cmp.w	lr, #0
 80124c4:	db54      	blt.n	8012570 <__ieee754_sqrt+0x17c>
 80124c6:	f10c 0801 	add.w	r8, ip, #1
 80124ca:	eba3 030c 	sub.w	r3, r3, ip
 80124ce:	4290      	cmp	r0, r2
 80124d0:	bf88      	it	hi
 80124d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80124d6:	1a12      	subs	r2, r2, r0
 80124d8:	440c      	add	r4, r1
 80124da:	46c4      	mov	ip, r8
 80124dc:	005b      	lsls	r3, r3, #1
 80124de:	3f01      	subs	r7, #1
 80124e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80124e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80124e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80124ec:	d1dd      	bne.n	80124aa <__ieee754_sqrt+0xb6>
 80124ee:	4313      	orrs	r3, r2
 80124f0:	d01b      	beq.n	801252a <__ieee754_sqrt+0x136>
 80124f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80125a0 <__ieee754_sqrt+0x1ac>
 80124f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80125a4 <__ieee754_sqrt+0x1b0>
 80124fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80124fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8012502:	f7ed fec1 	bl	8000288 <__aeabi_dsub>
 8012506:	e9da 8900 	ldrd	r8, r9, [sl]
 801250a:	4602      	mov	r2, r0
 801250c:	460b      	mov	r3, r1
 801250e:	4640      	mov	r0, r8
 8012510:	4649      	mov	r1, r9
 8012512:	f7ee faed 	bl	8000af0 <__aeabi_dcmple>
 8012516:	b140      	cbz	r0, 801252a <__ieee754_sqrt+0x136>
 8012518:	f1b4 3fff 	cmp.w	r4, #4294967295
 801251c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012520:	e9db 2300 	ldrd	r2, r3, [fp]
 8012524:	d126      	bne.n	8012574 <__ieee754_sqrt+0x180>
 8012526:	3501      	adds	r5, #1
 8012528:	463c      	mov	r4, r7
 801252a:	106a      	asrs	r2, r5, #1
 801252c:	0863      	lsrs	r3, r4, #1
 801252e:	07e9      	lsls	r1, r5, #31
 8012530:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012534:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012538:	bf48      	it	mi
 801253a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801253e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012542:	461c      	mov	r4, r3
 8012544:	e76d      	b.n	8012422 <__ieee754_sqrt+0x2e>
 8012546:	0ad3      	lsrs	r3, r2, #11
 8012548:	3815      	subs	r0, #21
 801254a:	0552      	lsls	r2, r2, #21
 801254c:	2b00      	cmp	r3, #0
 801254e:	d0fa      	beq.n	8012546 <__ieee754_sqrt+0x152>
 8012550:	02dc      	lsls	r4, r3, #11
 8012552:	d50a      	bpl.n	801256a <__ieee754_sqrt+0x176>
 8012554:	f1c1 0420 	rsb	r4, r1, #32
 8012558:	fa22 f404 	lsr.w	r4, r2, r4
 801255c:	1e4d      	subs	r5, r1, #1
 801255e:	408a      	lsls	r2, r1
 8012560:	4323      	orrs	r3, r4
 8012562:	1b41      	subs	r1, r0, r5
 8012564:	e772      	b.n	801244c <__ieee754_sqrt+0x58>
 8012566:	4608      	mov	r0, r1
 8012568:	e7f0      	b.n	801254c <__ieee754_sqrt+0x158>
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	3101      	adds	r1, #1
 801256e:	e7ef      	b.n	8012550 <__ieee754_sqrt+0x15c>
 8012570:	46e0      	mov	r8, ip
 8012572:	e7aa      	b.n	80124ca <__ieee754_sqrt+0xd6>
 8012574:	f7ed fe8a 	bl	800028c <__adddf3>
 8012578:	e9da 8900 	ldrd	r8, r9, [sl]
 801257c:	4602      	mov	r2, r0
 801257e:	460b      	mov	r3, r1
 8012580:	4640      	mov	r0, r8
 8012582:	4649      	mov	r1, r9
 8012584:	f7ee faaa 	bl	8000adc <__aeabi_dcmplt>
 8012588:	b120      	cbz	r0, 8012594 <__ieee754_sqrt+0x1a0>
 801258a:	1ca0      	adds	r0, r4, #2
 801258c:	bf08      	it	eq
 801258e:	3501      	addeq	r5, #1
 8012590:	3402      	adds	r4, #2
 8012592:	e7ca      	b.n	801252a <__ieee754_sqrt+0x136>
 8012594:	3401      	adds	r4, #1
 8012596:	f024 0401 	bic.w	r4, r4, #1
 801259a:	e7c6      	b.n	801252a <__ieee754_sqrt+0x136>
 801259c:	7ff00000 	.word	0x7ff00000
 80125a0:	200001f0 	.word	0x200001f0
 80125a4:	200001f8 	.word	0x200001f8

080125a8 <_init>:
 80125a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125aa:	bf00      	nop
 80125ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ae:	bc08      	pop	{r3}
 80125b0:	469e      	mov	lr, r3
 80125b2:	4770      	bx	lr

080125b4 <_fini>:
 80125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b6:	bf00      	nop
 80125b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ba:	bc08      	pop	{r3}
 80125bc:	469e      	mov	lr, r3
 80125be:	4770      	bx	lr
